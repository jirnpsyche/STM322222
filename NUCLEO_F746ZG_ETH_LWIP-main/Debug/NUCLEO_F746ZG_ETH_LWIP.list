
NUCLEO_F746ZG_ETH_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017624  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037d8  080177f4  080177f4  000187f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afcc  0801afcc  0001c1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801afcc  0801afcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afd4  0801afd4  0001c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801afd4  0801afd4  0001bfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801afd8  0801afd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801afdc  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801b068  0001c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801b108  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c684  200001cc  0801b1a8  0001c1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000c850  0801b1a8  0001c850  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001c1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000368a8  00000000  00000000  0001c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008248  00000000  00000000  00052aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002718  00000000  00000000  0005acf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f0c  00000000  00000000  0005d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003818b  00000000  00000000  0005f314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003e6c1  00000000  00000000  0009749f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116b31  00000000  00000000  000d5b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ec691  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000aa74  00000000  00000000  001ec6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  001f7148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080177dc 	.word	0x080177dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	080177dc 	.word	0x080177dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
return 0;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <vApplicationGetIdleTaskMemory+0x2c>)
 800061c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4a06      	ldr	r2, [pc, #24]	@ (800063c <vApplicationGetIdleTaskMemory+0x30>)
 8000622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200001e8 	.word	0x200001e8
 800063c:	20000290 	.word	0x20000290

08000640 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000644:	f3bf 8f4f 	dsb	sy
}
 8000648:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800064a:	f3bf 8f6f 	isb	sy
}
 800064e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000650:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <SCB_EnableICache+0x48>)
 8000652:	2200      	movs	r2, #0
 8000654:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000658:	f3bf 8f4f 	dsb	sy
}
 800065c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
}
 8000662:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000664:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <SCB_EnableICache+0x48>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <SCB_EnableICache+0x48>)
 800066a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000670:	f3bf 8f4f 	dsb	sy
}
 8000674:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000676:	f3bf 8f6f 	isb	sy
}
 800067a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SCB_EnableDCache+0x84>)
 8000694:	2200      	movs	r2, #0
 8000696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800069a:	f3bf 8f4f 	dsb	sy
}
 800069e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <SCB_EnableDCache+0x84>)
 80006a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80006a6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	0b5b      	lsrs	r3, r3, #13
 80006ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006b0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	08db      	lsrs	r3, r3, #3
 80006b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006ba:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	015a      	lsls	r2, r3, #5
 80006c0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80006c4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006ca:	4911      	ldr	r1, [pc, #68]	@ (8000710 <SCB_EnableDCache+0x84>)
 80006cc:	4313      	orrs	r3, r2
 80006ce:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	60ba      	str	r2, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1ef      	bne.n	80006bc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	1e5a      	subs	r2, r3, #1
 80006e0:	60fa      	str	r2, [r7, #12]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1e5      	bne.n	80006b2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006e6:	f3bf 8f4f 	dsb	sy
}
 80006ea:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006ec:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <SCB_EnableDCache+0x84>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	4a07      	ldr	r2, [pc, #28]	@ (8000710 <SCB_EnableDCache+0x84>)
 80006f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006f6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006f8:	f3bf 8f4f 	dsb	sy
}
 80006fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006fe:	f3bf 8f6f 	isb	sy
}
 8000702:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800071a:	f7ff ff91 	bl	8000640 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800071e:	f7ff ffb5 	bl	800068c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f001 f8bc 	bl	800189e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f81f 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 f8f5 	bl	8000918 <MX_GPIO_Init>
  MX_I2C1_Init();
 800072e:	f000 f883 	bl	8000838 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000732:	f000 f8c1 	bl	80008b8 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <main+0x4c>)
 8000738:	1d3c      	adds	r4, r7, #4
 800073a:	461d      	mov	r5, r3
 800073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000740:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000744:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f005 ff14 	bl	800657a <osThreadCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a03      	ldr	r2, [pc, #12]	@ (8000764 <main+0x50>)
 8000756:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000758:	f005 fef8 	bl	800654c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <main+0x48>
 8000760:	08017800 	.word	0x08017800
 8000764:	2000056c 	.word	0x2000056c

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	@ 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	@ 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f016 f931 	bl	80169de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800078c:	f002 ff36 	bl	80035fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <SystemClock_Config+0xc8>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	4a26      	ldr	r2, [pc, #152]	@ (8000830 <SystemClock_Config+0xc8>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	@ 0x40
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <SystemClock_Config+0xc8>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <SystemClock_Config+0xcc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <SystemClock_Config+0xcc>)
 80007ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007d8:	23b4      	movs	r3, #180	@ 0xb4
 80007da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007e0:	2303      	movs	r3, #3
 80007e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 ff17 	bl	800361c <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007f4:	f000 fac2 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000804:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2105      	movs	r1, #5
 8000816:	4618      	mov	r0, r3
 8000818:	f003 f9a4 	bl	8003b64 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000822:	f000 faab 	bl	8000d7c <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	@ 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_I2C1_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <MX_I2C1_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <MX_I2C1_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000850:	2201      	movs	r2, #1
 8000852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_I2C1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000872:	480e      	ldr	r0, [pc, #56]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000874:	f002 fd8e 	bl	8003394 <HAL_I2C_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800087e:	f000 fa7d 	bl	8000d7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000886:	f002 fe21 	bl	80034cc <HAL_I2CEx_ConfigAnalogFilter>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000890:	f000 fa74 	bl	8000d7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000898:	f002 fe63 	bl	8003562 <HAL_I2CEx_ConfigDigitalFilter>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fa6b 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000490 	.word	0x20000490
 80008b0:	40005400 	.word	0x40005400
 80008b4:	c0000e12 	.word	0xc0000e12

080008b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008be:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <MX_USART3_UART_Init+0x5c>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c2:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_USART3_UART_Init+0x58>)
 80008fc:	f004 fa4e 	bl	8004d9c <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 fa39 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200004e4 	.word	0x200004e4
 8000914:	40004800 	.word	0x40004800

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	@ 0x30
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b56      	ldr	r3, [pc, #344]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a55      	ldr	r2, [pc, #340]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b53      	ldr	r3, [pc, #332]	@ (8000a88 <MX_GPIO_Init+0x170>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	4b50      	ldr	r3, [pc, #320]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a4f      	ldr	r2, [pc, #316]	@ (8000a88 <MX_GPIO_Init+0x170>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b4d      	ldr	r3, [pc, #308]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a49      	ldr	r2, [pc, #292]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b47      	ldr	r3, [pc, #284]	@ (8000a88 <MX_GPIO_Init+0x170>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b44      	ldr	r3, [pc, #272]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a43      	ldr	r2, [pc, #268]	@ (8000a88 <MX_GPIO_Init+0x170>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b41      	ldr	r3, [pc, #260]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a3d      	ldr	r2, [pc, #244]	@ (8000a88 <MX_GPIO_Init+0x170>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a88 <MX_GPIO_Init+0x170>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a6:	4b38      	ldr	r3, [pc, #224]	@ (8000a88 <MX_GPIO_Init+0x170>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a37      	ldr	r2, [pc, #220]	@ (8000a88 <MX_GPIO_Init+0x170>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b35      	ldr	r3, [pc, #212]	@ (8000a88 <MX_GPIO_Init+0x170>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80009c4:	4831      	ldr	r0, [pc, #196]	@ (8000a8c <MX_GPIO_Init+0x174>)
 80009c6:	f002 fccb 	bl	8003360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	@ 0x40
 80009ce:	4830      	ldr	r0, [pc, #192]	@ (8000a90 <MX_GPIO_Init+0x178>)
 80009d0:	f002 fcc6 	bl	8003360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	482a      	ldr	r0, [pc, #168]	@ (8000a94 <MX_GPIO_Init+0x17c>)
 80009ec:	f002 fb0c 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009f0:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4820      	ldr	r0, [pc, #128]	@ (8000a8c <MX_GPIO_Init+0x174>)
 8000a0a:	f002 fafd 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a0e:	2340      	movs	r3, #64	@ 0x40
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <MX_GPIO_Init+0x178>)
 8000a26:	f002 faef 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a2a:	2380      	movs	r3, #128	@ 0x80
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4814      	ldr	r0, [pc, #80]	@ (8000a90 <MX_GPIO_Init+0x178>)
 8000a3e:	f002 fae3 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4810      	ldr	r0, [pc, #64]	@ (8000a98 <MX_GPIO_Init+0x180>)
 8000a58:	f002 fad6 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a5c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a6e:	230a      	movs	r3, #10
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <MX_GPIO_Init+0x180>)
 8000a7a:	f002 fac5 	bl	8003008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7e:	bf00      	nop
 8000a80:	3730      	adds	r7, #48	@ 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40021800 	.word	0x40021800
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020000 	.word	0x40020000

08000a9c <putchar>:

/* USER CODE BEGIN 4 */
int putchar(int ch)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,1);
 8000aa4:	1d39      	adds	r1, r7, #4
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <putchar+0x20>)
 8000aac:	f004 f9c4 	bl	8004e38 <HAL_UART_Transmit>
    return ch;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200004e4 	.word	0x200004e4

08000ac0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8000ac6:	af02      	add	r7, sp, #8
 8000ac8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000acc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8000ad0:	6018      	str	r0, [r3, #0]
    /* init code for LWIP */
    MX_LWIP_Init();
 8000ad2:	f004 fe69 	bl	80057a8 <MX_LWIP_Init>
    err_t status;
    struct netconn *conn; // pointer to hold connection data

    char buffer[256];  // Create a buffer to store formatted strings

    while (!netif_is_up(netif_default)) {
 8000ad6:	e011      	b.n	8000afc <StartDefaultTask+0x3c>
        snprintf(buffer, sizeof(buffer), "Waiting for network...\r\n");
 8000ad8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000adc:	4a8e      	ldr	r2, [pc, #568]	@ (8000d18 <StartDefaultTask+0x258>)
 8000ade:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fb26 	bl	8001134 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000ae8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000aec:	4619      	mov	r1, r3
 8000aee:	488b      	ldr	r0, [pc, #556]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000af0:	f000 fb0c 	bl	800110c <printf>
        osDelay(500);
 8000af4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000af8:	f005 fd97 	bl	800662a <osDelay>
    while (!netif_is_up(netif_default)) {
 8000afc:	4b88      	ldr	r3, [pc, #544]	@ (8000d20 <StartDefaultTask+0x260>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0e5      	beq.n	8000ad8 <StartDefaultTask+0x18>
    }

    snprintf(buffer, sizeof(buffer), "Network is up!\r\n");
 8000b0c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b10:	4a84      	ldr	r2, [pc, #528]	@ (8000d24 <StartDefaultTask+0x264>)
 8000b12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fb0c 	bl	8001134 <snprintf>
    printf("%s", buffer);  // Output the formatted string
 8000b1c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b20:	4619      	mov	r1, r3
 8000b22:	487e      	ldr	r0, [pc, #504]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000b24:	f000 faf2 	bl	800110c <printf>

    conn = netconn_new(NETCONN_TCP);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2010      	movs	r0, #16
 8000b2e:	f008 fe5b 	bl	80097e8 <netconn_new_with_proto_and_callback>
 8000b32:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
    if (conn == NULL) {
 8000b36:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10e      	bne.n	8000b5c <StartDefaultTask+0x9c>
        snprintf(buffer, sizeof(buffer), "Failed to create connection.\r\n");
 8000b3e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b42:	4a79      	ldr	r2, [pc, #484]	@ (8000d28 <StartDefaultTask+0x268>)
 8000b44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 faf3 	bl	8001134 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000b4e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b52:	4619      	mov	r1, r3
 8000b54:	4871      	ldr	r0, [pc, #452]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000b56:	f000 fad9 	bl	800110c <printf>
        return;
 8000b5a:	e0d8      	b.n	8000d0e <StartDefaultTask+0x24e>
    }

    // Set server IP address (192.168.31.166)
    IP4_ADDR(&server_ip, 192, 168, 31, 166);
 8000b5c:	4b73      	ldr	r3, [pc, #460]	@ (8000d2c <StartDefaultTask+0x26c>)
 8000b5e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    // Connect to the TCP server on port 8000
    snprintf(buffer, sizeof(buffer), "Connecting to server...\r\n");
 8000b62:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b66:	4a72      	ldr	r2, [pc, #456]	@ (8000d30 <StartDefaultTask+0x270>)
 8000b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fae1 	bl	8001134 <snprintf>
    printf("%s", buffer);  // Output the formatted string
 8000b72:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b76:	4619      	mov	r1, r3
 8000b78:	4868      	ldr	r0, [pc, #416]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000b7a:	f000 fac7 	bl	800110c <printf>
    status = netconn_connect(conn, &server_ip, 8000);
 8000b7e:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8000b82:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b86:	4619      	mov	r1, r3
 8000b88:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000b8c:	f008 fee6 	bl	800995c <netconn_connect>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217

    if (status == ERR_OK) {
 8000b96:	f997 3217 	ldrsb.w	r3, [r7, #535]	@ 0x217
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f040 80a2 	bne.w	8000ce4 <StartDefaultTask+0x224>
        snprintf(buffer, sizeof(buffer), "Connected to server!\r\n");
 8000ba0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ba4:	4a63      	ldr	r2, [pc, #396]	@ (8000d34 <StartDefaultTask+0x274>)
 8000ba6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fac2 	bl	8001134 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000bb0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4859      	ldr	r0, [pc, #356]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000bb8:	f000 faa8 	bl	800110c <printf>

        for (int i = 0; i < 5; i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000bc2:	e074      	b.n	8000cae <StartDefaultTask+0x1ee>
            snprintf(buffer, sizeof(buffer), "Sending JSON data to server...\r\n");
 8000bc4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000bc8:	4a5b      	ldr	r2, [pc, #364]	@ (8000d38 <StartDefaultTask+0x278>)
 8000bca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fab0 	bl	8001134 <snprintf>
            printf("%s", buffer);  // Output the formatted string
 8000bd4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4850      	ldr	r0, [pc, #320]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000bdc:	f000 fa96 	bl	800110c <printf>

            // Create JSON-formatted string
            char json_buffer[256];
            int len = snprintf(json_buffer, sizeof(json_buffer),
 8000be0:	f107 000c 	add.w	r0, r7, #12
 8000be4:	4b55      	ldr	r3, [pc, #340]	@ (8000d3c <StartDefaultTask+0x27c>)
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2301      	movs	r3, #1
 8000bea:	4a55      	ldr	r2, [pc, #340]	@ (8000d40 <StartDefaultTask+0x280>)
 8000bec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bf0:	f000 faa0 	bl	8001134 <snprintf>
 8000bf4:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
                               "{ \"Node ID\": %d, \"Door Status\": %s }\r\n", 1, "true");

            if (len < 0 || len >= sizeof(json_buffer)) {
 8000bf8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db03      	blt.n	8000c08 <StartDefaultTask+0x148>
 8000c00:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000c04:	2bff      	cmp	r3, #255	@ 0xff
 8000c06:	d912      	bls.n	8000c2e <StartDefaultTask+0x16e>
                snprintf(buffer, sizeof(buffer), "Error: snprintf buffer overflow!\r\n");
 8000c08:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c0c:	4a4d      	ldr	r2, [pc, #308]	@ (8000d44 <StartDefaultTask+0x284>)
 8000c0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fa8e 	bl	8001134 <snprintf>
                printf("%s", buffer);  // Output the formatted string
 8000c18:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	483f      	ldr	r0, [pc, #252]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000c20:	f000 fa74 	bl	800110c <printf>
                netconn_delete(conn);
 8000c24:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000c28:	f008 fe7c 	bl	8009924 <netconn_delete>
                return;
 8000c2c:	e06f      	b.n	8000d0e <StartDefaultTask+0x24e>
            }

            // Send JSON data
            status = netconn_write(conn, json_buffer, strlen(json_buffer), NETCONN_NOCOPY);
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff faec 	bl	8000210 <strlen>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f107 010c 	add.w	r1, r7, #12
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000c48:	f008 fec0 	bl	80099cc <netconn_write_partly>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217

            if (status != ERR_OK) {
 8000c52:	f997 3217 	ldrsb.w	r3, [r7, #535]	@ 0x217
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d012      	beq.n	8000c80 <StartDefaultTask+0x1c0>
                snprintf(buffer, sizeof(buffer), "Failed to send data!\r\n");
 8000c5a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000d48 <StartDefaultTask+0x288>)
 8000c60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fa65 	bl	8001134 <snprintf>
                printf("%s", buffer);  // Output the formatted string
 8000c6a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c6e:	4619      	mov	r1, r3
 8000c70:	482a      	ldr	r0, [pc, #168]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000c72:	f000 fa4b 	bl	800110c <printf>
                netconn_delete(conn);
 8000c76:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000c7a:	f008 fe53 	bl	8009924 <netconn_delete>
                return;
 8000c7e:	e046      	b.n	8000d0e <StartDefaultTask+0x24e>
            } else {
                snprintf(buffer, sizeof(buffer), "Data sent successfully!\r\n");
 8000c80:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c84:	4a31      	ldr	r2, [pc, #196]	@ (8000d4c <StartDefaultTask+0x28c>)
 8000c86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fa52 	bl	8001134 <snprintf>
                printf("%s", buffer);  // Output the formatted string
 8000c90:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c94:	4619      	mov	r1, r3
 8000c96:	4821      	ldr	r0, [pc, #132]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000c98:	f000 fa38 	bl	800110c <printf>
            }

            osDelay(1000); // Wait for 1 second
 8000c9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca0:	f005 fcc3 	bl	800662a <osDelay>
        for (int i = 0; i < 5; i++) {
 8000ca4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000cae:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	dd86      	ble.n	8000bc4 <StartDefaultTask+0x104>
        }

        // Close and delete connection
        netconn_close(conn);
 8000cb6:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000cba:	f008 ff89 	bl	8009bd0 <netconn_close>
        netconn_delete(conn);
 8000cbe:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000cc2:	f008 fe2f 	bl	8009924 <netconn_delete>
        snprintf(buffer, sizeof(buffer), "Connection closed.\r\n");
 8000cc6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000cca:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <StartDefaultTask+0x290>)
 8000ccc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fa2f 	bl	8001134 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000cd6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480f      	ldr	r0, [pc, #60]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000cde:	f000 fa15 	bl	800110c <printf>
 8000ce2:	e012      	b.n	8000d0a <StartDefaultTask+0x24a>
    } else {
        snprintf(buffer, sizeof(buffer), "Could not connect to server.\r\n");
 8000ce4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d54 <StartDefaultTask+0x294>)
 8000cea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fa20 	bl	8001134 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000cf4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4808      	ldr	r0, [pc, #32]	@ (8000d1c <StartDefaultTask+0x25c>)
 8000cfc:	f000 fa06 	bl	800110c <printf>
        netconn_delete(conn);
 8000d00:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000d04:	f008 fe0e 	bl	8009924 <netconn_delete>
    }

    for(;;) {
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	e7fd      	b.n	8000d0a <StartDefaultTask+0x24a>
    }
}
 8000d0e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	0801781c 	.word	0x0801781c
 8000d1c:	08017838 	.word	0x08017838
 8000d20:	2000c59c 	.word	0x2000c59c
 8000d24:	0801783c 	.word	0x0801783c
 8000d28:	08017850 	.word	0x08017850
 8000d2c:	a61fa8c0 	.word	0xa61fa8c0
 8000d30:	08017870 	.word	0x08017870
 8000d34:	0801788c 	.word	0x0801788c
 8000d38:	080178a4 	.word	0x080178a4
 8000d3c:	080178f0 	.word	0x080178f0
 8000d40:	080178c8 	.word	0x080178c8
 8000d44:	080178f8 	.word	0x080178f8
 8000d48:	0801791c 	.word	0x0801791c
 8000d4c:	08017934 	.word	0x08017934
 8000d50:	08017950 	.word	0x08017950
 8000d54:	08017968 	.word	0x08017968

08000d58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6a:	f000 fda5 	bl	80018b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40001000 	.word	0x40001000

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <Error_Handler+0x8>

08000d88 <printchar>:
*/

#include <stdarg.h>

static void printchar(char **str, int c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);

	if (str) {
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00a      	beq.n	8000dae <printchar+0x26>
		**str = c;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
	}
	else (void)putchar(c);
}
 8000dac:	e002      	b.n	8000db4 <printchar+0x2c>
	else (void)putchar(c);
 8000dae:	6838      	ldr	r0, [r7, #0]
 8000db0:	f7ff fe74 	bl	8000a9c <putchar>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000dcc:	2400      	movs	r4, #0
 8000dce:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dd17      	ble.n	8000e08 <prints+0x4c>
		register int len = 0;
 8000dd8:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000dda:	68be      	ldr	r6, [r7, #8]
 8000ddc:	e001      	b.n	8000de2 <prints+0x26>
 8000dde:	3501      	adds	r5, #1
 8000de0:	3601      	adds	r6, #1
 8000de2:	7833      	ldrb	r3, [r6, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1fa      	bne.n	8000dde <prints+0x22>
		if (len >= width) width = 0;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	429d      	cmp	r5, r3
 8000dec:	db02      	blt.n	8000df4 <prints+0x38>
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e002      	b.n	8000dfa <prints+0x3e>
		else width -= len;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	1b5b      	subs	r3, r3, r5
 8000df8:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <prints+0x4c>
 8000e04:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d116      	bne.n	8000e40 <prints+0x84>
		for ( ; width > 0; --width) {
 8000e12:	e007      	b.n	8000e24 <prints+0x68>
			printchar (out, padchar);
 8000e14:	4641      	mov	r1, r8
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff ffb6 	bl	8000d88 <printchar>
			++pc;
 8000e1c:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dcf4      	bgt.n	8000e14 <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000e2a:	e009      	b.n	8000e40 <prints+0x84>
		printchar (out, *string);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f7ff ffa8 	bl	8000d88 <printchar>
		++pc;
 8000e38:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f1      	bne.n	8000e2c <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8000e48:	e007      	b.n	8000e5a <prints+0x9e>
		printchar (out, padchar);
 8000e4a:	4641      	mov	r1, r8
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f7ff ff9b 	bl	8000d88 <printchar>
		++pc;
 8000e52:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	dcf4      	bgt.n	8000e4a <prints+0x8e>
	}

	return pc;
 8000e60:	4623      	mov	r3, r4
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e6c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e70:	b089      	sub	sp, #36	@ 0x24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000e7c:	f04f 0900 	mov.w	r9, #0
 8000e80:	2600      	movs	r6, #0
	register unsigned int u = i;
 8000e82:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10c      	bne.n	8000ea4 <printi+0x38>
		print_buf[0] = '0';
 8000e8a:	2330      	movs	r3, #48	@ 0x30
 8000e8c:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000e8e:	2300      	movs	r3, #0
 8000e90:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8000e92:	f107 0114 	add.w	r1, r7, #20
 8000e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f7ff ff8e 	bl	8000dbc <prints>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	e04a      	b.n	8000f3a <printi+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <printi+0x54>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0a      	cmp	r3, #10
 8000eae:	d107      	bne.n	8000ec0 <printi+0x54>
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da04      	bge.n	8000ec0 <printi+0x54>
		neg = 1;
 8000eb6:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	425b      	negs	r3, r3
 8000ebe:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000ec0:	f107 0414 	add.w	r4, r7, #20
 8000ec4:	340b      	adds	r4, #11
	*s = '\0';
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000eca:	e015      	b.n	8000ef8 <printi+0x8c>
		t = u % b;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	fbb5 f2f3 	udiv	r2, r5, r3
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	1aeb      	subs	r3, r5, r3
 8000ed8:	4698      	mov	r8, r3
		if( t >= 10 )
 8000eda:	f1b8 0f09 	cmp.w	r8, #9
 8000ede:	dd02      	ble.n	8000ee6 <printi+0x7a>
			t += letbase - '0' - 10;
 8000ee0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ee2:	3b3a      	subs	r3, #58	@ 0x3a
 8000ee4:	4498      	add	r8, r3
		*--s = t + '0';
 8000ee6:	fa5f f388 	uxtb.w	r3, r8
 8000eea:	3c01      	subs	r4, #1
 8000eec:	3330      	adds	r3, #48	@ 0x30
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d1e7      	bne.n	8000ecc <printi+0x60>
	}

	if (neg) {
 8000efc:	f1b9 0f00 	cmp.w	r9, #0
 8000f00:	d013      	beq.n	8000f2a <printi+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00d      	beq.n	8000f24 <printi+0xb8>
 8000f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d008      	beq.n	8000f24 <printi+0xb8>
			printchar (out, '-');
 8000f12:	212d      	movs	r1, #45	@ 0x2d
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff ff37 	bl	8000d88 <printchar>
			++pc;
 8000f1a:	3601      	adds	r6, #1
			--width;
 8000f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f22:	e002      	b.n	8000f2a <printi+0xbe>
		}
		else {
			*--s = '-';
 8000f24:	3c01      	subs	r4, #1
 8000f26:	232d      	movs	r3, #45	@ 0x2d
 8000f28:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8000f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f2e:	4621      	mov	r1, r4
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f7ff ff43 	bl	8000dbc <prints>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4433      	add	r3, r6
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	@ 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f44 <print>:

static int print( char **out, const char *format, va_list args )
{
 8000f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f48:	b08a      	sub	sp, #40	@ 0x28
 8000f4a:	af04      	add	r7, sp, #16
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000f52:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000f54:	e0c4      	b.n	80010e0 <print+0x19c>
		if (*format == '%') {
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b25      	cmp	r3, #37	@ 0x25
 8000f5c:	f040 80b3 	bne.w	80010c6 <print+0x182>
			++format;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000f66:	2600      	movs	r6, #0
 8000f68:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80bc 	beq.w	80010ec <print+0x1a8>
			if (*format == '%') goto out;
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b25      	cmp	r3, #37	@ 0x25
 8000f7a:	f000 80a6 	beq.w	80010ca <print+0x186>
			if (*format == '-') {
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f84:	d109      	bne.n	8000f9a <print+0x56>
				++format;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000f8c:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000f8e:	e004      	b.n	8000f9a <print+0x56>
				++format;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000f96:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b30      	cmp	r3, #48	@ 0x30
 8000fa0:	d0f6      	beq.n	8000f90 <print+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000fa2:	e00b      	b.n	8000fbc <print+0x78>
				width *= 10;
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	461d      	mov	r5, r3
				width += *format - '0';
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3b30      	subs	r3, #48	@ 0x30
 8000fb4:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000fc2:	d903      	bls.n	8000fcc <print+0x88>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b39      	cmp	r3, #57	@ 0x39
 8000fca:	d9eb      	bls.n	8000fa4 <print+0x60>
			}
			if( *format == 's' ) {
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b73      	cmp	r3, #115	@ 0x73
 8000fd2:	d112      	bne.n	8000ffa <print+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	1d1a      	adds	r2, r3, #4
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8000fde:	f1b8 0f00 	cmp.w	r8, #0
 8000fe2:	d001      	beq.n	8000fe8 <print+0xa4>
 8000fe4:	4641      	mov	r1, r8
 8000fe6:	e000      	b.n	8000fea <print+0xa6>
 8000fe8:	4947      	ldr	r1, [pc, #284]	@ (8001108 <print+0x1c4>)
 8000fea:	4633      	mov	r3, r6
 8000fec:	462a      	mov	r2, r5
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff fee4 	bl	8000dbc <prints>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	441c      	add	r4, r3
				continue;
 8000ff8:	e06f      	b.n	80010da <print+0x196>
			}
			if( *format == 'd' ) {
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b64      	cmp	r3, #100	@ 0x64
 8001000:	d10f      	bne.n	8001022 <print+0xde>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	1d1a      	adds	r2, r3, #4
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	2361      	movs	r3, #97	@ 0x61
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	9601      	str	r6, [sp, #4]
 8001010:	9500      	str	r5, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	220a      	movs	r2, #10
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ff28 	bl	8000e6c <printi>
 800101c:	4603      	mov	r3, r0
 800101e:	441c      	add	r4, r3
				continue;
 8001020:	e05b      	b.n	80010da <print+0x196>
			}
			if( *format == 'x' ) {
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b78      	cmp	r3, #120	@ 0x78
 8001028:	d10f      	bne.n	800104a <print+0x106>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1d1a      	adds	r2, r3, #4
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	6819      	ldr	r1, [r3, #0]
 8001032:	2361      	movs	r3, #97	@ 0x61
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	9601      	str	r6, [sp, #4]
 8001038:	9500      	str	r5, [sp, #0]
 800103a:	2300      	movs	r3, #0
 800103c:	2210      	movs	r2, #16
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff ff14 	bl	8000e6c <printi>
 8001044:	4603      	mov	r3, r0
 8001046:	441c      	add	r4, r3
				continue;
 8001048:	e047      	b.n	80010da <print+0x196>
			}
			if( *format == 'X' ) {
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b58      	cmp	r3, #88	@ 0x58
 8001050:	d10f      	bne.n	8001072 <print+0x12e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	1d1a      	adds	r2, r3, #4
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	6819      	ldr	r1, [r3, #0]
 800105a:	2341      	movs	r3, #65	@ 0x41
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	9601      	str	r6, [sp, #4]
 8001060:	9500      	str	r5, [sp, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	2210      	movs	r2, #16
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f7ff ff00 	bl	8000e6c <printi>
 800106c:	4603      	mov	r3, r0
 800106e:	441c      	add	r4, r3
				continue;
 8001070:	e033      	b.n	80010da <print+0x196>
			}
			if( *format == 'u' ) {
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b75      	cmp	r3, #117	@ 0x75
 8001078:	d10f      	bne.n	800109a <print+0x156>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1d1a      	adds	r2, r3, #4
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	6819      	ldr	r1, [r3, #0]
 8001082:	2361      	movs	r3, #97	@ 0x61
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	9601      	str	r6, [sp, #4]
 8001088:	9500      	str	r5, [sp, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	220a      	movs	r2, #10
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff feec 	bl	8000e6c <printi>
 8001094:	4603      	mov	r3, r0
 8001096:	441c      	add	r4, r3
				continue;
 8001098:	e01f      	b.n	80010da <print+0x196>
			}
			if( *format == 'c' ) {
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b63      	cmp	r3, #99	@ 0x63
 80010a0:	d11b      	bne.n	80010da <print+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	1d1a      	adds	r2, r3, #4
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 80010ae:	2300      	movs	r3, #0
 80010b0:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 80010b2:	f107 0114 	add.w	r1, r7, #20
 80010b6:	4633      	mov	r3, r6
 80010b8:	462a      	mov	r2, r5
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f7ff fe7e 	bl	8000dbc <prints>
 80010c0:	4603      	mov	r3, r0
 80010c2:	441c      	add	r4, r3
				continue;
 80010c4:	e009      	b.n	80010da <print+0x196>
			}
		}
		else {
		out:
 80010c6:	bf00      	nop
 80010c8:	e000      	b.n	80010cc <print+0x188>
			if (*format == '%') goto out;
 80010ca:	bf00      	nop
			printchar (out, *format);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff fe58 	bl	8000d88 <printchar>
			++pc;
 80010d8:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3301      	adds	r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f af36 	bne.w	8000f56 <print+0x12>
 80010ea:	e000      	b.n	80010ee <print+0x1aa>
			if (*format == '\0') break;
 80010ec:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <print+0x1b8>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 80010fc:	4623      	mov	r3, r4
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001108:	08017988 	.word	0x08017988

0800110c <printf>:

int printf(const char *format, ...)
{
 800110c:	b40f      	push	{r0, r1, r2, r3}
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6939      	ldr	r1, [r7, #16]
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff ff10 	bl	8000f44 <print>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001130:	b004      	add	sp, #16
 8001132:	4770      	bx	lr

08001134 <snprintf>:

int snprintf( char *buf, unsigned int count, const char *format, ... )
{
 8001134:	b40c      	push	{r2, r3}
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
        va_list args;

        ( void ) count;

        va_start( args, format );
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	60fb      	str	r3, [r7, #12]
        return print( &buf, format, args );
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fef9 	bl	8000f44 <print>
 8001152:	4603      	mov	r3, r0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800115e:	b002      	add	sp, #8
 8001160:	4770      	bx	lr
	...

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	4a10      	ldr	r2, [pc, #64]	@ (80011b0 <HAL_MspInit+0x4c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	@ 0x40
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <HAL_MspInit+0x4c>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <HAL_MspInit+0x4c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118c:	6453      	str	r3, [r2, #68]	@ 0x44
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	210f      	movs	r1, #15
 800119e:	f06f 0001 	mvn.w	r0, #1
 80011a2:	f000 fc91 	bl	8001ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0aa      	sub	sp, #168	@ 0xa8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2284      	movs	r2, #132	@ 0x84
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f015 fc02 	bl	80169de <memset>
  if(hi2c->Instance==I2C1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a22      	ldr	r2, [pc, #136]	@ (8001268 <HAL_I2C_MspInit+0xb4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d13c      	bne.n	800125e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 ff0e 	bl	8004014 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011fe:	f7ff fdbd 	bl	8000d7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <HAL_I2C_MspInit+0xb8>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a19      	ldr	r2, [pc, #100]	@ (800126c <HAL_I2C_MspInit+0xb8>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_I2C_MspInit+0xb8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800121a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800121e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001222:	2312      	movs	r3, #18
 8001224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001234:	2304      	movs	r3, #4
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800123e:	4619      	mov	r1, r3
 8001240:	480b      	ldr	r0, [pc, #44]	@ (8001270 <HAL_I2C_MspInit+0xbc>)
 8001242:	f001 fee1 	bl	8003008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <HAL_I2C_MspInit+0xb8>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	4a08      	ldr	r2, [pc, #32]	@ (800126c <HAL_I2C_MspInit+0xb8>)
 800124c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001250:	6413      	str	r3, [r2, #64]	@ 0x40
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_I2C_MspInit+0xb8>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800125e:	bf00      	nop
 8001260:	37a8      	adds	r7, #168	@ 0xa8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40005400 	.word	0x40005400
 800126c:	40023800 	.word	0x40023800
 8001270:	40020400 	.word	0x40020400

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0aa      	sub	sp, #168	@ 0xa8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2284      	movs	r2, #132	@ 0x84
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f015 fba2 	bl	80169de <memset>
  if(huart->Instance==USART3)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <HAL_UART_MspInit+0xb4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d13c      	bne.n	800131e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 feae 	bl	8004014 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012be:	f7ff fd5d 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c2:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <HAL_UART_MspInit+0xb8>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	4a19      	ldr	r2, [pc, #100]	@ (800132c <HAL_UART_MspInit+0xb8>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ce:	4b17      	ldr	r3, [pc, #92]	@ (800132c <HAL_UART_MspInit+0xb8>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <HAL_UART_MspInit+0xb8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a13      	ldr	r2, [pc, #76]	@ (800132c <HAL_UART_MspInit+0xb8>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_UART_MspInit+0xb8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001300:	2301      	movs	r3, #1
 8001302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800130c:	2307      	movs	r3, #7
 800130e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <HAL_UART_MspInit+0xbc>)
 800131a:	f001 fe75 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800131e:	bf00      	nop
 8001320:	37a8      	adds	r7, #168	@ 0xa8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40004800 	.word	0x40004800
 800132c:	40023800 	.word	0x40023800
 8001330:	40020c00 	.word	0x40020c00

08001334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	@ 0x38
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001344:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <HAL_InitTick+0xe0>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	4a32      	ldr	r2, [pc, #200]	@ (8001414 <HAL_InitTick+0xe0>)
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001350:	4b30      	ldr	r3, [pc, #192]	@ (8001414 <HAL_InitTick+0xe0>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800135c:	f107 0210 	add.w	r2, r7, #16
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fe22 	bl	8003fb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001372:	2b00      	cmp	r3, #0
 8001374:	d103      	bne.n	800137e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001376:	f002 fdf3 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 800137a:	6378      	str	r0, [r7, #52]	@ 0x34
 800137c:	e004      	b.n	8001388 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800137e:	f002 fdef 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8001382:	4603      	mov	r3, r0
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138a:	4a23      	ldr	r2, [pc, #140]	@ (8001418 <HAL_InitTick+0xe4>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	0c9b      	lsrs	r3, r3, #18
 8001392:	3b01      	subs	r3, #1
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001396:	4b21      	ldr	r3, [pc, #132]	@ (800141c <HAL_InitTick+0xe8>)
 8001398:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <HAL_InitTick+0xec>)
 800139a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <HAL_InitTick+0xe8>)
 800139e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013a4:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <HAL_InitTick+0xe8>)
 80013a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_InitTick+0xe8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <HAL_InitTick+0xe8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <HAL_InitTick+0xe8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013bc:	4817      	ldr	r0, [pc, #92]	@ (800141c <HAL_InitTick+0xe8>)
 80013be:	f003 fa19 	bl	80047f4 <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11b      	bne.n	8001408 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013d0:	4812      	ldr	r0, [pc, #72]	@ (800141c <HAL_InitTick+0xe8>)
 80013d2:	f003 fa71 	bl	80048b8 <HAL_TIM_Base_Start_IT>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013e4:	2036      	movs	r0, #54	@ 0x36
 80013e6:	f000 fb8b 	bl	8001b00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d808      	bhi.n	8001402 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	2036      	movs	r0, #54	@ 0x36
 80013f6:	f000 fb67 	bl	8001ac8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <HAL_InitTick+0xf0>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e002      	b.n	8001408 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001408:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800140c:	4618      	mov	r0, r3
 800140e:	3738      	adds	r7, #56	@ 0x38
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	431bde83 	.word	0x431bde83
 800141c:	20000570 	.word	0x20000570
 8001420:	40001000 	.word	0x40001000
 8001424:	20000004 	.word	0x20000004

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <NMI_Handler+0x4>

08001430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <MemManage_Handler+0x4>

08001440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <UsageFault_Handler+0x4>

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <TIM6_DAC_IRQHandler+0x10>)
 8001466:	f003 fa9f 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000570 	.word	0x20000570

08001474 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <ETH_IRQHandler+0x10>)
 800147a:	f000 fedd 	bl	8002238 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20004fa4 	.word	0x20004fa4

08001488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return 1;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_kill>:

int _kill(int pid, int sig)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <_kill+0x20>)
 80014a4:	2216      	movs	r2, #22
 80014a6:	601a      	str	r2, [r3, #0]
  return -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	2000c840 	.word	0x2000c840

080014bc <_exit>:

void _exit (int status)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ffe5 	bl	8001498 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ce:	bf00      	nop
 80014d0:	e7fd      	b.n	80014ce <_exit+0x12>

080014d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e00a      	b.n	80014fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e4:	f3af 8000 	nop.w
 80014e8:	4601      	mov	r1, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	60ba      	str	r2, [r7, #8]
 80014f0:	b2ca      	uxtb	r2, r1
 80014f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbf0      	blt.n	80014e4 <_read+0x12>
  }

  return len;
 8001502:	687b      	ldr	r3, [r7, #4]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e009      	b.n	8001532 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbf1      	blt.n	800151e <_write+0x12>
  }
  return len;
 800153a:	687b      	ldr	r3, [r7, #4]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_close>:

int _close(int file)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800156c:	605a      	str	r2, [r3, #4]
  return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_isatty>:

int _isatty(int file)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b4:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <_sbrk+0x5c>)
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <_sbrk+0x60>)
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <_sbrk+0x64>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <_sbrk+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d205      	bcs.n	80015e8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <_sbrk+0x6c>)
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a06      	ldr	r2, [pc, #24]	@ (8001610 <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	20050000 	.word	0x20050000
 800160c:	00000400 	.word	0x00000400
 8001610:	200005bc 	.word	0x200005bc
 8001614:	2000c850 	.word	0x2000c850
 8001618:	2000c840 	.word	0x2000c840

0800161c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <SystemInit+0x20>)
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <SystemInit+0x20>)
 8001628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800162c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001678 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001644:	f7ff ffea 	bl	800161c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800166e:	f015 fa63 	bl	8016b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7ff f84f 	bl	8000714 <main>
  bx  lr    
 8001676:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001678:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001684:	0801afdc 	.word	0x0801afdc
  ldr r2, =_sbss
 8001688:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800168c:	2000c850 	.word	0x2000c850

08001690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC_IRQHandler>

08001692 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00b      	beq.n	80016ba <LAN8742_RegisterBusIO+0x28>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <LAN8742_RegisterBusIO+0x28>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <LAN8742_RegisterBusIO+0x28>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e014      	b.n	80016ea <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d139      	bne.n	8001786 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e01c      	b.n	8001766 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f107 020c 	add.w	r2, r7, #12
 8001734:	2112      	movs	r1, #18
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	4798      	blx	r3
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	da03      	bge.n	8001748 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001740:	f06f 0304 	mvn.w	r3, #4
 8001744:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001746:	e00b      	b.n	8001760 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	d105      	bne.n	8001760 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
         break;
 800175e:	e005      	b.n	800176c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b1f      	cmp	r3, #31
 800176a:	d9df      	bls.n	800172c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b1f      	cmp	r3, #31
 8001772:	d902      	bls.n	800177a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001774:	f06f 0302 	mvn.w	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001786:	693b      	ldr	r3, [r7, #16]
 }
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6810      	ldr	r0, [r2, #0]
 80017a4:	f107 020c 	add.w	r2, r7, #12
 80017a8:	2101      	movs	r1, #1
 80017aa:	4798      	blx	r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da02      	bge.n	80017b8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017b2:	f06f 0304 	mvn.w	r3, #4
 80017b6:	e06e      	b.n	8001896 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6810      	ldr	r0, [r2, #0]
 80017c0:	f107 020c 	add.w	r2, r7, #12
 80017c4:	2101      	movs	r1, #1
 80017c6:	4798      	blx	r3
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da02      	bge.n	80017d4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017ce:	f06f 0304 	mvn.w	r3, #4
 80017d2:	e060      	b.n	8001896 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80017de:	2301      	movs	r3, #1
 80017e0:	e059      	b.n	8001896 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6810      	ldr	r0, [r2, #0]
 80017ea:	f107 020c 	add.w	r2, r7, #12
 80017ee:	2100      	movs	r1, #0
 80017f0:	4798      	blx	r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da02      	bge.n	80017fe <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017f8:	f06f 0304 	mvn.w	r3, #4
 80017fc:	e04b      	b.n	8001896 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d11b      	bne.n	8001840 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <LAN8742_GetLinkState+0x90>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800181c:	2302      	movs	r3, #2
 800181e:	e03a      	b.n	8001896 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800182a:	2303      	movs	r3, #3
 800182c:	e033      	b.n	8001896 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001838:	2304      	movs	r3, #4
 800183a:	e02c      	b.n	8001896 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800183c:	2305      	movs	r3, #5
 800183e:	e02a      	b.n	8001896 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6810      	ldr	r0, [r2, #0]
 8001848:	f107 020c 	add.w	r2, r7, #12
 800184c:	211f      	movs	r1, #31
 800184e:	4798      	blx	r3
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	da02      	bge.n	800185c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001856:	f06f 0304 	mvn.w	r3, #4
 800185a:	e01c      	b.n	8001896 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001866:	2306      	movs	r3, #6
 8001868:	e015      	b.n	8001896 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f003 031c 	and.w	r3, r3, #28
 8001870:	2b18      	cmp	r3, #24
 8001872:	d101      	bne.n	8001878 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001874:	2302      	movs	r3, #2
 8001876:	e00e      	b.n	8001896 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 031c 	and.w	r3, r3, #28
 800187e:	2b08      	cmp	r3, #8
 8001880:	d101      	bne.n	8001886 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001882:	2303      	movs	r3, #3
 8001884:	e007      	b.n	8001896 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 031c 	and.w	r3, r3, #28
 800188c:	2b14      	cmp	r3, #20
 800188e:	d101      	bne.n	8001894 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001890:	2304      	movs	r3, #4
 8001892:	e000      	b.n	8001896 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001894:	2305      	movs	r3, #5
    }
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a2:	2003      	movs	r0, #3
 80018a4:	f000 f905 	bl	8001ab2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a8:	200f      	movs	r0, #15
 80018aa:	f7ff fd43 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ae:	f7ff fc59 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008
 80018dc:	200005c0 	.word	0x200005c0

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200005c0 	.word	0x200005c0

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008

08001940 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001944:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <HAL_GetREVID+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0c1b      	lsrs	r3, r3, #16
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e0042000 	.word	0xe0042000

08001958 <__NVIC_SetPriorityGrouping>:
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <__NVIC_SetPriorityGrouping+0x40>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	4313      	orrs	r3, r2
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <__NVIC_SetPriorityGrouping+0x40>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00
 800199c:	05fa0000 	.word	0x05fa0000

080019a0 <__NVIC_GetPriorityGrouping>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	@ (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	@ (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	@ (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ff4c 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ada:	f7ff ff61 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001ade:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	6978      	ldr	r0, [r7, #20]
 8001ae6:	f7ff ffb1 	bl	8001a4c <NVIC_EncodePriority>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff80 	bl	80019f8 <__NVIC_SetPriority>
}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff54 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e086      	b.n	8001c3c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d106      	bne.n	8001b46 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2223      	movs	r2, #35	@ 0x23
 8001b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f004 fa8b 	bl	800605c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	4b3f      	ldr	r3, [pc, #252]	@ (8001c44 <HAL_ETH_Init+0x128>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c44 <HAL_ETH_Init+0x128>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b52:	4b3c      	ldr	r3, [pc, #240]	@ (8001c44 <HAL_ETH_Init+0x128>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c48 <HAL_ETH_Init+0x12c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a39      	ldr	r2, [pc, #228]	@ (8001c48 <HAL_ETH_Init+0x12c>)
 8001b64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b68:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b6a:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <HAL_ETH_Init+0x12c>)
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4935      	ldr	r1, [pc, #212]	@ (8001c48 <HAL_ETH_Init+0x12c>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b78:	4b33      	ldr	r3, [pc, #204]	@ (8001c48 <HAL_ETH_Init+0x12c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b94:	f7ff fea4 	bl	80018e0 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b9a:	e011      	b.n	8001bc0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b9c:	f7ff fea0 	bl	80018e0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001baa:	d909      	bls.n	8001bc0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	22e0      	movs	r2, #224	@ 0xe0
 8001bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e03d      	b.n	8001c3c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1e4      	bne.n	8001b9c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 ff5c 	bl	8002a90 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f001 f807 	bl	8002bec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f001 f85d 	bl	8002c9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	461a      	mov	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 ffc5 	bl	8002b7c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001c00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_ETH_Init+0x130>)
 8001c10:	430b      	orrs	r3, r1
 8001c12:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001c26:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2210      	movs	r2, #16
 8001c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40013800 	.word	0x40013800
 8001c4c:	00020060 	.word	0x00020060

08001c50 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d15f      	bne.n	8001d22 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2223      	movs	r2, #35	@ 0x23
 8001c66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f9f6 	bl	8002068 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff fe37 	bl	80018f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ca4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ca8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cc0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fd80 	bl	80027c8 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0208 	orr.w	r2, r2, #8
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff fe09 	bl	80018f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0204 	orr.w	r2, r2, #4
 8001cfc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d06:	69d9      	ldr	r1, [r3, #28]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <HAL_ETH_Start_IT+0xdc>)
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d14:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2223      	movs	r2, #35	@ 0x23
 8001d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
  }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0001a0c1 	.word	0x0001a0c1

08001d30 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d3e:	2b23      	cmp	r3, #35	@ 0x23
 8001d40:	d16e      	bne.n	8001e20 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2223      	movs	r2, #35	@ 0x23
 8001d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d52:	69d9      	ldr	r1, [r3, #28]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b34      	ldr	r3, [pc, #208]	@ (8001e2c <HAL_ETH_Stop_IT+0xfc>)
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d60:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001d74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d78:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	f023 0302 	bic.w	r3, r3, #2
 8001d8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d90:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0204 	bic.w	r2, r2, #4
 8001da0:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7ff fda4 	bl	80018f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fd05 	bl	80027c8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f7ff fd8e 	bl	80018f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e00e      	b.n	8001e08 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	3212      	adds	r2, #18
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d9ed      	bls.n	8001dea <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2210      	movs	r2, #16
 8001e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e000      	b.n	8001e22 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
  }
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	fffe5f3e 	.word	0xfffe5f3e

08001e30 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e045      	b.n	8001ee0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e5a:	2b23      	cmp	r3, #35	@ 0x23
 8001e5c:	d13f      	bne.n	8001ede <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e66:	2201      	movs	r2, #1
 8001e68:	6839      	ldr	r1, [r7, #0]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 ff86 	bl	8002d7c <ETH_Prepare_Tx_Descriptors>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e02a      	b.n	8001ee0 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e8a:	f3bf 8f4f 	dsb	sy
}
 8001e8e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d904      	bls.n	8001eac <HAL_ETH_Transmit_IT+0x7c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	1f1a      	subs	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00d      	beq.n	8001eda <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2304      	movs	r3, #4
 8001eca:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
  }
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0a4      	b.n	800205e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f1a:	2b23      	cmp	r3, #35	@ 0x23
 8001f1c:	d001      	beq.n	8001f22 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e09d      	b.n	800205e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	3212      	adds	r2, #18
 8001f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f32:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f38:	f1c3 0304 	rsb	r3, r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f3e:	e066      	b.n	800200e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <HAL_ETH_ReadData+0x88>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03c      	beq.n	8001fea <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001f92:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f004 fa13 	bl	80063f4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	441a      	add	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d902      	bls.n	8001ffc <HAL_ETH_ReadData+0x114>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b04      	subs	r3, #4
 8001ffa:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	3212      	adds	r2, #18
 8002002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3301      	adds	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002012:	2b00      	cmp	r3, #0
 8002014:	db06      	blt.n	8002024 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	429a      	cmp	r2, r3
 800201c:	d202      	bcs.n	8002024 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800201e:	7cfb      	ldrb	r3, [r7, #19]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d08d      	beq.n	8001f40 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	441a      	add	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f815 	bl	8002068 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d108      	bne.n	800205c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
}
 800205e:	4618      	mov	r0, r3
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002074:	2301      	movs	r3, #1
 8002076:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800207c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	3212      	adds	r2, #18
 8002084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002088:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800208e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002090:	e042      	b.n	8002118 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d112      	bne.n	80020c0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 f978 	bl	8006394 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	74fb      	strb	r3, [r7, #19]
 80020ae:	e007      	b.n	80020c0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	461a      	mov	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	461a      	mov	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d028      	beq.n	8002118 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <ETH_UpdateDescriptor+0x104>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	6053      	str	r3, [r2, #4]
 80020da:	e005      	b.n	80020e8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3301      	adds	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d902      	bls.n	8002106 <ETH_UpdateDescriptor+0x9e>
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	3b04      	subs	r3, #4
 8002104:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	3212      	adds	r2, #18
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	617b      	str	r3, [r7, #20]
      desccount--;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	3b01      	subs	r3, #1
 8002116:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <ETH_UpdateDescriptor+0xbc>
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1b6      	bne.n	8002092 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	429a      	cmp	r2, r3
 800212c:	d01a      	beq.n	8002164 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002138:	f3bf 8f5f 	dmb	sy
}
 800213c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6919      	ldr	r1, [r3, #16]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	18ca      	adds	r2, r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002156:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002164:	bf00      	nop
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	80004000 	.word	0x80004000

08002170 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3318      	adds	r3, #24
 800217c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800218e:	e047      	b.n	8002220 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002190:	2301      	movs	r3, #1
 8002192:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3b01      	subs	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	3304      	adds	r3, #4
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	3301      	adds	r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d902      	bls.n	80021bc <HAL_ETH_ReleaseTxPacket+0x4c>
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	3b04      	subs	r3, #4
 80021ba:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d02c      	beq.n	8002220 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68d9      	ldr	r1, [r3, #12]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db1f      	blt.n	800221c <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	3304      	adds	r3, #4
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 f945 	bl	8006478 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	3304      	adds	r3, #4
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	3301      	adds	r3, #1
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d902      	bls.n	800220e <HAL_ETH_ReleaseTxPacket+0x9e>
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	3b04      	subs	r3, #4
 800220c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	62da      	str	r2, [r3, #44]	@ 0x2c
 800221a:	e001      	b.n	8002220 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_ETH_ReleaseTxPacket+0xbc>
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1b1      	bne.n	8002190 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002260:	4b4b      	ldr	r3, [pc, #300]	@ (8002390 <HAL_ETH_IRQHandler+0x158>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00e      	beq.n	800228e <HAL_ETH_IRQHandler+0x56>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002282:	461a      	mov	r2, r3
 8002284:	4b43      	ldr	r3, [pc, #268]	@ (8002394 <HAL_ETH_IRQHandler+0x15c>)
 8002286:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f003 fbfb 	bl	8005a84 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00f      	beq.n	80022b8 <HAL_ETH_IRQHandler+0x80>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022aa:	461a      	mov	r2, r3
 80022ac:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80022b0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f003 fbf6 	bl	8005aa4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d042      	beq.n	8002348 <HAL_ETH_IRQHandler+0x110>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d03d      	beq.n	8002348 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f043 0208 	orr.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01a      	beq.n	800231c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_ETH_IRQHandler+0x160>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800230c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002310:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	22e0      	movs	r2, #224	@ 0xe0
 8002316:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800231a:	e012      	b.n	8002342 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	f248 6380 	movw	r3, #34432	@ 0x8680
 800232a:	4013      	ands	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233a:	461a      	mov	r2, r3
 800233c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002340:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f003 fbbe 	bl	8005ac4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00e      	beq.n	8002370 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f81a 	bl	800239c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800237a:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_ETH_IRQHandler+0x158>)
 800237c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002380:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f814 	bl	80023b0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002388:	bf00      	nop
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013c00 	.word	0x40013c00
 8002394:	00010040 	.word	0x00010040
 8002398:	007e2000 	.word	0x007e2000

0800239c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 031c 	and.w	r3, r3, #28
 80023e0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	02db      	lsls	r3, r3, #11
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	019b      	lsls	r3, r3, #6
 80023f2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0302 	bic.w	r3, r3, #2
 8002402:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002414:	f7ff fa64 	bl	80018e0 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800241a:	e00d      	b.n	8002438 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800241c:	f7ff fa60 	bl	80018e0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800242a:	d301      	bcc.n	8002430 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e010      	b.n	8002452 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ec      	bne.n	800241c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	b29b      	uxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 031c 	and.w	r3, r3, #28
 8002476:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	02db      	lsls	r3, r3, #11
 800247c:	b29b      	uxth	r3, r3
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	019b      	lsls	r3, r3, #6
 8002488:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b4:	f7ff fa14 	bl	80018e0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024ba:	e00d      	b.n	80024d8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80024bc:	f7ff fa10 	bl	80018e0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ca:	d301      	bcc.n	80024d0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e009      	b.n	80024e4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ec      	bne.n	80024bc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0e6      	b.n	80026ce <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf14      	ite	ne
 800250e:	2301      	movne	r3, #1
 8002510:	2300      	moveq	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf0c      	ite	eq
 8002538:	2301      	moveq	r3, #1
 800253a:	2300      	movne	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf0c      	ite	eq
 800266a:	2301      	moveq	r3, #1
 800266c:	2300      	movne	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	b29a      	uxth	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00b      	b.n	8002706 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d105      	bne.n	8002704 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80026f8:	6839      	ldr	r1, [r7, #0]
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f88a 	bl	8002814 <ETH_SetMACConfig>

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 031c 	bic.w	r3, r3, #28
 8002726:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002728:	f001 fc0e 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 800272c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d804      	bhi.n	8002740 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e019      	b.n	8002774 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4a11      	ldr	r2, [pc, #68]	@ (8002788 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d204      	bcs.n	8002752 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f043 030c 	orr.w	r3, r3, #12
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e010      	b.n	8002774 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d90c      	bls.n	8002774 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4a0c      	ldr	r2, [pc, #48]	@ (8002790 <HAL_ETH_SetMDIOClockRange+0x80>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d804      	bhi.n	800276c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e003      	b.n	8002774 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f043 0310 	orr.w	r3, r3, #16
 8002772:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	611a      	str	r2, [r3, #16]
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	02160ebf 	.word	0x02160ebf
 8002788:	03938700 	.word	0x03938700
 800278c:	05f5e0ff 	.word	0x05f5e0ff
 8002790:	08f0d17f 	.word	0x08f0d17f

08002794 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027ea:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f7ff f87d 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002808:	6193      	str	r3, [r2, #24]
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4b53      	ldr	r3, [pc, #332]	@ (8002978 <ETH_SetMACConfig+0x164>)
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	7b9b      	ldrb	r3, [r3, #14]
 8002832:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	7c12      	ldrb	r2, [r2, #16]
 8002838:	2a00      	cmp	r2, #0
 800283a:	d102      	bne.n	8002842 <ETH_SetMACConfig+0x2e>
 800283c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002840:	e000      	b.n	8002844 <ETH_SetMACConfig+0x30>
 8002842:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002844:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	7c52      	ldrb	r2, [r2, #17]
 800284a:	2a00      	cmp	r2, #0
 800284c:	d102      	bne.n	8002854 <ETH_SetMACConfig+0x40>
 800284e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002852:	e000      	b.n	8002856 <ETH_SetMACConfig+0x42>
 8002854:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002856:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800285c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7fdb      	ldrb	r3, [r3, #31]
 8002862:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002864:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800286a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	7f92      	ldrb	r2, [r2, #30]
 8002870:	2a00      	cmp	r2, #0
 8002872:	d102      	bne.n	800287a <ETH_SetMACConfig+0x66>
 8002874:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002878:	e000      	b.n	800287c <ETH_SetMACConfig+0x68>
 800287a:	2200      	movs	r2, #0
                        macconf->Speed |
 800287c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7f1b      	ldrb	r3, [r3, #28]
 8002882:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002884:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800288a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	791b      	ldrb	r3, [r3, #4]
 8002890:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002892:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	f892 2020 	ldrb.w	r2, [r2, #32]
 800289a:	2a00      	cmp	r2, #0
 800289c:	d102      	bne.n	80028a4 <ETH_SetMACConfig+0x90>
 800289e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a2:	e000      	b.n	80028a6 <ETH_SetMACConfig+0x92>
 80028a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	7bdb      	ldrb	r3, [r3, #15]
 80028ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80028be:	4313      	orrs	r3, r2
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7ff f80e 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80028f2:	4013      	ands	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002902:	2a00      	cmp	r2, #0
 8002904:	d101      	bne.n	800290a <ETH_SetMACConfig+0xf6>
 8002906:	2280      	movs	r2, #128	@ 0x80
 8002908:	e000      	b.n	800290c <ETH_SetMACConfig+0xf8>
 800290a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800290c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002912:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800291a:	2a01      	cmp	r2, #1
 800291c:	d101      	bne.n	8002922 <ETH_SetMACConfig+0x10e>
 800291e:	2208      	movs	r2, #8
 8002920:	e000      	b.n	8002924 <ETH_SetMACConfig+0x110>
 8002922:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002924:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800292c:	2a01      	cmp	r2, #1
 800292e:	d101      	bne.n	8002934 <ETH_SetMACConfig+0x120>
 8002930:	2204      	movs	r2, #4
 8002932:	e000      	b.n	8002936 <ETH_SetMACConfig+0x122>
 8002934:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800293e:	2a01      	cmp	r2, #1
 8002940:	d101      	bne.n	8002946 <ETH_SetMACConfig+0x132>
 8002942:	2202      	movs	r2, #2
 8002944:	e000      	b.n	8002948 <ETH_SetMACConfig+0x134>
 8002946:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002948:	4313      	orrs	r3, r2
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002960:	2001      	movs	r0, #1
 8002962:	f7fe ffc9 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	fd20810f 	.word	0xfd20810f

0800297c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4b3d      	ldr	r3, [pc, #244]	@ (8002a8c <ETH_SetDMAConfig+0x110>)
 8002996:	4013      	ands	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	7b1b      	ldrb	r3, [r3, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <ETH_SetDMAConfig+0x2c>
 80029a2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029a6:	e000      	b.n	80029aa <ETH_SetDMAConfig+0x2e>
 80029a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	7b5b      	ldrb	r3, [r3, #13]
 80029ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	7f52      	ldrb	r2, [r2, #29]
 80029b6:	2a00      	cmp	r2, #0
 80029b8:	d102      	bne.n	80029c0 <ETH_SetDMAConfig+0x44>
 80029ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029be:	e000      	b.n	80029c2 <ETH_SetDMAConfig+0x46>
 80029c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	7b9b      	ldrb	r3, [r3, #14]
 80029c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	7f1b      	ldrb	r3, [r3, #28]
 80029d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	7f9b      	ldrb	r3, [r3, #30]
 80029de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029f0:	4313      	orrs	r3, r2
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a00:	461a      	mov	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7fe ff70 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a20:	461a      	mov	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	791b      	ldrb	r3, [r3, #4]
 8002a2a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a30:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a36:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a3c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a44:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a46:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a4e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a54:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a62:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a70:	2001      	movs	r0, #1
 8002a72:	f7fe ff41 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6013      	str	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	f8de3f23 	.word	0xf8de3f23

08002a90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0a6      	sub	sp, #152	@ 0x98
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002af8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002afe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b0a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff fe7f 	bl	8002814 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b24:	2301      	movs	r3, #1
 8002b26:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b4a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b50:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b56:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b66:	f107 0308 	add.w	r3, r7, #8
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ff05 	bl	800297c <ETH_SetDMAConfig>
}
 8002b72:	bf00      	nop
 8002b74:	3798      	adds	r7, #152	@ 0x98
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3305      	adds	r3, #5
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	3204      	adds	r2, #4
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <ETH_MACAddressConfig+0x68>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3303      	adds	r3, #3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	061a      	lsls	r2, r3, #24
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <ETH_MACAddressConfig+0x6c>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6013      	str	r3, [r2, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40028040 	.word	0x40028040
 8002be8:	40028044 	.word	0x40028044

08002bec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e03e      	b.n	8002c78 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68d9      	ldr	r1, [r3, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2200      	movs	r2, #0
 8002c22:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	3206      	adds	r2, #6
 8002c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d80c      	bhi.n	8002c5c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68d9      	ldr	r1, [r3, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	e004      	b.n	8002c66 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3301      	adds	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d9bd      	bls.n	8002bfa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c90:	611a      	str	r2, [r3, #16]
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e048      	b.n	8002d3e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6919      	ldr	r1, [r3, #16]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002ce8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	3212      	adds	r2, #18
 8002d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d80c      	bhi.n	8002d2e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6919      	ldr	r1, [r3, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
 8002d2c:	e004      	b.n	8002d38 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d9b3      	bls.n	8002cac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d6e:	60da      	str	r2, [r3, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b091      	sub	sp, #68	@ 0x44
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3318      	adds	r3, #24
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dbe:	d007      	beq.n	8002dd0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e111      	b.n	8002ff8 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	4b86      	ldr	r3, [pc, #536]	@ (8003004 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dee:	6852      	ldr	r2, [r2, #4]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e12:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e56:	e082      	b.n	8002f5e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e62:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e005      	b.n	8002e84 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e86:	3301      	adds	r3, #1
 8002e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d902      	bls.n	8002e96 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e92:	3b04      	subs	r3, #4
 8002e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002eac:	d007      	beq.n	8002ebe <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d029      	beq.n	8002f12 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed0:	e019      	b.n	8002f06 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ed2:	f3bf 8f5f 	dmb	sy
}
 8002ed6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d902      	bls.n	8002ef6 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ef2:	3b04      	subs	r3, #4
 8002ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efe:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f02:	3301      	adds	r3, #1
 8002f04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d3e1      	bcc.n	8002ed2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e072      	b.n	8002ff8 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f20:	3301      	adds	r3, #1
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	4b32      	ldr	r3, [pc, #200]	@ (8003004 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f3e:	6852      	ldr	r2, [r2, #4]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f44:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	3301      	adds	r3, #1
 8002f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002f4c:	f3bf 8f5f 	dmb	sy
}
 8002f50:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f47f af78 	bne.w	8002e58 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d006      	beq.n	8002f7c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e005      	b.n	8002f88 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f86:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002f9e:	f3bf 8f5f 	dmb	sy
}
 8002fa2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fae:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb8:	3304      	adds	r3, #4
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fc4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fca:	613b      	str	r3, [r7, #16]
  return(result);
 8002fcc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f383 8810 	msr	PRIMASK, r3
}
 8002fda:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe2:	4413      	add	r3, r2
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f383 8810 	msr	PRIMASK, r3
}
 8002ff4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3744      	adds	r7, #68	@ 0x44
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	ffffe000 	.word	0xffffe000

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	@ 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e175      	b.n	8003314 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	f040 8164 	bne.w	800330e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_GPIO_Init+0x56>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d130      	bne.n	80030c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003094:	2201      	movs	r2, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 0201 	and.w	r2, r3, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d017      	beq.n	80030fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d123      	bne.n	8003150 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80be 	beq.w	800330e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	4b66      	ldr	r3, [pc, #408]	@ (800332c <HAL_GPIO_Init+0x324>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	4a65      	ldr	r2, [pc, #404]	@ (800332c <HAL_GPIO_Init+0x324>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800319c:	6453      	str	r3, [r2, #68]	@ 0x44
 800319e:	4b63      	ldr	r3, [pc, #396]	@ (800332c <HAL_GPIO_Init+0x324>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031aa:	4a61      	ldr	r2, [pc, #388]	@ (8003330 <HAL_GPIO_Init+0x328>)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a58      	ldr	r2, [pc, #352]	@ (8003334 <HAL_GPIO_Init+0x32c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d037      	beq.n	8003246 <HAL_GPIO_Init+0x23e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a57      	ldr	r2, [pc, #348]	@ (8003338 <HAL_GPIO_Init+0x330>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d031      	beq.n	8003242 <HAL_GPIO_Init+0x23a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a56      	ldr	r2, [pc, #344]	@ (800333c <HAL_GPIO_Init+0x334>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d02b      	beq.n	800323e <HAL_GPIO_Init+0x236>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a55      	ldr	r2, [pc, #340]	@ (8003340 <HAL_GPIO_Init+0x338>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d025      	beq.n	800323a <HAL_GPIO_Init+0x232>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a54      	ldr	r2, [pc, #336]	@ (8003344 <HAL_GPIO_Init+0x33c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01f      	beq.n	8003236 <HAL_GPIO_Init+0x22e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a53      	ldr	r2, [pc, #332]	@ (8003348 <HAL_GPIO_Init+0x340>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d019      	beq.n	8003232 <HAL_GPIO_Init+0x22a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a52      	ldr	r2, [pc, #328]	@ (800334c <HAL_GPIO_Init+0x344>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x226>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a51      	ldr	r2, [pc, #324]	@ (8003350 <HAL_GPIO_Init+0x348>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00d      	beq.n	800322a <HAL_GPIO_Init+0x222>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a50      	ldr	r2, [pc, #320]	@ (8003354 <HAL_GPIO_Init+0x34c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <HAL_GPIO_Init+0x21e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4f      	ldr	r2, [pc, #316]	@ (8003358 <HAL_GPIO_Init+0x350>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_Init+0x21a>
 800321e:	2309      	movs	r3, #9
 8003220:	e012      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003222:	230a      	movs	r3, #10
 8003224:	e010      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003226:	2308      	movs	r3, #8
 8003228:	e00e      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800322a:	2307      	movs	r3, #7
 800322c:	e00c      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800322e:	2306      	movs	r3, #6
 8003230:	e00a      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003232:	2305      	movs	r3, #5
 8003234:	e008      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003236:	2304      	movs	r3, #4
 8003238:	e006      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800323a:	2303      	movs	r3, #3
 800323c:	e004      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800323e:	2302      	movs	r3, #2
 8003240:	e002      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003246:	2300      	movs	r3, #0
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	f002 0203 	and.w	r2, r2, #3
 800324e:	0092      	lsls	r2, r2, #2
 8003250:	4093      	lsls	r3, r2
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003258:	4935      	ldr	r1, [pc, #212]	@ (8003330 <HAL_GPIO_Init+0x328>)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003266:	4b3d      	ldr	r3, [pc, #244]	@ (800335c <HAL_GPIO_Init+0x354>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800328a:	4a34      	ldr	r2, [pc, #208]	@ (800335c <HAL_GPIO_Init+0x354>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003290:	4b32      	ldr	r3, [pc, #200]	@ (800335c <HAL_GPIO_Init+0x354>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b4:	4a29      	ldr	r2, [pc, #164]	@ (800335c <HAL_GPIO_Init+0x354>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ba:	4b28      	ldr	r3, [pc, #160]	@ (800335c <HAL_GPIO_Init+0x354>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032de:	4a1f      	ldr	r2, [pc, #124]	@ (800335c <HAL_GPIO_Init+0x354>)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e4:	4b1d      	ldr	r3, [pc, #116]	@ (800335c <HAL_GPIO_Init+0x354>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003308:	4a14      	ldr	r2, [pc, #80]	@ (800335c <HAL_GPIO_Init+0x354>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	f67f ae86 	bls.w	8003028 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3724      	adds	r7, #36	@ 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	40013800 	.word	0x40013800
 8003334:	40020000 	.word	0x40020000
 8003338:	40020400 	.word	0x40020400
 800333c:	40020800 	.word	0x40020800
 8003340:	40020c00 	.word	0x40020c00
 8003344:	40021000 	.word	0x40021000
 8003348:	40021400 	.word	0x40021400
 800334c:	40021800 	.word	0x40021800
 8003350:	40021c00 	.word	0x40021c00
 8003354:	40022000 	.word	0x40022000
 8003358:	40022400 	.word	0x40022400
 800335c:	40013c00 	.word	0x40013c00

08003360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
 800336c:	4613      	mov	r3, r2
 800336e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003370:	787b      	ldrb	r3, [r7, #1]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800337c:	e003      	b.n	8003386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	619a      	str	r2, [r3, #24]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e08b      	b.n	80034be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fefa 	bl	80011b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	@ 0x24
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	e006      	b.n	800341c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800341a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d108      	bne.n	8003436 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	e007      	b.n	8003446 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <HAL_I2C_Init+0x134>)
 8003452:	430b      	orrs	r3, r1
 8003454:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003464:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69d9      	ldr	r1, [r3, #28]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1a      	ldr	r2, [r3, #32]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	02008000 	.word	0x02008000

080034cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d138      	bne.n	8003554 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e032      	b.n	8003556 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2224      	movs	r2, #36	@ 0x24
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800351e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e000      	b.n	8003556 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b20      	cmp	r3, #32
 8003576:	d139      	bne.n	80035ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003582:	2302      	movs	r3, #2
 8003584:	e033      	b.n	80035ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2224      	movs	r2, #36	@ 0x24
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	e000      	b.n	80035ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035ec:	2302      	movs	r3, #2
  }
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a04      	ldr	r2, [pc, #16]	@ (8003618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360a:	6013      	str	r3, [r2, #0]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40007000 	.word	0x40007000

0800361c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e291      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8087 	beq.w	800374e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003640:	4b96      	ldr	r3, [pc, #600]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b04      	cmp	r3, #4
 800364a:	d00c      	beq.n	8003666 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364c:	4b93      	ldr	r3, [pc, #588]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b08      	cmp	r3, #8
 8003656:	d112      	bne.n	800367e <HAL_RCC_OscConfig+0x62>
 8003658:	4b90      	ldr	r3, [pc, #576]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003664:	d10b      	bne.n	800367e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003666:	4b8d      	ldr	r3, [pc, #564]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d06c      	beq.n	800374c <HAL_RCC_OscConfig+0x130>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d168      	bne.n	800374c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e26b      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x7a>
 8003688:	4b84      	ldr	r3, [pc, #528]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a83      	ldr	r2, [pc, #524]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e02e      	b.n	80036f4 <HAL_RCC_OscConfig+0xd8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x9c>
 800369e:	4b7f      	ldr	r3, [pc, #508]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7e      	ldr	r2, [pc, #504]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b7c      	ldr	r3, [pc, #496]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7b      	ldr	r2, [pc, #492]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e01d      	b.n	80036f4 <HAL_RCC_OscConfig+0xd8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0xc0>
 80036c2:	4b76      	ldr	r3, [pc, #472]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a75      	ldr	r2, [pc, #468]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b73      	ldr	r3, [pc, #460]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a72      	ldr	r2, [pc, #456]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0xd8>
 80036dc:	4b6f      	ldr	r3, [pc, #444]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6e      	ldr	r2, [pc, #440]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b6c      	ldr	r3, [pc, #432]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6b      	ldr	r2, [pc, #428]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe f8f0 	bl	80018e0 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe f8ec 	bl	80018e0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	@ 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e21f      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b61      	ldr	r3, [pc, #388]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xe8>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe f8dc 	bl	80018e0 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800372c:	f7fe f8d8 	bl	80018e0 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	@ 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e20b      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	4b57      	ldr	r3, [pc, #348]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x110>
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d069      	beq.n	800382e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375a:	4b50      	ldr	r3, [pc, #320]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b4d      	ldr	r3, [pc, #308]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11c      	bne.n	80037ac <HAL_RCC_OscConfig+0x190>
 8003772:	4b4a      	ldr	r3, [pc, #296]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	4b47      	ldr	r3, [pc, #284]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x17a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1df      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b41      	ldr	r3, [pc, #260]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	493d      	ldr	r1, [pc, #244]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e040      	b.n	800382e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d023      	beq.n	80037fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b39      	ldr	r3, [pc, #228]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a38      	ldr	r2, [pc, #224]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fe f88e 	bl	80018e0 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c8:	f7fe f88a 	bl	80018e0 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1bd      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037da:	4b30      	ldr	r3, [pc, #192]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e6:	4b2d      	ldr	r3, [pc, #180]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4929      	ldr	r1, [pc, #164]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
 80037fa:	e018      	b.n	800382e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fc:	4b27      	ldr	r3, [pc, #156]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a26      	ldr	r2, [pc, #152]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe f86a 	bl	80018e0 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003810:	f7fe f866 	bl	80018e0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e199      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d038      	beq.n	80038ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d019      	beq.n	8003876 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003842:	4b16      	ldr	r3, [pc, #88]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003846:	4a15      	ldr	r2, [pc, #84]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fe f847 	bl	80018e0 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003856:	f7fe f843 	bl	80018e0 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e176      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003868:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 800386a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x23a>
 8003874:	e01a      	b.n	80038ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 8003878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387a:	4a08      	ldr	r2, [pc, #32]	@ (800389c <HAL_RCC_OscConfig+0x280>)
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fe f82d 	bl	80018e0 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388a:	f7fe f829 	bl	80018e0 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d903      	bls.n	80038a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e15c      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
 800389c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	4b91      	ldr	r3, [pc, #580]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 80038a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ee      	bne.n	800388a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a4 	beq.w	8003a02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ba:	4b8b      	ldr	r3, [pc, #556]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	4b88      	ldr	r3, [pc, #544]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	4a87      	ldr	r2, [pc, #540]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d2:	4b85      	ldr	r3, [pc, #532]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e2:	4b82      	ldr	r3, [pc, #520]	@ (8003aec <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038ee:	4b7f      	ldr	r3, [pc, #508]	@ (8003aec <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a7e      	ldr	r2, [pc, #504]	@ (8003aec <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7fd fff1 	bl	80018e0 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7fd ffed 	bl	80018e0 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	@ 0x64
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e120      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003914:	4b75      	ldr	r3, [pc, #468]	@ (8003aec <HAL_RCC_OscConfig+0x4d0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x31a>
 8003928:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	@ 0x70
 8003934:	e02d      	b.n	8003992 <HAL_RCC_OscConfig+0x376>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x33c>
 800393e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	4a69      	ldr	r2, [pc, #420]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	@ 0x70
 800394a:	4b67      	ldr	r3, [pc, #412]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394e:	4a66      	ldr	r2, [pc, #408]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6713      	str	r3, [r2, #112]	@ 0x70
 8003956:	e01c      	b.n	8003992 <HAL_RCC_OscConfig+0x376>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b05      	cmp	r3, #5
 800395e:	d10c      	bne.n	800397a <HAL_RCC_OscConfig+0x35e>
 8003960:	4b61      	ldr	r3, [pc, #388]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003964:	4a60      	ldr	r2, [pc, #384]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	6713      	str	r3, [r2, #112]	@ 0x70
 800396c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003970:	4a5d      	ldr	r2, [pc, #372]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6713      	str	r3, [r2, #112]	@ 0x70
 8003978:	e00b      	b.n	8003992 <HAL_RCC_OscConfig+0x376>
 800397a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	@ 0x70
 8003986:	4b58      	ldr	r3, [pc, #352]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398a:	4a57      	ldr	r2, [pc, #348]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 800398c:	f023 0304 	bic.w	r3, r3, #4
 8003990:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d015      	beq.n	80039c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fd ffa1 	bl	80018e0 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fd ff9d 	bl	80018e0 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e0ce      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ee      	beq.n	80039a2 <HAL_RCC_OscConfig+0x386>
 80039c4:	e014      	b.n	80039f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fd ff8b 	bl	80018e0 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ce:	f7fd ff87 	bl	80018e0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0b8      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e4:	4b40      	ldr	r3, [pc, #256]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ee      	bne.n	80039ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d105      	bne.n	8003a02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	4a3b      	ldr	r2, [pc, #236]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 80039fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80a4 	beq.w	8003b54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d06b      	beq.n	8003af0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d149      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	4b31      	ldr	r3, [pc, #196]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a30      	ldr	r2, [pc, #192]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd ff58 	bl	80018e0 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd ff54 	bl	80018e0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e087      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	4b28      	ldr	r3, [pc, #160]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	4313      	orrs	r3, r2
 8003a78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003a7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a80:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fd ff28 	bl	80018e0 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fd ff24 	bl	80018e0 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e057      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x478>
 8003ab2:	e04f      	b.n	8003b54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd ff0e 	bl	80018e0 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd ff0a 	bl	80018e0 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e03d      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	4b03      	ldr	r3, [pc, #12]	@ (8003ae8 <HAL_RCC_OscConfig+0x4cc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4ac>
 8003ae6:	e035      	b.n	8003b54 <HAL_RCC_OscConfig+0x538>
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_RCC_OscConfig+0x544>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d028      	beq.n	8003b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d121      	bne.n	8003b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d11a      	bne.n	8003b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d111      	bne.n	8003b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0d0      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d910      	bls.n	8003bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b67      	ldr	r3, [pc, #412]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 020f 	bic.w	r2, r3, #15
 8003b92:	4965      	ldr	r1, [pc, #404]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b63      	ldr	r3, [pc, #396]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0b8      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc4:	4b59      	ldr	r3, [pc, #356]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a58      	ldr	r2, [pc, #352]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bdc:	4b53      	ldr	r3, [pc, #332]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a52      	ldr	r2, [pc, #328]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003be6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be8:	4b50      	ldr	r3, [pc, #320]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	494d      	ldr	r1, [pc, #308]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d040      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b47      	ldr	r3, [pc, #284]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d115      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e07f      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	4b41      	ldr	r3, [pc, #260]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e073      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c36:	4b3d      	ldr	r3, [pc, #244]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e06b      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c46:	4b39      	ldr	r3, [pc, #228]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 0203 	bic.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4936      	ldr	r1, [pc, #216]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c58:	f7fd fe42 	bl	80018e0 <HAL_GetTick>
 8003c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c60:	f7fd fe3e 	bl	80018e0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e053      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	4b2d      	ldr	r3, [pc, #180]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 020c 	and.w	r2, r3, #12
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1eb      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c88:	4b27      	ldr	r3, [pc, #156]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d210      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b24      	ldr	r3, [pc, #144]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 020f 	bic.w	r2, r3, #15
 8003c9e:	4922      	ldr	r1, [pc, #136]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b20      	ldr	r3, [pc, #128]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e032      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc4:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4916      	ldr	r1, [pc, #88]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ce2:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	490e      	ldr	r1, [pc, #56]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cf6:	f000 f821 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	490a      	ldr	r1, [pc, #40]	@ (8003d30 <HAL_RCC_ClockConfig+0x1cc>)
 8003d08:	5ccb      	ldrb	r3, [r1, r3]
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	4a09      	ldr	r2, [pc, #36]	@ (8003d34 <HAL_RCC_ClockConfig+0x1d0>)
 8003d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d12:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <HAL_RCC_ClockConfig+0x1d4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd fb0c 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023c00 	.word	0x40023c00
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	0801ad98 	.word	0x0801ad98
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000004 	.word	0x20000004

08003d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d40:	b094      	sub	sp, #80	@ 0x50
 8003d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d48:	2300      	movs	r3, #0
 8003d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d54:	4b79      	ldr	r3, [pc, #484]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d00d      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x40>
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	f200 80e1 	bhi.w	8003f28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x34>
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d6e:	e0db      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b73      	ldr	r3, [pc, #460]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d74:	e0db      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d76:	4b73      	ldr	r3, [pc, #460]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d7a:	e0d8      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d86:	4b6d      	ldr	r3, [pc, #436]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d063      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b6a      	ldr	r3, [pc, #424]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	2200      	movs	r2, #0
 8003d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da6:	2300      	movs	r3, #0
 8003da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003daa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dae:	4622      	mov	r2, r4
 8003db0:	462b      	mov	r3, r5
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	0159      	lsls	r1, r3, #5
 8003dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc0:	0150      	lsls	r0, r2, #5
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	1a51      	subs	r1, r2, r1
 8003dca:	6139      	str	r1, [r7, #16]
 8003dcc:	4629      	mov	r1, r5
 8003dce:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de0:	4659      	mov	r1, fp
 8003de2:	018b      	lsls	r3, r1, #6
 8003de4:	4651      	mov	r1, sl
 8003de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dea:	4651      	mov	r1, sl
 8003dec:	018a      	lsls	r2, r1, #6
 8003dee:	4651      	mov	r1, sl
 8003df0:	ebb2 0801 	subs.w	r8, r2, r1
 8003df4:	4659      	mov	r1, fp
 8003df6:	eb63 0901 	sbc.w	r9, r3, r1
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0e:	4690      	mov	r8, r2
 8003e10:	4699      	mov	r9, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	eb18 0303 	adds.w	r3, r8, r3
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	eb49 0303 	adc.w	r3, r9, r3
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	024b      	lsls	r3, r1, #9
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e38:	4621      	mov	r1, r4
 8003e3a:	024a      	lsls	r2, r1, #9
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e42:	2200      	movs	r2, #0
 8003e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e4c:	f7fc fa38 	bl	80002c0 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4613      	mov	r3, r2
 8003e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e58:	e058      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5a:	4b38      	ldr	r3, [pc, #224]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	2200      	movs	r2, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	4611      	mov	r1, r2
 8003e66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e6a:	623b      	str	r3, [r7, #32]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	f04f 0000 	mov.w	r0, #0
 8003e7c:	f04f 0100 	mov.w	r1, #0
 8003e80:	0159      	lsls	r1, r3, #5
 8003e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e86:	0150      	lsls	r0, r2, #5
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e92:	4649      	mov	r1, r9
 8003e94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eac:	ebb2 040a 	subs.w	r4, r2, sl
 8003eb0:	eb63 050b 	sbc.w	r5, r3, fp
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	00eb      	lsls	r3, r5, #3
 8003ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec2:	00e2      	lsls	r2, r4, #3
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	461d      	mov	r5, r3
 8003ec8:	4643      	mov	r3, r8
 8003eca:	18e3      	adds	r3, r4, r3
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	464b      	mov	r3, r9
 8003ed0:	eb45 0303 	adc.w	r3, r5, r3
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	028b      	lsls	r3, r1, #10
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eec:	4621      	mov	r1, r4
 8003eee:	028a      	lsls	r2, r1, #10
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	61fa      	str	r2, [r7, #28]
 8003efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f00:	f7fc f9de 	bl	80002c0 <__aeabi_uldivmod>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4613      	mov	r3, r2
 8003f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f26:	e002      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3750      	adds	r7, #80	@ 0x50
 8003f34:	46bd      	mov	sp, r7
 8003f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	007a1200 	.word	0x007a1200

08003f48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	@ (8003f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000000 	.word	0x20000000

08003f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f64:	f7ff fff0 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0a9b      	lsrs	r3, r3, #10
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	@ (8003f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	0801ada8 	.word	0x0801ada8

08003f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f8c:	f7ff ffdc 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0b5b      	lsrs	r3, r3, #13
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4903      	ldr	r1, [pc, #12]	@ (8003fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	0801ada8 	.word	0x0801ada8

08003fb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	220f      	movs	r2, #15
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fc0:	4b12      	ldr	r3, [pc, #72]	@ (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0203 	and.w	r2, r3, #3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003fe4:	4b09      	ldr	r3, [pc, #36]	@ (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	08db      	lsrs	r3, r3, #3
 8003fea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ff2:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <HAL_RCC_GetClockConfig+0x60>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 020f 	and.w	r2, r3, #15
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40023c00 	.word	0x40023c00

08004014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800403c:	4b69      	ldr	r3, [pc, #420]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a68      	ldr	r2, [pc, #416]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004042:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004046:	6093      	str	r3, [r2, #8]
 8004048:	4b66      	ldr	r3, [pc, #408]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004050:	4964      	ldr	r1, [pc, #400]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800405e:	2301      	movs	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d017      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800406e:	4b5d      	ldr	r3, [pc, #372]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004074:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407c:	4959      	ldr	r1, [pc, #356]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800408c:	d101      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800408e:	2301      	movs	r3, #1
 8004090:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800409a:	2301      	movs	r3, #1
 800409c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d017      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040aa:	4b4e      	ldr	r3, [pc, #312]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	494a      	ldr	r1, [pc, #296]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040c8:	d101      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040d6:	2301      	movs	r3, #1
 80040d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040e6:	2301      	movs	r3, #1
 80040e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 808b 	beq.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b3a      	ldr	r3, [pc, #232]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	4a39      	ldr	r2, [pc, #228]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004102:	6413      	str	r3, [r2, #64]	@ 0x40
 8004104:	4b37      	ldr	r3, [pc, #220]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004110:	4b35      	ldr	r3, [pc, #212]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a34      	ldr	r2, [pc, #208]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800411a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411c:	f7fd fbe0 	bl	80018e0 <HAL_GetTick>
 8004120:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004124:	f7fd fbdc 	bl	80018e0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	@ 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e357      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004136:	4b2c      	ldr	r3, [pc, #176]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004142:	4b28      	ldr	r3, [pc, #160]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800414a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d035      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	429a      	cmp	r2, r3
 800415e:	d02e      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004160:	4b20      	ldr	r3, [pc, #128]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004168:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800416a:	4b1e      	ldr	r3, [pc, #120]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416e:	4a1d      	ldr	r2, [pc, #116]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004174:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004176:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	4a1a      	ldr	r2, [pc, #104]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004180:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004182:	4a18      	ldr	r2, [pc, #96]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004188:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d114      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fd fba4 	bl	80018e0 <HAL_GetTick>
 8004198:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	e00a      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419c:	f7fd fba0 	bl	80018e0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e319      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b2:	4b0c      	ldr	r3, [pc, #48]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0ee      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ca:	d111      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041d8:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041da:	400b      	ands	r3, r1
 80041dc:	4901      	ldr	r1, [pc, #4]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
 80041e2:	e00b      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40007000 	.word	0x40007000
 80041ec:	0ffffcff 	.word	0x0ffffcff
 80041f0:	4baa      	ldr	r3, [pc, #680]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4aa9      	ldr	r2, [pc, #676]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80041fa:	6093      	str	r3, [r2, #8]
 80041fc:	4ba7      	ldr	r3, [pc, #668]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004208:	49a4      	ldr	r1, [pc, #656]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420a:	4313      	orrs	r3, r2
 800420c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d010      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800421a:	4ba0      	ldr	r3, [pc, #640]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004220:	4a9e      	ldr	r2, [pc, #632]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004226:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800422a:	4b9c      	ldr	r3, [pc, #624]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800422c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	4999      	ldr	r1, [pc, #612]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004248:	4b94      	ldr	r3, [pc, #592]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004256:	4991      	ldr	r1, [pc, #580]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800426a:	4b8c      	ldr	r3, [pc, #560]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004270:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004278:	4988      	ldr	r1, [pc, #544]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800428c:	4b83      	ldr	r3, [pc, #524]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004292:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800429a:	4980      	ldr	r1, [pc, #512]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042ae:	4b7b      	ldr	r3, [pc, #492]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042bc:	4977      	ldr	r1, [pc, #476]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042d0:	4b72      	ldr	r3, [pc, #456]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	496f      	ldr	r1, [pc, #444]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042f2:	4b6a      	ldr	r3, [pc, #424]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f8:	f023 020c 	bic.w	r2, r3, #12
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004300:	4966      	ldr	r1, [pc, #408]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004314:	4b61      	ldr	r3, [pc, #388]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004322:	495e      	ldr	r1, [pc, #376]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004336:	4b59      	ldr	r3, [pc, #356]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004344:	4955      	ldr	r1, [pc, #340]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004358:	4b50      	ldr	r3, [pc, #320]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004366:	494d      	ldr	r1, [pc, #308]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800437a:	4b48      	ldr	r3, [pc, #288]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004380:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004388:	4944      	ldr	r1, [pc, #272]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800439c:	4b3f      	ldr	r3, [pc, #252]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043aa:	493c      	ldr	r1, [pc, #240]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043be:	4b37      	ldr	r3, [pc, #220]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043cc:	4933      	ldr	r1, [pc, #204]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043e0:	4b2e      	ldr	r3, [pc, #184]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043ee:	492b      	ldr	r1, [pc, #172]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d011      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004402:	4b26      	ldr	r3, [pc, #152]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004408:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004410:	4922      	ldr	r1, [pc, #136]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800441c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004420:	d101      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004422:	2301      	movs	r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004442:	4b16      	ldr	r3, [pc, #88]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004448:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004450:	4912      	ldr	r1, [pc, #72]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004464:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004474:	4909      	ldr	r1, [pc, #36]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d006      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80d9 	beq.w	8004642 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004490:	4b02      	ldr	r3, [pc, #8]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a01      	ldr	r2, [pc, #4]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004496:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800449a:	e001      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800449c:	40023800 	.word	0x40023800
 80044a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a2:	f7fd fa1d 	bl	80018e0 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044aa:	f7fd fa19 	bl	80018e0 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	@ 0x64
 80044b6:	d901      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e194      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d021      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11d      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044dc:	4b64      	ldr	r3, [pc, #400]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044ea:	4b61      	ldr	r3, [pc, #388]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044f0:	0e1b      	lsrs	r3, r3, #24
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	019a      	lsls	r2, r3, #6
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	431a      	orrs	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	061b      	lsls	r3, r3, #24
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	071b      	lsls	r3, r3, #28
 8004510:	4957      	ldr	r1, [pc, #348]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004536:	2b00      	cmp	r3, #0
 8004538:	d02e      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004542:	d129      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004544:	4b4a      	ldr	r3, [pc, #296]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004552:	4b47      	ldr	r3, [pc, #284]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004558:	0f1b      	lsrs	r3, r3, #28
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	019a      	lsls	r2, r3, #6
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	041b      	lsls	r3, r3, #16
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	431a      	orrs	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	071b      	lsls	r3, r3, #28
 8004578:	493d      	ldr	r1, [pc, #244]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004580:	4b3b      	ldr	r3, [pc, #236]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004586:	f023 021f 	bic.w	r2, r3, #31
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	3b01      	subs	r3, #1
 8004590:	4937      	ldr	r1, [pc, #220]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01d      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045a4:	4b32      	ldr	r3, [pc, #200]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045aa:	0e1b      	lsrs	r3, r3, #24
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b8:	0f1b      	lsrs	r3, r3, #28
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	019a      	lsls	r2, r3, #6
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	431a      	orrs	r2, r3
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	061b      	lsls	r3, r3, #24
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	071b      	lsls	r3, r3, #28
 80045d8:	4925      	ldr	r1, [pc, #148]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d011      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	019a      	lsls	r2, r3, #6
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	061b      	lsls	r3, r3, #24
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	071b      	lsls	r3, r3, #28
 8004608:	4919      	ldr	r1, [pc, #100]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004610:	4b17      	ldr	r3, [pc, #92]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a16      	ldr	r2, [pc, #88]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004616:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800461a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461c:	f7fd f960 	bl	80018e0 <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004624:	f7fd f95c 	bl	80018e0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0d7      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004636:	4b0e      	ldr	r3, [pc, #56]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b01      	cmp	r3, #1
 8004646:	f040 80cd 	bne.w	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800464a:	4b09      	ldr	r3, [pc, #36]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a08      	ldr	r2, [pc, #32]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004656:	f7fd f943 	bl	80018e0 <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800465c:	e00a      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800465e:	f7fd f93f 	bl	80018e0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b64      	cmp	r3, #100	@ 0x64
 800466a:	d903      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0ba      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004670:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004674:	4b5e      	ldr	r3, [pc, #376]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800467c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004680:	d0ed      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d02e      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d12a      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046aa:	4b51      	ldr	r3, [pc, #324]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046b8:	4b4d      	ldr	r3, [pc, #308]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046be:	0f1b      	lsrs	r3, r3, #28
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	019a      	lsls	r2, r3, #6
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	071b      	lsls	r3, r3, #28
 80046de:	4944      	ldr	r1, [pc, #272]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046e6:	4b42      	ldr	r3, [pc, #264]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	493d      	ldr	r1, [pc, #244]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d022      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004714:	d11d      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004716:	4b36      	ldr	r3, [pc, #216]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471c:	0e1b      	lsrs	r3, r3, #24
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004724:	4b32      	ldr	r3, [pc, #200]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472a:	0f1b      	lsrs	r3, r3, #28
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	019a      	lsls	r2, r3, #6
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	431a      	orrs	r2, r3
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	071b      	lsls	r3, r3, #28
 800474a:	4929      	ldr	r1, [pc, #164]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d028      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800475e:	4b24      	ldr	r3, [pc, #144]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004764:	0e1b      	lsrs	r3, r3, #24
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800476c:	4b20      	ldr	r3, [pc, #128]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	0c1b      	lsrs	r3, r3, #16
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	019a      	lsls	r2, r3, #6
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	431a      	orrs	r2, r3
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	061b      	lsls	r3, r3, #24
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	071b      	lsls	r3, r3, #28
 8004792:	4917      	ldr	r1, [pc, #92]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800479a:	4b15      	ldr	r3, [pc, #84]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800479c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a8:	4911      	ldr	r1, [pc, #68]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047b0:	4b0f      	ldr	r3, [pc, #60]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a0e      	ldr	r2, [pc, #56]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047bc:	f7fd f890 	bl	80018e0 <HAL_GetTick>
 80047c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047c4:	f7fd f88c 	bl	80018e0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e007      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047d6:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047e2:	d1ef      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800

080047f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e049      	b.n	800489a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f841 	bl	80048a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f000 f9e8 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d001      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e054      	b.n	800497a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a26      	ldr	r2, [pc, #152]	@ (8004988 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d022      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x80>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048fa:	d01d      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x80>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a22      	ldr	r2, [pc, #136]	@ (800498c <HAL_TIM_Base_Start_IT+0xd4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d018      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x80>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a21      	ldr	r2, [pc, #132]	@ (8004990 <HAL_TIM_Base_Start_IT+0xd8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x80>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1f      	ldr	r2, [pc, #124]	@ (8004994 <HAL_TIM_Base_Start_IT+0xdc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00e      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x80>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1e      	ldr	r2, [pc, #120]	@ (8004998 <HAL_TIM_Base_Start_IT+0xe0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d009      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x80>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <HAL_TIM_Base_Start_IT+0xe4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d004      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x80>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1b      	ldr	r2, [pc, #108]	@ (80049a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d115      	bne.n	8004964 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	4b19      	ldr	r3, [pc, #100]	@ (80049a4 <HAL_TIM_Base_Start_IT+0xec>)
 8004940:	4013      	ands	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b06      	cmp	r3, #6
 8004948:	d015      	beq.n	8004976 <HAL_TIM_Base_Start_IT+0xbe>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004950:	d011      	beq.n	8004976 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0201 	orr.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004962:	e008      	b.n	8004976 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e000      	b.n	8004978 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40010000 	.word	0x40010000
 800498c:	40000400 	.word	0x40000400
 8004990:	40000800 	.word	0x40000800
 8004994:	40000c00 	.word	0x40000c00
 8004998:	40010400 	.word	0x40010400
 800499c:	40014000 	.word	0x40014000
 80049a0:	40001800 	.word	0x40001800
 80049a4:	00010007 	.word	0x00010007

080049a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d020      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0202 	mvn.w	r2, #2
 80049dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f8e9 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f8db 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f8ec 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01b      	beq.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0204 	mvn.w	r2, #4
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f8c3 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f8b5 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8c6 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d020      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0208 	mvn.w	r2, #8
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f89d 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f88f 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8a0 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d020      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0210 	mvn.w	r2, #16
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f877 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f869 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f87a 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0201 	mvn.w	r2, #1
 8004b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc f922 	bl	8000d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f919 	bl	8004d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00c      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f911 	bl	8004d88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00c      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f834 	bl	8004bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00c      	beq.n	8004bae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f06f 0220 	mvn.w	r2, #32
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f8d9 	bl	8004d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a46      	ldr	r2, [pc, #280]	@ (8004d34 <TIM_Base_SetConfig+0x12c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c26:	d00f      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a43      	ldr	r2, [pc, #268]	@ (8004d38 <TIM_Base_SetConfig+0x130>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00b      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a42      	ldr	r2, [pc, #264]	@ (8004d3c <TIM_Base_SetConfig+0x134>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d007      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a41      	ldr	r2, [pc, #260]	@ (8004d40 <TIM_Base_SetConfig+0x138>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a40      	ldr	r2, [pc, #256]	@ (8004d44 <TIM_Base_SetConfig+0x13c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d108      	bne.n	8004c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a35      	ldr	r2, [pc, #212]	@ (8004d34 <TIM_Base_SetConfig+0x12c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c68:	d027      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a32      	ldr	r2, [pc, #200]	@ (8004d38 <TIM_Base_SetConfig+0x130>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d023      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a31      	ldr	r2, [pc, #196]	@ (8004d3c <TIM_Base_SetConfig+0x134>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01f      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a30      	ldr	r2, [pc, #192]	@ (8004d40 <TIM_Base_SetConfig+0x138>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2f      	ldr	r2, [pc, #188]	@ (8004d44 <TIM_Base_SetConfig+0x13c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d017      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d48 <TIM_Base_SetConfig+0x140>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2d      	ldr	r2, [pc, #180]	@ (8004d4c <TIM_Base_SetConfig+0x144>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00f      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d50 <TIM_Base_SetConfig+0x148>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d54 <TIM_Base_SetConfig+0x14c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2a      	ldr	r2, [pc, #168]	@ (8004d58 <TIM_Base_SetConfig+0x150>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a29      	ldr	r2, [pc, #164]	@ (8004d5c <TIM_Base_SetConfig+0x154>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a10      	ldr	r2, [pc, #64]	@ (8004d34 <TIM_Base_SetConfig+0x12c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0xf8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a12      	ldr	r2, [pc, #72]	@ (8004d44 <TIM_Base_SetConfig+0x13c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d103      	bne.n	8004d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d105      	bne.n	8004d26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f023 0201 	bic.w	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	611a      	str	r2, [r3, #16]
  }
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800
 8004d54:	40001800 	.word	0x40001800
 8004d58:	40001c00 	.word	0x40001c00
 8004d5c:	40002000 	.word	0x40002000

08004d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e040      	b.n	8004e30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fc fa58 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	@ 0x24
 8004dc8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fb16 	bl	8005414 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8af 	bl	8004f4c <UART_SetConfig>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e01b      	b.n	8004e30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fb95 	bl	8005558 <UART_CheckIdleState>
 8004e2e:	4603      	mov	r3, r0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	@ 0x28
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d177      	bne.n	8004f40 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <HAL_UART_Transmit+0x24>
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e070      	b.n	8004f42 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2221      	movs	r2, #33	@ 0x21
 8004e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e6e:	f7fc fd37 	bl	80018e0 <HAL_GetTick>
 8004e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8c:	d108      	bne.n	8004ea0 <HAL_UART_Transmit+0x68>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e003      	b.n	8004ea8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ea8:	e02f      	b.n	8004f0a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2180      	movs	r1, #128	@ 0x80
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 fba6 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e03b      	b.n	8004f42 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ede:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e007      	b.n	8004ef8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1c9      	bne.n	8004eaa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2140      	movs	r1, #64	@ 0x40
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fb70 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e005      	b.n	8004f42 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e000      	b.n	8004f42 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4ba6      	ldr	r3, [pc, #664]	@ (8005210 <UART_SetConfig+0x2c4>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	6979      	ldr	r1, [r7, #20]
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a94      	ldr	r2, [pc, #592]	@ (8005214 <UART_SetConfig+0x2c8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d120      	bne.n	800500a <UART_SetConfig+0xbe>
 8004fc8:	4b93      	ldr	r3, [pc, #588]	@ (8005218 <UART_SetConfig+0x2cc>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d816      	bhi.n	8005004 <UART_SetConfig+0xb8>
 8004fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fdc <UART_SetConfig+0x90>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08004ff9 	.word	0x08004ff9
 8004fe4:	08004ff3 	.word	0x08004ff3
 8004fe8:	08004fff 	.word	0x08004fff
 8004fec:	2301      	movs	r3, #1
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e150      	b.n	8005294 <UART_SetConfig+0x348>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	77fb      	strb	r3, [r7, #31]
 8004ff6:	e14d      	b.n	8005294 <UART_SetConfig+0x348>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e14a      	b.n	8005294 <UART_SetConfig+0x348>
 8004ffe:	2308      	movs	r3, #8
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e147      	b.n	8005294 <UART_SetConfig+0x348>
 8005004:	2310      	movs	r3, #16
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e144      	b.n	8005294 <UART_SetConfig+0x348>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a83      	ldr	r2, [pc, #524]	@ (800521c <UART_SetConfig+0x2d0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d132      	bne.n	800507a <UART_SetConfig+0x12e>
 8005014:	4b80      	ldr	r3, [pc, #512]	@ (8005218 <UART_SetConfig+0x2cc>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b0c      	cmp	r3, #12
 8005020:	d828      	bhi.n	8005074 <UART_SetConfig+0x128>
 8005022:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <UART_SetConfig+0xdc>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	0800505d 	.word	0x0800505d
 800502c:	08005075 	.word	0x08005075
 8005030:	08005075 	.word	0x08005075
 8005034:	08005075 	.word	0x08005075
 8005038:	08005069 	.word	0x08005069
 800503c:	08005075 	.word	0x08005075
 8005040:	08005075 	.word	0x08005075
 8005044:	08005075 	.word	0x08005075
 8005048:	08005063 	.word	0x08005063
 800504c:	08005075 	.word	0x08005075
 8005050:	08005075 	.word	0x08005075
 8005054:	08005075 	.word	0x08005075
 8005058:	0800506f 	.word	0x0800506f
 800505c:	2300      	movs	r3, #0
 800505e:	77fb      	strb	r3, [r7, #31]
 8005060:	e118      	b.n	8005294 <UART_SetConfig+0x348>
 8005062:	2302      	movs	r3, #2
 8005064:	77fb      	strb	r3, [r7, #31]
 8005066:	e115      	b.n	8005294 <UART_SetConfig+0x348>
 8005068:	2304      	movs	r3, #4
 800506a:	77fb      	strb	r3, [r7, #31]
 800506c:	e112      	b.n	8005294 <UART_SetConfig+0x348>
 800506e:	2308      	movs	r3, #8
 8005070:	77fb      	strb	r3, [r7, #31]
 8005072:	e10f      	b.n	8005294 <UART_SetConfig+0x348>
 8005074:	2310      	movs	r3, #16
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e10c      	b.n	8005294 <UART_SetConfig+0x348>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a68      	ldr	r2, [pc, #416]	@ (8005220 <UART_SetConfig+0x2d4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d120      	bne.n	80050c6 <UART_SetConfig+0x17a>
 8005084:	4b64      	ldr	r3, [pc, #400]	@ (8005218 <UART_SetConfig+0x2cc>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800508e:	2b30      	cmp	r3, #48	@ 0x30
 8005090:	d013      	beq.n	80050ba <UART_SetConfig+0x16e>
 8005092:	2b30      	cmp	r3, #48	@ 0x30
 8005094:	d814      	bhi.n	80050c0 <UART_SetConfig+0x174>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d009      	beq.n	80050ae <UART_SetConfig+0x162>
 800509a:	2b20      	cmp	r3, #32
 800509c:	d810      	bhi.n	80050c0 <UART_SetConfig+0x174>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <UART_SetConfig+0x15c>
 80050a2:	2b10      	cmp	r3, #16
 80050a4:	d006      	beq.n	80050b4 <UART_SetConfig+0x168>
 80050a6:	e00b      	b.n	80050c0 <UART_SetConfig+0x174>
 80050a8:	2300      	movs	r3, #0
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e0f2      	b.n	8005294 <UART_SetConfig+0x348>
 80050ae:	2302      	movs	r3, #2
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e0ef      	b.n	8005294 <UART_SetConfig+0x348>
 80050b4:	2304      	movs	r3, #4
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e0ec      	b.n	8005294 <UART_SetConfig+0x348>
 80050ba:	2308      	movs	r3, #8
 80050bc:	77fb      	strb	r3, [r7, #31]
 80050be:	e0e9      	b.n	8005294 <UART_SetConfig+0x348>
 80050c0:	2310      	movs	r3, #16
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e0e6      	b.n	8005294 <UART_SetConfig+0x348>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a56      	ldr	r2, [pc, #344]	@ (8005224 <UART_SetConfig+0x2d8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d120      	bne.n	8005112 <UART_SetConfig+0x1c6>
 80050d0:	4b51      	ldr	r3, [pc, #324]	@ (8005218 <UART_SetConfig+0x2cc>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050da:	2bc0      	cmp	r3, #192	@ 0xc0
 80050dc:	d013      	beq.n	8005106 <UART_SetConfig+0x1ba>
 80050de:	2bc0      	cmp	r3, #192	@ 0xc0
 80050e0:	d814      	bhi.n	800510c <UART_SetConfig+0x1c0>
 80050e2:	2b80      	cmp	r3, #128	@ 0x80
 80050e4:	d009      	beq.n	80050fa <UART_SetConfig+0x1ae>
 80050e6:	2b80      	cmp	r3, #128	@ 0x80
 80050e8:	d810      	bhi.n	800510c <UART_SetConfig+0x1c0>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <UART_SetConfig+0x1a8>
 80050ee:	2b40      	cmp	r3, #64	@ 0x40
 80050f0:	d006      	beq.n	8005100 <UART_SetConfig+0x1b4>
 80050f2:	e00b      	b.n	800510c <UART_SetConfig+0x1c0>
 80050f4:	2300      	movs	r3, #0
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e0cc      	b.n	8005294 <UART_SetConfig+0x348>
 80050fa:	2302      	movs	r3, #2
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e0c9      	b.n	8005294 <UART_SetConfig+0x348>
 8005100:	2304      	movs	r3, #4
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e0c6      	b.n	8005294 <UART_SetConfig+0x348>
 8005106:	2308      	movs	r3, #8
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e0c3      	b.n	8005294 <UART_SetConfig+0x348>
 800510c:	2310      	movs	r3, #16
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e0c0      	b.n	8005294 <UART_SetConfig+0x348>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a44      	ldr	r2, [pc, #272]	@ (8005228 <UART_SetConfig+0x2dc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d125      	bne.n	8005168 <UART_SetConfig+0x21c>
 800511c:	4b3e      	ldr	r3, [pc, #248]	@ (8005218 <UART_SetConfig+0x2cc>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800512a:	d017      	beq.n	800515c <UART_SetConfig+0x210>
 800512c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005130:	d817      	bhi.n	8005162 <UART_SetConfig+0x216>
 8005132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005136:	d00b      	beq.n	8005150 <UART_SetConfig+0x204>
 8005138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800513c:	d811      	bhi.n	8005162 <UART_SetConfig+0x216>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <UART_SetConfig+0x1fe>
 8005142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005146:	d006      	beq.n	8005156 <UART_SetConfig+0x20a>
 8005148:	e00b      	b.n	8005162 <UART_SetConfig+0x216>
 800514a:	2300      	movs	r3, #0
 800514c:	77fb      	strb	r3, [r7, #31]
 800514e:	e0a1      	b.n	8005294 <UART_SetConfig+0x348>
 8005150:	2302      	movs	r3, #2
 8005152:	77fb      	strb	r3, [r7, #31]
 8005154:	e09e      	b.n	8005294 <UART_SetConfig+0x348>
 8005156:	2304      	movs	r3, #4
 8005158:	77fb      	strb	r3, [r7, #31]
 800515a:	e09b      	b.n	8005294 <UART_SetConfig+0x348>
 800515c:	2308      	movs	r3, #8
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e098      	b.n	8005294 <UART_SetConfig+0x348>
 8005162:	2310      	movs	r3, #16
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e095      	b.n	8005294 <UART_SetConfig+0x348>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2f      	ldr	r2, [pc, #188]	@ (800522c <UART_SetConfig+0x2e0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d125      	bne.n	80051be <UART_SetConfig+0x272>
 8005172:	4b29      	ldr	r3, [pc, #164]	@ (8005218 <UART_SetConfig+0x2cc>)
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005178:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800517c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005180:	d017      	beq.n	80051b2 <UART_SetConfig+0x266>
 8005182:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005186:	d817      	bhi.n	80051b8 <UART_SetConfig+0x26c>
 8005188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800518c:	d00b      	beq.n	80051a6 <UART_SetConfig+0x25a>
 800518e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005192:	d811      	bhi.n	80051b8 <UART_SetConfig+0x26c>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <UART_SetConfig+0x254>
 8005198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800519c:	d006      	beq.n	80051ac <UART_SetConfig+0x260>
 800519e:	e00b      	b.n	80051b8 <UART_SetConfig+0x26c>
 80051a0:	2301      	movs	r3, #1
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e076      	b.n	8005294 <UART_SetConfig+0x348>
 80051a6:	2302      	movs	r3, #2
 80051a8:	77fb      	strb	r3, [r7, #31]
 80051aa:	e073      	b.n	8005294 <UART_SetConfig+0x348>
 80051ac:	2304      	movs	r3, #4
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	e070      	b.n	8005294 <UART_SetConfig+0x348>
 80051b2:	2308      	movs	r3, #8
 80051b4:	77fb      	strb	r3, [r7, #31]
 80051b6:	e06d      	b.n	8005294 <UART_SetConfig+0x348>
 80051b8:	2310      	movs	r3, #16
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e06a      	b.n	8005294 <UART_SetConfig+0x348>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005230 <UART_SetConfig+0x2e4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d138      	bne.n	800523a <UART_SetConfig+0x2ee>
 80051c8:	4b13      	ldr	r3, [pc, #76]	@ (8005218 <UART_SetConfig+0x2cc>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80051d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051d6:	d017      	beq.n	8005208 <UART_SetConfig+0x2bc>
 80051d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051dc:	d82a      	bhi.n	8005234 <UART_SetConfig+0x2e8>
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e2:	d00b      	beq.n	80051fc <UART_SetConfig+0x2b0>
 80051e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e8:	d824      	bhi.n	8005234 <UART_SetConfig+0x2e8>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <UART_SetConfig+0x2aa>
 80051ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f2:	d006      	beq.n	8005202 <UART_SetConfig+0x2b6>
 80051f4:	e01e      	b.n	8005234 <UART_SetConfig+0x2e8>
 80051f6:	2300      	movs	r3, #0
 80051f8:	77fb      	strb	r3, [r7, #31]
 80051fa:	e04b      	b.n	8005294 <UART_SetConfig+0x348>
 80051fc:	2302      	movs	r3, #2
 80051fe:	77fb      	strb	r3, [r7, #31]
 8005200:	e048      	b.n	8005294 <UART_SetConfig+0x348>
 8005202:	2304      	movs	r3, #4
 8005204:	77fb      	strb	r3, [r7, #31]
 8005206:	e045      	b.n	8005294 <UART_SetConfig+0x348>
 8005208:	2308      	movs	r3, #8
 800520a:	77fb      	strb	r3, [r7, #31]
 800520c:	e042      	b.n	8005294 <UART_SetConfig+0x348>
 800520e:	bf00      	nop
 8005210:	efff69f3 	.word	0xefff69f3
 8005214:	40011000 	.word	0x40011000
 8005218:	40023800 	.word	0x40023800
 800521c:	40004400 	.word	0x40004400
 8005220:	40004800 	.word	0x40004800
 8005224:	40004c00 	.word	0x40004c00
 8005228:	40005000 	.word	0x40005000
 800522c:	40011400 	.word	0x40011400
 8005230:	40007800 	.word	0x40007800
 8005234:	2310      	movs	r3, #16
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e02c      	b.n	8005294 <UART_SetConfig+0x348>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a72      	ldr	r2, [pc, #456]	@ (8005408 <UART_SetConfig+0x4bc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d125      	bne.n	8005290 <UART_SetConfig+0x344>
 8005244:	4b71      	ldr	r3, [pc, #452]	@ (800540c <UART_SetConfig+0x4c0>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800524e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005252:	d017      	beq.n	8005284 <UART_SetConfig+0x338>
 8005254:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005258:	d817      	bhi.n	800528a <UART_SetConfig+0x33e>
 800525a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800525e:	d00b      	beq.n	8005278 <UART_SetConfig+0x32c>
 8005260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005264:	d811      	bhi.n	800528a <UART_SetConfig+0x33e>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <UART_SetConfig+0x326>
 800526a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800526e:	d006      	beq.n	800527e <UART_SetConfig+0x332>
 8005270:	e00b      	b.n	800528a <UART_SetConfig+0x33e>
 8005272:	2300      	movs	r3, #0
 8005274:	77fb      	strb	r3, [r7, #31]
 8005276:	e00d      	b.n	8005294 <UART_SetConfig+0x348>
 8005278:	2302      	movs	r3, #2
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e00a      	b.n	8005294 <UART_SetConfig+0x348>
 800527e:	2304      	movs	r3, #4
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e007      	b.n	8005294 <UART_SetConfig+0x348>
 8005284:	2308      	movs	r3, #8
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e004      	b.n	8005294 <UART_SetConfig+0x348>
 800528a:	2310      	movs	r3, #16
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e001      	b.n	8005294 <UART_SetConfig+0x348>
 8005290:	2310      	movs	r3, #16
 8005292:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800529c:	d15b      	bne.n	8005356 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800529e:	7ffb      	ldrb	r3, [r7, #31]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d828      	bhi.n	80052f6 <UART_SetConfig+0x3aa>
 80052a4:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <UART_SetConfig+0x360>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052f7 	.word	0x080052f7
 80052c4:	080052f7 	.word	0x080052f7
 80052c8:	080052f7 	.word	0x080052f7
 80052cc:	080052ef 	.word	0x080052ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fe fe46 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 80052d4:	61b8      	str	r0, [r7, #24]
        break;
 80052d6:	e013      	b.n	8005300 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d8:	f7fe fe56 	bl	8003f88 <HAL_RCC_GetPCLK2Freq>
 80052dc:	61b8      	str	r0, [r7, #24]
        break;
 80052de:	e00f      	b.n	8005300 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005410 <UART_SetConfig+0x4c4>)
 80052e2:	61bb      	str	r3, [r7, #24]
        break;
 80052e4:	e00c      	b.n	8005300 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7fe fd29 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 80052ea:	61b8      	str	r0, [r7, #24]
        break;
 80052ec:	e008      	b.n	8005300 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052f2:	61bb      	str	r3, [r7, #24]
        break;
 80052f4:	e004      	b.n	8005300 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	77bb      	strb	r3, [r7, #30]
        break;
 80052fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d074      	beq.n	80053f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	005a      	lsls	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b0f      	cmp	r3, #15
 8005320:	d916      	bls.n	8005350 <UART_SetConfig+0x404>
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005328:	d212      	bcs.n	8005350 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f023 030f 	bic.w	r3, r3, #15
 8005332:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	b29b      	uxth	r3, r3
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	b29a      	uxth	r2, r3
 8005340:	89fb      	ldrh	r3, [r7, #14]
 8005342:	4313      	orrs	r3, r2
 8005344:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	89fa      	ldrh	r2, [r7, #14]
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	e04f      	b.n	80053f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	77bb      	strb	r3, [r7, #30]
 8005354:	e04c      	b.n	80053f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005356:	7ffb      	ldrb	r3, [r7, #31]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d828      	bhi.n	80053ae <UART_SetConfig+0x462>
 800535c:	a201      	add	r2, pc, #4	@ (adr r2, 8005364 <UART_SetConfig+0x418>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005389 	.word	0x08005389
 8005368:	08005391 	.word	0x08005391
 800536c:	08005399 	.word	0x08005399
 8005370:	080053af 	.word	0x080053af
 8005374:	0800539f 	.word	0x0800539f
 8005378:	080053af 	.word	0x080053af
 800537c:	080053af 	.word	0x080053af
 8005380:	080053af 	.word	0x080053af
 8005384:	080053a7 	.word	0x080053a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fe fdea 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 800538c:	61b8      	str	r0, [r7, #24]
        break;
 800538e:	e013      	b.n	80053b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005390:	f7fe fdfa 	bl	8003f88 <HAL_RCC_GetPCLK2Freq>
 8005394:	61b8      	str	r0, [r7, #24]
        break;
 8005396:	e00f      	b.n	80053b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005398:	4b1d      	ldr	r3, [pc, #116]	@ (8005410 <UART_SetConfig+0x4c4>)
 800539a:	61bb      	str	r3, [r7, #24]
        break;
 800539c:	e00c      	b.n	80053b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800539e:	f7fe fccd 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 80053a2:	61b8      	str	r0, [r7, #24]
        break;
 80053a4:	e008      	b.n	80053b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053aa:	61bb      	str	r3, [r7, #24]
        break;
 80053ac:	e004      	b.n	80053b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	77bb      	strb	r3, [r7, #30]
        break;
 80053b6:	bf00      	nop
    }

    if (pclk != 0U)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d018      	beq.n	80053f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	085a      	lsrs	r2, r3, #1
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	441a      	add	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b0f      	cmp	r3, #15
 80053d6:	d909      	bls.n	80053ec <UART_SetConfig+0x4a0>
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053de:	d205      	bcs.n	80053ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	e001      	b.n	80053f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40007c00 	.word	0x40007c00
 800540c:	40023800 	.word	0x40023800
 8005410:	00f42400 	.word	0x00f42400

08005414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01a      	beq.n	800552a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005512:	d10a      	bne.n	800552a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08c      	sub	sp, #48	@ 0x30
 800555c:	af02      	add	r7, sp, #8
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005568:	f7fc f9ba 	bl	80018e0 <HAL_GetTick>
 800556c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b08      	cmp	r3, #8
 800557a:	d12e      	bne.n	80055da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800557c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	2200      	movs	r2, #0
 8005586:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f83b 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d021      	beq.n	80055da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	69b9      	ldr	r1, [r7, #24]
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	617b      	str	r3, [r7, #20]
   return(result);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e6      	bne.n	8005596 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e011      	b.n	80055fe <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3728      	adds	r7, #40	@ 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	4613      	mov	r3, r2
 8005614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005616:	e04f      	b.n	80056b8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d04b      	beq.n	80056b8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005620:	f7fc f95e 	bl	80018e0 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <UART_WaitOnFlagUntilTimeout+0x30>
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e04e      	b.n	80056d8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d037      	beq.n	80056b8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b80      	cmp	r3, #128	@ 0x80
 800564c:	d034      	beq.n	80056b8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d031      	beq.n	80056b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b08      	cmp	r3, #8
 8005660:	d110      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2208      	movs	r2, #8
 8005668:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f838 	bl	80056e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2208      	movs	r2, #8
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e029      	b.n	80056d8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005692:	d111      	bne.n	80056b8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800569c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f81e 	bl	80056e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e00f      	b.n	80056d8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4013      	ands	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d0a0      	beq.n	8005618 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b095      	sub	sp, #84	@ 0x54
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005706:	643b      	str	r3, [r7, #64]	@ 0x40
 8005708:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800570c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e6      	bne.n	80056e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	61fb      	str	r3, [r7, #28]
   return(result);
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800573a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800573c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005752:	2b01      	cmp	r3, #1
 8005754:	d118      	bne.n	8005788 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	60bb      	str	r3, [r7, #8]
   return(result);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f023 0310 	bic.w	r3, r3, #16
 800576a:	647b      	str	r3, [r7, #68]	@ 0x44
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6979      	ldr	r1, [r7, #20]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	613b      	str	r3, [r7, #16]
   return(result);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e6      	bne.n	8005756 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800579c:	bf00      	nop
 800579e:	3754      	adds	r7, #84	@ 0x54
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80057a8:	b5b0      	push	{r4, r5, r7, lr}
 80057aa:	b08c      	sub	sp, #48	@ 0x30
 80057ac:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80057ae:	4b8f      	ldr	r3, [pc, #572]	@ (80059ec <MX_LWIP_Init+0x244>)
 80057b0:	22c0      	movs	r2, #192	@ 0xc0
 80057b2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80057b4:	4b8d      	ldr	r3, [pc, #564]	@ (80059ec <MX_LWIP_Init+0x244>)
 80057b6:	22a8      	movs	r2, #168	@ 0xa8
 80057b8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 31;
 80057ba:	4b8c      	ldr	r3, [pc, #560]	@ (80059ec <MX_LWIP_Init+0x244>)
 80057bc:	221f      	movs	r2, #31
 80057be:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 120;
 80057c0:	4b8a      	ldr	r3, [pc, #552]	@ (80059ec <MX_LWIP_Init+0x244>)
 80057c2:	2278      	movs	r2, #120	@ 0x78
 80057c4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80057c6:	4b8a      	ldr	r3, [pc, #552]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80057c8:	22ff      	movs	r2, #255	@ 0xff
 80057ca:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80057cc:	4b88      	ldr	r3, [pc, #544]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80057ce:	22ff      	movs	r2, #255	@ 0xff
 80057d0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80057d2:	4b87      	ldr	r3, [pc, #540]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80057d4:	22ff      	movs	r2, #255	@ 0xff
 80057d6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80057d8:	4b85      	ldr	r3, [pc, #532]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80057da:	2200      	movs	r2, #0
 80057dc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80057de:	4b85      	ldr	r3, [pc, #532]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 80057e0:	22c0      	movs	r2, #192	@ 0xc0
 80057e2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80057e4:	4b83      	ldr	r3, [pc, #524]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 80057e6:	22a8      	movs	r2, #168	@ 0xa8
 80057e8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 31;
 80057ea:	4b82      	ldr	r3, [pc, #520]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 80057ec:	221f      	movs	r2, #31
 80057ee:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80057f0:	4b80      	ldr	r3, [pc, #512]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80057f6:	2100      	movs	r1, #0
 80057f8:	2000      	movs	r0, #0
 80057fa:	f005 feff 	bl	800b5fc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80057fe:	4b7b      	ldr	r3, [pc, #492]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	061a      	lsls	r2, r3, #24
 8005804:	4b79      	ldr	r3, [pc, #484]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	431a      	orrs	r2, r3
 800580c:	4b77      	ldr	r3, [pc, #476]	@ (80059ec <MX_LWIP_Init+0x244>)
 800580e:	789b      	ldrb	r3, [r3, #2]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	4313      	orrs	r3, r2
 8005814:	4a75      	ldr	r2, [pc, #468]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005816:	78d2      	ldrb	r2, [r2, #3]
 8005818:	4313      	orrs	r3, r2
 800581a:	061a      	lsls	r2, r3, #24
 800581c:	4b73      	ldr	r3, [pc, #460]	@ (80059ec <MX_LWIP_Init+0x244>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	0619      	lsls	r1, r3, #24
 8005822:	4b72      	ldr	r3, [pc, #456]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	041b      	lsls	r3, r3, #16
 8005828:	4319      	orrs	r1, r3
 800582a:	4b70      	ldr	r3, [pc, #448]	@ (80059ec <MX_LWIP_Init+0x244>)
 800582c:	789b      	ldrb	r3, [r3, #2]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	430b      	orrs	r3, r1
 8005832:	496e      	ldr	r1, [pc, #440]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005834:	78c9      	ldrb	r1, [r1, #3]
 8005836:	430b      	orrs	r3, r1
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800583e:	431a      	orrs	r2, r3
 8005840:	4b6a      	ldr	r3, [pc, #424]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	0619      	lsls	r1, r3, #24
 8005846:	4b69      	ldr	r3, [pc, #420]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	4319      	orrs	r1, r3
 800584e:	4b67      	ldr	r3, [pc, #412]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005850:	789b      	ldrb	r3, [r3, #2]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	430b      	orrs	r3, r1
 8005856:	4965      	ldr	r1, [pc, #404]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005858:	78c9      	ldrb	r1, [r1, #3]
 800585a:	430b      	orrs	r3, r1
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005862:	431a      	orrs	r2, r3
 8005864:	4b61      	ldr	r3, [pc, #388]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	0619      	lsls	r1, r3, #24
 800586a:	4b60      	ldr	r3, [pc, #384]	@ (80059ec <MX_LWIP_Init+0x244>)
 800586c:	785b      	ldrb	r3, [r3, #1]
 800586e:	041b      	lsls	r3, r3, #16
 8005870:	4319      	orrs	r1, r3
 8005872:	4b5e      	ldr	r3, [pc, #376]	@ (80059ec <MX_LWIP_Init+0x244>)
 8005874:	789b      	ldrb	r3, [r3, #2]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	430b      	orrs	r3, r1
 800587a:	495c      	ldr	r1, [pc, #368]	@ (80059ec <MX_LWIP_Init+0x244>)
 800587c:	78c9      	ldrb	r1, [r1, #3]
 800587e:	430b      	orrs	r3, r1
 8005880:	0e1b      	lsrs	r3, r3, #24
 8005882:	4313      	orrs	r3, r2
 8005884:	4a5c      	ldr	r2, [pc, #368]	@ (80059f8 <MX_LWIP_Init+0x250>)
 8005886:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005888:	4b59      	ldr	r3, [pc, #356]	@ (80059f0 <MX_LWIP_Init+0x248>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	061a      	lsls	r2, r3, #24
 800588e:	4b58      	ldr	r3, [pc, #352]	@ (80059f0 <MX_LWIP_Init+0x248>)
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	431a      	orrs	r2, r3
 8005896:	4b56      	ldr	r3, [pc, #344]	@ (80059f0 <MX_LWIP_Init+0x248>)
 8005898:	789b      	ldrb	r3, [r3, #2]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	4313      	orrs	r3, r2
 800589e:	4a54      	ldr	r2, [pc, #336]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058a0:	78d2      	ldrb	r2, [r2, #3]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	061a      	lsls	r2, r3, #24
 80058a6:	4b52      	ldr	r3, [pc, #328]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	0619      	lsls	r1, r3, #24
 80058ac:	4b50      	ldr	r3, [pc, #320]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	4319      	orrs	r1, r3
 80058b4:	4b4e      	ldr	r3, [pc, #312]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058b6:	789b      	ldrb	r3, [r3, #2]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	430b      	orrs	r3, r1
 80058bc:	494c      	ldr	r1, [pc, #304]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058be:	78c9      	ldrb	r1, [r1, #3]
 80058c0:	430b      	orrs	r3, r1
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80058c8:	431a      	orrs	r2, r3
 80058ca:	4b49      	ldr	r3, [pc, #292]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	0619      	lsls	r1, r3, #24
 80058d0:	4b47      	ldr	r3, [pc, #284]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	041b      	lsls	r3, r3, #16
 80058d6:	4319      	orrs	r1, r3
 80058d8:	4b45      	ldr	r3, [pc, #276]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058da:	789b      	ldrb	r3, [r3, #2]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	430b      	orrs	r3, r1
 80058e0:	4943      	ldr	r1, [pc, #268]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058e2:	78c9      	ldrb	r1, [r1, #3]
 80058e4:	430b      	orrs	r3, r1
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80058ec:	431a      	orrs	r2, r3
 80058ee:	4b40      	ldr	r3, [pc, #256]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	0619      	lsls	r1, r3, #24
 80058f4:	4b3e      	ldr	r3, [pc, #248]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	041b      	lsls	r3, r3, #16
 80058fa:	4319      	orrs	r1, r3
 80058fc:	4b3c      	ldr	r3, [pc, #240]	@ (80059f0 <MX_LWIP_Init+0x248>)
 80058fe:	789b      	ldrb	r3, [r3, #2]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	430b      	orrs	r3, r1
 8005904:	493a      	ldr	r1, [pc, #232]	@ (80059f0 <MX_LWIP_Init+0x248>)
 8005906:	78c9      	ldrb	r1, [r1, #3]
 8005908:	430b      	orrs	r3, r1
 800590a:	0e1b      	lsrs	r3, r3, #24
 800590c:	4313      	orrs	r3, r2
 800590e:	4a3b      	ldr	r2, [pc, #236]	@ (80059fc <MX_LWIP_Init+0x254>)
 8005910:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005912:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	061a      	lsls	r2, r3, #24
 8005918:	4b36      	ldr	r3, [pc, #216]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	041b      	lsls	r3, r3, #16
 800591e:	431a      	orrs	r2, r3
 8005920:	4b34      	ldr	r3, [pc, #208]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005922:	789b      	ldrb	r3, [r3, #2]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	4313      	orrs	r3, r2
 8005928:	4a32      	ldr	r2, [pc, #200]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 800592a:	78d2      	ldrb	r2, [r2, #3]
 800592c:	4313      	orrs	r3, r2
 800592e:	061a      	lsls	r2, r3, #24
 8005930:	4b30      	ldr	r3, [pc, #192]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	0619      	lsls	r1, r3, #24
 8005936:	4b2f      	ldr	r3, [pc, #188]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	4319      	orrs	r1, r3
 800593e:	4b2d      	ldr	r3, [pc, #180]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005940:	789b      	ldrb	r3, [r3, #2]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	430b      	orrs	r3, r1
 8005946:	492b      	ldr	r1, [pc, #172]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005948:	78c9      	ldrb	r1, [r1, #3]
 800594a:	430b      	orrs	r3, r1
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005952:	431a      	orrs	r2, r3
 8005954:	4b27      	ldr	r3, [pc, #156]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	0619      	lsls	r1, r3, #24
 800595a:	4b26      	ldr	r3, [pc, #152]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	4319      	orrs	r1, r3
 8005962:	4b24      	ldr	r3, [pc, #144]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005964:	789b      	ldrb	r3, [r3, #2]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	430b      	orrs	r3, r1
 800596a:	4922      	ldr	r1, [pc, #136]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 800596c:	78c9      	ldrb	r1, [r1, #3]
 800596e:	430b      	orrs	r3, r1
 8005970:	0a1b      	lsrs	r3, r3, #8
 8005972:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005976:	431a      	orrs	r2, r3
 8005978:	4b1e      	ldr	r3, [pc, #120]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	0619      	lsls	r1, r3, #24
 800597e:	4b1d      	ldr	r3, [pc, #116]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	4319      	orrs	r1, r3
 8005986:	4b1b      	ldr	r3, [pc, #108]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005988:	789b      	ldrb	r3, [r3, #2]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	430b      	orrs	r3, r1
 800598e:	4919      	ldr	r1, [pc, #100]	@ (80059f4 <MX_LWIP_Init+0x24c>)
 8005990:	78c9      	ldrb	r1, [r1, #3]
 8005992:	430b      	orrs	r3, r1
 8005994:	0e1b      	lsrs	r3, r3, #24
 8005996:	4313      	orrs	r3, r2
 8005998:	4a19      	ldr	r2, [pc, #100]	@ (8005a00 <MX_LWIP_Init+0x258>)
 800599a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800599c:	4b19      	ldr	r3, [pc, #100]	@ (8005a04 <MX_LWIP_Init+0x25c>)
 800599e:	9302      	str	r3, [sp, #8]
 80059a0:	4b19      	ldr	r3, [pc, #100]	@ (8005a08 <MX_LWIP_Init+0x260>)
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	2300      	movs	r3, #0
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	4b15      	ldr	r3, [pc, #84]	@ (8005a00 <MX_LWIP_Init+0x258>)
 80059aa:	4a14      	ldr	r2, [pc, #80]	@ (80059fc <MX_LWIP_Init+0x254>)
 80059ac:	4912      	ldr	r1, [pc, #72]	@ (80059f8 <MX_LWIP_Init+0x250>)
 80059ae:	4817      	ldr	r0, [pc, #92]	@ (8005a0c <MX_LWIP_Init+0x264>)
 80059b0:	f006 fbee 	bl	800c190 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80059b4:	4815      	ldr	r0, [pc, #84]	@ (8005a0c <MX_LWIP_Init+0x264>)
 80059b6:	f006 fd9d 	bl	800c4f4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80059ba:	4814      	ldr	r0, [pc, #80]	@ (8005a0c <MX_LWIP_Init+0x264>)
 80059bc:	f006 fdaa 	bl	800c514 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80059c0:	4913      	ldr	r1, [pc, #76]	@ (8005a10 <MX_LWIP_Init+0x268>)
 80059c2:	4812      	ldr	r0, [pc, #72]	@ (8005a0c <MX_LWIP_Init+0x264>)
 80059c4:	f006 fea8 	bl	800c718 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80059c8:	4b12      	ldr	r3, [pc, #72]	@ (8005a14 <MX_LWIP_Init+0x26c>)
 80059ca:	1d3c      	adds	r4, r7, #4
 80059cc:	461d      	mov	r5, r3
 80059ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80059d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80059da:	1d3b      	adds	r3, r7, #4
 80059dc:	490b      	ldr	r1, [pc, #44]	@ (8005a0c <MX_LWIP_Init+0x264>)
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fdcb 	bl	800657a <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80059e4:	bf00      	nop
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bdb0      	pop	{r4, r5, r7, pc}
 80059ec:	20000604 	.word	0x20000604
 80059f0:	20000608 	.word	0x20000608
 80059f4:	2000060c 	.word	0x2000060c
 80059f8:	200005f8 	.word	0x200005f8
 80059fc:	200005fc 	.word	0x200005fc
 8005a00:	20000600 	.word	0x20000600
 8005a04:	0800b50d 	.word	0x0800b50d
 8005a08:	08005fb1 	.word	0x08005fb1
 8005a0c:	200005c4 	.word	0x200005c4
 8005a10:	08005a19 	.word	0x08005a19
 8005a14:	08017998 	.word	0x08017998

08005a18 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005a3e:	2320      	movs	r3, #32
 8005a40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a42:	f3bf 8f4f 	dsb	sy
}
 8005a46:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005a48:	e00b      	b.n	8005a62 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a80 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dcf0      	bgt.n	8005a4a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005a68:	f3bf 8f4f 	dsb	sy
}
 8005a6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a6e:	f3bf 8f6f 	isb	sy
}
 8005a72:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005a74:	bf00      	nop
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005a8c:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <HAL_ETH_RxCpltCallback+0x1c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fefb 	bl	800688c <osSemaphoreRelease>
}
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20004f9c 	.word	0x20004f9c

08005aa4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005aac:	4b04      	ldr	r3, [pc, #16]	@ (8005ac0 <HAL_ETH_TxCpltCallback+0x1c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 feeb 	bl	800688c <osSemaphoreRelease>
}
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20004fa0 	.word	0x20004fa0

08005ac4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fc fe6e 	bl	80027ae <HAL_ETH_GetDMAError>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad8:	2b80      	cmp	r3, #128	@ 0x80
 8005ada:	d104      	bne.n	8005ae6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005adc:	4b04      	ldr	r3, [pc, #16]	@ (8005af0 <HAL_ETH_ErrorCallback+0x2c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fed3 	bl	800688c <osSemaphoreRelease>
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20004f9c 	.word	0x20004f9c

08005af4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005af4:	b5b0      	push	{r4, r5, r7, lr}
 8005af6:	b0b4      	sub	sp, #208	@ 0xd0
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8005b0e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005b12:	2264      	movs	r2, #100	@ 0x64
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f010 ff61 	bl	80169de <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005b1c:	4b9f      	ldr	r3, [pc, #636]	@ (8005d9c <low_level_init+0x2a8>)
 8005b1e:	4aa0      	ldr	r2, [pc, #640]	@ (8005da0 <low_level_init+0x2ac>)
 8005b20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x80;
 8005b22:	2380      	movs	r3, #128	@ 0x80
 8005b24:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x34;
 8005b28:	2334      	movs	r3, #52	@ 0x34
 8005b2a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0x28;
 8005b2e:	2328      	movs	r3, #40	@ 0x28
 8005b30:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x74;
 8005b34:	2374      	movs	r3, #116	@ 0x74
 8005b36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0xA5;
 8005b3a:	23a5      	movs	r3, #165	@ 0xa5
 8005b3c:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0xCB;
 8005b40:	23cb      	movs	r3, #203	@ 0xcb
 8005b42:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8005b46:	4a95      	ldr	r2, [pc, #596]	@ (8005d9c <low_level_init+0x2a8>)
 8005b48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005b4c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005b4e:	4b93      	ldr	r3, [pc, #588]	@ (8005d9c <low_level_init+0x2a8>)
 8005b50:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005b54:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005b56:	4b91      	ldr	r3, [pc, #580]	@ (8005d9c <low_level_init+0x2a8>)
 8005b58:	4a92      	ldr	r2, [pc, #584]	@ (8005da4 <low_level_init+0x2b0>)
 8005b5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005b5c:	4b8f      	ldr	r3, [pc, #572]	@ (8005d9c <low_level_init+0x2a8>)
 8005b5e:	4a92      	ldr	r2, [pc, #584]	@ (8005da8 <low_level_init+0x2b4>)
 8005b60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8005b62:	4b8e      	ldr	r3, [pc, #568]	@ (8005d9c <low_level_init+0x2a8>)
 8005b64:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8005b68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005b6a:	488c      	ldr	r0, [pc, #560]	@ (8005d9c <low_level_init+0x2a8>)
 8005b6c:	f7fb ffd6 	bl	8001b1c <HAL_ETH_Init>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005b76:	2238      	movs	r2, #56	@ 0x38
 8005b78:	2100      	movs	r1, #0
 8005b7a:	488c      	ldr	r0, [pc, #560]	@ (8005dac <low_level_init+0x2b8>)
 8005b7c:	f010 ff2f 	bl	80169de <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005b80:	4b8a      	ldr	r3, [pc, #552]	@ (8005dac <low_level_init+0x2b8>)
 8005b82:	2221      	movs	r2, #33	@ 0x21
 8005b84:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005b86:	4b89      	ldr	r3, [pc, #548]	@ (8005dac <low_level_init+0x2b8>)
 8005b88:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005b8c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005b8e:	4b87      	ldr	r3, [pc, #540]	@ (8005dac <low_level_init+0x2b8>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005b94:	4886      	ldr	r0, [pc, #536]	@ (8005db0 <low_level_init+0x2bc>)
 8005b96:	f006 f9b5 	bl	800bf04 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2206      	movs	r2, #6
 8005b9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ba2:	4b7e      	ldr	r3, [pc, #504]	@ (8005d9c <low_level_init+0x2a8>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005bae:	4b7b      	ldr	r3, [pc, #492]	@ (8005d9c <low_level_init+0x2a8>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	785a      	ldrb	r2, [r3, #1]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005bba:	4b78      	ldr	r3, [pc, #480]	@ (8005d9c <low_level_init+0x2a8>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	789a      	ldrb	r2, [r3, #2]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005bc6:	4b75      	ldr	r3, [pc, #468]	@ (8005d9c <low_level_init+0x2a8>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	78da      	ldrb	r2, [r3, #3]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005bd2:	4b72      	ldr	r3, [pc, #456]	@ (8005d9c <low_level_init+0x2a8>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	791a      	ldrb	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005bde:	4b6f      	ldr	r3, [pc, #444]	@ (8005d9c <low_level_init+0x2a8>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	795a      	ldrb	r2, [r3, #5]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005bf0:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bf8:	f043 030a 	orr.w	r3, r3, #10
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8005c04:	2300      	movs	r3, #0
 8005c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c08:	2300      	movs	r3, #0
 8005c0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8005c0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005c10:	2101      	movs	r1, #1
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fdba 	bl	800678c <osSemaphoreCreate>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	4a66      	ldr	r2, [pc, #408]	@ (8005db4 <low_level_init+0x2c0>)
 8005c1c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c22:	2300      	movs	r3, #0
 8005c24:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8005c26:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fdad 	bl	800678c <osSemaphoreCreate>
 8005c32:	4603      	mov	r3, r0
 8005c34:	4a60      	ldr	r2, [pc, #384]	@ (8005db8 <low_level_init+0x2c4>)
 8005c36:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8005c38:	4b5e      	ldr	r3, [pc, #376]	@ (8005db4 <low_level_init+0x2c0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fdd6 	bl	80067f0 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8005c44:	4b5c      	ldr	r3, [pc, #368]	@ (8005db8 <low_level_init+0x2c4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2100      	movs	r1, #0
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fdd0 	bl	80067f0 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005c50:	4b5a      	ldr	r3, [pc, #360]	@ (8005dbc <low_level_init+0x2c8>)
 8005c52:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005c56:	461d      	mov	r5, r3
 8005c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005c64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fc85 	bl	800657a <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005c70:	4953      	ldr	r1, [pc, #332]	@ (8005dc0 <low_level_init+0x2cc>)
 8005c72:	4854      	ldr	r0, [pc, #336]	@ (8005dc4 <low_level_init+0x2d0>)
 8005c74:	f7fb fd0d 	bl	8001692 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005c78:	4852      	ldr	r0, [pc, #328]	@ (8005dc4 <low_level_init+0x2d0>)
 8005c7a:	f7fb fd3c 	bl	80016f6 <LAN8742_Init>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d006      	beq.n	8005c92 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f006 fd17 	bl	800c6b8 <netif_set_link_down>
    netif_set_down(netif);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f006 fcae 	bl	800c5ec <netif_set_down>
 8005c90:	e081      	b.n	8005d96 <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005c92:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d165      	bne.n	8005d66 <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005c9a:	484a      	ldr	r0, [pc, #296]	@ (8005dc4 <low_level_init+0x2d0>)
 8005c9c:	f7fb fd78 	bl	8001790 <LAN8742_GetLinkState>
 8005ca0:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005ca4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	dc06      	bgt.n	8005cba <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f006 fd03 	bl	800c6b8 <netif_set_link_down>
      netif_set_down(netif);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f006 fc9a 	bl	800c5ec <netif_set_down>
 8005cb8:	e057      	b.n	8005d6a <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8005cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005cbe:	3b02      	subs	r3, #2
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d82b      	bhi.n	8005d1c <low_level_init+0x228>
 8005cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <low_level_init+0x1d8>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005cef 	.word	0x08005cef
 8005cd4:	08005cff 	.word	0x08005cff
 8005cd8:	08005d0f 	.word	0x08005d0f
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005cdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8005ce4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005cec:	e01f      	b.n	8005d2e <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8005cf4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005cfc:	e017      	b.n	8005d2e <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005cfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8005d06:	2300      	movs	r3, #0
 8005d08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005d0c:	e00f      	b.n	8005d2e <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8005d14:	2300      	movs	r3, #0
 8005d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005d1a:	e008      	b.n	8005d2e <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8005d1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8005d24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005d28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005d2c:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005d2e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005d32:	4619      	mov	r1, r3
 8005d34:	4819      	ldr	r0, [pc, #100]	@ (8005d9c <low_level_init+0x2a8>)
 8005d36:	f7fc fbd9 	bl	80024ec <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d3e:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8005d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d44:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005d46:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4813      	ldr	r0, [pc, #76]	@ (8005d9c <low_level_init+0x2a8>)
 8005d4e:	f7fc fcc4 	bl	80026da <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8005d52:	4812      	ldr	r0, [pc, #72]	@ (8005d9c <low_level_init+0x2a8>)
 8005d54:	f7fb ff7c 	bl	8001c50 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f006 fbdb 	bl	800c514 <netif_set_up>
    netif_set_link_up(netif);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f006 fc76 	bl	800c650 <netif_set_link_up>
 8005d64:	e001      	b.n	8005d6a <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8005d66:	f7fb f809 	bl	8000d7c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8005d6a:	f7fb fde9 	bl	8001940 <HAL_GetREVID>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d74:	d10f      	bne.n	8005d96 <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8005d76:	4b14      	ldr	r3, [pc, #80]	@ (8005dc8 <low_level_init+0x2d4>)
 8005d78:	f107 040c 	add.w	r4, r7, #12
 8005d7c:	461d      	mov	r5, r3
 8005d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8005d8a:	f107 030c 	add.w	r3, r7, #12
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fbf2 	bl	800657a <osThreadCreate>
  }
}
 8005d96:	37d0      	adds	r7, #208	@ 0xd0
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d9c:	20004fa4 	.word	0x20004fa4
 8005da0:	40028000 	.word	0x40028000
 8005da4:	2000012c 	.word	0x2000012c
 8005da8:	2000008c 	.word	0x2000008c
 8005dac:	20005054 	.word	0x20005054
 8005db0:	0801adb0 	.word	0x0801adb0
 8005db4:	20004f9c 	.word	0x20004f9c
 8005db8:	20004fa0 	.word	0x20004fa0
 8005dbc:	080179bc 	.word	0x080179bc
 8005dc0:	2000000c 	.word	0x2000000c
 8005dc4:	2000508c 	.word	0x2000508c
 8005dc8:	080179e8 	.word	0x080179e8

08005dcc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b092      	sub	sp, #72	@ 0x48
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005de4:	f107 030c 	add.w	r3, r7, #12
 8005de8:	2230      	movs	r2, #48	@ 0x30
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f010 fdf6 	bl	80169de <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005df2:	f107 030c 	add.w	r3, r7, #12
 8005df6:	2230      	movs	r2, #48	@ 0x30
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f010 fdef 	bl	80169de <memset>

  for(q = p; q != NULL; q = q->next)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e04:	e045      	b.n	8005e92 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d902      	bls.n	8005e12 <low_level_output+0x46>
      return ERR_IF;
 8005e0c:	f06f 030b 	mvn.w	r3, #11
 8005e10:	e07f      	b.n	8005f12 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8005e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e14:	6859      	ldr	r1, [r3, #4]
 8005e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e18:	4613      	mov	r3, r2
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	3348      	adds	r3, #72	@ 0x48
 8005e22:	443b      	add	r3, r7
 8005e24:	3b3c      	subs	r3, #60	@ 0x3c
 8005e26:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2a:	895b      	ldrh	r3, [r3, #10]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e30:	4613      	mov	r3, r2
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	3348      	adds	r3, #72	@ 0x48
 8005e3a:	443b      	add	r3, r7
 8005e3c:	3b38      	subs	r3, #56	@ 0x38
 8005e3e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d011      	beq.n	8005e6a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e48:	1e5a      	subs	r2, r3, #1
 8005e4a:	f107 000c 	add.w	r0, r7, #12
 8005e4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e50:	460b      	mov	r3, r1
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	440b      	add	r3, r1
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	18c1      	adds	r1, r0, r3
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	3348      	adds	r3, #72	@ 0x48
 8005e64:	443b      	add	r3, r7
 8005e66:	3b34      	subs	r3, #52	@ 0x34
 8005e68:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e74:	4613      	mov	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	3348      	adds	r3, #72	@ 0x48
 8005e7e:	443b      	add	r3, r7
 8005e80:	3b34      	subs	r3, #52	@ 0x34
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e88:	3301      	adds	r3, #1
 8005e8a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1b6      	bne.n	8005e06 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	891b      	ldrh	r3, [r3, #8]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8005f1c <low_level_output+0x150>)
 8005ea0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f1c <low_level_output+0x150>)
 8005ea4:	f107 030c 	add.w	r3, r7, #12
 8005ea8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8005f1c <low_level_output+0x150>)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f007 f885 	bl	800cfc0 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8005eb6:	4919      	ldr	r1, [pc, #100]	@ (8005f1c <low_level_output+0x150>)
 8005eb8:	4819      	ldr	r0, [pc, #100]	@ (8005f20 <low_level_output+0x154>)
 8005eba:	f7fb ffb9 	bl	8001e30 <HAL_ETH_Transmit_IT>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <low_level_output+0x100>
    {
      errval = ERR_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005eca:	e01b      	b.n	8005f04 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8005ecc:	4814      	ldr	r0, [pc, #80]	@ (8005f20 <low_level_output+0x154>)
 8005ece:	f7fc fc61 	bl	8002794 <HAL_ETH_GetError>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00d      	beq.n	8005ef8 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8005edc:	4b11      	ldr	r3, [pc, #68]	@ (8005f24 <low_level_output+0x158>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fc83 	bl	80067f0 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8005eea:	480d      	ldr	r0, [pc, #52]	@ (8005f20 <low_level_output+0x154>)
 8005eec:	f7fc f940 	bl	8002170 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8005ef0:	23fe      	movs	r3, #254	@ 0xfe
 8005ef2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005ef6:	e005      	b.n	8005f04 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8005ef8:	6838      	ldr	r0, [r7, #0]
 8005efa:	f006 ffbb 	bl	800ce74 <pbuf_free>
        errval =  ERR_IF;
 8005efe:	23f4      	movs	r3, #244	@ 0xf4
 8005f00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8005f04:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005f08:	f113 0f02 	cmn.w	r3, #2
 8005f0c:	d0d3      	beq.n	8005eb6 <low_level_output+0xea>

  return errval;
 8005f0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3748      	adds	r7, #72	@ 0x48
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20005054 	.word	0x20005054
 8005f20:	20004fa4 	.word	0x20004fa4
 8005f24:	20004fa0 	.word	0x20004fa0

08005f28 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005f34:	4b07      	ldr	r3, [pc, #28]	@ (8005f54 <low_level_input+0x2c>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005f3c:	f107 030c 	add.w	r3, r7, #12
 8005f40:	4619      	mov	r1, r3
 8005f42:	4805      	ldr	r0, [pc, #20]	@ (8005f58 <low_level_input+0x30>)
 8005f44:	f7fb ffd0 	bl	8001ee8 <HAL_ETH_ReadData>
  }

  return p;
 8005f48:	68fb      	ldr	r3, [r7, #12]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20004f98 	.word	0x20004f98
 8005f58:	20004fa4 	.word	0x20004fa4

08005f5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005fac <ethernetif_input+0x50>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f04f 31ff 	mov.w	r1, #4294967295
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fc3b 	bl	80067f0 <osSemaphoreWait>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1f5      	bne.n	8005f6c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005f80:	68b8      	ldr	r0, [r7, #8]
 8005f82:	f7ff ffd1 	bl	8005f28 <low_level_input>
 8005f86:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	4798      	blx	r3
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f006 ff68 	bl	800ce74 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1ea      	bne.n	8005f80 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005faa:	e7df      	b.n	8005f6c <ethernetif_input+0x10>
 8005fac:	20004f9c 	.word	0x20004f9c

08005fb0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <ethernetif_init+0x1c>
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff8 <ethernetif_init+0x48>)
 8005fc0:	f240 2217 	movw	r2, #535	@ 0x217
 8005fc4:	490d      	ldr	r1, [pc, #52]	@ (8005ffc <ethernetif_init+0x4c>)
 8005fc6:	480e      	ldr	r0, [pc, #56]	@ (8006000 <ethernetif_init+0x50>)
 8005fc8:	f7fb f8a0 	bl	800110c <printf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2273      	movs	r2, #115	@ 0x73
 8005fd0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2274      	movs	r2, #116	@ 0x74
 8005fd8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a09      	ldr	r2, [pc, #36]	@ (8006004 <ethernetif_init+0x54>)
 8005fe0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a08      	ldr	r2, [pc, #32]	@ (8006008 <ethernetif_init+0x58>)
 8005fe6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff fd83 	bl	8005af4 <low_level_init>

  return ERR_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	08017a04 	.word	0x08017a04
 8005ffc:	08017a20 	.word	0x08017a20
 8006000:	08017a30 	.word	0x08017a30
 8006004:	08014681 	.word	0x08014681
 8006008:	08005dcd 	.word	0x08005dcd

0800600c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	4809      	ldr	r0, [pc, #36]	@ (8006040 <pbuf_free_custom+0x34>)
 800601c:	f006 f862 	bl	800c0e4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006020:	4b08      	ldr	r3, [pc, #32]	@ (8006044 <pbuf_free_custom+0x38>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d107      	bne.n	8006038 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006028:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <pbuf_free_custom+0x38>)
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800602e:	4b06      	ldr	r3, [pc, #24]	@ (8006048 <pbuf_free_custom+0x3c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fc2a 	bl	800688c <osSemaphoreRelease>
  }
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	0801adb0 	.word	0x0801adb0
 8006044:	20004f98 	.word	0x20004f98
 8006048:	20004f9c 	.word	0x20004f9c

0800604c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006050:	f7fb fc46 	bl	80018e0 <HAL_GetTick>
 8006054:	4603      	mov	r3, r0
}
 8006056:	4618      	mov	r0, r3
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08e      	sub	sp, #56	@ 0x38
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a52      	ldr	r2, [pc, #328]	@ (80061c4 <HAL_ETH_MspInit+0x168>)
 800607a:	4293      	cmp	r3, r2
 800607c:	f040 809e 	bne.w	80061bc <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006080:	4b51      	ldr	r3, [pc, #324]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006084:	4a50      	ldr	r2, [pc, #320]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 8006086:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800608a:	6313      	str	r3, [r2, #48]	@ 0x30
 800608c:	4b4e      	ldr	r3, [pc, #312]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006094:	623b      	str	r3, [r7, #32]
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	4b4b      	ldr	r3, [pc, #300]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 800609a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609c:	4a4a      	ldr	r2, [pc, #296]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 800609e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80060a4:	4b48      	ldr	r3, [pc, #288]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4b45      	ldr	r3, [pc, #276]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b4:	4a44      	ldr	r2, [pc, #272]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80060bc:	4b42      	ldr	r3, [pc, #264]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060c8:	4b3f      	ldr	r3, [pc, #252]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	4a3e      	ldr	r2, [pc, #248]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060ce:	f043 0304 	orr.w	r3, r3, #4
 80060d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80060d4:	4b3c      	ldr	r3, [pc, #240]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060e0:	4b39      	ldr	r3, [pc, #228]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e4:	4a38      	ldr	r2, [pc, #224]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80060ec:	4b36      	ldr	r3, [pc, #216]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060f8:	4b33      	ldr	r3, [pc, #204]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fc:	4a32      	ldr	r2, [pc, #200]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 80060fe:	f043 0302 	orr.w	r3, r3, #2
 8006102:	6313      	str	r3, [r2, #48]	@ 0x30
 8006104:	4b30      	ldr	r3, [pc, #192]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 8006106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006110:	4b2d      	ldr	r3, [pc, #180]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 8006112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006114:	4a2c      	ldr	r2, [pc, #176]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 8006116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800611a:	6313      	str	r3, [r2, #48]	@ 0x30
 800611c:	4b2a      	ldr	r3, [pc, #168]	@ (80061c8 <HAL_ETH_MspInit+0x16c>)
 800611e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006128:	2332      	movs	r3, #50	@ 0x32
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612c:	2302      	movs	r3, #2
 800612e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006130:	2300      	movs	r3, #0
 8006132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006134:	2303      	movs	r3, #3
 8006136:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006138:	230b      	movs	r3, #11
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800613c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006140:	4619      	mov	r1, r3
 8006142:	4822      	ldr	r0, [pc, #136]	@ (80061cc <HAL_ETH_MspInit+0x170>)
 8006144:	f7fc ff60 	bl	8003008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006148:	2386      	movs	r3, #134	@ 0x86
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614c:	2302      	movs	r3, #2
 800614e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006150:	2300      	movs	r3, #0
 8006152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006154:	2303      	movs	r3, #3
 8006156:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006158:	230b      	movs	r3, #11
 800615a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800615c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006160:	4619      	mov	r1, r3
 8006162:	481b      	ldr	r0, [pc, #108]	@ (80061d0 <HAL_ETH_MspInit+0x174>)
 8006164:	f7fc ff50 	bl	8003008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006168:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616e:	2302      	movs	r3, #2
 8006170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	2300      	movs	r3, #0
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006176:	2303      	movs	r3, #3
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800617a:	230b      	movs	r3, #11
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800617e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006182:	4619      	mov	r1, r3
 8006184:	4813      	ldr	r0, [pc, #76]	@ (80061d4 <HAL_ETH_MspInit+0x178>)
 8006186:	f7fc ff3f 	bl	8003008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800618a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006190:	2302      	movs	r3, #2
 8006192:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006194:	2300      	movs	r3, #0
 8006196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006198:	2303      	movs	r3, #3
 800619a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800619c:	230b      	movs	r3, #11
 800619e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80061a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061a4:	4619      	mov	r1, r3
 80061a6:	480c      	ldr	r0, [pc, #48]	@ (80061d8 <HAL_ETH_MspInit+0x17c>)
 80061a8:	f7fc ff2e 	bl	8003008 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80061ac:	2200      	movs	r2, #0
 80061ae:	2105      	movs	r1, #5
 80061b0:	203d      	movs	r0, #61	@ 0x3d
 80061b2:	f7fb fc89 	bl	8001ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80061b6:	203d      	movs	r0, #61	@ 0x3d
 80061b8:	f7fb fca2 	bl	8001b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80061bc:	bf00      	nop
 80061be:	3738      	adds	r7, #56	@ 0x38
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40028000 	.word	0x40028000
 80061c8:	40023800 	.word	0x40023800
 80061cc:	40020800 	.word	0x40020800
 80061d0:	40020000 	.word	0x40020000
 80061d4:	40020400 	.word	0x40020400
 80061d8:	40021800 	.word	0x40021800

080061dc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80061e0:	4802      	ldr	r0, [pc, #8]	@ (80061ec <ETH_PHY_IO_Init+0x10>)
 80061e2:	f7fc fa95 	bl	8002710 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20004fa4 	.word	0x20004fa4

080061f0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  return 0;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	68f9      	ldr	r1, [r7, #12]
 8006212:	4807      	ldr	r0, [pc, #28]	@ (8006230 <ETH_PHY_IO_ReadReg+0x30>)
 8006214:	f7fc f8d6 	bl	80023c4 <HAL_ETH_ReadPHYRegister>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800621e:	f04f 33ff 	mov.w	r3, #4294967295
 8006222:	e000      	b.n	8006226 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20004fa4 	.word	0x20004fa4

08006234 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	68f9      	ldr	r1, [r7, #12]
 8006246:	4807      	ldr	r0, [pc, #28]	@ (8006264 <ETH_PHY_IO_WriteReg+0x30>)
 8006248:	f7fc f907 	bl	800245a <HAL_ETH_WritePHYRegister>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006252:	f04f 33ff 	mov.w	r3, #4294967295
 8006256:	e000      	b.n	800625a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20004fa4 	.word	0x20004fa4

08006268 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800626c:	f7fb fb38 	bl	80018e0 <HAL_GetTick>
 8006270:	4603      	mov	r3, r0
}
 8006272:	4618      	mov	r0, r3
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b0a0      	sub	sp, #128	@ 0x80
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006280:	f107 0308 	add.w	r3, r7, #8
 8006284:	2264      	movs	r2, #100	@ 0x64
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f010 fba8 	bl	80169de <memset>
  int32_t PHYLinkState = 0;
 800628e:	2300      	movs	r3, #0
 8006290:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006296:	2300      	movs	r3, #0
 8006298:	67bb      	str	r3, [r7, #120]	@ 0x78
 800629a:	2300      	movs	r3, #0
 800629c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80062a2:	483a      	ldr	r0, [pc, #232]	@ (800638c <ethernet_link_thread+0x114>)
 80062a4:	f7fb fa74 	bl	8001790 <LAN8742_GetLinkState>
 80062a8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80062aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80062b0:	089b      	lsrs	r3, r3, #2
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00c      	beq.n	80062d6 <ethernet_link_thread+0x5e>
 80062bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062be:	2b01      	cmp	r3, #1
 80062c0:	dc09      	bgt.n	80062d6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80062c2:	4833      	ldr	r0, [pc, #204]	@ (8006390 <ethernet_link_thread+0x118>)
 80062c4:	f7fb fd34 	bl	8001d30 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80062c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80062ca:	f006 f98f 	bl	800c5ec <netif_set_down>
    netif_set_link_down(netif);
 80062ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80062d0:	f006 f9f2 	bl	800c6b8 <netif_set_link_down>
 80062d4:	e055      	b.n	8006382 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80062d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d14e      	bne.n	8006382 <ethernet_link_thread+0x10a>
 80062e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	dd4b      	ble.n	8006382 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80062ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062ec:	3b02      	subs	r3, #2
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d82a      	bhi.n	8006348 <ethernet_link_thread+0xd0>
 80062f2:	a201      	add	r2, pc, #4	@ (adr r2, 80062f8 <ethernet_link_thread+0x80>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006309 	.word	0x08006309
 80062fc:	0800631b 	.word	0x0800631b
 8006300:	0800632b 	.word	0x0800632b
 8006304:	0800633b 	.word	0x0800633b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006308:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800630c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800630e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006312:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006314:	2301      	movs	r3, #1
 8006316:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006318:	e017      	b.n	800634a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800631a:	2300      	movs	r3, #0
 800631c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800631e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006322:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006324:	2301      	movs	r3, #1
 8006326:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006328:	e00f      	b.n	800634a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800632a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800632e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006330:	2300      	movs	r3, #0
 8006332:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006334:	2301      	movs	r3, #1
 8006336:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006338:	e007      	b.n	800634a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800633a:	2300      	movs	r3, #0
 800633c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800633e:	2300      	movs	r3, #0
 8006340:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006342:	2301      	movs	r3, #1
 8006344:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006346:	e000      	b.n	800634a <ethernet_link_thread+0xd2>
    default:
      break;
 8006348:	bf00      	nop
    }

    if(linkchanged)
 800634a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d018      	beq.n	8006382 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006350:	f107 0308 	add.w	r3, r7, #8
 8006354:	4619      	mov	r1, r3
 8006356:	480e      	ldr	r0, [pc, #56]	@ (8006390 <ethernet_link_thread+0x118>)
 8006358:	f7fc f8c8 	bl	80024ec <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800635c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800635e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006362:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006364:	f107 0308 	add.w	r3, r7, #8
 8006368:	4619      	mov	r1, r3
 800636a:	4809      	ldr	r0, [pc, #36]	@ (8006390 <ethernet_link_thread+0x118>)
 800636c:	f7fc f9b5 	bl	80026da <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006370:	4807      	ldr	r0, [pc, #28]	@ (8006390 <ethernet_link_thread+0x118>)
 8006372:	f7fb fc6d 	bl	8001c50 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006376:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006378:	f006 f8cc 	bl	800c514 <netif_set_up>
      netif_set_link_up(netif);
 800637c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800637e:	f006 f967 	bl	800c650 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006382:	2064      	movs	r0, #100	@ 0x64
 8006384:	f000 f951 	bl	800662a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006388:	e78b      	b.n	80062a2 <ethernet_link_thread+0x2a>
 800638a:	bf00      	nop
 800638c:	2000508c 	.word	0x2000508c
 8006390:	20004fa4 	.word	0x20004fa4

08006394 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af02      	add	r7, sp, #8
 800639a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800639c:	4812      	ldr	r0, [pc, #72]	@ (80063e8 <HAL_ETH_RxAllocateCallback+0x54>)
 800639e:	f005 fe2d 	bl	800bffc <memp_malloc_pool>
 80063a2:	60f8      	str	r0, [r7, #12]
  if (p)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d014      	beq.n	80063d4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f103 0220 	add.w	r2, r3, #32
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a0d      	ldr	r2, [pc, #52]	@ (80063ec <HAL_ETH_RxAllocateCallback+0x58>)
 80063b8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80063c2:	9201      	str	r2, [sp, #4]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2241      	movs	r2, #65	@ 0x41
 80063ca:	2100      	movs	r1, #0
 80063cc:	2000      	movs	r0, #0
 80063ce:	f006 fb97 	bl	800cb00 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80063d2:	e005      	b.n	80063e0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80063d4:	4b06      	ldr	r3, [pc, #24]	@ (80063f0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	0801adb0 	.word	0x0801adb0
 80063ec:	0800600d 	.word	0x0800600d
 80063f0:	20004f98 	.word	0x20004f98

080063f4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3b20      	subs	r3, #32
 8006412:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	2200      	movs	r2, #0
 800641e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	887a      	ldrh	r2, [r7, #2]
 8006424:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d103      	bne.n	8006436 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e003      	b.n	800643e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	e009      	b.n	8006460 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	891a      	ldrh	r2, [r3, #8]
 8006450:	887b      	ldrh	r3, [r7, #2]
 8006452:	4413      	add	r3, r2
 8006454:	b29a      	uxth	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f2      	bne.n	800644c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006466:	887b      	ldrh	r3, [r7, #2]
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fade 	bl	8005a2c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006470:	bf00      	nop
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f006 fcf7 	bl	800ce74 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8006498:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <RMII_Thread+0x60>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 80064a4:	2000      	movs	r0, #0
 80064a6:	f000 f8b4 	bl	8006612 <osThreadTerminate>
 80064aa:	e7f5      	b.n	8006498 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 80064ac:	4b10      	ldr	r3, [pc, #64]	@ (80064f0 <RMII_Thread+0x60>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80064b4:	2b0a      	cmp	r3, #10
 80064b6:	d916      	bls.n	80064e6 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80064b8:	4b0e      	ldr	r3, [pc, #56]	@ (80064f4 <RMII_Thread+0x64>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4a0d      	ldr	r2, [pc, #52]	@ (80064f4 <RMII_Thread+0x64>)
 80064be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80064c2:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80064c4:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <RMII_Thread+0x64>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4a0a      	ldr	r2, [pc, #40]	@ (80064f4 <RMII_Thread+0x64>)
 80064ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064ce:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 80064d0:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <RMII_Thread+0x60>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80064d8:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <RMII_Thread+0x60>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0201 	orr.w	r2, r2, #1
 80064e0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80064e4:	e7d8      	b.n	8006498 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80064e6:	20c8      	movs	r0, #200	@ 0xc8
 80064e8:	f000 f89f 	bl	800662a <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 80064ec:	e7d4      	b.n	8006498 <RMII_Thread+0x8>
 80064ee:	bf00      	nop
 80064f0:	20004fa4 	.word	0x20004fa4
 80064f4:	40013800 	.word	0x40013800

080064f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800650a:	2b84      	cmp	r3, #132	@ 0x84
 800650c:	d005      	beq.n	800651a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800650e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	3303      	adds	r3, #3
 8006518:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800651a:	68fb      	ldr	r3, [r7, #12]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800652e:	f3ef 8305 	mrs	r3, IPSR
 8006532:	607b      	str	r3, [r7, #4]
  return(result);
 8006534:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf14      	ite	ne
 800653a:	2301      	movne	r3, #1
 800653c:	2300      	moveq	r3, #0
 800653e:	b2db      	uxtb	r3, r3
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006550:	f001 fe52 	bl	80081f8 <vTaskStartScheduler>
  
  return osOK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	bd80      	pop	{r7, pc}

0800655a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800655e:	f7ff ffe3 	bl	8006528 <inHandlerMode>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006568:	f001 ff74 	bl	8008454 <xTaskGetTickCountFromISR>
 800656c:	4603      	mov	r3, r0
 800656e:	e002      	b.n	8006576 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006570:	f001 ff60 	bl	8008434 <xTaskGetTickCount>
 8006574:	4603      	mov	r3, r0
  }
}
 8006576:	4618      	mov	r0, r3
 8006578:	bd80      	pop	{r7, pc}

0800657a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800657a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657c:	b089      	sub	sp, #36	@ 0x24
 800657e:	af04      	add	r7, sp, #16
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d020      	beq.n	80065ce <osThreadCreate+0x54>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01c      	beq.n	80065ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685c      	ldr	r4, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691e      	ldr	r6, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff ffa6 	bl	80064f8 <makeFreeRtosPriority>
 80065ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065b6:	9202      	str	r2, [sp, #8]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	9100      	str	r1, [sp, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	4632      	mov	r2, r6
 80065c0:	4629      	mov	r1, r5
 80065c2:	4620      	mov	r0, r4
 80065c4:	f001 fb90 	bl	8007ce8 <xTaskCreateStatic>
 80065c8:	4603      	mov	r3, r0
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e01c      	b.n	8006608 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685c      	ldr	r4, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff ff88 	bl	80064f8 <makeFreeRtosPriority>
 80065e8:	4602      	mov	r2, r0
 80065ea:	f107 030c 	add.w	r3, r7, #12
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	9200      	str	r2, [sp, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	4632      	mov	r2, r6
 80065f6:	4629      	mov	r1, r5
 80065f8:	4620      	mov	r0, r4
 80065fa:	f001 fbdb 	bl	8007db4 <xTaskCreate>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d001      	beq.n	8006608 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	e000      	b.n	800660a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006608:	68fb      	ldr	r3, [r7, #12]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006612 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 fd22 	bl	8008064 <vTaskDelete>
  return osOK;
 8006620:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <osDelay+0x16>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	e000      	b.n	8006642 <osDelay+0x18>
 8006640:	2301      	movs	r3, #1
 8006642:	4618      	mov	r0, r3
 8006644:	f001 fda0 	bl	8008188 <vTaskDelay>
  
  return osOK;
 8006648:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	4619      	mov	r1, r3
 8006668:	2001      	movs	r0, #1
 800666a:	f000 fc9a 	bl	8006fa2 <xQueueCreateMutexStatic>
 800666e:	4603      	mov	r3, r0
 8006670:	e003      	b.n	800667a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006672:	2001      	movs	r0, #1
 8006674:	f000 fc7d 	bl	8006f72 <xQueueCreateMutex>
 8006678:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <osMutexWait+0x18>
    return osErrorParameter;
 8006698:	2380      	movs	r3, #128	@ 0x80
 800669a:	e03a      	b.n	8006712 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d103      	bne.n	80066b0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e009      	b.n	80066c4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d006      	beq.n	80066c4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <osMutexWait+0x40>
      ticks = 1;
 80066c0:	2301      	movs	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80066c4:	f7ff ff30 	bl	8006528 <inHandlerMode>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d017      	beq.n	80066fe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80066ce:	f107 0308 	add.w	r3, r7, #8
 80066d2:	461a      	mov	r2, r3
 80066d4:	2100      	movs	r1, #0
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 f8c4 	bl	8007864 <xQueueReceiveFromISR>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d001      	beq.n	80066e6 <osMutexWait+0x62>
      return osErrorOS;
 80066e2:	23ff      	movs	r3, #255	@ 0xff
 80066e4:	e015      	b.n	8006712 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d011      	beq.n	8006710 <osMutexWait+0x8c>
 80066ec:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <osMutexWait+0x98>)
 80066ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	e008      	b.n	8006710 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 ff97 	bl	8007634 <xQueueSemaphoreTake>
 8006706:	4603      	mov	r3, r0
 8006708:	2b01      	cmp	r3, #1
 800670a:	d001      	beq.n	8006710 <osMutexWait+0x8c>
    return osErrorOS;
 800670c:	23ff      	movs	r3, #255	@ 0xff
 800670e:	e000      	b.n	8006712 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800672c:	2300      	movs	r3, #0
 800672e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006730:	f7ff fefa 	bl	8006528 <inHandlerMode>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d016      	beq.n	8006768 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800673a:	f107 0308 	add.w	r3, r7, #8
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fdf6 	bl	8007332 <xQueueGiveFromISR>
 8006746:	4603      	mov	r3, r0
 8006748:	2b01      	cmp	r3, #1
 800674a:	d001      	beq.n	8006750 <osMutexRelease+0x30>
      return osErrorOS;
 800674c:	23ff      	movs	r3, #255	@ 0xff
 800674e:	e017      	b.n	8006780 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d013      	beq.n	800677e <osMutexRelease+0x5e>
 8006756:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <osMutexRelease+0x68>)
 8006758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	e00a      	b.n	800677e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006768:	2300      	movs	r3, #0
 800676a:	2200      	movs	r2, #0
 800676c:	2100      	movs	r1, #0
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fc32 	bl	8006fd8 <xQueueGenericSend>
 8006774:	4603      	mov	r3, r0
 8006776:	2b01      	cmp	r3, #1
 8006778:	d001      	beq.n	800677e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800677a:	23ff      	movs	r3, #255	@ 0xff
 800677c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800677e:	68fb      	ldr	r3, [r7, #12]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af02      	add	r7, sp, #8
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00f      	beq.n	80067be <osSemaphoreCreate+0x32>
    if (count == 1) {
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d10a      	bne.n	80067ba <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2203      	movs	r2, #3
 80067aa:	9200      	str	r2, [sp, #0]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	2001      	movs	r0, #1
 80067b2:	f000 fadb 	bl	8006d6c <xQueueGenericCreateStatic>
 80067b6:	4603      	mov	r3, r0
 80067b8:	e016      	b.n	80067e8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e014      	b.n	80067e8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d110      	bne.n	80067e6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80067c4:	2203      	movs	r2, #3
 80067c6:	2100      	movs	r1, #0
 80067c8:	2001      	movs	r0, #1
 80067ca:	f000 fb56 	bl	8006e7a <xQueueGenericCreate>
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <osSemaphoreCreate+0x56>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2200      	movs	r2, #0
 80067da:	2100      	movs	r1, #0
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fbfb 	bl	8006fd8 <xQueueGenericSend>
      return sema;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	e000      	b.n	80067e8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80067e6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006804:	2380      	movs	r3, #128	@ 0x80
 8006806:	e03a      	b.n	800687e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006812:	d103      	bne.n	800681c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006814:	f04f 33ff 	mov.w	r3, #4294967295
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e009      	b.n	8006830 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <osSemaphoreWait+0x40>
      ticks = 1;
 800682c:	2301      	movs	r3, #1
 800682e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006830:	f7ff fe7a 	bl	8006528 <inHandlerMode>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d017      	beq.n	800686a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800683a:	f107 0308 	add.w	r3, r7, #8
 800683e:	461a      	mov	r2, r3
 8006840:	2100      	movs	r1, #0
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 f80e 	bl	8007864 <xQueueReceiveFromISR>
 8006848:	4603      	mov	r3, r0
 800684a:	2b01      	cmp	r3, #1
 800684c:	d001      	beq.n	8006852 <osSemaphoreWait+0x62>
      return osErrorOS;
 800684e:	23ff      	movs	r3, #255	@ 0xff
 8006850:	e015      	b.n	800687e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d011      	beq.n	800687c <osSemaphoreWait+0x8c>
 8006858:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <osSemaphoreWait+0x98>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	e008      	b.n	800687c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800686a:	68f9      	ldr	r1, [r7, #12]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fee1 	bl	8007634 <xQueueSemaphoreTake>
 8006872:	4603      	mov	r3, r0
 8006874:	2b01      	cmp	r3, #1
 8006876:	d001      	beq.n	800687c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006878:	23ff      	movs	r3, #255	@ 0xff
 800687a:	e000      	b.n	800687e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006898:	2300      	movs	r3, #0
 800689a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800689c:	f7ff fe44 	bl	8006528 <inHandlerMode>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d016      	beq.n	80068d4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80068a6:	f107 0308 	add.w	r3, r7, #8
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fd40 	bl	8007332 <xQueueGiveFromISR>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d001      	beq.n	80068bc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80068b8:	23ff      	movs	r3, #255	@ 0xff
 80068ba:	e017      	b.n	80068ec <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d013      	beq.n	80068ea <osSemaphoreRelease+0x5e>
 80068c2:	4b0c      	ldr	r3, [pc, #48]	@ (80068f4 <osSemaphoreRelease+0x68>)
 80068c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	e00a      	b.n	80068ea <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80068d4:	2300      	movs	r3, #0
 80068d6:	2200      	movs	r2, #0
 80068d8:	2100      	movs	r1, #0
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fb7c 	bl	8006fd8 <xQueueGenericSend>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d001      	beq.n	80068ea <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80068e6:	23ff      	movs	r3, #255	@ 0xff
 80068e8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80068ea:	68fb      	ldr	r3, [r7, #12]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006900:	f7ff fe12 	bl	8006528 <inHandlerMode>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800690a:	2382      	movs	r3, #130	@ 0x82
 800690c:	e003      	b.n	8006916 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 f872 	bl	80079f8 <vQueueDelete>

  return osOK; 
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800691e:	b590      	push	{r4, r7, lr}
 8006920:	b085      	sub	sp, #20
 8006922:	af02      	add	r7, sp, #8
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d011      	beq.n	8006954 <osMessageCreate+0x36>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00d      	beq.n	8006954 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6859      	ldr	r1, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2400      	movs	r4, #0
 800694a:	9400      	str	r4, [sp, #0]
 800694c:	f000 fa0e 	bl	8006d6c <xQueueGenericCreateStatic>
 8006950:	4603      	mov	r3, r0
 8006952:	e008      	b.n	8006966 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	4619      	mov	r1, r3
 8006960:	f000 fa8b 	bl	8006e7a <xQueueGenericCreate>
 8006964:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	bd90      	pop	{r4, r7, pc}
	...

08006970 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <osMessagePut+0x1e>
    ticks = 1;
 800698a:	2301      	movs	r3, #1
 800698c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800698e:	f7ff fdcb 	bl	8006528 <inHandlerMode>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d018      	beq.n	80069ca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006998:	f107 0210 	add.w	r2, r7, #16
 800699c:	f107 0108 	add.w	r1, r7, #8
 80069a0:	2300      	movs	r3, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 fc22 	bl	80071ec <xQueueGenericSendFromISR>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d001      	beq.n	80069b2 <osMessagePut+0x42>
      return osErrorOS;
 80069ae:	23ff      	movs	r3, #255	@ 0xff
 80069b0:	e018      	b.n	80069e4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d014      	beq.n	80069e2 <osMessagePut+0x72>
 80069b8:	4b0c      	ldr	r3, [pc, #48]	@ (80069ec <osMessagePut+0x7c>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	e00b      	b.n	80069e2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80069ca:	f107 0108 	add.w	r1, r7, #8
 80069ce:	2300      	movs	r3, #0
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fb00 	bl	8006fd8 <xQueueGenericSend>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d001      	beq.n	80069e2 <osMessagePut+0x72>
      return osErrorOS;
 80069de:	23ff      	movs	r3, #255	@ 0xff
 80069e0:	e000      	b.n	80069e4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	e000ed04 	.word	0xe000ed04

080069f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80069f0:	b590      	push	{r4, r7, lr}
 80069f2:	b08b      	sub	sp, #44	@ 0x2c
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006a0a:	2380      	movs	r3, #128	@ 0x80
 8006a0c:	617b      	str	r3, [r7, #20]
    return event;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	461c      	mov	r4, r3
 8006a12:	f107 0314 	add.w	r3, r7, #20
 8006a16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a1e:	e054      	b.n	8006aca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	d103      	bne.n	8006a38 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006a30:	f04f 33ff 	mov.w	r3, #4294967295
 8006a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a36:	e009      	b.n	8006a4c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d006      	beq.n	8006a4c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <osMessageGet+0x5c>
      ticks = 1;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006a4c:	f7ff fd6c 	bl	8006528 <inHandlerMode>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01c      	beq.n	8006a90 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006a56:	f107 0220 	add.w	r2, r7, #32
 8006a5a:	f107 0314 	add.w	r3, r7, #20
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	68b8      	ldr	r0, [r7, #8]
 8006a64:	f000 fefe 	bl	8007864 <xQueueReceiveFromISR>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d102      	bne.n	8006a74 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006a6e:	2310      	movs	r3, #16
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	e001      	b.n	8006a78 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01d      	beq.n	8006aba <osMessageGet+0xca>
 8006a7e:	4b15      	ldr	r3, [pc, #84]	@ (8006ad4 <osMessageGet+0xe4>)
 8006a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	e014      	b.n	8006aba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006a90:	f107 0314 	add.w	r3, r7, #20
 8006a94:	3304      	adds	r3, #4
 8006a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a98:	4619      	mov	r1, r3
 8006a9a:	68b8      	ldr	r0, [r7, #8]
 8006a9c:	f000 fce2 	bl	8007464 <xQueueReceive>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d102      	bne.n	8006aac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006aa6:	2310      	movs	r3, #16
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	e006      	b.n	8006aba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <osMessageGet+0xc6>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e000      	b.n	8006ab8 <osMessageGet+0xc8>
 8006ab6:	2340      	movs	r3, #64	@ 0x40
 8006ab8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	461c      	mov	r4, r3
 8006abe:	f107 0314 	add.w	r3, r7, #20
 8006ac2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	372c      	adds	r7, #44	@ 0x2c
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd90      	pop	{r4, r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006ae0:	f7ff fd22 	bl	8006528 <inHandlerMode>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ff63 	bl	80079b6 <uxQueueMessagesWaitingFromISR>
 8006af0:	4603      	mov	r3, r0
 8006af2:	e003      	b.n	8006afc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 ff3d 	bl	8007974 <uxQueueMessagesWaiting>
 8006afa:	4603      	mov	r3, r0
  }
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006b0c:	f7ff fd0c 	bl	8006528 <inHandlerMode>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <osMessageDelete+0x16>
    return osErrorISR;
 8006b16:	2382      	movs	r3, #130	@ 0x82
 8006b18:	e003      	b.n	8006b22 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 ff6c 	bl	80079f8 <vQueueDelete>

  return osOK; 
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f103 0208 	add.w	r2, r3, #8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f103 0208 	add.w	r2, r3, #8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f103 0208 	add.w	r2, r3, #8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d103      	bne.n	8006bec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e00c      	b.n	8006c06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e002      	b.n	8006bfa <vListInsert+0x2e>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d2f6      	bcs.n	8006bf4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	601a      	str	r2, [r3, #0]
}
 8006c32:	bf00      	nop
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6892      	ldr	r2, [r2, #8]
 8006c54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6852      	ldr	r2, [r2, #4]
 8006c5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d103      	bne.n	8006c72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	1e5a      	subs	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10d      	bne.n	8006cc4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cac:	b672      	cpsid	i
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	b662      	cpsie	i
 8006cbc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	e7fd      	b.n	8006cc0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006cc4:	f002 fa5a 	bl	800917c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd0:	68f9      	ldr	r1, [r7, #12]
 8006cd2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	441a      	add	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cfa:	fb01 f303 	mul.w	r3, r1, r3
 8006cfe:	441a      	add	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	22ff      	movs	r2, #255	@ 0xff
 8006d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	22ff      	movs	r2, #255	@ 0xff
 8006d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d114      	bne.n	8006d44 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d01a      	beq.n	8006d58 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3310      	adds	r3, #16
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 fd0a 	bl	8008740 <xTaskRemoveFromEventList>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d012      	beq.n	8006d58 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <xQueueGenericReset+0xd4>)
 8006d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	e009      	b.n	8006d58 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3310      	adds	r3, #16
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff feee 	bl	8006b2a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3324      	adds	r3, #36	@ 0x24
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fee9 	bl	8006b2a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d58:	f002 fa46 	bl	80091e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d5c:	2301      	movs	r3, #1
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	e000ed04 	.word	0xe000ed04

08006d6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08e      	sub	sp, #56	@ 0x38
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10d      	bne.n	8006d9c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d84:	b672      	cpsid	i
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	b662      	cpsie	i
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10d      	bne.n	8006dbe <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da6:	b672      	cpsid	i
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	b662      	cpsie	i
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <xQueueGenericCreateStatic+0x5e>
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <xQueueGenericCreateStatic+0x62>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <xQueueGenericCreateStatic+0x64>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10d      	bne.n	8006df0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd8:	b672      	cpsid	i
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	b662      	cpsie	i
 8006de8:	623b      	str	r3, [r7, #32]
}
 8006dea:	bf00      	nop
 8006dec:	bf00      	nop
 8006dee:	e7fd      	b.n	8006dec <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d102      	bne.n	8006dfc <xQueueGenericCreateStatic+0x90>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <xQueueGenericCreateStatic+0x94>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <xQueueGenericCreateStatic+0x96>
 8006e00:	2300      	movs	r3, #0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10d      	bne.n	8006e22 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0a:	b672      	cpsid	i
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	b662      	cpsie	i
 8006e1a:	61fb      	str	r3, [r7, #28]
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	e7fd      	b.n	8006e1e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e22:	2348      	movs	r3, #72	@ 0x48
 8006e24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b48      	cmp	r3, #72	@ 0x48
 8006e2a:	d00d      	beq.n	8006e48 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	b672      	cpsid	i
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	b662      	cpsie	i
 8006e40:	61bb      	str	r3, [r7, #24]
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00d      	beq.n	8006e70 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	4613      	mov	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f848 	bl	8006f00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3730      	adds	r7, #48	@ 0x30
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b08a      	sub	sp, #40	@ 0x28
 8006e7e:	af02      	add	r7, sp, #8
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	4613      	mov	r3, r2
 8006e86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10d      	bne.n	8006eaa <xQueueGenericCreate+0x30>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e92:	b672      	cpsid	i
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	b662      	cpsie	i
 8006ea2:	613b      	str	r3, [r7, #16]
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop
 8006ea8:	e7fd      	b.n	8006ea6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61fb      	str	r3, [r7, #28]
 8006eb4:	e004      	b.n	8006ec0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	3348      	adds	r3, #72	@ 0x48
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f002 fa87 	bl	80093d8 <pvPortMalloc>
 8006eca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d011      	beq.n	8006ef6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	3348      	adds	r3, #72	@ 0x48
 8006eda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ee4:	79fa      	ldrb	r2, [r7, #7]
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	4613      	mov	r3, r2
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f805 	bl	8006f00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3720      	adds	r7, #32
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d103      	bne.n	8006f1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	e002      	b.n	8006f22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f2e:	2101      	movs	r1, #1
 8006f30:	69b8      	ldr	r0, [r7, #24]
 8006f32:	f7ff feaf 	bl	8006c94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f36:	bf00      	nop
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00e      	beq.n	8006f6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2200      	movs	r2, #0
 8006f62:	2100      	movs	r1, #0
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f837 	bl	8006fd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	4603      	mov	r3, r0
 8006f7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	461a      	mov	r2, r3
 8006f88:	6939      	ldr	r1, [r7, #16]
 8006f8a:	6978      	ldr	r0, [r7, #20]
 8006f8c:	f7ff ff75 	bl	8006e7a <xQueueGenericCreate>
 8006f90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff ffd3 	bl	8006f3e <prvInitialiseMutex>

		return xNewQueue;
 8006f98:	68fb      	ldr	r3, [r7, #12]
	}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af02      	add	r7, sp, #8
 8006fa8:	4603      	mov	r3, r0
 8006faa:	6039      	str	r1, [r7, #0]
 8006fac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	6939      	ldr	r1, [r7, #16]
 8006fc0:	6978      	ldr	r0, [r7, #20]
 8006fc2:	f7ff fed3 	bl	8006d6c <xQueueGenericCreateStatic>
 8006fc6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff ffb8 	bl	8006f3e <prvInitialiseMutex>

		return xNewQueue;
 8006fce:	68fb      	ldr	r3, [r7, #12]
	}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08e      	sub	sp, #56	@ 0x38
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10d      	bne.n	8007010 <xQueueGenericSend+0x38>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff8:	b672      	cpsid	i
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	b662      	cpsie	i
 8007008:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <xQueueGenericSend+0x46>
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <xQueueGenericSend+0x4a>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <xQueueGenericSend+0x4c>
 8007022:	2300      	movs	r3, #0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10d      	bne.n	8007044 <xQueueGenericSend+0x6c>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702c:	b672      	cpsid	i
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	b662      	cpsie	i
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800703e:	bf00      	nop
 8007040:	bf00      	nop
 8007042:	e7fd      	b.n	8007040 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d103      	bne.n	8007052 <xQueueGenericSend+0x7a>
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <xQueueGenericSend+0x7e>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueGenericSend+0x80>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10d      	bne.n	8007078 <xQueueGenericSend+0xa0>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007060:	b672      	cpsid	i
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	b662      	cpsie	i
 8007070:	623b      	str	r3, [r7, #32]
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007078:	f001 fd30 	bl	8008adc <xTaskGetSchedulerState>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d102      	bne.n	8007088 <xQueueGenericSend+0xb0>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <xQueueGenericSend+0xb4>
 8007088:	2301      	movs	r3, #1
 800708a:	e000      	b.n	800708e <xQueueGenericSend+0xb6>
 800708c:	2300      	movs	r3, #0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10d      	bne.n	80070ae <xQueueGenericSend+0xd6>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007096:	b672      	cpsid	i
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	b662      	cpsie	i
 80070a6:	61fb      	str	r3, [r7, #28]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070ae:	f002 f865 	bl	800917c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d302      	bcc.n	80070c4 <xQueueGenericSend+0xec>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d129      	bne.n	8007118 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070ca:	f000 fcd3 	bl	8007a74 <prvCopyDataToQueue>
 80070ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d010      	beq.n	80070fa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	3324      	adds	r3, #36	@ 0x24
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 fb2f 	bl	8008740 <xTaskRemoveFromEventList>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d013      	beq.n	8007110 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070e8:	4b3f      	ldr	r3, [pc, #252]	@ (80071e8 <xQueueGenericSend+0x210>)
 80070ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	e00a      	b.n	8007110 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007100:	4b39      	ldr	r3, [pc, #228]	@ (80071e8 <xQueueGenericSend+0x210>)
 8007102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007110:	f002 f86a 	bl	80091e8 <vPortExitCritical>
				return pdPASS;
 8007114:	2301      	movs	r3, #1
 8007116:	e063      	b.n	80071e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800711e:	f002 f863 	bl	80091e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007122:	2300      	movs	r3, #0
 8007124:	e05c      	b.n	80071e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007128:	2b00      	cmp	r3, #0
 800712a:	d106      	bne.n	800713a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800712c:	f107 0314 	add.w	r3, r7, #20
 8007130:	4618      	mov	r0, r3
 8007132:	f001 fb6b 	bl	800880c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007136:	2301      	movs	r3, #1
 8007138:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800713a:	f002 f855 	bl	80091e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800713e:	f001 f8cb 	bl	80082d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007142:	f002 f81b 	bl	800917c <vPortEnterCritical>
 8007146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007148:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800714c:	b25b      	sxtb	r3, r3
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d103      	bne.n	800715c <xQueueGenericSend+0x184>
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007162:	b25b      	sxtb	r3, r3
 8007164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007168:	d103      	bne.n	8007172 <xQueueGenericSend+0x19a>
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007172:	f002 f839 	bl	80091e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007176:	1d3a      	adds	r2, r7, #4
 8007178:	f107 0314 	add.w	r3, r7, #20
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f001 fb5a 	bl	8008838 <xTaskCheckForTimeOut>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d124      	bne.n	80071d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800718a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800718c:	f000 fd6a 	bl	8007c64 <prvIsQueueFull>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d018      	beq.n	80071c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007198:	3310      	adds	r3, #16
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	4611      	mov	r1, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 faa6 	bl	80086f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071a6:	f000 fcf5 	bl	8007b94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071aa:	f001 f8a3 	bl	80082f4 <xTaskResumeAll>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f47f af7c 	bne.w	80070ae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80071b6:	4b0c      	ldr	r3, [pc, #48]	@ (80071e8 <xQueueGenericSend+0x210>)
 80071b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	e772      	b.n	80070ae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071ca:	f000 fce3 	bl	8007b94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071ce:	f001 f891 	bl	80082f4 <xTaskResumeAll>
 80071d2:	e76c      	b.n	80070ae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071d6:	f000 fcdd 	bl	8007b94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071da:	f001 f88b 	bl	80082f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3738      	adds	r7, #56	@ 0x38
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	@ 0x38
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10d      	bne.n	8007220 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007208:	b672      	cpsid	i
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	b662      	cpsie	i
 8007218:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800721a:	bf00      	nop
 800721c:	bf00      	nop
 800721e:	e7fd      	b.n	800721c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d103      	bne.n	800722e <xQueueGenericSendFromISR+0x42>
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <xQueueGenericSendFromISR+0x46>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <xQueueGenericSendFromISR+0x48>
 8007232:	2300      	movs	r3, #0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10d      	bne.n	8007254 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	b672      	cpsid	i
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	b662      	cpsie	i
 800724c:	623b      	str	r3, [r7, #32]
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	e7fd      	b.n	8007250 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d103      	bne.n	8007262 <xQueueGenericSendFromISR+0x76>
 800725a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <xQueueGenericSendFromISR+0x7a>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <xQueueGenericSendFromISR+0x7c>
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10d      	bne.n	8007288 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007270:	b672      	cpsid	i
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	b662      	cpsie	i
 8007280:	61fb      	str	r3, [r7, #28]
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007288:	f002 f860 	bl	800934c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800728c:	f3ef 8211 	mrs	r2, BASEPRI
 8007290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007294:	b672      	cpsid	i
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	b662      	cpsie	i
 80072a4:	61ba      	str	r2, [r7, #24]
 80072a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d302      	bcc.n	80072be <xQueueGenericSendFromISR+0xd2>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d12c      	bne.n	8007318 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072ce:	f000 fbd1 	bl	8007a74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072da:	d112      	bne.n	8007302 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d016      	beq.n	8007312 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e6:	3324      	adds	r3, #36	@ 0x24
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 fa29 	bl	8008740 <xTaskRemoveFromEventList>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00e      	beq.n	8007312 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e007      	b.n	8007312 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007302:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007306:	3301      	adds	r3, #1
 8007308:	b2db      	uxtb	r3, r3
 800730a:	b25a      	sxtb	r2, r3
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007312:	2301      	movs	r3, #1
 8007314:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007316:	e001      	b.n	800731c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007318:	2300      	movs	r3, #0
 800731a:	637b      	str	r3, [r7, #52]	@ 0x34
 800731c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007326:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800732a:	4618      	mov	r0, r3
 800732c:	3738      	adds	r7, #56	@ 0x38
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b08e      	sub	sp, #56	@ 0x38
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10d      	bne.n	8007362 <xQueueGiveFromISR+0x30>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734a:	b672      	cpsid	i
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	b662      	cpsie	i
 800735a:	623b      	str	r3, [r7, #32]
}
 800735c:	bf00      	nop
 800735e:	bf00      	nop
 8007360:	e7fd      	b.n	800735e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <xQueueGiveFromISR+0x54>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736e:	b672      	cpsid	i
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	b662      	cpsie	i
 800737e:	61fb      	str	r3, [r7, #28]
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	e7fd      	b.n	8007382 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <xQueueGiveFromISR+0x64>
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <xQueueGiveFromISR+0x68>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <xQueueGiveFromISR+0x6a>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10d      	bne.n	80073bc <xQueueGiveFromISR+0x8a>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a4:	b672      	cpsid	i
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	b662      	cpsie	i
 80073b4:	61bb      	str	r3, [r7, #24]
}
 80073b6:	bf00      	nop
 80073b8:	bf00      	nop
 80073ba:	e7fd      	b.n	80073b8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073bc:	f001 ffc6 	bl	800934c <vPortValidateInterruptPriority>
	__asm volatile
 80073c0:	f3ef 8211 	mrs	r2, BASEPRI
 80073c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c8:	b672      	cpsid	i
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	b662      	cpsie	i
 80073d8:	617a      	str	r2, [r7, #20]
 80073da:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80073dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d22b      	bcs.n	8007448 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007402:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740a:	d112      	bne.n	8007432 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800740c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	d016      	beq.n	8007442 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	3324      	adds	r3, #36	@ 0x24
 8007418:	4618      	mov	r0, r3
 800741a:	f001 f991 	bl	8008740 <xTaskRemoveFromEventList>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00e      	beq.n	8007442 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2201      	movs	r2, #1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e007      	b.n	8007442 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007432:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007436:	3301      	adds	r3, #1
 8007438:	b2db      	uxtb	r3, r3
 800743a:	b25a      	sxtb	r2, r3
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007442:	2301      	movs	r3, #1
 8007444:	637b      	str	r3, [r7, #52]	@ 0x34
 8007446:	e001      	b.n	800744c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007448:	2300      	movs	r3, #0
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
 800744c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f383 8811 	msr	BASEPRI, r3
}
 8007456:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800745a:	4618      	mov	r0, r3
 800745c:	3738      	adds	r7, #56	@ 0x38
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08c      	sub	sp, #48	@ 0x30
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007470:	2300      	movs	r3, #0
 8007472:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10d      	bne.n	800749a <xQueueReceive+0x36>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	b672      	cpsid	i
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	b662      	cpsie	i
 8007492:	623b      	str	r3, [r7, #32]
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d103      	bne.n	80074a8 <xQueueReceive+0x44>
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <xQueueReceive+0x48>
 80074a8:	2301      	movs	r3, #1
 80074aa:	e000      	b.n	80074ae <xQueueReceive+0x4a>
 80074ac:	2300      	movs	r3, #0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10d      	bne.n	80074ce <xQueueReceive+0x6a>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	b672      	cpsid	i
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	b662      	cpsie	i
 80074c6:	61fb      	str	r3, [r7, #28]
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	e7fd      	b.n	80074ca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074ce:	f001 fb05 	bl	8008adc <xTaskGetSchedulerState>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <xQueueReceive+0x7a>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <xQueueReceive+0x7e>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <xQueueReceive+0x80>
 80074e2:	2300      	movs	r3, #0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10d      	bne.n	8007504 <xQueueReceive+0xa0>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	b672      	cpsid	i
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	b662      	cpsie	i
 80074fc:	61bb      	str	r3, [r7, #24]
}
 80074fe:	bf00      	nop
 8007500:	bf00      	nop
 8007502:	e7fd      	b.n	8007500 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007504:	f001 fe3a 	bl	800917c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	2b00      	cmp	r3, #0
 8007512:	d01f      	beq.n	8007554 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007518:	f000 fb16 	bl	8007b48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	1e5a      	subs	r2, r3, #1
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00f      	beq.n	800754c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800752c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752e:	3310      	adds	r3, #16
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f905 	bl	8008740 <xTaskRemoveFromEventList>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800753c:	4b3c      	ldr	r3, [pc, #240]	@ (8007630 <xQueueReceive+0x1cc>)
 800753e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800754c:	f001 fe4c 	bl	80091e8 <vPortExitCritical>
				return pdPASS;
 8007550:	2301      	movs	r3, #1
 8007552:	e069      	b.n	8007628 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d103      	bne.n	8007562 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800755a:	f001 fe45 	bl	80091e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800755e:	2300      	movs	r3, #0
 8007560:	e062      	b.n	8007628 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007568:	f107 0310 	add.w	r3, r7, #16
 800756c:	4618      	mov	r0, r3
 800756e:	f001 f94d 	bl	800880c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007576:	f001 fe37 	bl	80091e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800757a:	f000 fead 	bl	80082d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800757e:	f001 fdfd 	bl	800917c <vPortEnterCritical>
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007588:	b25b      	sxtb	r3, r3
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d103      	bne.n	8007598 <xQueueReceive+0x134>
 8007590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800759e:	b25b      	sxtb	r3, r3
 80075a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a4:	d103      	bne.n	80075ae <xQueueReceive+0x14a>
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075ae:	f001 fe1b 	bl	80091e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075b2:	1d3a      	adds	r2, r7, #4
 80075b4:	f107 0310 	add.w	r3, r7, #16
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 f93c 	bl	8008838 <xTaskCheckForTimeOut>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d123      	bne.n	800760e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075c8:	f000 fb36 	bl	8007c38 <prvIsQueueEmpty>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d017      	beq.n	8007602 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d4:	3324      	adds	r3, #36	@ 0x24
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 f888 	bl	80086f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e2:	f000 fad7 	bl	8007b94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075e6:	f000 fe85 	bl	80082f4 <xTaskResumeAll>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d189      	bne.n	8007504 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80075f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007630 <xQueueReceive+0x1cc>)
 80075f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	e780      	b.n	8007504 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007604:	f000 fac6 	bl	8007b94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007608:	f000 fe74 	bl	80082f4 <xTaskResumeAll>
 800760c:	e77a      	b.n	8007504 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800760e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007610:	f000 fac0 	bl	8007b94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007614:	f000 fe6e 	bl	80082f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800761a:	f000 fb0d 	bl	8007c38 <prvIsQueueEmpty>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f43f af6f 	beq.w	8007504 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007626:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007628:	4618      	mov	r0, r3
 800762a:	3730      	adds	r7, #48	@ 0x30
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08e      	sub	sp, #56	@ 0x38
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800763e:	2300      	movs	r3, #0
 8007640:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007646:	2300      	movs	r3, #0
 8007648:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800764a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10d      	bne.n	800766c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007654:	b672      	cpsid	i
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	b662      	cpsie	i
 8007664:	623b      	str	r3, [r7, #32]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00d      	beq.n	8007690 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007678:	b672      	cpsid	i
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	b662      	cpsie	i
 8007688:	61fb      	str	r3, [r7, #28]
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007690:	f001 fa24 	bl	8008adc <xTaskGetSchedulerState>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <xQueueSemaphoreTake+0x6c>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <xQueueSemaphoreTake+0x70>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <xQueueSemaphoreTake+0x72>
 80076a4:	2300      	movs	r3, #0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10d      	bne.n	80076c6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ae:	b672      	cpsid	i
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	b662      	cpsie	i
 80076be:	61bb      	str	r3, [r7, #24]
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076c6:	f001 fd59 	bl	800917c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80076ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80076d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d024      	beq.n	8007720 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	1e5a      	subs	r2, r3, #1
 80076da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d104      	bne.n	80076f0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076e6:	f001 fbc3 	bl	8008e70 <pvTaskIncrementMutexHeldCount>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00f      	beq.n	8007718 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fa:	3310      	adds	r3, #16
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f81f 	bl	8008740 <xTaskRemoveFromEventList>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007708:	4b55      	ldr	r3, [pc, #340]	@ (8007860 <xQueueSemaphoreTake+0x22c>)
 800770a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007718:	f001 fd66 	bl	80091e8 <vPortExitCritical>
				return pdPASS;
 800771c:	2301      	movs	r3, #1
 800771e:	e09a      	b.n	8007856 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d114      	bne.n	8007750 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00d      	beq.n	8007748 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007730:	b672      	cpsid	i
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	b662      	cpsie	i
 8007740:	617b      	str	r3, [r7, #20]
}
 8007742:	bf00      	nop
 8007744:	bf00      	nop
 8007746:	e7fd      	b.n	8007744 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007748:	f001 fd4e 	bl	80091e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800774c:	2300      	movs	r3, #0
 800774e:	e082      	b.n	8007856 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007752:	2b00      	cmp	r3, #0
 8007754:	d106      	bne.n	8007764 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007756:	f107 030c 	add.w	r3, r7, #12
 800775a:	4618      	mov	r0, r3
 800775c:	f001 f856 	bl	800880c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007760:	2301      	movs	r3, #1
 8007762:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007764:	f001 fd40 	bl	80091e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007768:	f000 fdb6 	bl	80082d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800776c:	f001 fd06 	bl	800917c <vPortEnterCritical>
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007776:	b25b      	sxtb	r3, r3
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d103      	bne.n	8007786 <xQueueSemaphoreTake+0x152>
 800777e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800778c:	b25b      	sxtb	r3, r3
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007792:	d103      	bne.n	800779c <xQueueSemaphoreTake+0x168>
 8007794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800779c:	f001 fd24 	bl	80091e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077a0:	463a      	mov	r2, r7
 80077a2:	f107 030c 	add.w	r3, r7, #12
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 f845 	bl	8008838 <xTaskCheckForTimeOut>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d132      	bne.n	800781a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077b6:	f000 fa3f 	bl	8007c38 <prvIsQueueEmpty>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d026      	beq.n	800780e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80077c8:	f001 fcd8 	bl	800917c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 f9a1 	bl	8008b18 <xTaskPriorityInherit>
 80077d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80077d8:	f001 fd06 	bl	80091e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077de:	3324      	adds	r3, #36	@ 0x24
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	4611      	mov	r1, r2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 ff83 	bl	80086f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077ec:	f000 f9d2 	bl	8007b94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077f0:	f000 fd80 	bl	80082f4 <xTaskResumeAll>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f47f af65 	bne.w	80076c6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80077fc:	4b18      	ldr	r3, [pc, #96]	@ (8007860 <xQueueSemaphoreTake+0x22c>)
 80077fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	e75b      	b.n	80076c6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800780e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007810:	f000 f9c0 	bl	8007b94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007814:	f000 fd6e 	bl	80082f4 <xTaskResumeAll>
 8007818:	e755      	b.n	80076c6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800781a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800781c:	f000 f9ba 	bl	8007b94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007820:	f000 fd68 	bl	80082f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007824:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007826:	f000 fa07 	bl	8007c38 <prvIsQueueEmpty>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	f43f af4a 	beq.w	80076c6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00d      	beq.n	8007854 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007838:	f001 fca0 	bl	800917c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800783c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800783e:	f000 f901 	bl	8007a44 <prvGetDisinheritPriorityAfterTimeout>
 8007842:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800784a:	4618      	mov	r0, r3
 800784c:	f001 fa70 	bl	8008d30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007850:	f001 fcca 	bl	80091e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007854:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007856:	4618      	mov	r0, r3
 8007858:	3738      	adds	r7, #56	@ 0x38
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08e      	sub	sp, #56	@ 0x38
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10d      	bne.n	8007896 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787e:	b672      	cpsid	i
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	b662      	cpsie	i
 800788e:	623b      	str	r3, [r7, #32]
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	e7fd      	b.n	8007892 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <xQueueReceiveFromISR+0x40>
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <xQueueReceiveFromISR+0x44>
 80078a4:	2301      	movs	r3, #1
 80078a6:	e000      	b.n	80078aa <xQueueReceiveFromISR+0x46>
 80078a8:	2300      	movs	r3, #0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10d      	bne.n	80078ca <xQueueReceiveFromISR+0x66>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	b672      	cpsid	i
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	b662      	cpsie	i
 80078c2:	61fb      	str	r3, [r7, #28]
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop
 80078c8:	e7fd      	b.n	80078c6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078ca:	f001 fd3f 	bl	800934c <vPortValidateInterruptPriority>
	__asm volatile
 80078ce:	f3ef 8211 	mrs	r2, BASEPRI
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	b672      	cpsid	i
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	b662      	cpsie	i
 80078e6:	61ba      	str	r2, [r7, #24]
 80078e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80078ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d02f      	beq.n	800795a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007908:	f000 f91e 	bl	8007b48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800790c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790e:	1e5a      	subs	r2, r3, #1
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007914:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d112      	bne.n	8007944 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d016      	beq.n	8007954 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007928:	3310      	adds	r3, #16
 800792a:	4618      	mov	r0, r3
 800792c:	f000 ff08 	bl	8008740 <xTaskRemoveFromEventList>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00e      	beq.n	8007954 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	e007      	b.n	8007954 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007948:	3301      	adds	r3, #1
 800794a:	b2db      	uxtb	r3, r3
 800794c:	b25a      	sxtb	r2, r3
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007954:	2301      	movs	r3, #1
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
 8007958:	e001      	b.n	800795e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800795a:	2300      	movs	r3, #0
 800795c:	637b      	str	r3, [r7, #52]	@ 0x34
 800795e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007960:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f383 8811 	msr	BASEPRI, r3
}
 8007968:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800796a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800796c:	4618      	mov	r0, r3
 800796e:	3738      	adds	r7, #56	@ 0x38
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10d      	bne.n	800799e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007986:	b672      	cpsid	i
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	b662      	cpsie	i
 8007996:	60bb      	str	r3, [r7, #8]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800799e:	f001 fbed 	bl	800917c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80079a8:	f001 fc1e 	bl	80091e8 <vPortExitCritical>

	return uxReturn;
 80079ac:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80079b6:	b480      	push	{r7}
 80079b8:	b087      	sub	sp, #28
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10d      	bne.n	80079e4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	b672      	cpsid	i
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	b662      	cpsie	i
 80079dc:	60fb      	str	r3, [r7, #12]
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80079ea:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80079ec:	4618      	mov	r0, r3
 80079ee:	371c      	adds	r7, #28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10d      	bne.n	8007a26 <vQueueDelete+0x2e>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0e:	b672      	cpsid	i
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	b662      	cpsie	i
 8007a1e:	60bb      	str	r3, [r7, #8]
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	e7fd      	b.n	8007a22 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f934 	bl	8007c94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d102      	bne.n	8007a3c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f001 fd9c 	bl	8009574 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d006      	beq.n	8007a62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f1c3 0307 	rsb	r3, r3, #7
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e001      	b.n	8007a66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007a66:	68fb      	ldr	r3, [r7, #12]
	}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10d      	bne.n	8007aae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d14d      	bne.n	8007b36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f001 f8ba 	bl	8008c18 <xTaskPriorityDisinherit>
 8007aa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	e043      	b.n	8007b36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d119      	bne.n	8007ae8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6858      	ldr	r0, [r3, #4]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abc:	461a      	mov	r2, r3
 8007abe:	68b9      	ldr	r1, [r7, #8]
 8007ac0:	f00f f861 	bl	8016b86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007acc:	441a      	add	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d32b      	bcc.n	8007b36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	605a      	str	r2, [r3, #4]
 8007ae6:	e026      	b.n	8007b36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	68d8      	ldr	r0, [r3, #12]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af0:	461a      	mov	r2, r3
 8007af2:	68b9      	ldr	r1, [r7, #8]
 8007af4:	f00f f847 	bl	8016b86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b00:	425b      	negs	r3, r3
 8007b02:	441a      	add	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d207      	bcs.n	8007b24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	425b      	negs	r3, r3
 8007b1e:	441a      	add	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d105      	bne.n	8007b36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007b3e:	697b      	ldr	r3, [r7, #20]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d018      	beq.n	8007b8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b62:	441a      	add	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d303      	bcc.n	8007b7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68d9      	ldr	r1, [r3, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b84:	461a      	mov	r2, r3
 8007b86:	6838      	ldr	r0, [r7, #0]
 8007b88:	f00e fffd 	bl	8016b86 <memcpy>
	}
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b9c:	f001 faee 	bl	800917c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ba6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ba8:	e011      	b.n	8007bce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d012      	beq.n	8007bd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3324      	adds	r3, #36	@ 0x24
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fdc2 	bl	8008740 <xTaskRemoveFromEventList>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bc2:	f000 fea1 	bl	8008908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dce9      	bgt.n	8007baa <prvUnlockQueue+0x16>
 8007bd6:	e000      	b.n	8007bda <prvUnlockQueue+0x46>
					break;
 8007bd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	22ff      	movs	r2, #255	@ 0xff
 8007bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007be2:	f001 fb01 	bl	80091e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007be6:	f001 fac9 	bl	800917c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bf2:	e011      	b.n	8007c18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d012      	beq.n	8007c22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3310      	adds	r3, #16
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fd9d 	bl	8008740 <xTaskRemoveFromEventList>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c0c:	f000 fe7c 	bl	8008908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dce9      	bgt.n	8007bf4 <prvUnlockQueue+0x60>
 8007c20:	e000      	b.n	8007c24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	22ff      	movs	r2, #255	@ 0xff
 8007c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007c2c:	f001 fadc 	bl	80091e8 <vPortExitCritical>
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c40:	f001 fa9c 	bl	800917c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d102      	bne.n	8007c52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	e001      	b.n	8007c56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c56:	f001 fac7 	bl	80091e8 <vPortExitCritical>

	return xReturn;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c6c:	f001 fa86 	bl	800917c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d102      	bne.n	8007c82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e001      	b.n	8007c86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c86:	f001 faaf 	bl	80091e8 <vPortExitCritical>

	return xReturn;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	e016      	b.n	8007cd0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007ca2:	4a10      	ldr	r2, [pc, #64]	@ (8007ce4 <vQueueUnregisterQueue+0x50>)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	4413      	add	r3, r2
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d10b      	bne.n	8007cca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce4 <vQueueUnregisterQueue+0x50>)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007cbc:	4a09      	ldr	r2, [pc, #36]	@ (8007ce4 <vQueueUnregisterQueue+0x50>)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	4413      	add	r3, r2
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	605a      	str	r2, [r3, #4]
				break;
 8007cc8:	e006      	b.n	8007cd8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b07      	cmp	r3, #7
 8007cd4:	d9e5      	bls.n	8007ca2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	200050ac 	.word	0x200050ac

08007ce8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08e      	sub	sp, #56	@ 0x38
 8007cec:	af04      	add	r7, sp, #16
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10d      	bne.n	8007d18 <xTaskCreateStatic+0x30>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d00:	b672      	cpsid	i
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	b662      	cpsie	i
 8007d10:	623b      	str	r3, [r7, #32]
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <xTaskCreateStatic+0x52>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d22:	b672      	cpsid	i
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	b662      	cpsie	i
 8007d32:	61fb      	str	r3, [r7, #28]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d3a:	23a8      	movs	r3, #168	@ 0xa8
 8007d3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2ba8      	cmp	r3, #168	@ 0xa8
 8007d42:	d00d      	beq.n	8007d60 <xTaskCreateStatic+0x78>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	b672      	cpsid	i
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	b662      	cpsie	i
 8007d58:	61bb      	str	r3, [r7, #24]
}
 8007d5a:	bf00      	nop
 8007d5c:	bf00      	nop
 8007d5e:	e7fd      	b.n	8007d5c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01e      	beq.n	8007da6 <xTaskCreateStatic+0xbe>
 8007d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01b      	beq.n	8007da6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d80:	2300      	movs	r3, #0
 8007d82:	9303      	str	r3, [sp, #12]
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	9302      	str	r3, [sp, #8]
 8007d88:	f107 0314 	add.w	r3, r7, #20
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f851 	bl	8007e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007da0:	f000 f8f6 	bl	8007f90 <prvAddNewTaskToReadyList>
 8007da4:	e001      	b.n	8007daa <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007daa:	697b      	ldr	r3, [r7, #20]
	}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3728      	adds	r7, #40	@ 0x28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08c      	sub	sp, #48	@ 0x30
 8007db8:	af04      	add	r7, sp, #16
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 fb05 	bl	80093d8 <pvPortMalloc>
 8007dce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00e      	beq.n	8007df4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007dd6:	20a8      	movs	r0, #168	@ 0xa8
 8007dd8:	f001 fafe 	bl	80093d8 <pvPortMalloc>
 8007ddc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007dea:	e005      	b.n	8007df8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007dec:	6978      	ldr	r0, [r7, #20]
 8007dee:	f001 fbc1 	bl	8009574 <vPortFree>
 8007df2:	e001      	b.n	8007df8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007df4:	2300      	movs	r3, #0
 8007df6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d017      	beq.n	8007e2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9303      	str	r3, [sp, #12]
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	9302      	str	r3, [sp, #8]
 8007e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	68b9      	ldr	r1, [r7, #8]
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f80f 	bl	8007e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e22:	69f8      	ldr	r0, [r7, #28]
 8007e24:	f000 f8b4 	bl	8007f90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	e002      	b.n	8007e34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e34:	69bb      	ldr	r3, [r7, #24]
	}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007e58:	440b      	add	r3, r1
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f023 0307 	bic.w	r3, r3, #7
 8007e66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00d      	beq.n	8007e8e <prvInitialiseNewTask+0x4e>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	b672      	cpsid	i
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	b662      	cpsie	i
 8007e86:	617b      	str	r3, [r7, #20]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <prvInitialiseNewTask+0x4a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01f      	beq.n	8007eda <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61fb      	str	r3, [r7, #28]
 8007e9e:	e012      	b.n	8007ec6 <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	7819      	ldrb	r1, [r3, #0]
 8007ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	4413      	add	r3, r2
 8007eae:	3334      	adds	r3, #52	@ 0x34
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	4413      	add	r3, r2
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	61fb      	str	r3, [r7, #28]
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2b0f      	cmp	r3, #15
 8007eca:	d9e9      	bls.n	8007ea0 <prvInitialiseNewTask+0x60>
 8007ecc:	e000      	b.n	8007ed0 <prvInitialiseNewTask+0x90>
			{
				break;
 8007ece:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ed8:	e003      	b.n	8007ee2 <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee4:	2b06      	cmp	r3, #6
 8007ee6:	d901      	bls.n	8007eec <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ee8:	2306      	movs	r3, #6
 8007eea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ef6:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efa:	2200      	movs	r2, #0
 8007efc:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	3304      	adds	r3, #4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fe31 	bl	8006b6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	3318      	adds	r3, #24
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fe2c 	bl	8006b6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	f1c3 0207 	rsb	r2, r3, #7
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f26:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	3354      	adds	r3, #84	@ 0x54
 8007f42:	224c      	movs	r2, #76	@ 0x4c
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f00e fd49 	bl	80169de <memset>
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8007f84 <prvInitialiseNewTask+0x144>)
 8007f50:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f54:	4a0c      	ldr	r2, [pc, #48]	@ (8007f88 <prvInitialiseNewTask+0x148>)
 8007f56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f8c <prvInitialiseNewTask+0x14c>)
 8007f5c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	68f9      	ldr	r1, [r7, #12]
 8007f62:	69b8      	ldr	r0, [r7, #24]
 8007f64:	f000 fffe 	bl	8008f64 <pxPortInitialiseStack>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f7a:	bf00      	nop
 8007f7c:	3720      	adds	r7, #32
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000c704 	.word	0x2000c704
 8007f88:	2000c76c 	.word	0x2000c76c
 8007f8c:	2000c7d4 	.word	0x2000c7d4

08007f90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f98:	f001 f8f0 	bl	800917c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8008048 <prvAddNewTaskToReadyList+0xb8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	4a29      	ldr	r2, [pc, #164]	@ (8008048 <prvAddNewTaskToReadyList+0xb8>)
 8007fa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fa6:	4b29      	ldr	r3, [pc, #164]	@ (800804c <prvAddNewTaskToReadyList+0xbc>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fae:	4a27      	ldr	r2, [pc, #156]	@ (800804c <prvAddNewTaskToReadyList+0xbc>)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fb4:	4b24      	ldr	r3, [pc, #144]	@ (8008048 <prvAddNewTaskToReadyList+0xb8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d110      	bne.n	8007fde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fbc:	f000 fcc8 	bl	8008950 <prvInitialiseTaskLists>
 8007fc0:	e00d      	b.n	8007fde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fc2:	4b23      	ldr	r3, [pc, #140]	@ (8008050 <prvAddNewTaskToReadyList+0xc0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d109      	bne.n	8007fde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fca:	4b20      	ldr	r3, [pc, #128]	@ (800804c <prvAddNewTaskToReadyList+0xbc>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d802      	bhi.n	8007fde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800804c <prvAddNewTaskToReadyList+0xbc>)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fde:	4b1d      	ldr	r3, [pc, #116]	@ (8008054 <prvAddNewTaskToReadyList+0xc4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8008054 <prvAddNewTaskToReadyList+0xc4>)
 8007fe6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	2201      	movs	r2, #1
 8007fee:	409a      	lsls	r2, r3
 8007ff0:	4b19      	ldr	r3, [pc, #100]	@ (8008058 <prvAddNewTaskToReadyList+0xc8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	4a18      	ldr	r2, [pc, #96]	@ (8008058 <prvAddNewTaskToReadyList+0xc8>)
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4a15      	ldr	r2, [pc, #84]	@ (800805c <prvAddNewTaskToReadyList+0xcc>)
 8008008:	441a      	add	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3304      	adds	r3, #4
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f7fe fdb7 	bl	8006b84 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008016:	f001 f8e7 	bl	80091e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800801a:	4b0d      	ldr	r3, [pc, #52]	@ (8008050 <prvAddNewTaskToReadyList+0xc0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00e      	beq.n	8008040 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008022:	4b0a      	ldr	r3, [pc, #40]	@ (800804c <prvAddNewTaskToReadyList+0xbc>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802c:	429a      	cmp	r2, r3
 800802e:	d207      	bcs.n	8008040 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008030:	4b0b      	ldr	r3, [pc, #44]	@ (8008060 <prvAddNewTaskToReadyList+0xd0>)
 8008032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	200051ec 	.word	0x200051ec
 800804c:	200050ec 	.word	0x200050ec
 8008050:	200051f8 	.word	0x200051f8
 8008054:	20005208 	.word	0x20005208
 8008058:	200051f4 	.word	0x200051f4
 800805c:	200050f0 	.word	0x200050f0
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800806c:	f001 f886 	bl	800917c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <vTaskDelete+0x18>
 8008076:	4b3a      	ldr	r3, [pc, #232]	@ (8008160 <vTaskDelete+0xfc>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	e000      	b.n	800807e <vTaskDelete+0x1a>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3304      	adds	r3, #4
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe fdda 	bl	8006c3e <uxListRemove>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d115      	bne.n	80080bc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008094:	4933      	ldr	r1, [pc, #204]	@ (8008164 <vTaskDelete+0x100>)
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <vTaskDelete+0x58>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080aa:	2201      	movs	r2, #1
 80080ac:	fa02 f303 	lsl.w	r3, r2, r3
 80080b0:	43da      	mvns	r2, r3
 80080b2:	4b2d      	ldr	r3, [pc, #180]	@ (8008168 <vTaskDelete+0x104>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4013      	ands	r3, r2
 80080b8:	4a2b      	ldr	r2, [pc, #172]	@ (8008168 <vTaskDelete+0x104>)
 80080ba:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3318      	adds	r3, #24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fe fdb8 	bl	8006c3e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80080ce:	4b27      	ldr	r3, [pc, #156]	@ (800816c <vTaskDelete+0x108>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3301      	adds	r3, #1
 80080d4:	4a25      	ldr	r2, [pc, #148]	@ (800816c <vTaskDelete+0x108>)
 80080d6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80080d8:	4b21      	ldr	r3, [pc, #132]	@ (8008160 <vTaskDelete+0xfc>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d10b      	bne.n	80080fa <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3304      	adds	r3, #4
 80080e6:	4619      	mov	r1, r3
 80080e8:	4821      	ldr	r0, [pc, #132]	@ (8008170 <vTaskDelete+0x10c>)
 80080ea:	f7fe fd4b 	bl	8006b84 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80080ee:	4b21      	ldr	r3, [pc, #132]	@ (8008174 <vTaskDelete+0x110>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008174 <vTaskDelete+0x110>)
 80080f6:	6013      	str	r3, [r2, #0]
 80080f8:	e009      	b.n	800810e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80080fa:	4b1f      	ldr	r3, [pc, #124]	@ (8008178 <vTaskDelete+0x114>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3b01      	subs	r3, #1
 8008100:	4a1d      	ldr	r2, [pc, #116]	@ (8008178 <vTaskDelete+0x114>)
 8008102:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 fc91 	bl	8008a2c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800810a:	f000 fcc7 	bl	8008a9c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800810e:	f001 f86b 	bl	80091e8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008112:	4b1a      	ldr	r3, [pc, #104]	@ (800817c <vTaskDelete+0x118>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d01e      	beq.n	8008158 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800811a:	4b11      	ldr	r3, [pc, #68]	@ (8008160 <vTaskDelete+0xfc>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	429a      	cmp	r2, r3
 8008122:	d119      	bne.n	8008158 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008124:	4b16      	ldr	r3, [pc, #88]	@ (8008180 <vTaskDelete+0x11c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00d      	beq.n	8008148 <vTaskDelete+0xe4>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	b672      	cpsid	i
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	b662      	cpsie	i
 8008140:	60bb      	str	r3, [r7, #8]
}
 8008142:	bf00      	nop
 8008144:	bf00      	nop
 8008146:	e7fd      	b.n	8008144 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8008148:	4b0e      	ldr	r3, [pc, #56]	@ (8008184 <vTaskDelete+0x120>)
 800814a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008158:	bf00      	nop
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200050ec 	.word	0x200050ec
 8008164:	200050f0 	.word	0x200050f0
 8008168:	200051f4 	.word	0x200051f4
 800816c:	20005208 	.word	0x20005208
 8008170:	200051c0 	.word	0x200051c0
 8008174:	200051d4 	.word	0x200051d4
 8008178:	200051ec 	.word	0x200051ec
 800817c:	200051f8 	.word	0x200051f8
 8008180:	20005214 	.word	0x20005214
 8008184:	e000ed04 	.word	0xe000ed04

08008188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d01a      	beq.n	80081d0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800819a:	4b15      	ldr	r3, [pc, #84]	@ (80081f0 <vTaskDelay+0x68>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00d      	beq.n	80081be <vTaskDelay+0x36>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a6:	b672      	cpsid	i
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	b662      	cpsie	i
 80081b6:	60bb      	str	r3, [r7, #8]
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	e7fd      	b.n	80081ba <vTaskDelay+0x32>
			vTaskSuspendAll();
 80081be:	f000 f88b 	bl	80082d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081c2:	2100      	movs	r1, #0
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fe67 	bl	8008e98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081ca:	f000 f893 	bl	80082f4 <xTaskResumeAll>
 80081ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d107      	bne.n	80081e6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80081d6:	4b07      	ldr	r3, [pc, #28]	@ (80081f4 <vTaskDelay+0x6c>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20005214 	.word	0x20005214
 80081f4:	e000ed04 	.word	0xe000ed04

080081f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08a      	sub	sp, #40	@ 0x28
 80081fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008206:	463a      	mov	r2, r7
 8008208:	1d39      	adds	r1, r7, #4
 800820a:	f107 0308 	add.w	r3, r7, #8
 800820e:	4618      	mov	r0, r3
 8008210:	f7f8 f9fc 	bl	800060c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	9202      	str	r2, [sp, #8]
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	2300      	movs	r3, #0
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	460a      	mov	r2, r1
 8008226:	4924      	ldr	r1, [pc, #144]	@ (80082b8 <vTaskStartScheduler+0xc0>)
 8008228:	4824      	ldr	r0, [pc, #144]	@ (80082bc <vTaskStartScheduler+0xc4>)
 800822a:	f7ff fd5d 	bl	8007ce8 <xTaskCreateStatic>
 800822e:	4603      	mov	r3, r0
 8008230:	4a23      	ldr	r2, [pc, #140]	@ (80082c0 <vTaskStartScheduler+0xc8>)
 8008232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008234:	4b22      	ldr	r3, [pc, #136]	@ (80082c0 <vTaskStartScheduler+0xc8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800823c:	2301      	movs	r3, #1
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	e001      	b.n	8008246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d11f      	bne.n	800828c <vTaskStartScheduler+0x94>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008250:	b672      	cpsid	i
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	b662      	cpsie	i
 8008260:	613b      	str	r3, [r7, #16]
}
 8008262:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008264:	4b17      	ldr	r3, [pc, #92]	@ (80082c4 <vTaskStartScheduler+0xcc>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3354      	adds	r3, #84	@ 0x54
 800826a:	4a17      	ldr	r2, [pc, #92]	@ (80082c8 <vTaskStartScheduler+0xd0>)
 800826c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800826e:	4b17      	ldr	r3, [pc, #92]	@ (80082cc <vTaskStartScheduler+0xd4>)
 8008270:	f04f 32ff 	mov.w	r2, #4294967295
 8008274:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008276:	4b16      	ldr	r3, [pc, #88]	@ (80082d0 <vTaskStartScheduler+0xd8>)
 8008278:	2201      	movs	r2, #1
 800827a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800827c:	4b15      	ldr	r3, [pc, #84]	@ (80082d4 <vTaskStartScheduler+0xdc>)
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008282:	f7f8 f9b3 	bl	80005ec <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008286:	f000 fefb 	bl	8009080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800828a:	e011      	b.n	80082b0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d10d      	bne.n	80082b0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008298:	b672      	cpsid	i
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	b662      	cpsie	i
 80082a8:	60fb      	str	r3, [r7, #12]
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	e7fd      	b.n	80082ac <vTaskStartScheduler+0xb4>
}
 80082b0:	bf00      	nop
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	08017a58 	.word	0x08017a58
 80082bc:	08008921 	.word	0x08008921
 80082c0:	20005210 	.word	0x20005210
 80082c4:	200050ec 	.word	0x200050ec
 80082c8:	2000003c 	.word	0x2000003c
 80082cc:	2000520c 	.word	0x2000520c
 80082d0:	200051f8 	.word	0x200051f8
 80082d4:	200051f0 	.word	0x200051f0

080082d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80082dc:	4b04      	ldr	r3, [pc, #16]	@ (80082f0 <vTaskSuspendAll+0x18>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3301      	adds	r3, #1
 80082e2:	4a03      	ldr	r2, [pc, #12]	@ (80082f0 <vTaskSuspendAll+0x18>)
 80082e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80082e6:	bf00      	nop
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	20005214 	.word	0x20005214

080082f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082fe:	2300      	movs	r3, #0
 8008300:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008302:	4b43      	ldr	r3, [pc, #268]	@ (8008410 <xTaskResumeAll+0x11c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10d      	bne.n	8008326 <xTaskResumeAll+0x32>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830e:	b672      	cpsid	i
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	b662      	cpsie	i
 800831e:	603b      	str	r3, [r7, #0]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008326:	f000 ff29 	bl	800917c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800832a:	4b39      	ldr	r3, [pc, #228]	@ (8008410 <xTaskResumeAll+0x11c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3b01      	subs	r3, #1
 8008330:	4a37      	ldr	r2, [pc, #220]	@ (8008410 <xTaskResumeAll+0x11c>)
 8008332:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008334:	4b36      	ldr	r3, [pc, #216]	@ (8008410 <xTaskResumeAll+0x11c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d161      	bne.n	8008400 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800833c:	4b35      	ldr	r3, [pc, #212]	@ (8008414 <xTaskResumeAll+0x120>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d05d      	beq.n	8008400 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008344:	e02e      	b.n	80083a4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008346:	4b34      	ldr	r3, [pc, #208]	@ (8008418 <xTaskResumeAll+0x124>)
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3318      	adds	r3, #24
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fc73 	bl	8006c3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3304      	adds	r3, #4
 800835c:	4618      	mov	r0, r3
 800835e:	f7fe fc6e 	bl	8006c3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	2201      	movs	r2, #1
 8008368:	409a      	lsls	r2, r3
 800836a:	4b2c      	ldr	r3, [pc, #176]	@ (800841c <xTaskResumeAll+0x128>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4313      	orrs	r3, r2
 8008370:	4a2a      	ldr	r2, [pc, #168]	@ (800841c <xTaskResumeAll+0x128>)
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4a27      	ldr	r2, [pc, #156]	@ (8008420 <xTaskResumeAll+0x12c>)
 8008382:	441a      	add	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3304      	adds	r3, #4
 8008388:	4619      	mov	r1, r3
 800838a:	4610      	mov	r0, r2
 800838c:	f7fe fbfa 	bl	8006b84 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008394:	4b23      	ldr	r3, [pc, #140]	@ (8008424 <xTaskResumeAll+0x130>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	429a      	cmp	r2, r3
 800839c:	d302      	bcc.n	80083a4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800839e:	4b22      	ldr	r3, [pc, #136]	@ (8008428 <xTaskResumeAll+0x134>)
 80083a0:	2201      	movs	r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008418 <xTaskResumeAll+0x124>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1cc      	bne.n	8008346 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083b2:	f000 fb73 	bl	8008a9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80083b6:	4b1d      	ldr	r3, [pc, #116]	@ (800842c <xTaskResumeAll+0x138>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d010      	beq.n	80083e4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80083c2:	f000 f859 	bl	8008478 <xTaskIncrementTick>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80083cc:	4b16      	ldr	r3, [pc, #88]	@ (8008428 <xTaskResumeAll+0x134>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1f1      	bne.n	80083c2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80083de:	4b13      	ldr	r3, [pc, #76]	@ (800842c <xTaskResumeAll+0x138>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083e4:	4b10      	ldr	r3, [pc, #64]	@ (8008428 <xTaskResumeAll+0x134>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d009      	beq.n	8008400 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083ec:	2301      	movs	r3, #1
 80083ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008430 <xTaskResumeAll+0x13c>)
 80083f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008400:	f000 fef2 	bl	80091e8 <vPortExitCritical>

	return xAlreadyYielded;
 8008404:	68bb      	ldr	r3, [r7, #8]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20005214 	.word	0x20005214
 8008414:	200051ec 	.word	0x200051ec
 8008418:	200051ac 	.word	0x200051ac
 800841c:	200051f4 	.word	0x200051f4
 8008420:	200050f0 	.word	0x200050f0
 8008424:	200050ec 	.word	0x200050ec
 8008428:	20005200 	.word	0x20005200
 800842c:	200051fc 	.word	0x200051fc
 8008430:	e000ed04 	.word	0xe000ed04

08008434 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800843a:	4b05      	ldr	r3, [pc, #20]	@ (8008450 <xTaskGetTickCount+0x1c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008440:	687b      	ldr	r3, [r7, #4]
}
 8008442:	4618      	mov	r0, r3
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	200051f0 	.word	0x200051f0

08008454 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800845a:	f000 ff77 	bl	800934c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800845e:	2300      	movs	r3, #0
 8008460:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008462:	4b04      	ldr	r3, [pc, #16]	@ (8008474 <xTaskGetTickCountFromISR+0x20>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008468:	683b      	ldr	r3, [r7, #0]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200051f0 	.word	0x200051f0

08008478 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800847e:	2300      	movs	r3, #0
 8008480:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008482:	4b50      	ldr	r3, [pc, #320]	@ (80085c4 <xTaskIncrementTick+0x14c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	f040 808b 	bne.w	80085a2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800848c:	4b4e      	ldr	r3, [pc, #312]	@ (80085c8 <xTaskIncrementTick+0x150>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3301      	adds	r3, #1
 8008492:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008494:	4a4c      	ldr	r2, [pc, #304]	@ (80085c8 <xTaskIncrementTick+0x150>)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d123      	bne.n	80084e8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80084a0:	4b4a      	ldr	r3, [pc, #296]	@ (80085cc <xTaskIncrementTick+0x154>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00d      	beq.n	80084c6 <xTaskIncrementTick+0x4e>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ae:	b672      	cpsid	i
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	b662      	cpsie	i
 80084be:	603b      	str	r3, [r7, #0]
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	e7fd      	b.n	80084c2 <xTaskIncrementTick+0x4a>
 80084c6:	4b41      	ldr	r3, [pc, #260]	@ (80085cc <xTaskIncrementTick+0x154>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	4b40      	ldr	r3, [pc, #256]	@ (80085d0 <xTaskIncrementTick+0x158>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a3e      	ldr	r2, [pc, #248]	@ (80085cc <xTaskIncrementTick+0x154>)
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	4a3e      	ldr	r2, [pc, #248]	@ (80085d0 <xTaskIncrementTick+0x158>)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	4b3e      	ldr	r3, [pc, #248]	@ (80085d4 <xTaskIncrementTick+0x15c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3301      	adds	r3, #1
 80084e0:	4a3c      	ldr	r2, [pc, #240]	@ (80085d4 <xTaskIncrementTick+0x15c>)
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	f000 fada 	bl	8008a9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084e8:	4b3b      	ldr	r3, [pc, #236]	@ (80085d8 <xTaskIncrementTick+0x160>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d348      	bcc.n	8008584 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f2:	4b36      	ldr	r3, [pc, #216]	@ (80085cc <xTaskIncrementTick+0x154>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d104      	bne.n	8008506 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fc:	4b36      	ldr	r3, [pc, #216]	@ (80085d8 <xTaskIncrementTick+0x160>)
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	601a      	str	r2, [r3, #0]
					break;
 8008504:	e03e      	b.n	8008584 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008506:	4b31      	ldr	r3, [pc, #196]	@ (80085cc <xTaskIncrementTick+0x154>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	429a      	cmp	r2, r3
 800851c:	d203      	bcs.n	8008526 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800851e:	4a2e      	ldr	r2, [pc, #184]	@ (80085d8 <xTaskIncrementTick+0x160>)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008524:	e02e      	b.n	8008584 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	3304      	adds	r3, #4
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fb87 	bl	8006c3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	3318      	adds	r3, #24
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe fb7e 	bl	8006c3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	2201      	movs	r2, #1
 8008548:	409a      	lsls	r2, r3
 800854a:	4b24      	ldr	r3, [pc, #144]	@ (80085dc <xTaskIncrementTick+0x164>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4313      	orrs	r3, r2
 8008550:	4a22      	ldr	r2, [pc, #136]	@ (80085dc <xTaskIncrementTick+0x164>)
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4a1f      	ldr	r2, [pc, #124]	@ (80085e0 <xTaskIncrementTick+0x168>)
 8008562:	441a      	add	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	3304      	adds	r3, #4
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f7fe fb0a 	bl	8006b84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008574:	4b1b      	ldr	r3, [pc, #108]	@ (80085e4 <xTaskIncrementTick+0x16c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857a:	429a      	cmp	r2, r3
 800857c:	d3b9      	bcc.n	80084f2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800857e:	2301      	movs	r3, #1
 8008580:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008582:	e7b6      	b.n	80084f2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008584:	4b17      	ldr	r3, [pc, #92]	@ (80085e4 <xTaskIncrementTick+0x16c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858a:	4915      	ldr	r1, [pc, #84]	@ (80085e0 <xTaskIncrementTick+0x168>)
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d907      	bls.n	80085ac <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800859c:	2301      	movs	r3, #1
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e004      	b.n	80085ac <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80085a2:	4b11      	ldr	r3, [pc, #68]	@ (80085e8 <xTaskIncrementTick+0x170>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	4a0f      	ldr	r2, [pc, #60]	@ (80085e8 <xTaskIncrementTick+0x170>)
 80085aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80085ac:	4b0f      	ldr	r3, [pc, #60]	@ (80085ec <xTaskIncrementTick+0x174>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80085b8:	697b      	ldr	r3, [r7, #20]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20005214 	.word	0x20005214
 80085c8:	200051f0 	.word	0x200051f0
 80085cc:	200051a4 	.word	0x200051a4
 80085d0:	200051a8 	.word	0x200051a8
 80085d4:	20005204 	.word	0x20005204
 80085d8:	2000520c 	.word	0x2000520c
 80085dc:	200051f4 	.word	0x200051f4
 80085e0:	200050f0 	.word	0x200050f0
 80085e4:	200050ec 	.word	0x200050ec
 80085e8:	200051fc 	.word	0x200051fc
 80085ec:	20005200 	.word	0x20005200

080085f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085f6:	4b36      	ldr	r3, [pc, #216]	@ (80086d0 <vTaskSwitchContext+0xe0>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085fe:	4b35      	ldr	r3, [pc, #212]	@ (80086d4 <vTaskSwitchContext+0xe4>)
 8008600:	2201      	movs	r2, #1
 8008602:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008604:	e060      	b.n	80086c8 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8008606:	4b33      	ldr	r3, [pc, #204]	@ (80086d4 <vTaskSwitchContext+0xe4>)
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800860c:	f7f7 fff5 	bl	80005fa <getRunTimeCounterValue>
 8008610:	4603      	mov	r3, r0
 8008612:	4a31      	ldr	r2, [pc, #196]	@ (80086d8 <vTaskSwitchContext+0xe8>)
 8008614:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008616:	4b30      	ldr	r3, [pc, #192]	@ (80086d8 <vTaskSwitchContext+0xe8>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4b30      	ldr	r3, [pc, #192]	@ (80086dc <vTaskSwitchContext+0xec>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d909      	bls.n	8008636 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008622:	4b2f      	ldr	r3, [pc, #188]	@ (80086e0 <vTaskSwitchContext+0xf0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008628:	4a2b      	ldr	r2, [pc, #172]	@ (80086d8 <vTaskSwitchContext+0xe8>)
 800862a:	6810      	ldr	r0, [r2, #0]
 800862c:	4a2b      	ldr	r2, [pc, #172]	@ (80086dc <vTaskSwitchContext+0xec>)
 800862e:	6812      	ldr	r2, [r2, #0]
 8008630:	1a82      	subs	r2, r0, r2
 8008632:	440a      	add	r2, r1
 8008634:	651a      	str	r2, [r3, #80]	@ 0x50
			ulTaskSwitchedInTime = ulTotalRunTime;
 8008636:	4b28      	ldr	r3, [pc, #160]	@ (80086d8 <vTaskSwitchContext+0xe8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a28      	ldr	r2, [pc, #160]	@ (80086dc <vTaskSwitchContext+0xec>)
 800863c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863e:	4b29      	ldr	r3, [pc, #164]	@ (80086e4 <vTaskSwitchContext+0xf4>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	fab3 f383 	clz	r3, r3
 800864a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	f1c3 031f 	rsb	r3, r3, #31
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	4924      	ldr	r1, [pc, #144]	@ (80086e8 <vTaskSwitchContext+0xf8>)
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	440b      	add	r3, r1
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10d      	bne.n	8008684 <vTaskSwitchContext+0x94>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866c:	b672      	cpsid	i
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	b662      	cpsie	i
 800867c:	607b      	str	r3, [r7, #4]
}
 800867e:	bf00      	nop
 8008680:	bf00      	nop
 8008682:	e7fd      	b.n	8008680 <vTaskSwitchContext+0x90>
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4a16      	ldr	r2, [pc, #88]	@ (80086e8 <vTaskSwitchContext+0xf8>)
 8008690:	4413      	add	r3, r2
 8008692:	613b      	str	r3, [r7, #16]
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	605a      	str	r2, [r3, #4]
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	3308      	adds	r3, #8
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d104      	bne.n	80086b4 <vTaskSwitchContext+0xc4>
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	605a      	str	r2, [r3, #4]
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	4a09      	ldr	r2, [pc, #36]	@ (80086e0 <vTaskSwitchContext+0xf0>)
 80086bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086be:	4b08      	ldr	r3, [pc, #32]	@ (80086e0 <vTaskSwitchContext+0xf0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3354      	adds	r3, #84	@ 0x54
 80086c4:	4a09      	ldr	r2, [pc, #36]	@ (80086ec <vTaskSwitchContext+0xfc>)
 80086c6:	6013      	str	r3, [r2, #0]
}
 80086c8:	bf00      	nop
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20005214 	.word	0x20005214
 80086d4:	20005200 	.word	0x20005200
 80086d8:	2000521c 	.word	0x2000521c
 80086dc:	20005218 	.word	0x20005218
 80086e0:	200050ec 	.word	0x200050ec
 80086e4:	200051f4 	.word	0x200051f4
 80086e8:	200050f0 	.word	0x200050f0
 80086ec:	2000003c 	.word	0x2000003c

080086f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10d      	bne.n	800871c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	b672      	cpsid	i
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	b662      	cpsie	i
 8008714:	60fb      	str	r3, [r7, #12]
}
 8008716:	bf00      	nop
 8008718:	bf00      	nop
 800871a:	e7fd      	b.n	8008718 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800871c:	4b07      	ldr	r3, [pc, #28]	@ (800873c <vTaskPlaceOnEventList+0x4c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3318      	adds	r3, #24
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fe fa51 	bl	8006bcc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800872a:	2101      	movs	r1, #1
 800872c:	6838      	ldr	r0, [r7, #0]
 800872e:	f000 fbb3 	bl	8008e98 <prvAddCurrentTaskToDelayedList>
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	200050ec 	.word	0x200050ec

08008740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10d      	bne.n	8008772 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875a:	b672      	cpsid	i
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	b662      	cpsie	i
 800876a:	60fb      	str	r3, [r7, #12]
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	e7fd      	b.n	800876e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	3318      	adds	r3, #24
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fa61 	bl	8006c3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800877c:	4b1d      	ldr	r3, [pc, #116]	@ (80087f4 <xTaskRemoveFromEventList+0xb4>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11c      	bne.n	80087be <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	3304      	adds	r3, #4
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe fa58 	bl	8006c3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008792:	2201      	movs	r2, #1
 8008794:	409a      	lsls	r2, r3
 8008796:	4b18      	ldr	r3, [pc, #96]	@ (80087f8 <xTaskRemoveFromEventList+0xb8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4313      	orrs	r3, r2
 800879c:	4a16      	ldr	r2, [pc, #88]	@ (80087f8 <xTaskRemoveFromEventList+0xb8>)
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4a13      	ldr	r2, [pc, #76]	@ (80087fc <xTaskRemoveFromEventList+0xbc>)
 80087ae:	441a      	add	r2, r3
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	3304      	adds	r3, #4
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f7fe f9e4 	bl	8006b84 <vListInsertEnd>
 80087bc:	e005      	b.n	80087ca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	3318      	adds	r3, #24
 80087c2:	4619      	mov	r1, r3
 80087c4:	480e      	ldr	r0, [pc, #56]	@ (8008800 <xTaskRemoveFromEventList+0xc0>)
 80087c6:	f7fe f9dd 	bl	8006b84 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <xTaskRemoveFromEventList+0xc4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d905      	bls.n	80087e4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087d8:	2301      	movs	r3, #1
 80087da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <xTaskRemoveFromEventList+0xc8>)
 80087de:	2201      	movs	r2, #1
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	e001      	b.n	80087e8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80087e8:	697b      	ldr	r3, [r7, #20]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20005214 	.word	0x20005214
 80087f8:	200051f4 	.word	0x200051f4
 80087fc:	200050f0 	.word	0x200050f0
 8008800:	200051ac 	.word	0x200051ac
 8008804:	200050ec 	.word	0x200050ec
 8008808:	20005200 	.word	0x20005200

0800880c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008814:	4b06      	ldr	r3, [pc, #24]	@ (8008830 <vTaskInternalSetTimeOutState+0x24>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800881c:	4b05      	ldr	r3, [pc, #20]	@ (8008834 <vTaskInternalSetTimeOutState+0x28>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	605a      	str	r2, [r3, #4]
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	20005204 	.word	0x20005204
 8008834:	200051f0 	.word	0x200051f0

08008838 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10d      	bne.n	8008864 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	b672      	cpsid	i
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	b662      	cpsie	i
 800885c:	613b      	str	r3, [r7, #16]
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	e7fd      	b.n	8008860 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10d      	bne.n	8008886 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886e:	b672      	cpsid	i
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	b662      	cpsie	i
 800887e:	60fb      	str	r3, [r7, #12]
}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	e7fd      	b.n	8008882 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008886:	f000 fc79 	bl	800917c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800888a:	4b1d      	ldr	r3, [pc, #116]	@ (8008900 <xTaskCheckForTimeOut+0xc8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d102      	bne.n	80088aa <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	61fb      	str	r3, [r7, #28]
 80088a8:	e023      	b.n	80088f2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	4b15      	ldr	r3, [pc, #84]	@ (8008904 <xTaskCheckForTimeOut+0xcc>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d007      	beq.n	80088c6 <xTaskCheckForTimeOut+0x8e>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d302      	bcc.n	80088c6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088c0:	2301      	movs	r3, #1
 80088c2:	61fb      	str	r3, [r7, #28]
 80088c4:	e015      	b.n	80088f2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d20b      	bcs.n	80088e8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	1ad2      	subs	r2, r2, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff ff95 	bl	800880c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
 80088e6:	e004      	b.n	80088f2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80088ee:	2301      	movs	r3, #1
 80088f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80088f2:	f000 fc79 	bl	80091e8 <vPortExitCritical>

	return xReturn;
 80088f6:	69fb      	ldr	r3, [r7, #28]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3720      	adds	r7, #32
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	200051f0 	.word	0x200051f0
 8008904:	20005204 	.word	0x20005204

08008908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800890c:	4b03      	ldr	r3, [pc, #12]	@ (800891c <vTaskMissedYield+0x14>)
 800890e:	2201      	movs	r2, #1
 8008910:	601a      	str	r2, [r3, #0]
}
 8008912:	bf00      	nop
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	20005200 	.word	0x20005200

08008920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008928:	f000 f852 	bl	80089d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800892c:	4b06      	ldr	r3, [pc, #24]	@ (8008948 <prvIdleTask+0x28>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d9f9      	bls.n	8008928 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008934:	4b05      	ldr	r3, [pc, #20]	@ (800894c <prvIdleTask+0x2c>)
 8008936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008944:	e7f0      	b.n	8008928 <prvIdleTask+0x8>
 8008946:	bf00      	nop
 8008948:	200050f0 	.word	0x200050f0
 800894c:	e000ed04 	.word	0xe000ed04

08008950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008956:	2300      	movs	r3, #0
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	e00c      	b.n	8008976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4a12      	ldr	r2, [pc, #72]	@ (80089b0 <prvInitialiseTaskLists+0x60>)
 8008968:	4413      	add	r3, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe f8dd 	bl	8006b2a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3301      	adds	r3, #1
 8008974:	607b      	str	r3, [r7, #4]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b06      	cmp	r3, #6
 800897a:	d9ef      	bls.n	800895c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800897c:	480d      	ldr	r0, [pc, #52]	@ (80089b4 <prvInitialiseTaskLists+0x64>)
 800897e:	f7fe f8d4 	bl	8006b2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008982:	480d      	ldr	r0, [pc, #52]	@ (80089b8 <prvInitialiseTaskLists+0x68>)
 8008984:	f7fe f8d1 	bl	8006b2a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008988:	480c      	ldr	r0, [pc, #48]	@ (80089bc <prvInitialiseTaskLists+0x6c>)
 800898a:	f7fe f8ce 	bl	8006b2a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800898e:	480c      	ldr	r0, [pc, #48]	@ (80089c0 <prvInitialiseTaskLists+0x70>)
 8008990:	f7fe f8cb 	bl	8006b2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008994:	480b      	ldr	r0, [pc, #44]	@ (80089c4 <prvInitialiseTaskLists+0x74>)
 8008996:	f7fe f8c8 	bl	8006b2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800899a:	4b0b      	ldr	r3, [pc, #44]	@ (80089c8 <prvInitialiseTaskLists+0x78>)
 800899c:	4a05      	ldr	r2, [pc, #20]	@ (80089b4 <prvInitialiseTaskLists+0x64>)
 800899e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089a0:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <prvInitialiseTaskLists+0x7c>)
 80089a2:	4a05      	ldr	r2, [pc, #20]	@ (80089b8 <prvInitialiseTaskLists+0x68>)
 80089a4:	601a      	str	r2, [r3, #0]
}
 80089a6:	bf00      	nop
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	200050f0 	.word	0x200050f0
 80089b4:	2000517c 	.word	0x2000517c
 80089b8:	20005190 	.word	0x20005190
 80089bc:	200051ac 	.word	0x200051ac
 80089c0:	200051c0 	.word	0x200051c0
 80089c4:	200051d8 	.word	0x200051d8
 80089c8:	200051a4 	.word	0x200051a4
 80089cc:	200051a8 	.word	0x200051a8

080089d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089d6:	e019      	b.n	8008a0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089d8:	f000 fbd0 	bl	800917c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089dc:	4b10      	ldr	r3, [pc, #64]	@ (8008a20 <prvCheckTasksWaitingTermination+0x50>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3304      	adds	r3, #4
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fe f928 	bl	8006c3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008a24 <prvCheckTasksWaitingTermination+0x54>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008a24 <prvCheckTasksWaitingTermination+0x54>)
 80089f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008a28 <prvCheckTasksWaitingTermination+0x58>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008a28 <prvCheckTasksWaitingTermination+0x58>)
 8008a00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a02:	f000 fbf1 	bl	80091e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f810 	bl	8008a2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a0c:	4b06      	ldr	r3, [pc, #24]	@ (8008a28 <prvCheckTasksWaitingTermination+0x58>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1e1      	bne.n	80089d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	200051c0 	.word	0x200051c0
 8008a24:	200051ec 	.word	0x200051ec
 8008a28:	200051d4 	.word	0x200051d4

08008a2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3354      	adds	r3, #84	@ 0x54
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f00d ffe9 	bl	8016a10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d108      	bne.n	8008a5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fd91 	bl	8009574 <vPortFree>
				vPortFree( pxTCB );
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fd8e 	bl	8009574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a58:	e01b      	b.n	8008a92 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d103      	bne.n	8008a6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fd85 	bl	8009574 <vPortFree>
	}
 8008a6a:	e012      	b.n	8008a92 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d00d      	beq.n	8008a92 <prvDeleteTCB+0x66>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	b672      	cpsid	i
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	b662      	cpsie	i
 8008a8a:	60fb      	str	r3, [r7, #12]
}
 8008a8c:	bf00      	nop
 8008a8e:	bf00      	nop
 8008a90:	e7fd      	b.n	8008a8e <prvDeleteTCB+0x62>
	}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad4 <prvResetNextTaskUnblockTime+0x38>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d104      	bne.n	8008ab6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <prvResetNextTaskUnblockTime+0x3c>)
 8008aae:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ab4:	e008      	b.n	8008ac8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab6:	4b07      	ldr	r3, [pc, #28]	@ (8008ad4 <prvResetNextTaskUnblockTime+0x38>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	4a04      	ldr	r2, [pc, #16]	@ (8008ad8 <prvResetNextTaskUnblockTime+0x3c>)
 8008ac6:	6013      	str	r3, [r2, #0]
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	200051a4 	.word	0x200051a4
 8008ad8:	2000520c 	.word	0x2000520c

08008adc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8008b10 <xTaskGetSchedulerState+0x34>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008aea:	2301      	movs	r3, #1
 8008aec:	607b      	str	r3, [r7, #4]
 8008aee:	e008      	b.n	8008b02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008af0:	4b08      	ldr	r3, [pc, #32]	@ (8008b14 <xTaskGetSchedulerState+0x38>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d102      	bne.n	8008afe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008af8:	2302      	movs	r3, #2
 8008afa:	607b      	str	r3, [r7, #4]
 8008afc:	e001      	b.n	8008b02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008afe:	2300      	movs	r3, #0
 8008b00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b02:	687b      	ldr	r3, [r7, #4]
	}
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	200051f8 	.word	0x200051f8
 8008b14:	20005214 	.word	0x20005214

08008b18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d069      	beq.n	8008c02 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b32:	4b36      	ldr	r3, [pc, #216]	@ (8008c0c <xTaskPriorityInherit+0xf4>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d259      	bcs.n	8008bf0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	db06      	blt.n	8008b52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b44:	4b31      	ldr	r3, [pc, #196]	@ (8008c0c <xTaskPriorityInherit+0xf4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4a:	f1c3 0207 	rsb	r2, r3, #7
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	6959      	ldr	r1, [r3, #20]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4a2b      	ldr	r2, [pc, #172]	@ (8008c10 <xTaskPriorityInherit+0xf8>)
 8008b64:	4413      	add	r3, r2
 8008b66:	4299      	cmp	r1, r3
 8008b68:	d13a      	bne.n	8008be0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe f865 	bl	8006c3e <uxListRemove>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d115      	bne.n	8008ba6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b7e:	4924      	ldr	r1, [pc, #144]	@ (8008c10 <xTaskPriorityInherit+0xf8>)
 8008b80:	4613      	mov	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	440b      	add	r3, r1
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <xTaskPriorityInherit+0x8e>
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b94:	2201      	movs	r2, #1
 8008b96:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9a:	43da      	mvns	r2, r3
 8008b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c14 <xTaskPriorityInherit+0xfc>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c14 <xTaskPriorityInherit+0xfc>)
 8008ba4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ba6:	4b19      	ldr	r3, [pc, #100]	@ (8008c0c <xTaskPriorityInherit+0xf4>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	409a      	lsls	r2, r3
 8008bb8:	4b16      	ldr	r3, [pc, #88]	@ (8008c14 <xTaskPriorityInherit+0xfc>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	4a15      	ldr	r2, [pc, #84]	@ (8008c14 <xTaskPriorityInherit+0xfc>)
 8008bc0:	6013      	str	r3, [r2, #0]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4a10      	ldr	r2, [pc, #64]	@ (8008c10 <xTaskPriorityInherit+0xf8>)
 8008bd0:	441a      	add	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f7fd ffd3 	bl	8006b84 <vListInsertEnd>
 8008bde:	e004      	b.n	8008bea <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008be0:	4b0a      	ldr	r3, [pc, #40]	@ (8008c0c <xTaskPriorityInherit+0xf4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008bea:	2301      	movs	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]
 8008bee:	e008      	b.n	8008c02 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bf4:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <xTaskPriorityInherit+0xf4>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d201      	bcs.n	8008c02 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c02:	68fb      	ldr	r3, [r7, #12]
	}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	200050ec 	.word	0x200050ec
 8008c10:	200050f0 	.word	0x200050f0
 8008c14:	200051f4 	.word	0x200051f4

08008c18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d074      	beq.n	8008d18 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8008d24 <xTaskPriorityDisinherit+0x10c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d00d      	beq.n	8008c54 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3c:	b672      	cpsid	i
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	b662      	cpsie	i
 8008c4c:	60fb      	str	r3, [r7, #12]
}
 8008c4e:	bf00      	nop
 8008c50:	bf00      	nop
 8008c52:	e7fd      	b.n	8008c50 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10d      	bne.n	8008c78 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c60:	b672      	cpsid	i
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	b662      	cpsie	i
 8008c70:	60bb      	str	r3, [r7, #8]
}
 8008c72:	bf00      	nop
 8008c74:	bf00      	nop
 8008c76:	e7fd      	b.n	8008c74 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c7c:	1e5a      	subs	r2, r3, #1
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d044      	beq.n	8008d18 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d140      	bne.n	8008d18 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fd ffcf 	bl	8006c3e <uxListRemove>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d115      	bne.n	8008cd2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008caa:	491f      	ldr	r1, [pc, #124]	@ (8008d28 <xTaskPriorityDisinherit+0x110>)
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10a      	bne.n	8008cd2 <xTaskPriorityDisinherit+0xba>
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	43da      	mvns	r2, r3
 8008cc8:	4b18      	ldr	r3, [pc, #96]	@ (8008d2c <xTaskPriorityDisinherit+0x114>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	4a17      	ldr	r2, [pc, #92]	@ (8008d2c <xTaskPriorityDisinherit+0x114>)
 8008cd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cde:	f1c3 0207 	rsb	r2, r3, #7
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cea:	2201      	movs	r2, #1
 8008cec:	409a      	lsls	r2, r3
 8008cee:	4b0f      	ldr	r3, [pc, #60]	@ (8008d2c <xTaskPriorityDisinherit+0x114>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8008d2c <xTaskPriorityDisinherit+0x114>)
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4a08      	ldr	r2, [pc, #32]	@ (8008d28 <xTaskPriorityDisinherit+0x110>)
 8008d06:	441a      	add	r2, r3
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f7fd ff38 	bl	8006b84 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d14:	2301      	movs	r3, #1
 8008d16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d18:	697b      	ldr	r3, [r7, #20]
	}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	200050ec 	.word	0x200050ec
 8008d28:	200050f0 	.word	0x200050f0
 8008d2c:	200051f4 	.word	0x200051f4

08008d30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8089 	beq.w	8008e5c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10d      	bne.n	8008d6e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d56:	b672      	cpsid	i
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	b662      	cpsie	i
 8008d66:	60fb      	str	r3, [r7, #12]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d902      	bls.n	8008d7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	61fb      	str	r3, [r7, #28]
 8008d7c:	e002      	b.n	8008d84 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d066      	beq.n	8008e5c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d161      	bne.n	8008e5c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d98:	4b32      	ldr	r3, [pc, #200]	@ (8008e64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d10d      	bne.n	8008dbe <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da6:	b672      	cpsid	i
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	b662      	cpsie	i
 8008db6:	60bb      	str	r3, [r7, #8]
}
 8008db8:	bf00      	nop
 8008dba:	bf00      	nop
 8008dbc:	e7fd      	b.n	8008dba <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	db04      	blt.n	8008ddc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	f1c3 0207 	rsb	r2, r3, #7
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	6959      	ldr	r1, [r3, #20]
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4a1f      	ldr	r2, [pc, #124]	@ (8008e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008dec:	4413      	add	r3, r2
 8008dee:	4299      	cmp	r1, r3
 8008df0:	d134      	bne.n	8008e5c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	3304      	adds	r3, #4
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fd ff21 	bl	8006c3e <uxListRemove>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d115      	bne.n	8008e2e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e06:	4918      	ldr	r1, [pc, #96]	@ (8008e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	440b      	add	r3, r1
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e22:	43da      	mvns	r2, r3
 8008e24:	4b11      	ldr	r3, [pc, #68]	@ (8008e6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	4a10      	ldr	r2, [pc, #64]	@ (8008e6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008e2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e32:	2201      	movs	r2, #1
 8008e34:	409a      	lsls	r2, r3
 8008e36:	4b0d      	ldr	r3, [pc, #52]	@ (8008e6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8008e6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4a06      	ldr	r2, [pc, #24]	@ (8008e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e4e:	441a      	add	r2, r3
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7fd fe94 	bl	8006b84 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e5c:	bf00      	nop
 8008e5e:	3720      	adds	r7, #32
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	200050ec 	.word	0x200050ec
 8008e68:	200050f0 	.word	0x200050f0
 8008e6c:	200051f4 	.word	0x200051f4

08008e70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e74:	4b07      	ldr	r3, [pc, #28]	@ (8008e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e7c:	4b05      	ldr	r3, [pc, #20]	@ (8008e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e82:	3201      	adds	r2, #1
 8008e84:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 8008e86:	4b03      	ldr	r3, [pc, #12]	@ (8008e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e88:	681b      	ldr	r3, [r3, #0]
	}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	200050ec 	.word	0x200050ec

08008e98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ea2:	4b29      	ldr	r3, [pc, #164]	@ (8008f48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ea8:	4b28      	ldr	r3, [pc, #160]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3304      	adds	r3, #4
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fd fec5 	bl	8006c3e <uxListRemove>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10b      	bne.n	8008ed2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008eba:	4b24      	ldr	r3, [pc, #144]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec6:	43da      	mvns	r2, r3
 8008ec8:	4b21      	ldr	r3, [pc, #132]	@ (8008f50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	4a20      	ldr	r2, [pc, #128]	@ (8008f50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ed0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed8:	d10a      	bne.n	8008ef0 <prvAddCurrentTaskToDelayedList+0x58>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	481a      	ldr	r0, [pc, #104]	@ (8008f54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008eea:	f7fd fe4b 	bl	8006b84 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008eee:	e026      	b.n	8008f3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ef8:	4b14      	ldr	r3, [pc, #80]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d209      	bcs.n	8008f1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f08:	4b13      	ldr	r3, [pc, #76]	@ (8008f58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3304      	adds	r3, #4
 8008f12:	4619      	mov	r1, r3
 8008f14:	4610      	mov	r0, r2
 8008f16:	f7fd fe59 	bl	8006bcc <vListInsert>
}
 8008f1a:	e010      	b.n	8008f3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	4b0a      	ldr	r3, [pc, #40]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4619      	mov	r1, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f7fd fe4f 	bl	8006bcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d202      	bcs.n	8008f3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f38:	4a09      	ldr	r2, [pc, #36]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	6013      	str	r3, [r2, #0]
}
 8008f3e:	bf00      	nop
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	200051f0 	.word	0x200051f0
 8008f4c:	200050ec 	.word	0x200050ec
 8008f50:	200051f4 	.word	0x200051f4
 8008f54:	200051d8 	.word	0x200051d8
 8008f58:	200051a8 	.word	0x200051a8
 8008f5c:	200051a4 	.word	0x200051a4
 8008f60:	2000520c 	.word	0x2000520c

08008f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3b04      	subs	r3, #4
 8008f74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3b04      	subs	r3, #4
 8008f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f023 0201 	bic.w	r2, r3, #1
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3b04      	subs	r3, #4
 8008f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f94:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc8 <pxPortInitialiseStack+0x64>)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3b14      	subs	r3, #20
 8008f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3b04      	subs	r3, #4
 8008faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f06f 0202 	mvn.w	r2, #2
 8008fb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3b20      	subs	r3, #32
 8008fb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fba:	68fb      	ldr	r3, [r7, #12]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	08008fcd 	.word	0x08008fcd

08008fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fd6:	4b15      	ldr	r3, [pc, #84]	@ (800902c <prvTaskExitError+0x60>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fde:	d00d      	beq.n	8008ffc <prvTaskExitError+0x30>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe4:	b672      	cpsid	i
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	b662      	cpsie	i
 8008ff4:	60fb      	str	r3, [r7, #12]
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	e7fd      	b.n	8008ff8 <prvTaskExitError+0x2c>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009000:	b672      	cpsid	i
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	b662      	cpsie	i
 8009010:	60bb      	str	r3, [r7, #8]
}
 8009012:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009014:	bf00      	nop
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0fc      	beq.n	8009016 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	20000020 	.word	0x20000020

08009030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009030:	4b07      	ldr	r3, [pc, #28]	@ (8009050 <pxCurrentTCBConst2>)
 8009032:	6819      	ldr	r1, [r3, #0]
 8009034:	6808      	ldr	r0, [r1, #0]
 8009036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903a:	f380 8809 	msr	PSP, r0
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f04f 0000 	mov.w	r0, #0
 8009046:	f380 8811 	msr	BASEPRI, r0
 800904a:	4770      	bx	lr
 800904c:	f3af 8000 	nop.w

08009050 <pxCurrentTCBConst2>:
 8009050:	200050ec 	.word	0x200050ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop

08009058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009058:	4808      	ldr	r0, [pc, #32]	@ (800907c <prvPortStartFirstTask+0x24>)
 800905a:	6800      	ldr	r0, [r0, #0]
 800905c:	6800      	ldr	r0, [r0, #0]
 800905e:	f380 8808 	msr	MSP, r0
 8009062:	f04f 0000 	mov.w	r0, #0
 8009066:	f380 8814 	msr	CONTROL, r0
 800906a:	b662      	cpsie	i
 800906c:	b661      	cpsie	f
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	df00      	svc	0
 8009078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800907a:	bf00      	nop
 800907c:	e000ed08 	.word	0xe000ed08

08009080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009086:	4b37      	ldr	r3, [pc, #220]	@ (8009164 <xPortStartScheduler+0xe4>)
 8009088:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	22ff      	movs	r2, #255	@ 0xff
 8009096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009168 <xPortStartScheduler+0xe8>)
 80090ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090ae:	4b2f      	ldr	r3, [pc, #188]	@ (800916c <xPortStartScheduler+0xec>)
 80090b0:	2207      	movs	r2, #7
 80090b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090b4:	e009      	b.n	80090ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80090b6:	4b2d      	ldr	r3, [pc, #180]	@ (800916c <xPortStartScheduler+0xec>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	4a2b      	ldr	r2, [pc, #172]	@ (800916c <xPortStartScheduler+0xec>)
 80090be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090ca:	78fb      	ldrb	r3, [r7, #3]
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090d2:	2b80      	cmp	r3, #128	@ 0x80
 80090d4:	d0ef      	beq.n	80090b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090d6:	4b25      	ldr	r3, [pc, #148]	@ (800916c <xPortStartScheduler+0xec>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f1c3 0307 	rsb	r3, r3, #7
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d00d      	beq.n	80090fe <xPortStartScheduler+0x7e>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e6:	b672      	cpsid	i
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	b662      	cpsie	i
 80090f6:	60bb      	str	r3, [r7, #8]
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	e7fd      	b.n	80090fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090fe:	4b1b      	ldr	r3, [pc, #108]	@ (800916c <xPortStartScheduler+0xec>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	021b      	lsls	r3, r3, #8
 8009104:	4a19      	ldr	r2, [pc, #100]	@ (800916c <xPortStartScheduler+0xec>)
 8009106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009108:	4b18      	ldr	r3, [pc, #96]	@ (800916c <xPortStartScheduler+0xec>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009110:	4a16      	ldr	r2, [pc, #88]	@ (800916c <xPortStartScheduler+0xec>)
 8009112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	b2da      	uxtb	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800911c:	4b14      	ldr	r3, [pc, #80]	@ (8009170 <xPortStartScheduler+0xf0>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a13      	ldr	r2, [pc, #76]	@ (8009170 <xPortStartScheduler+0xf0>)
 8009122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009128:	4b11      	ldr	r3, [pc, #68]	@ (8009170 <xPortStartScheduler+0xf0>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a10      	ldr	r2, [pc, #64]	@ (8009170 <xPortStartScheduler+0xf0>)
 800912e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009134:	f000 f8dc 	bl	80092f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009138:	4b0e      	ldr	r3, [pc, #56]	@ (8009174 <xPortStartScheduler+0xf4>)
 800913a:	2200      	movs	r2, #0
 800913c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800913e:	f000 f8fb 	bl	8009338 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009142:	4b0d      	ldr	r3, [pc, #52]	@ (8009178 <xPortStartScheduler+0xf8>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a0c      	ldr	r2, [pc, #48]	@ (8009178 <xPortStartScheduler+0xf8>)
 8009148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800914c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800914e:	f7ff ff83 	bl	8009058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009152:	f7ff fa4d 	bl	80085f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009156:	f7ff ff39 	bl	8008fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	e000e400 	.word	0xe000e400
 8009168:	20005220 	.word	0x20005220
 800916c:	20005224 	.word	0x20005224
 8009170:	e000ed20 	.word	0xe000ed20
 8009174:	20000020 	.word	0x20000020
 8009178:	e000ef34 	.word	0xe000ef34

0800917c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	b672      	cpsid	i
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	b662      	cpsie	i
 8009196:	607b      	str	r3, [r7, #4]
}
 8009198:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800919a:	4b11      	ldr	r3, [pc, #68]	@ (80091e0 <vPortEnterCritical+0x64>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3301      	adds	r3, #1
 80091a0:	4a0f      	ldr	r2, [pc, #60]	@ (80091e0 <vPortEnterCritical+0x64>)
 80091a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091a4:	4b0e      	ldr	r3, [pc, #56]	@ (80091e0 <vPortEnterCritical+0x64>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d112      	bne.n	80091d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091ac:	4b0d      	ldr	r3, [pc, #52]	@ (80091e4 <vPortEnterCritical+0x68>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <vPortEnterCritical+0x56>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ba:	b672      	cpsid	i
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	b662      	cpsie	i
 80091ca:	603b      	str	r3, [r7, #0]
}
 80091cc:	bf00      	nop
 80091ce:	bf00      	nop
 80091d0:	e7fd      	b.n	80091ce <vPortEnterCritical+0x52>
	}
}
 80091d2:	bf00      	nop
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	20000020 	.word	0x20000020
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091ee:	4b13      	ldr	r3, [pc, #76]	@ (800923c <vPortExitCritical+0x54>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10d      	bne.n	8009212 <vPortExitCritical+0x2a>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fa:	b672      	cpsid	i
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	b662      	cpsie	i
 800920a:	607b      	str	r3, [r7, #4]
}
 800920c:	bf00      	nop
 800920e:	bf00      	nop
 8009210:	e7fd      	b.n	800920e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009212:	4b0a      	ldr	r3, [pc, #40]	@ (800923c <vPortExitCritical+0x54>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3b01      	subs	r3, #1
 8009218:	4a08      	ldr	r2, [pc, #32]	@ (800923c <vPortExitCritical+0x54>)
 800921a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800921c:	4b07      	ldr	r3, [pc, #28]	@ (800923c <vPortExitCritical+0x54>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d105      	bne.n	8009230 <vPortExitCritical+0x48>
 8009224:	2300      	movs	r3, #0
 8009226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f383 8811 	msr	BASEPRI, r3
}
 800922e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20000020 	.word	0x20000020

08009240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009240:	f3ef 8009 	mrs	r0, PSP
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	4b15      	ldr	r3, [pc, #84]	@ (80092a0 <pxCurrentTCBConst>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	f01e 0f10 	tst.w	lr, #16
 8009250:	bf08      	it	eq
 8009252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925a:	6010      	str	r0, [r2, #0]
 800925c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009264:	b672      	cpsid	i
 8009266:	f380 8811 	msr	BASEPRI, r0
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	b662      	cpsie	i
 8009274:	f7ff f9bc 	bl	80085f0 <vTaskSwitchContext>
 8009278:	f04f 0000 	mov.w	r0, #0
 800927c:	f380 8811 	msr	BASEPRI, r0
 8009280:	bc09      	pop	{r0, r3}
 8009282:	6819      	ldr	r1, [r3, #0]
 8009284:	6808      	ldr	r0, [r1, #0]
 8009286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928a:	f01e 0f10 	tst.w	lr, #16
 800928e:	bf08      	it	eq
 8009290:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009294:	f380 8809 	msr	PSP, r0
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop

080092a0 <pxCurrentTCBConst>:
 80092a0:	200050ec 	.word	0x200050ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop

080092a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b2:	b672      	cpsid	i
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	b662      	cpsie	i
 80092c2:	607b      	str	r3, [r7, #4]
}
 80092c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092c6:	f7ff f8d7 	bl	8008478 <xTaskIncrementTick>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092d0:	4b06      	ldr	r3, [pc, #24]	@ (80092ec <SysTick_Handler+0x44>)
 80092d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	2300      	movs	r3, #0
 80092da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	f383 8811 	msr	BASEPRI, r3
}
 80092e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092e4:	bf00      	nop
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	e000ed04 	.word	0xe000ed04

080092f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092f0:	b480      	push	{r7}
 80092f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009324 <vPortSetupTimerInterrupt+0x34>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009328 <vPortSetupTimerInterrupt+0x38>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009300:	4b0a      	ldr	r3, [pc, #40]	@ (800932c <vPortSetupTimerInterrupt+0x3c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a0a      	ldr	r2, [pc, #40]	@ (8009330 <vPortSetupTimerInterrupt+0x40>)
 8009306:	fba2 2303 	umull	r2, r3, r2, r3
 800930a:	099b      	lsrs	r3, r3, #6
 800930c:	4a09      	ldr	r2, [pc, #36]	@ (8009334 <vPortSetupTimerInterrupt+0x44>)
 800930e:	3b01      	subs	r3, #1
 8009310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009312:	4b04      	ldr	r3, [pc, #16]	@ (8009324 <vPortSetupTimerInterrupt+0x34>)
 8009314:	2207      	movs	r2, #7
 8009316:	601a      	str	r2, [r3, #0]
}
 8009318:	bf00      	nop
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	e000e010 	.word	0xe000e010
 8009328:	e000e018 	.word	0xe000e018
 800932c:	20000000 	.word	0x20000000
 8009330:	10624dd3 	.word	0x10624dd3
 8009334:	e000e014 	.word	0xe000e014

08009338 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009338:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009348 <vPortEnableVFP+0x10>
 800933c:	6801      	ldr	r1, [r0, #0]
 800933e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009342:	6001      	str	r1, [r0, #0]
 8009344:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009346:	bf00      	nop
 8009348:	e000ed88 	.word	0xe000ed88

0800934c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009352:	f3ef 8305 	mrs	r3, IPSR
 8009356:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b0f      	cmp	r3, #15
 800935c:	d917      	bls.n	800938e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800935e:	4a1a      	ldr	r2, [pc, #104]	@ (80093c8 <vPortValidateInterruptPriority+0x7c>)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009368:	4b18      	ldr	r3, [pc, #96]	@ (80093cc <vPortValidateInterruptPriority+0x80>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	7afa      	ldrb	r2, [r7, #11]
 800936e:	429a      	cmp	r2, r3
 8009370:	d20d      	bcs.n	800938e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009376:	b672      	cpsid	i
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	b662      	cpsie	i
 8009386:	607b      	str	r3, [r7, #4]
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	e7fd      	b.n	800938a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800938e:	4b10      	ldr	r3, [pc, #64]	@ (80093d0 <vPortValidateInterruptPriority+0x84>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009396:	4b0f      	ldr	r3, [pc, #60]	@ (80093d4 <vPortValidateInterruptPriority+0x88>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d90d      	bls.n	80093ba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a2:	b672      	cpsid	i
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	b662      	cpsie	i
 80093b2:	603b      	str	r3, [r7, #0]
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop
 80093b8:	e7fd      	b.n	80093b6 <vPortValidateInterruptPriority+0x6a>
	}
 80093ba:	bf00      	nop
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	e000e3f0 	.word	0xe000e3f0
 80093cc:	20005220 	.word	0x20005220
 80093d0:	e000ed0c 	.word	0xe000ed0c
 80093d4:	20005224 	.word	0x20005224

080093d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08a      	sub	sp, #40	@ 0x28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093e0:	2300      	movs	r3, #0
 80093e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093e4:	f7fe ff78 	bl	80082d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093e8:	4b5d      	ldr	r3, [pc, #372]	@ (8009560 <pvPortMalloc+0x188>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093f0:	f000 f920 	bl	8009634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093f4:	4b5b      	ldr	r3, [pc, #364]	@ (8009564 <pvPortMalloc+0x18c>)
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4013      	ands	r3, r2
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f040 8094 	bne.w	800952a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d020      	beq.n	800944a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009408:	2208      	movs	r2, #8
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4413      	add	r3, r2
 800940e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	2b00      	cmp	r3, #0
 8009418:	d017      	beq.n	800944a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f023 0307 	bic.w	r3, r3, #7
 8009420:	3308      	adds	r3, #8
 8009422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00d      	beq.n	800944a <pvPortMalloc+0x72>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	b672      	cpsid	i
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	b662      	cpsie	i
 8009442:	617b      	str	r3, [r7, #20]
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop
 8009448:	e7fd      	b.n	8009446 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d06c      	beq.n	800952a <pvPortMalloc+0x152>
 8009450:	4b45      	ldr	r3, [pc, #276]	@ (8009568 <pvPortMalloc+0x190>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	d867      	bhi.n	800952a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800945a:	4b44      	ldr	r3, [pc, #272]	@ (800956c <pvPortMalloc+0x194>)
 800945c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800945e:	4b43      	ldr	r3, [pc, #268]	@ (800956c <pvPortMalloc+0x194>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009464:	e004      	b.n	8009470 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d903      	bls.n	8009482 <pvPortMalloc+0xaa>
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1f1      	bne.n	8009466 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009482:	4b37      	ldr	r3, [pc, #220]	@ (8009560 <pvPortMalloc+0x188>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009488:	429a      	cmp	r2, r3
 800948a:	d04e      	beq.n	800952a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2208      	movs	r2, #8
 8009492:	4413      	add	r3, r2
 8009494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	1ad2      	subs	r2, r2, r3
 80094a6:	2308      	movs	r3, #8
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d922      	bls.n	80094f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4413      	add	r3, r2
 80094b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	f003 0307 	and.w	r3, r3, #7
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00d      	beq.n	80094dc <pvPortMalloc+0x104>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c4:	b672      	cpsid	i
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	b662      	cpsie	i
 80094d4:	613b      	str	r3, [r7, #16]
}
 80094d6:	bf00      	nop
 80094d8:	bf00      	nop
 80094da:	e7fd      	b.n	80094d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	1ad2      	subs	r2, r2, r3
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094ee:	69b8      	ldr	r0, [r7, #24]
 80094f0:	f000 f902 	bl	80096f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009568 <pvPortMalloc+0x190>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009568 <pvPortMalloc+0x190>)
 8009500:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009502:	4b19      	ldr	r3, [pc, #100]	@ (8009568 <pvPortMalloc+0x190>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	4b1a      	ldr	r3, [pc, #104]	@ (8009570 <pvPortMalloc+0x198>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	429a      	cmp	r2, r3
 800950c:	d203      	bcs.n	8009516 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800950e:	4b16      	ldr	r3, [pc, #88]	@ (8009568 <pvPortMalloc+0x190>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a17      	ldr	r2, [pc, #92]	@ (8009570 <pvPortMalloc+0x198>)
 8009514:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	4b12      	ldr	r3, [pc, #72]	@ (8009564 <pvPortMalloc+0x18c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	431a      	orrs	r2, r3
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800952a:	f7fe fee3 	bl	80082f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	f003 0307 	and.w	r3, r3, #7
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00d      	beq.n	8009554 <pvPortMalloc+0x17c>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953c:	b672      	cpsid	i
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	b662      	cpsie	i
 800954c:	60fb      	str	r3, [r7, #12]
}
 800954e:	bf00      	nop
 8009550:	bf00      	nop
 8009552:	e7fd      	b.n	8009550 <pvPortMalloc+0x178>
	return pvReturn;
 8009554:	69fb      	ldr	r3, [r7, #28]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3728      	adds	r7, #40	@ 0x28
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20008e30 	.word	0x20008e30
 8009564:	20008e3c 	.word	0x20008e3c
 8009568:	20008e34 	.word	0x20008e34
 800956c:	20008e28 	.word	0x20008e28
 8009570:	20008e38 	.word	0x20008e38

08009574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d04e      	beq.n	8009624 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009586:	2308      	movs	r3, #8
 8009588:	425b      	negs	r3, r3
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4413      	add	r3, r2
 800958e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	4b24      	ldr	r3, [pc, #144]	@ (800962c <vPortFree+0xb8>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4013      	ands	r3, r2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10d      	bne.n	80095be <vPortFree+0x4a>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	b672      	cpsid	i
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	b662      	cpsie	i
 80095b6:	60fb      	str	r3, [r7, #12]
}
 80095b8:	bf00      	nop
 80095ba:	bf00      	nop
 80095bc:	e7fd      	b.n	80095ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00d      	beq.n	80095e2 <vPortFree+0x6e>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ca:	b672      	cpsid	i
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	b662      	cpsie	i
 80095da:	60bb      	str	r3, [r7, #8]
}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	e7fd      	b.n	80095de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	4b11      	ldr	r3, [pc, #68]	@ (800962c <vPortFree+0xb8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4013      	ands	r3, r2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d019      	beq.n	8009624 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d115      	bne.n	8009624 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	4b0b      	ldr	r3, [pc, #44]	@ (800962c <vPortFree+0xb8>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	43db      	mvns	r3, r3
 8009602:	401a      	ands	r2, r3
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009608:	f7fe fe66 	bl	80082d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	4b07      	ldr	r3, [pc, #28]	@ (8009630 <vPortFree+0xbc>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4413      	add	r3, r2
 8009616:	4a06      	ldr	r2, [pc, #24]	@ (8009630 <vPortFree+0xbc>)
 8009618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800961a:	6938      	ldr	r0, [r7, #16]
 800961c:	f000 f86c 	bl	80096f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009620:	f7fe fe68 	bl	80082f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009624:	bf00      	nop
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20008e3c 	.word	0x20008e3c
 8009630:	20008e34 	.word	0x20008e34

08009634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800963a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800963e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009640:	4b27      	ldr	r3, [pc, #156]	@ (80096e0 <prvHeapInit+0xac>)
 8009642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00c      	beq.n	8009668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3307      	adds	r3, #7
 8009652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f023 0307 	bic.w	r3, r3, #7
 800965a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	4a1f      	ldr	r2, [pc, #124]	@ (80096e0 <prvHeapInit+0xac>)
 8009664:	4413      	add	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800966c:	4a1d      	ldr	r2, [pc, #116]	@ (80096e4 <prvHeapInit+0xb0>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009672:	4b1c      	ldr	r3, [pc, #112]	@ (80096e4 <prvHeapInit+0xb0>)
 8009674:	2200      	movs	r2, #0
 8009676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	4413      	add	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009680:	2208      	movs	r2, #8
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0307 	bic.w	r3, r3, #7
 800968e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a15      	ldr	r2, [pc, #84]	@ (80096e8 <prvHeapInit+0xb4>)
 8009694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009696:	4b14      	ldr	r3, [pc, #80]	@ (80096e8 <prvHeapInit+0xb4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2200      	movs	r2, #0
 800969c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800969e:	4b12      	ldr	r3, [pc, #72]	@ (80096e8 <prvHeapInit+0xb4>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	1ad2      	subs	r2, r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096b4:	4b0c      	ldr	r3, [pc, #48]	@ (80096e8 <prvHeapInit+0xb4>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	4a0a      	ldr	r2, [pc, #40]	@ (80096ec <prvHeapInit+0xb8>)
 80096c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	4a09      	ldr	r2, [pc, #36]	@ (80096f0 <prvHeapInit+0xbc>)
 80096ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096cc:	4b09      	ldr	r3, [pc, #36]	@ (80096f4 <prvHeapInit+0xc0>)
 80096ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80096d2:	601a      	str	r2, [r3, #0]
}
 80096d4:	bf00      	nop
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	20005228 	.word	0x20005228
 80096e4:	20008e28 	.word	0x20008e28
 80096e8:	20008e30 	.word	0x20008e30
 80096ec:	20008e38 	.word	0x20008e38
 80096f0:	20008e34 	.word	0x20008e34
 80096f4:	20008e3c 	.word	0x20008e3c

080096f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009700:	4b28      	ldr	r3, [pc, #160]	@ (80097a4 <prvInsertBlockIntoFreeList+0xac>)
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	e002      	b.n	800970c <prvInsertBlockIntoFreeList+0x14>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d8f7      	bhi.n	8009706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	4413      	add	r3, r2
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d108      	bne.n	800973a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	441a      	add	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	441a      	add	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d118      	bne.n	8009780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4b15      	ldr	r3, [pc, #84]	@ (80097a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d00d      	beq.n	8009776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	441a      	add	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	e008      	b.n	8009788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009776:	4b0c      	ldr	r3, [pc, #48]	@ (80097a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	e003      	b.n	8009788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	429a      	cmp	r2, r3
 800978e:	d002      	beq.n	8009796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20008e28 	.word	0x20008e28
 80097a8:	20008e30 	.word	0x20008e30

080097ac <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	330c      	adds	r3, #12
 80097bc:	461a      	mov	r2, r3
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f001 ff05 	bl	800b5d0 <tcpip_send_msg_wait_sem>
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80097ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d103      	bne.n	80097da <netconn_apimsg+0x2e>
    return apimsg->err;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80097d8:	e001      	b.n	80097de <netconn_apimsg+0x32>
  }
  return err;
 80097da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	@ 0x30
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	603a      	str	r2, [r7, #0]
 80097f2:	71fb      	strb	r3, [r7, #7]
 80097f4:	460b      	mov	r3, r1
 80097f6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80097f8:	79fb      	ldrb	r3, [r7, #7]
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fdb9 	bl	800a374 <netconn_alloc>
 8009802:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d054      	beq.n	80098b4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800980a:	79bb      	ldrb	r3, [r7, #6]
 800980c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800980e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009810:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009812:	f107 0308 	add.w	r3, r7, #8
 8009816:	4619      	mov	r1, r3
 8009818:	4829      	ldr	r0, [pc, #164]	@ (80098c0 <netconn_new_with_proto_and_callback+0xd8>)
 800981a:	f7ff ffc7 	bl	80097ac <netconn_apimsg>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8009824:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009828:	2b00      	cmp	r3, #0
 800982a:	d043      	beq.n	80098b4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800982c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <netconn_new_with_proto_and_callback+0x58>
 8009834:	4b23      	ldr	r3, [pc, #140]	@ (80098c4 <netconn_new_with_proto_and_callback+0xdc>)
 8009836:	22a3      	movs	r2, #163	@ 0xa3
 8009838:	4923      	ldr	r1, [pc, #140]	@ (80098c8 <netconn_new_with_proto_and_callback+0xe0>)
 800983a:	4824      	ldr	r0, [pc, #144]	@ (80098cc <netconn_new_with_proto_and_callback+0xe4>)
 800983c:	f7f7 fc66 	bl	800110c <printf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009842:	3310      	adds	r3, #16
 8009844:	4618      	mov	r0, r3
 8009846:	f00c fe3e 	bl	80164c6 <sys_mbox_valid>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d105      	bne.n	800985c <netconn_new_with_proto_and_callback+0x74>
 8009850:	4b1c      	ldr	r3, [pc, #112]	@ (80098c4 <netconn_new_with_proto_and_callback+0xdc>)
 8009852:	22a4      	movs	r2, #164	@ 0xa4
 8009854:	491e      	ldr	r1, [pc, #120]	@ (80098d0 <netconn_new_with_proto_and_callback+0xe8>)
 8009856:	481d      	ldr	r0, [pc, #116]	@ (80098cc <netconn_new_with_proto_and_callback+0xe4>)
 8009858:	f7f7 fc58 	bl	800110c <printf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800985c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985e:	3314      	adds	r3, #20
 8009860:	4618      	mov	r0, r3
 8009862:	f00c fe30 	bl	80164c6 <sys_mbox_valid>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d005      	beq.n	8009878 <netconn_new_with_proto_and_callback+0x90>
 800986c:	4b15      	ldr	r3, [pc, #84]	@ (80098c4 <netconn_new_with_proto_and_callback+0xdc>)
 800986e:	22a6      	movs	r2, #166	@ 0xa6
 8009870:	4918      	ldr	r1, [pc, #96]	@ (80098d4 <netconn_new_with_proto_and_callback+0xec>)
 8009872:	4816      	ldr	r0, [pc, #88]	@ (80098cc <netconn_new_with_proto_and_callback+0xe4>)
 8009874:	f7f7 fc4a 	bl	800110c <printf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987a:	330c      	adds	r3, #12
 800987c:	4618      	mov	r0, r3
 800987e:	f00c feb3 	bl	80165e8 <sys_sem_valid>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <netconn_new_with_proto_and_callback+0xac>
 8009888:	4b0e      	ldr	r3, [pc, #56]	@ (80098c4 <netconn_new_with_proto_and_callback+0xdc>)
 800988a:	22a9      	movs	r2, #169	@ 0xa9
 800988c:	4912      	ldr	r1, [pc, #72]	@ (80098d8 <netconn_new_with_proto_and_callback+0xf0>)
 800988e:	480f      	ldr	r0, [pc, #60]	@ (80098cc <netconn_new_with_proto_and_callback+0xe4>)
 8009890:	f7f7 fc3c 	bl	800110c <printf>
      sys_sem_free(&conn->op_completed);
 8009894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009896:	330c      	adds	r3, #12
 8009898:	4618      	mov	r0, r3
 800989a:	f00c fe98 	bl	80165ce <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800989e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a0:	3310      	adds	r3, #16
 80098a2:	4618      	mov	r0, r3
 80098a4:	f00c fd88 	bl	80163b8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80098a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098aa:	2007      	movs	r0, #7
 80098ac:	f002 fc3e 	bl	800c12c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e000      	b.n	80098b6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80098b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3730      	adds	r7, #48	@ 0x30
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	0800a349 	.word	0x0800a349
 80098c4:	08017a60 	.word	0x08017a60
 80098c8:	08017a94 	.word	0x08017a94
 80098cc:	08017ab8 	.word	0x08017ab8
 80098d0:	08017ae0 	.word	0x08017ae0
 80098d4:	08017af8 	.word	0x08017af8
 80098d8:	08017b1c 	.word	0x08017b1c

080098dc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08c      	sub	sp, #48	@ 0x30
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <netconn_prepare_delete+0x12>
    return ERR_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	e014      	b.n	8009918 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80098f2:	2329      	movs	r3, #41	@ 0x29
 80098f4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80098f6:	f107 030c 	add.w	r3, r7, #12
 80098fa:	4619      	mov	r1, r3
 80098fc:	4808      	ldr	r0, [pc, #32]	@ (8009920 <netconn_prepare_delete+0x44>)
 80098fe:	f7ff ff55 	bl	80097ac <netconn_apimsg>
 8009902:	4603      	mov	r3, r0
 8009904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009908:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <netconn_prepare_delete+0x3a>
    return err;
 8009910:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009914:	e000      	b.n	8009918 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3730      	adds	r7, #48	@ 0x30
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	0800a8b5 	.word	0x0800a8b5

08009924 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <netconn_delete+0x12>
    return ERR_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	e00d      	b.n	8009952 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff ffd0 	bl	80098dc <netconn_prepare_delete>
 800993c:	4603      	mov	r3, r0
 800993e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d102      	bne.n	800994e <netconn_delete+0x2a>
    netconn_free(conn);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fd81 	bl	800a450 <netconn_free>
  }
  return err;
 800994e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	@ 0x38
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	4613      	mov	r3, r2
 8009968:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d109      	bne.n	8009984 <netconn_connect+0x28>
 8009970:	4b11      	ldr	r3, [pc, #68]	@ (80099b8 <netconn_connect+0x5c>)
 8009972:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8009976:	4911      	ldr	r1, [pc, #68]	@ (80099bc <netconn_connect+0x60>)
 8009978:	4811      	ldr	r0, [pc, #68]	@ (80099c0 <netconn_connect+0x64>)
 800997a:	f7f7 fbc7 	bl	800110c <printf>
 800997e:	f06f 030f 	mvn.w	r3, #15
 8009982:	e015      	b.n	80099b0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800998a:	4b0e      	ldr	r3, [pc, #56]	@ (80099c4 <netconn_connect+0x68>)
 800998c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800999a:	f107 0314 	add.w	r3, r7, #20
 800999e:	4619      	mov	r1, r3
 80099a0:	4809      	ldr	r0, [pc, #36]	@ (80099c8 <netconn_connect+0x6c>)
 80099a2:	f7ff ff03 	bl	80097ac <netconn_apimsg>
 80099a6:	4603      	mov	r3, r0
 80099a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80099ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3738      	adds	r7, #56	@ 0x38
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	08017a60 	.word	0x08017a60
 80099bc:	08017bd4 	.word	0x08017bd4
 80099c0:	08017ab8 	.word	0x08017ab8
 80099c4:	0801aed0 	.word	0x0801aed0
 80099c8:	0800ab9d 	.word	0x0800ab9d

080099cc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af02      	add	r7, sp, #8
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80099e2:	78fa      	ldrb	r2, [r7, #3]
 80099e4:	f107 0110 	add.w	r1, r7, #16
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	4613      	mov	r3, r2
 80099ee:	2201      	movs	r2, #1
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 f805 	bl	8009a00 <netconn_write_vectors_partly>
 80099f6:	4603      	mov	r3, r0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b092      	sub	sp, #72	@ 0x48
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	460b      	mov	r3, r1
 8009a10:	80fb      	strh	r3, [r7, #6]
 8009a12:	4613      	mov	r3, r2
 8009a14:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d109      	bne.n	8009a30 <netconn_write_vectors_partly+0x30>
 8009a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8009b58 <netconn_write_vectors_partly+0x158>)
 8009a1e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009a22:	494e      	ldr	r1, [pc, #312]	@ (8009b5c <netconn_write_vectors_partly+0x15c>)
 8009a24:	484e      	ldr	r0, [pc, #312]	@ (8009b60 <netconn_write_vectors_partly+0x160>)
 8009a26:	f7f7 fb71 	bl	800110c <printf>
 8009a2a:	f06f 030f 	mvn.w	r3, #15
 8009a2e:	e08e      	b.n	8009b4e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a38:	2b10      	cmp	r3, #16
 8009a3a:	d009      	beq.n	8009a50 <netconn_write_vectors_partly+0x50>
 8009a3c:	4b46      	ldr	r3, [pc, #280]	@ (8009b58 <netconn_write_vectors_partly+0x158>)
 8009a3e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009a42:	4948      	ldr	r1, [pc, #288]	@ (8009b64 <netconn_write_vectors_partly+0x164>)
 8009a44:	4846      	ldr	r0, [pc, #280]	@ (8009b60 <netconn_write_vectors_partly+0x160>)
 8009a46:	f7f7 fb61 	bl	800110c <printf>
 8009a4a:	f06f 0305 	mvn.w	r3, #5
 8009a4e:	e07e      	b.n	8009b4e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7f1b      	ldrb	r3, [r3, #28]
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d104      	bne.n	8009a66 <netconn_write_vectors_partly+0x66>
 8009a5c:	797b      	ldrb	r3, [r7, #5]
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <netconn_write_vectors_partly+0x6a>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e000      	b.n	8009a6c <netconn_write_vectors_partly+0x6c>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009a70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d005      	beq.n	8009a84 <netconn_write_vectors_partly+0x84>
 8009a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d102      	bne.n	8009a84 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009a7e:	f06f 0305 	mvn.w	r3, #5
 8009a82:	e064      	b.n	8009b4e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009a88:	2300      	movs	r3, #0
 8009a8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a8c:	e015      	b.n	8009aba <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	4413      	add	r3, r2
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a9a:	4413      	add	r3, r2
 8009a9c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8009a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d202      	bcs.n	8009ab4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009aae:	f06f 0305 	mvn.w	r3, #5
 8009ab2:	e04c      	b.n	8009b4e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aba:	88fb      	ldrh	r3, [r7, #6]
 8009abc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	dbe5      	blt.n	8009a8e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e040      	b.n	8009b4e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	da0a      	bge.n	8009ae8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009ad8:	f06f 0305 	mvn.w	r3, #5
 8009adc:	e037      	b.n	8009b4e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009ade:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009af0:	88fb      	ldrh	r3, [r7, #6]
 8009af2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009af8:	797b      	ldrb	r3, [r7, #5]
 8009afa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009b06:	f107 0314 	add.w	r3, r7, #20
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4816      	ldr	r0, [pc, #88]	@ (8009b68 <netconn_write_vectors_partly+0x168>)
 8009b0e:	f7ff fe4d 	bl	80097ac <netconn_apimsg>
 8009b12:	4603      	mov	r3, r0
 8009b14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8009b18:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d114      	bne.n	8009b4a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b2a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009b2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10a      	bne.n	8009b4a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d006      	beq.n	8009b4a <netconn_write_vectors_partly+0x14a>
 8009b3c:	4b06      	ldr	r3, [pc, #24]	@ (8009b58 <netconn_write_vectors_partly+0x158>)
 8009b3e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009b42:	490a      	ldr	r1, [pc, #40]	@ (8009b6c <netconn_write_vectors_partly+0x16c>)
 8009b44:	4806      	ldr	r0, [pc, #24]	@ (8009b60 <netconn_write_vectors_partly+0x160>)
 8009b46:	f7f7 fae1 	bl	800110c <printf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009b4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3748      	adds	r7, #72	@ 0x48
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	08017a60 	.word	0x08017a60
 8009b5c:	08017d38 	.word	0x08017d38
 8009b60:	08017ab8 	.word	0x08017ab8
 8009b64:	08017d54 	.word	0x08017d54
 8009b68:	0800b0b1 	.word	0x0800b0b1
 8009b6c:	08017d78 	.word	0x08017d78

08009b70 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08c      	sub	sp, #48	@ 0x30
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d109      	bne.n	8009b96 <netconn_close_shutdown+0x26>
 8009b82:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc0 <netconn_close_shutdown+0x50>)
 8009b84:	f240 4247 	movw	r2, #1095	@ 0x447
 8009b88:	490e      	ldr	r1, [pc, #56]	@ (8009bc4 <netconn_close_shutdown+0x54>)
 8009b8a:	480f      	ldr	r0, [pc, #60]	@ (8009bc8 <netconn_close_shutdown+0x58>)
 8009b8c:	f7f7 fabe 	bl	800110c <printf>
 8009b90:	f06f 030f 	mvn.w	r3, #15
 8009b94:	e010      	b.n	8009bb8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009b9a:	78fb      	ldrb	r3, [r7, #3]
 8009b9c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009b9e:	2329      	movs	r3, #41	@ 0x29
 8009ba0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009ba2:	f107 030c 	add.w	r3, r7, #12
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4808      	ldr	r0, [pc, #32]	@ (8009bcc <netconn_close_shutdown+0x5c>)
 8009baa:	f7ff fdff 	bl	80097ac <netconn_apimsg>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009bb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3730      	adds	r7, #48	@ 0x30
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	08017a60 	.word	0x08017a60
 8009bc4:	08017d9c 	.word	0x08017d9c
 8009bc8:	08017ab8 	.word	0x08017ab8
 8009bcc:	0800b1c9 	.word	0x0800b1c9

08009bd0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009bd8:	2103      	movs	r1, #3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff ffc8 	bl	8009b70 <netconn_close_shutdown>
 8009be0:	4603      	mov	r3, r0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <netconn_err+0x12>
    return ERR_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	e00d      	b.n	8009c18 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009bfc:	f00c fd7e 	bl	80166fc <sys_arch_protect>
 8009c00:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	7a1b      	ldrb	r3, [r3, #8]
 8009c06:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f00c fd82 	bl	8016718 <sys_arch_unprotect>
  return err;
 8009c14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c2e:	f113 0f0d 	cmn.w	r3, #13
 8009c32:	d009      	beq.n	8009c48 <lwip_netconn_err_to_msg+0x28>
 8009c34:	f113 0f0d 	cmn.w	r3, #13
 8009c38:	dc0c      	bgt.n	8009c54 <lwip_netconn_err_to_msg+0x34>
 8009c3a:	f113 0f0f 	cmn.w	r3, #15
 8009c3e:	d007      	beq.n	8009c50 <lwip_netconn_err_to_msg+0x30>
 8009c40:	f113 0f0e 	cmn.w	r3, #14
 8009c44:	d002      	beq.n	8009c4c <lwip_netconn_err_to_msg+0x2c>
 8009c46:	e005      	b.n	8009c54 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009c48:	4b0a      	ldr	r3, [pc, #40]	@ (8009c74 <lwip_netconn_err_to_msg+0x54>)
 8009c4a:	e00e      	b.n	8009c6a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c78 <lwip_netconn_err_to_msg+0x58>)
 8009c4e:	e00c      	b.n	8009c6a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009c50:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <lwip_netconn_err_to_msg+0x5c>)
 8009c52:	e00a      	b.n	8009c6a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <lwip_netconn_err_to_msg+0x48>
 8009c5c:	4b08      	ldr	r3, [pc, #32]	@ (8009c80 <lwip_netconn_err_to_msg+0x60>)
 8009c5e:	227d      	movs	r2, #125	@ 0x7d
 8009c60:	4908      	ldr	r1, [pc, #32]	@ (8009c84 <lwip_netconn_err_to_msg+0x64>)
 8009c62:	4809      	ldr	r0, [pc, #36]	@ (8009c88 <lwip_netconn_err_to_msg+0x68>)
 8009c64:	f7f7 fa52 	bl	800110c <printf>
      return NULL;
 8009c68:	2300      	movs	r3, #0
  }
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	0801adbc 	.word	0x0801adbc
 8009c78:	0801adbd 	.word	0x0801adbd
 8009c7c:	0801adbe 	.word	0x0801adbe
 8009c80:	08017db8 	.word	0x08017db8
 8009c84:	08017dec 	.word	0x08017dec
 8009c88:	08017dfc 	.word	0x08017dfc

08009c8c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d105      	bne.n	8009ca8 <lwip_netconn_is_err_msg+0x1c>
 8009c9c:	4b12      	ldr	r3, [pc, #72]	@ (8009ce8 <lwip_netconn_is_err_msg+0x5c>)
 8009c9e:	2285      	movs	r2, #133	@ 0x85
 8009ca0:	4912      	ldr	r1, [pc, #72]	@ (8009cec <lwip_netconn_is_err_msg+0x60>)
 8009ca2:	4813      	ldr	r0, [pc, #76]	@ (8009cf0 <lwip_netconn_is_err_msg+0x64>)
 8009ca4:	f7f7 fa32 	bl	800110c <printf>

  if (msg == &netconn_aborted) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a12      	ldr	r2, [pc, #72]	@ (8009cf4 <lwip_netconn_is_err_msg+0x68>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d104      	bne.n	8009cba <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	22f3      	movs	r2, #243	@ 0xf3
 8009cb4:	701a      	strb	r2, [r3, #0]
    return 1;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e012      	b.n	8009ce0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8009cf8 <lwip_netconn_is_err_msg+0x6c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d104      	bne.n	8009ccc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	22f2      	movs	r2, #242	@ 0xf2
 8009cc6:	701a      	strb	r2, [r3, #0]
    return 1;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e009      	b.n	8009ce0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a0b      	ldr	r2, [pc, #44]	@ (8009cfc <lwip_netconn_is_err_msg+0x70>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d104      	bne.n	8009cde <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	22f1      	movs	r2, #241	@ 0xf1
 8009cd8:	701a      	strb	r2, [r3, #0]
    return 1;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e000      	b.n	8009ce0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	08017db8 	.word	0x08017db8
 8009cec:	08017e24 	.word	0x08017e24
 8009cf0:	08017dfc 	.word	0x08017dfc
 8009cf4:	0801adbc 	.word	0x0801adbc
 8009cf8:	0801adbd 	.word	0x0801adbd
 8009cfc:	0801adbe 	.word	0x0801adbe

08009d00 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d105      	bne.n	8009d20 <recv_udp+0x20>
 8009d14:	4b34      	ldr	r3, [pc, #208]	@ (8009de8 <recv_udp+0xe8>)
 8009d16:	22e5      	movs	r2, #229	@ 0xe5
 8009d18:	4934      	ldr	r1, [pc, #208]	@ (8009dec <recv_udp+0xec>)
 8009d1a:	4835      	ldr	r0, [pc, #212]	@ (8009df0 <recv_udp+0xf0>)
 8009d1c:	f7f7 f9f6 	bl	800110c <printf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d105      	bne.n	8009d32 <recv_udp+0x32>
 8009d26:	4b30      	ldr	r3, [pc, #192]	@ (8009de8 <recv_udp+0xe8>)
 8009d28:	22e6      	movs	r2, #230	@ 0xe6
 8009d2a:	4932      	ldr	r1, [pc, #200]	@ (8009df4 <recv_udp+0xf4>)
 8009d2c:	4830      	ldr	r0, [pc, #192]	@ (8009df0 <recv_udp+0xf0>)
 8009d2e:	f7f7 f9ed 	bl	800110c <printf>
  conn = (struct netconn *)arg;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d103      	bne.n	8009d44 <recv_udp+0x44>
    pbuf_free(p);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f003 f899 	bl	800ce74 <pbuf_free>
    return;
 8009d42:	e04d      	b.n	8009de0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d005      	beq.n	8009d5a <recv_udp+0x5a>
 8009d4e:	4b26      	ldr	r3, [pc, #152]	@ (8009de8 <recv_udp+0xe8>)
 8009d50:	22ee      	movs	r2, #238	@ 0xee
 8009d52:	4929      	ldr	r1, [pc, #164]	@ (8009df8 <recv_udp+0xf8>)
 8009d54:	4826      	ldr	r0, [pc, #152]	@ (8009df0 <recv_udp+0xf0>)
 8009d56:	f7f7 f9d9 	bl	800110c <printf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	3310      	adds	r3, #16
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f00c fbb1 	bl	80164c6 <sys_mbox_valid>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d103      	bne.n	8009d72 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f003 f882 	bl	800ce74 <pbuf_free>
    return;
 8009d70:	e036      	b.n	8009de0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009d72:	2006      	movs	r0, #6
 8009d74:	f002 f964 	bl	800c040 <memp_malloc>
 8009d78:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d103      	bne.n	8009d88 <recv_udp+0x88>
    pbuf_free(p);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f003 f877 	bl	800ce74 <pbuf_free>
    return;
 8009d86:	e02b      	b.n	8009de0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <recv_udp+0xa0>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	e000      	b.n	8009da2 <recv_udp+0xa2>
 8009da0:	2300      	movs	r3, #0
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009daa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	891b      	ldrh	r3, [r3, #8]
 8009db0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	3310      	adds	r3, #16
 8009db6:	69b9      	ldr	r1, [r7, #24]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f00c fb0f 	bl	80163dc <sys_mbox_trypost>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <recv_udp+0xcc>
    netbuf_delete(buf);
 8009dc4:	69b8      	ldr	r0, [r7, #24]
 8009dc6:	f001 fa8b 	bl	800b2e0 <netbuf_delete>
    return;
 8009dca:	e009      	b.n	8009de0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <recv_udp+0xe0>
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd8:	8afa      	ldrh	r2, [r7, #22]
 8009dda:	2100      	movs	r1, #0
 8009ddc:	69f8      	ldr	r0, [r7, #28]
 8009dde:	4798      	blx	r3
  }
}
 8009de0:	3720      	adds	r7, #32
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	08017db8 	.word	0x08017db8
 8009dec:	08017e30 	.word	0x08017e30
 8009df0:	08017dfc 	.word	0x08017dfc
 8009df4:	08017e54 	.word	0x08017e54
 8009df8:	08017e74 	.word	0x08017e74

08009dfc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d106      	bne.n	8009e1e <recv_tcp+0x22>
 8009e10:	4b36      	ldr	r3, [pc, #216]	@ (8009eec <recv_tcp+0xf0>)
 8009e12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009e16:	4936      	ldr	r1, [pc, #216]	@ (8009ef0 <recv_tcp+0xf4>)
 8009e18:	4836      	ldr	r0, [pc, #216]	@ (8009ef4 <recv_tcp+0xf8>)
 8009e1a:	f7f7 f977 	bl	800110c <printf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d106      	bne.n	8009e32 <recv_tcp+0x36>
 8009e24:	4b31      	ldr	r3, [pc, #196]	@ (8009eec <recv_tcp+0xf0>)
 8009e26:	f240 122d 	movw	r2, #301	@ 0x12d
 8009e2a:	4933      	ldr	r1, [pc, #204]	@ (8009ef8 <recv_tcp+0xfc>)
 8009e2c:	4831      	ldr	r0, [pc, #196]	@ (8009ef4 <recv_tcp+0xf8>)
 8009e2e:	f7f7 f96d 	bl	800110c <printf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d006      	beq.n	8009e48 <recv_tcp+0x4c>
 8009e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8009eec <recv_tcp+0xf0>)
 8009e3c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009e40:	492e      	ldr	r1, [pc, #184]	@ (8009efc <recv_tcp+0x100>)
 8009e42:	482c      	ldr	r0, [pc, #176]	@ (8009ef4 <recv_tcp+0xf8>)
 8009e44:	f7f7 f962 	bl	800110c <printf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <recv_tcp+0x5c>
    return ERR_VAL;
 8009e52:	f06f 0305 	mvn.w	r3, #5
 8009e56:	e045      	b.n	8009ee4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d006      	beq.n	8009e70 <recv_tcp+0x74>
 8009e62:	4b22      	ldr	r3, [pc, #136]	@ (8009eec <recv_tcp+0xf0>)
 8009e64:	f240 1235 	movw	r2, #309	@ 0x135
 8009e68:	4925      	ldr	r1, [pc, #148]	@ (8009f00 <recv_tcp+0x104>)
 8009e6a:	4822      	ldr	r0, [pc, #136]	@ (8009ef4 <recv_tcp+0xf8>)
 8009e6c:	f7f7 f94e 	bl	800110c <printf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	3310      	adds	r3, #16
 8009e74:	4618      	mov	r0, r3
 8009e76:	f00c fb26 	bl	80164c6 <sys_mbox_valid>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10d      	bne.n	8009e9c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d008      	beq.n	8009e98 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	891b      	ldrh	r3, [r3, #8]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	68b8      	ldr	r0, [r7, #8]
 8009e8e:	f003 fe47 	bl	800db20 <tcp_recved>
      pbuf_free(p);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f002 ffee 	bl	800ce74 <pbuf_free>
    }
    return ERR_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e023      	b.n	8009ee4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <recv_tcp+0xb2>
    msg = p;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	891b      	ldrh	r3, [r3, #8]
 8009eaa:	83fb      	strh	r3, [r7, #30]
 8009eac:	e003      	b.n	8009eb6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009eae:	4b15      	ldr	r3, [pc, #84]	@ (8009f04 <recv_tcp+0x108>)
 8009eb0:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	3310      	adds	r3, #16
 8009eba:	69b9      	ldr	r1, [r7, #24]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f00c fa8d 	bl	80163dc <sys_mbox_trypost>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ecc:	e00a      	b.n	8009ee4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d005      	beq.n	8009ee2 <recv_tcp+0xe6>
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eda:	8bfa      	ldrh	r2, [r7, #30]
 8009edc:	2100      	movs	r1, #0
 8009ede:	6978      	ldr	r0, [r7, #20]
 8009ee0:	4798      	blx	r3
  }

  return ERR_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3720      	adds	r7, #32
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	08017db8 	.word	0x08017db8
 8009ef0:	08017e94 	.word	0x08017e94
 8009ef4:	08017dfc 	.word	0x08017dfc
 8009ef8:	08017eb8 	.word	0x08017eb8
 8009efc:	08017ed8 	.word	0x08017ed8
 8009f00:	08017ef0 	.word	0x08017ef0
 8009f04:	0801adbe 	.word	0x0801adbe

08009f08 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d106      	bne.n	8009f2a <poll_tcp+0x22>
 8009f1c:	4b29      	ldr	r3, [pc, #164]	@ (8009fc4 <poll_tcp+0xbc>)
 8009f1e:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009f22:	4929      	ldr	r1, [pc, #164]	@ (8009fc8 <poll_tcp+0xc0>)
 8009f24:	4829      	ldr	r0, [pc, #164]	@ (8009fcc <poll_tcp+0xc4>)
 8009f26:	f7f7 f8f1 	bl	800110c <printf>

  if (conn->state == NETCONN_WRITE) {
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d104      	bne.n	8009f3c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009f32:	2101      	movs	r1, #1
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 feef 	bl	800ad18 <lwip_netconn_do_writemore>
 8009f3a:	e016      	b.n	8009f6a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	785b      	ldrb	r3, [r3, #1]
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d112      	bne.n	8009f6a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00a      	beq.n	8009f62 <poll_tcp+0x5a>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	7a5b      	ldrb	r3, [r3, #9]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d005      	beq.n	8009f62 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	7a5a      	ldrb	r2, [r3, #9]
 8009f5c:	3a01      	subs	r2, #1
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009f62:	2101      	movs	r1, #1
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 fb3b 	bl	800a5e0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	7f1b      	ldrb	r3, [r3, #28]
 8009f6e:	f003 0310 	and.w	r3, r3, #16
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d021      	beq.n	8009fba <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d01d      	beq.n	8009fba <poll_tcp+0xb2>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009f86:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009f8a:	d316      	bcc.n	8009fba <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f94:	2b04      	cmp	r3, #4
 8009f96:	d810      	bhi.n	8009fba <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	7f1b      	ldrb	r3, [r3, #28]
 8009f9c:	f023 0310 	bic.w	r3, r3, #16
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <poll_tcp+0xb2>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2102      	movs	r1, #2
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	08017db8 	.word	0x08017db8
 8009fc8:	08017f10 	.word	0x08017f10
 8009fcc:	08017dfc 	.word	0x08017dfc

08009fd0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d106      	bne.n	8009ff6 <sent_tcp+0x26>
 8009fe8:	4b20      	ldr	r3, [pc, #128]	@ (800a06c <sent_tcp+0x9c>)
 8009fea:	f240 1293 	movw	r2, #403	@ 0x193
 8009fee:	4920      	ldr	r1, [pc, #128]	@ (800a070 <sent_tcp+0xa0>)
 8009ff0:	4820      	ldr	r0, [pc, #128]	@ (800a074 <sent_tcp+0xa4>)
 8009ff2:	f7f7 f88b 	bl	800110c <printf>

  if (conn) {
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d032      	beq.n	800a062 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	785b      	ldrb	r3, [r3, #1]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d104      	bne.n	800a00e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a004:	2101      	movs	r1, #1
 800a006:	6978      	ldr	r0, [r7, #20]
 800a008:	f000 fe86 	bl	800ad18 <lwip_netconn_do_writemore>
 800a00c:	e007      	b.n	800a01e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	785b      	ldrb	r3, [r3, #1]
 800a012:	2b04      	cmp	r3, #4
 800a014:	d103      	bne.n	800a01e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a016:	2101      	movs	r1, #1
 800a018:	6978      	ldr	r0, [r7, #20]
 800a01a:	f000 fae1 	bl	800a5e0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d01d      	beq.n	800a062 <sent_tcp+0x92>
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a02e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a032:	d316      	bcc.n	800a062 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d810      	bhi.n	800a062 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	7f1b      	ldrb	r3, [r3, #28]
 800a044:	f023 0310 	bic.w	r3, r3, #16
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a052:	2b00      	cmp	r3, #0
 800a054:	d005      	beq.n	800a062 <sent_tcp+0x92>
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05a:	88fa      	ldrh	r2, [r7, #6]
 800a05c:	2102      	movs	r1, #2
 800a05e:	6978      	ldr	r0, [r7, #20]
 800a060:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	08017db8 	.word	0x08017db8
 800a070:	08017f10 	.word	0x08017f10
 800a074:	08017dfc 	.word	0x08017dfc

0800a078 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <err_tcp+0x24>
 800a08e:	4b5f      	ldr	r3, [pc, #380]	@ (800a20c <err_tcp+0x194>)
 800a090:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800a094:	495e      	ldr	r1, [pc, #376]	@ (800a210 <err_tcp+0x198>)
 800a096:	485f      	ldr	r0, [pc, #380]	@ (800a214 <err_tcp+0x19c>)
 800a098:	f7f7 f838 	bl	800110c <printf>

  SYS_ARCH_PROTECT(lev);
 800a09c:	f00c fb2e 	bl	80166fc <sys_arch_protect>
 800a0a0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	7f1b      	ldrb	r3, [r3, #28]
 800a0b2:	f043 0301 	orr.w	r3, r3, #1
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	785b      	ldrb	r3, [r3, #1]
 800a0c0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a0c8:	69b8      	ldr	r0, [r7, #24]
 800a0ca:	f00c fb25 	bl	8016718 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <err_tcp+0x6a>
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2104      	movs	r1, #4
 800a0de:	69f8      	ldr	r0, [r7, #28]
 800a0e0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d005      	beq.n	800a0f6 <err_tcp+0x7e>
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	69f8      	ldr	r0, [r7, #28]
 800a0f4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d005      	beq.n	800a10a <err_tcp+0x92>
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a102:	2200      	movs	r2, #0
 800a104:	2102      	movs	r1, #2
 800a106:	69f8      	ldr	r0, [r7, #28]
 800a108:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a10a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff fd86 	bl	8009c20 <lwip_netconn_err_to_msg>
 800a114:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	3310      	adds	r3, #16
 800a11a:	4618      	mov	r0, r3
 800a11c:	f00c f9d3 	bl	80164c6 <sys_mbox_valid>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d005      	beq.n	800a132 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	3310      	adds	r3, #16
 800a12a:	6939      	ldr	r1, [r7, #16]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f00c f955 	bl	80163dc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	3314      	adds	r3, #20
 800a136:	4618      	mov	r0, r3
 800a138:	f00c f9c5 	bl	80164c6 <sys_mbox_valid>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d005      	beq.n	800a14e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	3314      	adds	r3, #20
 800a146:	6939      	ldr	r1, [r7, #16]
 800a148:	4618      	mov	r0, r3
 800a14a:	f00c f947 	bl	80163dc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d005      	beq.n	800a160 <err_tcp+0xe8>
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	2b04      	cmp	r3, #4
 800a158:	d002      	beq.n	800a160 <err_tcp+0xe8>
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b03      	cmp	r3, #3
 800a15e:	d143      	bne.n	800a1e8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	7f1b      	ldrb	r3, [r3, #28]
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bf14      	ite	ne
 800a16c:	2301      	movne	r3, #1
 800a16e:	2300      	moveq	r3, #0
 800a170:	b2db      	uxtb	r3, r3
 800a172:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	7f1b      	ldrb	r3, [r3, #28]
 800a178:	f023 0304 	bic.w	r3, r3, #4
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d13b      	bne.n	800a200 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d106      	bne.n	800a19e <err_tcp+0x126>
 800a190:	4b1e      	ldr	r3, [pc, #120]	@ (800a20c <err_tcp+0x194>)
 800a192:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a196:	4920      	ldr	r1, [pc, #128]	@ (800a218 <err_tcp+0x1a0>)
 800a198:	481e      	ldr	r0, [pc, #120]	@ (800a214 <err_tcp+0x19c>)
 800a19a:	f7f6 ffb7 	bl	800110c <printf>
      if (old_state == NETCONN_CLOSE) {
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
 800a1a0:	2b04      	cmp	r3, #4
 800a1a2:	d104      	bne.n	800a1ae <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	711a      	strb	r2, [r3, #4]
 800a1ac:	e003      	b.n	800a1b6 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	78fa      	ldrb	r2, [r7, #3]
 800a1b4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	330c      	adds	r3, #12
 800a1be:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a1c0:	68b8      	ldr	r0, [r7, #8]
 800a1c2:	f00c fa11 	bl	80165e8 <sys_sem_valid>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d106      	bne.n	800a1da <err_tcp+0x162>
 800a1cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a20c <err_tcp+0x194>)
 800a1ce:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800a1d2:	4912      	ldr	r1, [pc, #72]	@ (800a21c <err_tcp+0x1a4>)
 800a1d4:	480f      	ldr	r0, [pc, #60]	@ (800a214 <err_tcp+0x19c>)
 800a1d6:	f7f6 ff99 	bl	800110c <printf>
      conn->current_msg = NULL;
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a1e0:	68b8      	ldr	r0, [r7, #8]
 800a1e2:	f00c f9e7 	bl	80165b4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a1e6:	e00b      	b.n	800a200 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	6a1b      	ldr	r3, [r3, #32]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d008      	beq.n	800a202 <err_tcp+0x18a>
 800a1f0:	4b06      	ldr	r3, [pc, #24]	@ (800a20c <err_tcp+0x194>)
 800a1f2:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a1f6:	490a      	ldr	r1, [pc, #40]	@ (800a220 <err_tcp+0x1a8>)
 800a1f8:	4806      	ldr	r0, [pc, #24]	@ (800a214 <err_tcp+0x19c>)
 800a1fa:	f7f6 ff87 	bl	800110c <printf>
  }
}
 800a1fe:	e000      	b.n	800a202 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a200:	bf00      	nop
}
 800a202:	bf00      	nop
 800a204:	3720      	adds	r7, #32
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	08017db8 	.word	0x08017db8
 800a210:	08017f10 	.word	0x08017f10
 800a214:	08017dfc 	.word	0x08017dfc
 800a218:	08017f20 	.word	0x08017f20
 800a21c:	08017f3c 	.word	0x08017f3c
 800a220:	08017f58 	.word	0x08017f58

0800a224 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f004 fc53 	bl	800eae0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a23a:	490a      	ldr	r1, [pc, #40]	@ (800a264 <setup_tcp+0x40>)
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f004 fc61 	bl	800eb04 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a242:	4909      	ldr	r1, [pc, #36]	@ (800a268 <setup_tcp+0x44>)
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f004 fc7f 	bl	800eb48 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a24a:	2202      	movs	r2, #2
 800a24c:	4907      	ldr	r1, [pc, #28]	@ (800a26c <setup_tcp+0x48>)
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f004 fcd6 	bl	800ec00 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a254:	4906      	ldr	r1, [pc, #24]	@ (800a270 <setup_tcp+0x4c>)
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f004 fc98 	bl	800eb8c <tcp_err>
}
 800a25c:	bf00      	nop
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	08009dfd 	.word	0x08009dfd
 800a268:	08009fd1 	.word	0x08009fd1
 800a26c:	08009f09 	.word	0x08009f09
 800a270:	0800a079 	.word	0x0800a079

0800a274 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a274:	b590      	push	{r4, r7, lr}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d006      	beq.n	800a298 <pcb_new+0x24>
 800a28a:	4b2b      	ldr	r3, [pc, #172]	@ (800a338 <pcb_new+0xc4>)
 800a28c:	f240 2265 	movw	r2, #613	@ 0x265
 800a290:	492a      	ldr	r1, [pc, #168]	@ (800a33c <pcb_new+0xc8>)
 800a292:	482b      	ldr	r0, [pc, #172]	@ (800a340 <pcb_new+0xcc>)
 800a294:	f7f6 ff3a 	bl	800110c <printf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a2a2:	2b10      	cmp	r3, #16
 800a2a4:	d022      	beq.n	800a2ec <pcb_new+0x78>
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d133      	bne.n	800a312 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681c      	ldr	r4, [r3, #0]
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f009 fd5c 	bl	8013d6e <udp_new_ip_type>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d02a      	beq.n	800a31a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2b22      	cmp	r3, #34	@ 0x22
 800a2cc:	d104      	bne.n	800a2d8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6858      	ldr	r0, [r3, #4]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4917      	ldr	r1, [pc, #92]	@ (800a344 <pcb_new+0xd0>)
 800a2e6:	f009 fcc9 	bl	8013c7c <udp_recv>
      }
      break;
 800a2ea:	e016      	b.n	800a31a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681c      	ldr	r4, [r3, #0]
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f004 fbe6 	bl	800eac4 <tcp_new_ip_type>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff ff8a 	bl	800a224 <setup_tcp>
      }
      break;
 800a310:	e005      	b.n	800a31e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	22fa      	movs	r2, #250	@ 0xfa
 800a316:	711a      	strb	r2, [r3, #4]
      return;
 800a318:	e00a      	b.n	800a330 <pcb_new+0xbc>
      break;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <pcb_new+0xac>
      break;
 800a31e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d102      	bne.n	800a330 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	22ff      	movs	r2, #255	@ 0xff
 800a32e:	711a      	strb	r2, [r3, #4]
  }
}
 800a330:	3714      	adds	r7, #20
 800a332:	46bd      	mov	sp, r7
 800a334:	bd90      	pop	{r4, r7, pc}
 800a336:	bf00      	nop
 800a338:	08017db8 	.word	0x08017db8
 800a33c:	08017f9c 	.word	0x08017f9c
 800a340:	08017dfc 	.word	0x08017dfc
 800a344:	08009d01 	.word	0x08009d01

0800a348 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d102      	bne.n	800a36a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff ff85 	bl	800a274 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	6039      	str	r1, [r7, #0]
 800a37e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a384:	2007      	movs	r0, #7
 800a386:	f001 fe5b 	bl	800c040 <memp_malloc>
 800a38a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <netconn_alloc+0x22>
    return NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	e052      	b.n	800a43c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	79fa      	ldrb	r2, [r7, #7]
 800a3a0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a3a8:	79fb      	ldrb	r3, [r7, #7]
 800a3aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3ae:	2b10      	cmp	r3, #16
 800a3b0:	d004      	beq.n	800a3bc <netconn_alloc+0x48>
 800a3b2:	2b20      	cmp	r3, #32
 800a3b4:	d105      	bne.n	800a3c2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a3b6:	2306      	movs	r3, #6
 800a3b8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a3ba:	e00a      	b.n	800a3d2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a3bc:	2306      	movs	r3, #6
 800a3be:	617b      	str	r3, [r7, #20]
      break;
 800a3c0:	e007      	b.n	800a3d2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a3c2:	4b20      	ldr	r3, [pc, #128]	@ (800a444 <netconn_alloc+0xd0>)
 800a3c4:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a3c8:	491f      	ldr	r1, [pc, #124]	@ (800a448 <netconn_alloc+0xd4>)
 800a3ca:	4820      	ldr	r0, [pc, #128]	@ (800a44c <netconn_alloc+0xd8>)
 800a3cc:	f7f6 fe9e 	bl	800110c <printf>
      goto free_and_return;
 800a3d0:	e02f      	b.n	800a432 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3310      	adds	r3, #16
 800a3d6:	6979      	ldr	r1, [r7, #20]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f00b ffcb 	bl	8016374 <sys_mbox_new>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d125      	bne.n	800a430 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	330c      	adds	r3, #12
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f00c f889 	bl	8016502 <sys_sem_new>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d005      	beq.n	800a402 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3310      	adds	r3, #16
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f00b ffdc 	bl	80163b8 <sys_mbox_free>
    goto free_and_return;
 800a400:	e017      	b.n	800a432 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3314      	adds	r3, #20
 800a406:	4618      	mov	r0, r3
 800a408:	f00c f86e 	bl	80164e8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f04f 32ff 	mov.w	r2, #4294967295
 800a418:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	7cfa      	ldrb	r2, [r7, #19]
 800a42a:	771a      	strb	r2, [r3, #28]
  return conn;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	e005      	b.n	800a43c <netconn_alloc+0xc8>
    goto free_and_return;
 800a430:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a432:	68f9      	ldr	r1, [r7, #12]
 800a434:	2007      	movs	r0, #7
 800a436:	f001 fe79 	bl	800c12c <memp_free>
  return NULL;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	08017db8 	.word	0x08017db8
 800a448:	08017fbc 	.word	0x08017fbc
 800a44c:	08017dfc 	.word	0x08017dfc

0800a450 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d006      	beq.n	800a46e <netconn_free+0x1e>
 800a460:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d0 <netconn_free+0x80>)
 800a462:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a466:	491b      	ldr	r1, [pc, #108]	@ (800a4d4 <netconn_free+0x84>)
 800a468:	481b      	ldr	r0, [pc, #108]	@ (800a4d8 <netconn_free+0x88>)
 800a46a:	f7f6 fe4f 	bl	800110c <printf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3310      	adds	r3, #16
 800a472:	4618      	mov	r0, r3
 800a474:	f00c f827 	bl	80164c6 <sys_mbox_valid>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d006      	beq.n	800a48c <netconn_free+0x3c>
 800a47e:	4b14      	ldr	r3, [pc, #80]	@ (800a4d0 <netconn_free+0x80>)
 800a480:	f240 3223 	movw	r2, #803	@ 0x323
 800a484:	4915      	ldr	r1, [pc, #84]	@ (800a4dc <netconn_free+0x8c>)
 800a486:	4814      	ldr	r0, [pc, #80]	@ (800a4d8 <netconn_free+0x88>)
 800a488:	f7f6 fe40 	bl	800110c <printf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3314      	adds	r3, #20
 800a490:	4618      	mov	r0, r3
 800a492:	f00c f818 	bl	80164c6 <sys_mbox_valid>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d006      	beq.n	800a4aa <netconn_free+0x5a>
 800a49c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d0 <netconn_free+0x80>)
 800a49e:	f240 3226 	movw	r2, #806	@ 0x326
 800a4a2:	490f      	ldr	r1, [pc, #60]	@ (800a4e0 <netconn_free+0x90>)
 800a4a4:	480c      	ldr	r0, [pc, #48]	@ (800a4d8 <netconn_free+0x88>)
 800a4a6:	f7f6 fe31 	bl	800110c <printf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	330c      	adds	r3, #12
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f00c f88d 	bl	80165ce <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	330c      	adds	r3, #12
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f00c f8a6 	bl	801660a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	2007      	movs	r0, #7
 800a4c2:	f001 fe33 	bl	800c12c <memp_free>
}
 800a4c6:	bf00      	nop
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	08017db8 	.word	0x08017db8
 800a4d4:	08017fe4 	.word	0x08017fe4
 800a4d8:	08017dfc 	.word	0x08017dfc
 800a4dc:	08018014 	.word	0x08018014
 800a4e0:	08018050 	.word	0x08018050

0800a4e4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3310      	adds	r3, #16
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f00b ffe8 	bl	80164c6 <sys_mbox_valid>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d02f      	beq.n	800a55c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a4fc:	e018      	b.n	800a530 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a506:	2b10      	cmp	r3, #16
 800a508:	d10e      	bne.n	800a528 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f107 020f 	add.w	r2, r7, #15
 800a510:	4611      	mov	r1, r2
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fbba 	bl	8009c8c <lwip_netconn_is_err_msg>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d108      	bne.n	800a530 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	4618      	mov	r0, r3
 800a522:	f002 fca7 	bl	800ce74 <pbuf_free>
 800a526:	e003      	b.n	800a530 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fed8 	bl	800b2e0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3310      	adds	r3, #16
 800a534:	f107 0210 	add.w	r2, r7, #16
 800a538:	4611      	mov	r1, r2
 800a53a:	4618      	mov	r0, r3
 800a53c:	f00b ffa7 	bl	801648e <sys_arch_mbox_tryfetch>
 800a540:	4603      	mov	r3, r0
 800a542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a546:	d1da      	bne.n	800a4fe <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3310      	adds	r3, #16
 800a54c:	4618      	mov	r0, r3
 800a54e:	f00b ff33 	bl	80163b8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3310      	adds	r3, #16
 800a556:	4618      	mov	r0, r3
 800a558:	f00b ffc6 	bl	80164e8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3314      	adds	r3, #20
 800a560:	4618      	mov	r0, r3
 800a562:	f00b ffb0 	bl	80164c6 <sys_mbox_valid>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d034      	beq.n	800a5d6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a56c:	e01d      	b.n	800a5aa <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f107 020e 	add.w	r2, r7, #14
 800a574:	4611      	mov	r1, r2
 800a576:	4618      	mov	r0, r3
 800a578:	f7ff fb88 	bl	8009c8c <lwip_netconn_is_err_msg>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d113      	bne.n	800a5aa <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a586:	6978      	ldr	r0, [r7, #20]
 800a588:	f7ff ffac 	bl	800a4e4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d007      	beq.n	800a5a4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	4618      	mov	r0, r3
 800a59a:	f003 fa5b 	bl	800da54 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a5a4:	6978      	ldr	r0, [r7, #20]
 800a5a6:	f7ff ff53 	bl	800a450 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3314      	adds	r3, #20
 800a5ae:	f107 0210 	add.w	r2, r7, #16
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00b ff6a 	bl	801648e <sys_arch_mbox_tryfetch>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c0:	d1d5      	bne.n	800a56e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	3314      	adds	r3, #20
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f00b fef6 	bl	80163b8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3314      	adds	r3, #20
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f00b ff89 	bl	80164e8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a5d6:	bf00      	nop
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d106      	bne.n	800a604 <lwip_netconn_do_close_internal+0x24>
 800a5f6:	4b87      	ldr	r3, [pc, #540]	@ (800a814 <lwip_netconn_do_close_internal+0x234>)
 800a5f8:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a5fc:	4986      	ldr	r1, [pc, #536]	@ (800a818 <lwip_netconn_do_close_internal+0x238>)
 800a5fe:	4887      	ldr	r0, [pc, #540]	@ (800a81c <lwip_netconn_do_close_internal+0x23c>)
 800a600:	f7f6 fd84 	bl	800110c <printf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a60c:	2b10      	cmp	r3, #16
 800a60e:	d006      	beq.n	800a61e <lwip_netconn_do_close_internal+0x3e>
 800a610:	4b80      	ldr	r3, [pc, #512]	@ (800a814 <lwip_netconn_do_close_internal+0x234>)
 800a612:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a616:	4982      	ldr	r1, [pc, #520]	@ (800a820 <lwip_netconn_do_close_internal+0x240>)
 800a618:	4880      	ldr	r0, [pc, #512]	@ (800a81c <lwip_netconn_do_close_internal+0x23c>)
 800a61a:	f7f6 fd77 	bl	800110c <printf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	785b      	ldrb	r3, [r3, #1]
 800a622:	2b04      	cmp	r3, #4
 800a624:	d006      	beq.n	800a634 <lwip_netconn_do_close_internal+0x54>
 800a626:	4b7b      	ldr	r3, [pc, #492]	@ (800a814 <lwip_netconn_do_close_internal+0x234>)
 800a628:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a62c:	497d      	ldr	r1, [pc, #500]	@ (800a824 <lwip_netconn_do_close_internal+0x244>)
 800a62e:	487b      	ldr	r0, [pc, #492]	@ (800a81c <lwip_netconn_do_close_internal+0x23c>)
 800a630:	f7f6 fd6c 	bl	800110c <printf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d106      	bne.n	800a64a <lwip_netconn_do_close_internal+0x6a>
 800a63c:	4b75      	ldr	r3, [pc, #468]	@ (800a814 <lwip_netconn_do_close_internal+0x234>)
 800a63e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a642:	4979      	ldr	r1, [pc, #484]	@ (800a828 <lwip_netconn_do_close_internal+0x248>)
 800a644:	4875      	ldr	r0, [pc, #468]	@ (800a81c <lwip_netconn_do_close_internal+0x23c>)
 800a646:	f7f6 fd61 	bl	800110c <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <lwip_netconn_do_close_internal+0x80>
 800a652:	4b70      	ldr	r3, [pc, #448]	@ (800a814 <lwip_netconn_do_close_internal+0x234>)
 800a654:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a658:	4974      	ldr	r1, [pc, #464]	@ (800a82c <lwip_netconn_do_close_internal+0x24c>)
 800a65a:	4870      	ldr	r0, [pc, #448]	@ (800a81c <lwip_netconn_do_close_internal+0x23c>)
 800a65c:	f7f6 fd56 	bl	800110c <printf>

  tpcb = conn->pcb.tcp;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	7a1b      	ldrb	r3, [r3, #8]
 800a66c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	f003 0302 	and.w	r3, r3, #2
 800a67c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	2b03      	cmp	r3, #3
 800a682:	d102      	bne.n	800a68a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a684:	2301      	movs	r3, #1
 800a686:	75bb      	strb	r3, [r7, #22]
 800a688:	e01f      	b.n	800a6ca <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a68a:	7bbb      	ldrb	r3, [r7, #14]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00e      	beq.n	800a6ae <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a694:	2b05      	cmp	r3, #5
 800a696:	d007      	beq.n	800a6a8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a69c:	2b06      	cmp	r3, #6
 800a69e:	d003      	beq.n	800a6a8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d102      	bne.n	800a6ae <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	75bb      	strb	r3, [r7, #22]
 800a6ac:	e00d      	b.n	800a6ca <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a6ae:	7b7b      	ldrb	r3, [r7, #13]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d008      	beq.n	800a6c6 <lwip_netconn_do_close_internal+0xe6>
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	8b5b      	ldrh	r3, [r3, #26]
 800a6b8:	f003 0310 	and.w	r3, r3, #16
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	75bb      	strb	r3, [r7, #22]
 800a6c4:	e001      	b.n	800a6ca <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a6ca:	7dbb      	ldrb	r3, [r7, #22]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d003      	beq.n	800a6d8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	6938      	ldr	r0, [r7, #16]
 800a6d4:	f004 fa04 	bl	800eae0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	7d1b      	ldrb	r3, [r3, #20]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d104      	bne.n	800a6ea <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	6938      	ldr	r0, [r7, #16]
 800a6e4:	f004 fa74 	bl	800ebd0 <tcp_accept>
 800a6e8:	e01d      	b.n	800a726 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	6938      	ldr	r0, [r7, #16]
 800a6f4:	f004 fa06 	bl	800eb04 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	6938      	ldr	r0, [r7, #16]
 800a6fc:	f004 fa68 	bl	800ebd0 <tcp_accept>
    }
    if (shut_tx) {
 800a700:	7b7b      	ldrb	r3, [r7, #13]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a706:	2100      	movs	r1, #0
 800a708:	6938      	ldr	r0, [r7, #16]
 800a70a:	f004 fa1d 	bl	800eb48 <tcp_sent>
    }
    if (shut_close) {
 800a70e:	7dbb      	ldrb	r3, [r7, #22]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d008      	beq.n	800a726 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a714:	2200      	movs	r2, #0
 800a716:	2100      	movs	r1, #0
 800a718:	6938      	ldr	r0, [r7, #16]
 800a71a:	f004 fa71 	bl	800ec00 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a71e:	2100      	movs	r1, #0
 800a720:	6938      	ldr	r0, [r7, #16]
 800a722:	f004 fa33 	bl	800eb8c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a726:	7dbb      	ldrb	r3, [r7, #22]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d005      	beq.n	800a738 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a72c:	6938      	ldr	r0, [r7, #16]
 800a72e:	f003 f84b 	bl	800d7c8 <tcp_close>
 800a732:	4603      	mov	r3, r0
 800a734:	75fb      	strb	r3, [r7, #23]
 800a736:	e007      	b.n	800a748 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a738:	7bbb      	ldrb	r3, [r7, #14]
 800a73a:	7b7a      	ldrb	r2, [r7, #13]
 800a73c:	4619      	mov	r1, r3
 800a73e:	6938      	ldr	r0, [r7, #16]
 800a740:	f003 f86e 	bl	800d820 <tcp_shutdown>
 800a744:	4603      	mov	r3, r0
 800a746:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a748:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d102      	bne.n	800a756 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a750:	2301      	movs	r3, #1
 800a752:	757b      	strb	r3, [r7, #21]
 800a754:	e016      	b.n	800a784 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a756:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75e:	d10f      	bne.n	800a780 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	7a5b      	ldrb	r3, [r3, #9]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10c      	bne.n	800a784 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a76a:	2301      	movs	r3, #1
 800a76c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a76e:	7dbb      	ldrb	r3, [r7, #22]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d007      	beq.n	800a784 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a774:	6938      	ldr	r0, [r7, #16]
 800a776:	f003 f96d 	bl	800da54 <tcp_abort>
          err = ERR_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	75fb      	strb	r3, [r7, #23]
 800a77e:	e001      	b.n	800a784 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a780:	2301      	movs	r3, #1
 800a782:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a784:	7d7b      	ldrb	r3, [r7, #21]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d052      	beq.n	800a830 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	330c      	adds	r3, #12
 800a792:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a1b      	ldr	r3, [r3, #32]
 800a798:	7dfa      	ldrb	r2, [r7, #23]
 800a79a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a7a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d129      	bne.n	800a804 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a7b0:	7dbb      	ldrb	r3, [r7, #22]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00c      	beq.n	800a7d0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d005      	beq.n	800a7d0 <lwip_netconn_do_close_internal+0x1f0>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	2104      	movs	r1, #4
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	4798      	blx	r3
      }
      if (shut_rx) {
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d009      	beq.n	800a7ea <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d005      	beq.n	800a7ea <lwip_netconn_do_close_internal+0x20a>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
      }
      if (shut_tx) {
 800a7ea:	7b7b      	ldrb	r3, [r7, #13]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d009      	beq.n	800a804 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d005      	beq.n	800a804 <lwip_netconn_do_close_internal+0x224>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2102      	movs	r1, #2
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a80a:	68b8      	ldr	r0, [r7, #8]
 800a80c:	f00b fed2 	bl	80165b4 <sys_sem_signal>
    }
    return ERR_OK;
 800a810:	2300      	movs	r3, #0
 800a812:	e03c      	b.n	800a88e <lwip_netconn_do_close_internal+0x2ae>
 800a814:	08017db8 	.word	0x08017db8
 800a818:	0801808c 	.word	0x0801808c
 800a81c:	08017dfc 	.word	0x08017dfc
 800a820:	0801809c 	.word	0x0801809c
 800a824:	080180bc 	.word	0x080180bc
 800a828:	080180e0 	.word	0x080180e0
 800a82c:	08017f20 	.word	0x08017f20
  }
  if (!close_finished) {
 800a830:	7d7b      	ldrb	r3, [r7, #21]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d11e      	bne.n	800a874 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	7d1b      	ldrb	r3, [r3, #20]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d106      	bne.n	800a84c <lwip_netconn_do_close_internal+0x26c>
 800a83e:	4b16      	ldr	r3, [pc, #88]	@ (800a898 <lwip_netconn_do_close_internal+0x2b8>)
 800a840:	f240 4241 	movw	r2, #1089	@ 0x441
 800a844:	4915      	ldr	r1, [pc, #84]	@ (800a89c <lwip_netconn_do_close_internal+0x2bc>)
 800a846:	4816      	ldr	r0, [pc, #88]	@ (800a8a0 <lwip_netconn_do_close_internal+0x2c0>)
 800a848:	f7f6 fc60 	bl	800110c <printf>
    if (shut_tx) {
 800a84c:	7b7b      	ldrb	r3, [r7, #13]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d003      	beq.n	800a85a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a852:	4914      	ldr	r1, [pc, #80]	@ (800a8a4 <lwip_netconn_do_close_internal+0x2c4>)
 800a854:	6938      	ldr	r0, [r7, #16]
 800a856:	f004 f977 	bl	800eb48 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a85a:	2201      	movs	r2, #1
 800a85c:	4912      	ldr	r1, [pc, #72]	@ (800a8a8 <lwip_netconn_do_close_internal+0x2c8>)
 800a85e:	6938      	ldr	r0, [r7, #16]
 800a860:	f004 f9ce 	bl	800ec00 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a864:	4911      	ldr	r1, [pc, #68]	@ (800a8ac <lwip_netconn_do_close_internal+0x2cc>)
 800a866:	6938      	ldr	r0, [r7, #16]
 800a868:	f004 f990 	bl	800eb8c <tcp_err>
    tcp_arg(tpcb, conn);
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	6938      	ldr	r0, [r7, #16]
 800a870:	f004 f936 	bl	800eae0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d106      	bne.n	800a88a <lwip_netconn_do_close_internal+0x2aa>
 800a87c:	4b06      	ldr	r3, [pc, #24]	@ (800a898 <lwip_netconn_do_close_internal+0x2b8>)
 800a87e:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a882:	490b      	ldr	r1, [pc, #44]	@ (800a8b0 <lwip_netconn_do_close_internal+0x2d0>)
 800a884:	4806      	ldr	r0, [pc, #24]	@ (800a8a0 <lwip_netconn_do_close_internal+0x2c0>)
 800a886:	f7f6 fc41 	bl	800110c <printf>
  return err;
 800a88a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	08017db8 	.word	0x08017db8
 800a89c:	080180f4 	.word	0x080180f4
 800a8a0:	08017dfc 	.word	0x08017dfc
 800a8a4:	08009fd1 	.word	0x08009fd1
 800a8a8:	08009f09 	.word	0x08009f09
 800a8ac:	0800a079 	.word	0x0800a079
 800a8b0:	08018118 	.word	0x08018118

0800a8b4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	785b      	ldrb	r3, [r3, #1]
 800a8c6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a8c8:	7afb      	ldrb	r3, [r7, #11]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00d      	beq.n	800a8ea <lwip_netconn_do_delconn+0x36>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8d8:	2b10      	cmp	r3, #16
 800a8da:	d006      	beq.n	800a8ea <lwip_netconn_do_delconn+0x36>
 800a8dc:	4b60      	ldr	r3, [pc, #384]	@ (800aa60 <lwip_netconn_do_delconn+0x1ac>)
 800a8de:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a8e2:	4960      	ldr	r1, [pc, #384]	@ (800aa64 <lwip_netconn_do_delconn+0x1b0>)
 800a8e4:	4860      	ldr	r0, [pc, #384]	@ (800aa68 <lwip_netconn_do_delconn+0x1b4>)
 800a8e6:	f7f6 fc11 	bl	800110c <printf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a8ea:	7afb      	ldrb	r3, [r7, #11]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d005      	beq.n	800a8fc <lwip_netconn_do_delconn+0x48>
 800a8f0:	7afb      	ldrb	r3, [r7, #11]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d002      	beq.n	800a8fc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a8f6:	7afb      	ldrb	r3, [r7, #11]
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d109      	bne.n	800a910 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a8fc:	7afb      	ldrb	r3, [r7, #11]
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d10a      	bne.n	800a918 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	7f1b      	ldrb	r3, [r3, #28]
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d103      	bne.n	800a918 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	22fb      	movs	r2, #251	@ 0xfb
 800a914:	711a      	strb	r2, [r3, #4]
 800a916:	e097      	b.n	800aa48 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a918:	7afb      	ldrb	r3, [r7, #11]
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d10d      	bne.n	800a93a <lwip_netconn_do_delconn+0x86>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	7f1b      	ldrb	r3, [r3, #28]
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d106      	bne.n	800a93a <lwip_netconn_do_delconn+0x86>
 800a92c:	4b4c      	ldr	r3, [pc, #304]	@ (800aa60 <lwip_netconn_do_delconn+0x1ac>)
 800a92e:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a932:	494e      	ldr	r1, [pc, #312]	@ (800aa6c <lwip_netconn_do_delconn+0x1b8>)
 800a934:	484c      	ldr	r0, [pc, #304]	@ (800aa68 <lwip_netconn_do_delconn+0x1b4>)
 800a936:	f7f6 fbe9 	bl	800110c <printf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff fdcd 	bl	800a4e4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d05f      	beq.n	800aa14 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a95e:	2b10      	cmp	r3, #16
 800a960:	d00d      	beq.n	800a97e <lwip_netconn_do_delconn+0xca>
 800a962:	2b20      	cmp	r3, #32
 800a964:	d151      	bne.n	800aa0a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	4618      	mov	r0, r3
 800a978:	f009 f9a0 	bl	8013cbc <udp_remove>
          break;
 800a97c:	e046      	b.n	800aa0c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d006      	beq.n	800a996 <lwip_netconn_do_delconn+0xe2>
 800a988:	4b35      	ldr	r3, [pc, #212]	@ (800aa60 <lwip_netconn_do_delconn+0x1ac>)
 800a98a:	f240 4294 	movw	r2, #1172	@ 0x494
 800a98e:	4938      	ldr	r1, [pc, #224]	@ (800aa70 <lwip_netconn_do_delconn+0x1bc>)
 800a990:	4835      	ldr	r0, [pc, #212]	@ (800aa68 <lwip_netconn_do_delconn+0x1b4>)
 800a992:	f7f6 fbbb 	bl	800110c <printf>
          msg->conn->state = NETCONN_CLOSE;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2204      	movs	r2, #4
 800a99c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2203      	movs	r2, #3
 800a9a2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7ff fe14 	bl	800a5e0 <lwip_netconn_do_close_internal>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d04b      	beq.n	800aa56 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d006      	beq.n	800a9d6 <lwip_netconn_do_delconn+0x122>
 800a9c8:	4b25      	ldr	r3, [pc, #148]	@ (800aa60 <lwip_netconn_do_delconn+0x1ac>)
 800a9ca:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a9ce:	4929      	ldr	r1, [pc, #164]	@ (800aa74 <lwip_netconn_do_delconn+0x1c0>)
 800a9d0:	4825      	ldr	r0, [pc, #148]	@ (800aa68 <lwip_netconn_do_delconn+0x1b4>)
 800a9d2:	f7f6 fb9b 	bl	800110c <printf>
            UNLOCK_TCPIP_CORE();
 800a9d6:	4828      	ldr	r0, [pc, #160]	@ (800aa78 <lwip_netconn_do_delconn+0x1c4>)
 800a9d8:	f00b fe5d 	bl	8016696 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	330c      	adds	r3, #12
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f00b fdb4 	bl	8016552 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a9ea:	4823      	ldr	r0, [pc, #140]	@ (800aa78 <lwip_netconn_do_delconn+0x1c4>)
 800a9ec:	f00b fe44 	bl	8016678 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	785b      	ldrb	r3, [r3, #1]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d02d      	beq.n	800aa56 <lwip_netconn_do_delconn+0x1a2>
 800a9fa:	4b19      	ldr	r3, [pc, #100]	@ (800aa60 <lwip_netconn_do_delconn+0x1ac>)
 800a9fc:	f240 429e 	movw	r2, #1182	@ 0x49e
 800aa00:	491c      	ldr	r1, [pc, #112]	@ (800aa74 <lwip_netconn_do_delconn+0x1c0>)
 800aa02:	4819      	ldr	r0, [pc, #100]	@ (800aa68 <lwip_netconn_do_delconn+0x1b4>)
 800aa04:	f7f6 fb82 	bl	800110c <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aa08:	e025      	b.n	800aa56 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800aa0a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2200      	movs	r2, #0
 800aa12:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d007      	beq.n	800aa2e <lwip_netconn_do_delconn+0x17a>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	6810      	ldr	r0, [r2, #0]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <lwip_netconn_do_delconn+0x194>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	6810      	ldr	r0, [r2, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	2102      	movs	r1, #2
 800aa46:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f00b fdca 	bl	80165e8 <sys_sem_valid>
 800aa54:	e000      	b.n	800aa58 <lwip_netconn_do_delconn+0x1a4>
          return;
 800aa56:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	08017db8 	.word	0x08017db8
 800aa64:	08018128 	.word	0x08018128
 800aa68:	08017dfc 	.word	0x08017dfc
 800aa6c:	0801813c 	.word	0x0801813c
 800aa70:	0801815c 	.word	0x0801815c
 800aa74:	08018178 	.word	0x08018178
 800aa78:	20008e4c 	.word	0x20008e4c

0800aa7c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d102      	bne.n	800aa9e <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800aa98:	f06f 0305 	mvn.w	r3, #5
 800aa9c:	e070      	b.n	800ab80 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	785b      	ldrb	r3, [r3, #1]
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d006      	beq.n	800aab4 <lwip_netconn_do_connected+0x38>
 800aaa6:	4b38      	ldr	r3, [pc, #224]	@ (800ab88 <lwip_netconn_do_connected+0x10c>)
 800aaa8:	f240 5223 	movw	r2, #1315	@ 0x523
 800aaac:	4937      	ldr	r1, [pc, #220]	@ (800ab8c <lwip_netconn_do_connected+0x110>)
 800aaae:	4838      	ldr	r0, [pc, #224]	@ (800ab90 <lwip_netconn_do_connected+0x114>)
 800aab0:	f7f6 fb2c 	bl	800110c <printf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10c      	bne.n	800aad6 <lwip_netconn_do_connected+0x5a>
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	7f1b      	ldrb	r3, [r3, #28]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d106      	bne.n	800aad6 <lwip_netconn_do_connected+0x5a>
 800aac8:	4b2f      	ldr	r3, [pc, #188]	@ (800ab88 <lwip_netconn_do_connected+0x10c>)
 800aaca:	f240 5224 	movw	r2, #1316	@ 0x524
 800aace:	4931      	ldr	r1, [pc, #196]	@ (800ab94 <lwip_netconn_do_connected+0x118>)
 800aad0:	482f      	ldr	r0, [pc, #188]	@ (800ab90 <lwip_netconn_do_connected+0x114>)
 800aad2:	f7f6 fb1b 	bl	800110c <printf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	6a1b      	ldr	r3, [r3, #32]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d008      	beq.n	800aaf0 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	79fa      	ldrb	r2, [r7, #7]
 800aae4:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	330c      	adds	r3, #12
 800aaee:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aaf8:	2b10      	cmp	r3, #16
 800aafa:	d106      	bne.n	800ab0a <lwip_netconn_do_connected+0x8e>
 800aafc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d102      	bne.n	800ab0a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800ab04:	69b8      	ldr	r0, [r7, #24]
 800ab06:	f7ff fb8d 	bl	800a224 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	7f1b      	ldrb	r3, [r3, #28]
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	bf0c      	ite	eq
 800ab16:	2301      	moveq	r3, #1
 800ab18:	2300      	movne	r3, #0
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	7f1b      	ldrb	r3, [r3, #28]
 800ab22:	f023 0304 	bic.w	r3, r3, #4
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d002      	beq.n	800ab38 <lwip_netconn_do_connected+0xbc>
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10c      	bne.n	800ab52 <lwip_netconn_do_connected+0xd6>
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d102      	bne.n	800ab44 <lwip_netconn_do_connected+0xc8>
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d006      	beq.n	800ab52 <lwip_netconn_do_connected+0xd6>
 800ab44:	4b10      	ldr	r3, [pc, #64]	@ (800ab88 <lwip_netconn_do_connected+0x10c>)
 800ab46:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800ab4a:	4913      	ldr	r1, [pc, #76]	@ (800ab98 <lwip_netconn_do_connected+0x11c>)
 800ab4c:	4810      	ldr	r0, [pc, #64]	@ (800ab90 <lwip_netconn_do_connected+0x114>)
 800ab4e:	f7f6 fadd 	bl	800110c <printf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	2200      	movs	r2, #0
 800ab56:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d005      	beq.n	800ab72 <lwip_netconn_do_connected+0xf6>
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2102      	movs	r1, #2
 800ab6e:	69b8      	ldr	r0, [r7, #24]
 800ab70:	4798      	blx	r3

  if (was_blocking) {
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800ab78:	69f8      	ldr	r0, [r7, #28]
 800ab7a:	f00b fd1b 	bl	80165b4 <sys_sem_signal>
  }
  return ERR_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	08017db8 	.word	0x08017db8
 800ab8c:	08018180 	.word	0x08018180
 800ab90:	08017dfc 	.word	0x08017dfc
 800ab94:	080181a0 	.word	0x080181a0
 800ab98:	080181e0 	.word	0x080181e0

0800ab9c <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800abb2:	23f1      	movs	r3, #241	@ 0xf1
 800abb4:	75fb      	strb	r3, [r7, #23]
 800abb6:	e09b      	b.n	800acf0 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abc2:	2b10      	cmp	r3, #16
 800abc4:	d00f      	beq.n	800abe6 <lwip_netconn_do_connect+0x4a>
 800abc6:	2b20      	cmp	r3, #32
 800abc8:	f040 8087 	bne.w	800acda <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6858      	ldr	r0, [r3, #4]
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	6899      	ldr	r1, [r3, #8]
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	899b      	ldrh	r3, [r3, #12]
 800abda:	461a      	mov	r2, r3
 800abdc:	f008 ffe0 	bl	8013ba0 <udp_connect>
 800abe0:	4603      	mov	r3, r0
 800abe2:	75fb      	strb	r3, [r7, #23]
        break;
 800abe4:	e084      	b.n	800acf0 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	785b      	ldrb	r3, [r3, #1]
 800abec:	2b03      	cmp	r3, #3
 800abee:	d102      	bne.n	800abf6 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800abf0:	23f7      	movs	r3, #247	@ 0xf7
 800abf2:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800abf4:	e07b      	b.n	800acee <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	785b      	ldrb	r3, [r3, #1]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800ac00:	23f6      	movs	r3, #246	@ 0xf6
 800ac02:	75fb      	strb	r3, [r7, #23]
        break;
 800ac04:	e073      	b.n	800acee <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff fb0a 	bl	800a224 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6858      	ldr	r0, [r3, #4]
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	6899      	ldr	r1, [r3, #8]
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	899a      	ldrh	r2, [r3, #12]
 800ac1e:	4b38      	ldr	r3, [pc, #224]	@ (800ad00 <lwip_netconn_do_connect+0x164>)
 800ac20:	f003 f814 	bl	800dc4c <tcp_connect>
 800ac24:	4603      	mov	r3, r0
 800ac26:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800ac28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d15e      	bne.n	800acee <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	7f1b      	ldrb	r3, [r3, #28]
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	bf14      	ite	ne
 800ac3e:	2301      	movne	r3, #1
 800ac40:	2300      	moveq	r3, #0
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2203      	movs	r2, #3
 800ac4c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d009      	beq.n	800ac68 <lwip_netconn_do_connect+0xcc>
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	7f1a      	ldrb	r2, [r3, #28]
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f042 0204 	orr.w	r2, r2, #4
 800ac62:	b2d2      	uxtb	r2, r2
 800ac64:	771a      	strb	r2, [r3, #28]
 800ac66:	e008      	b.n	800ac7a <lwip_netconn_do_connect+0xde>
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	7f1a      	ldrb	r2, [r3, #28]
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f022 0204 	bic.w	r2, r2, #4
 800ac76:	b2d2      	uxtb	r2, r2
 800ac78:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800ac80:	23fb      	movs	r3, #251	@ 0xfb
 800ac82:	75fb      	strb	r3, [r7, #23]
        break;
 800ac84:	e033      	b.n	800acee <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	785b      	ldrb	r3, [r3, #1]
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d006      	beq.n	800aca6 <lwip_netconn_do_connect+0x10a>
 800ac98:	4b1a      	ldr	r3, [pc, #104]	@ (800ad04 <lwip_netconn_do_connect+0x168>)
 800ac9a:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 800ac9e:	491a      	ldr	r1, [pc, #104]	@ (800ad08 <lwip_netconn_do_connect+0x16c>)
 800aca0:	481a      	ldr	r0, [pc, #104]	@ (800ad0c <lwip_netconn_do_connect+0x170>)
 800aca2:	f7f6 fa33 	bl	800110c <printf>
              UNLOCK_TCPIP_CORE();
 800aca6:	481a      	ldr	r0, [pc, #104]	@ (800ad10 <lwip_netconn_do_connect+0x174>)
 800aca8:	f00b fcf5 	bl	8016696 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	330c      	adds	r3, #12
 800acb2:	2100      	movs	r1, #0
 800acb4:	4618      	mov	r0, r3
 800acb6:	f00b fc4c 	bl	8016552 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800acba:	4815      	ldr	r0, [pc, #84]	@ (800ad10 <lwip_netconn_do_connect+0x174>)
 800acbc:	f00b fcdc 	bl	8016678 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	785b      	ldrb	r3, [r3, #1]
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d116      	bne.n	800acf8 <lwip_netconn_do_connect+0x15c>
 800acca:	4b0e      	ldr	r3, [pc, #56]	@ (800ad04 <lwip_netconn_do_connect+0x168>)
 800accc:	f240 5274 	movw	r2, #1396	@ 0x574
 800acd0:	490d      	ldr	r1, [pc, #52]	@ (800ad08 <lwip_netconn_do_connect+0x16c>)
 800acd2:	480e      	ldr	r0, [pc, #56]	@ (800ad0c <lwip_netconn_do_connect+0x170>)
 800acd4:	f7f6 fa1a 	bl	800110c <printf>
              return;
 800acd8:	e00e      	b.n	800acf8 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800acda:	4b0a      	ldr	r3, [pc, #40]	@ (800ad04 <lwip_netconn_do_connect+0x168>)
 800acdc:	f240 527d 	movw	r2, #1405	@ 0x57d
 800ace0:	490c      	ldr	r1, [pc, #48]	@ (800ad14 <lwip_netconn_do_connect+0x178>)
 800ace2:	480a      	ldr	r0, [pc, #40]	@ (800ad0c <lwip_netconn_do_connect+0x170>)
 800ace4:	f7f6 fa12 	bl	800110c <printf>
 800ace8:	23fa      	movs	r3, #250	@ 0xfa
 800acea:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800acec:	e000      	b.n	800acf0 <lwip_netconn_do_connect+0x154>
        break;
 800acee:	bf00      	nop
    }
  }
  msg->err = err;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	7dfa      	ldrb	r2, [r7, #23]
 800acf4:	711a      	strb	r2, [r3, #4]
 800acf6:	e000      	b.n	800acfa <lwip_netconn_do_connect+0x15e>
              return;
 800acf8:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	0800aa7d 	.word	0x0800aa7d
 800ad04:	08017db8 	.word	0x08017db8
 800ad08:	08018178 	.word	0x08018178
 800ad0c:	08017dfc 	.word	0x08017dfc
 800ad10:	20008e4c 	.word	0x20008e4c
 800ad14:	08018200 	.word	0x08018200

0800ad18 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <lwip_netconn_do_writemore+0x24>
 800ad2e:	4b96      	ldr	r3, [pc, #600]	@ (800af88 <lwip_netconn_do_writemore+0x270>)
 800ad30:	f240 6273 	movw	r2, #1651	@ 0x673
 800ad34:	4995      	ldr	r1, [pc, #596]	@ (800af8c <lwip_netconn_do_writemore+0x274>)
 800ad36:	4896      	ldr	r0, [pc, #600]	@ (800af90 <lwip_netconn_do_writemore+0x278>)
 800ad38:	f7f6 f9e8 	bl	800110c <printf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	785b      	ldrb	r3, [r3, #1]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d006      	beq.n	800ad52 <lwip_netconn_do_writemore+0x3a>
 800ad44:	4b90      	ldr	r3, [pc, #576]	@ (800af88 <lwip_netconn_do_writemore+0x270>)
 800ad46:	f240 6274 	movw	r2, #1652	@ 0x674
 800ad4a:	4992      	ldr	r1, [pc, #584]	@ (800af94 <lwip_netconn_do_writemore+0x27c>)
 800ad4c:	4890      	ldr	r0, [pc, #576]	@ (800af90 <lwip_netconn_do_writemore+0x278>)
 800ad4e:	f7f6 f9dd 	bl	800110c <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <lwip_netconn_do_writemore+0x50>
 800ad5a:	4b8b      	ldr	r3, [pc, #556]	@ (800af88 <lwip_netconn_do_writemore+0x270>)
 800ad5c:	f240 6275 	movw	r2, #1653	@ 0x675
 800ad60:	498d      	ldr	r1, [pc, #564]	@ (800af98 <lwip_netconn_do_writemore+0x280>)
 800ad62:	488b      	ldr	r0, [pc, #556]	@ (800af90 <lwip_netconn_do_writemore+0x278>)
 800ad64:	f7f6 f9d2 	bl	800110c <printf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d106      	bne.n	800ad7e <lwip_netconn_do_writemore+0x66>
 800ad70:	4b85      	ldr	r3, [pc, #532]	@ (800af88 <lwip_netconn_do_writemore+0x270>)
 800ad72:	f240 6276 	movw	r2, #1654	@ 0x676
 800ad76:	4989      	ldr	r1, [pc, #548]	@ (800af9c <lwip_netconn_do_writemore+0x284>)
 800ad78:	4885      	ldr	r0, [pc, #532]	@ (800af90 <lwip_netconn_do_writemore+0x278>)
 800ad7a:	f7f6 f9c7 	bl	800110c <printf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	699a      	ldr	r2, [r3, #24]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d306      	bcc.n	800ad9c <lwip_netconn_do_writemore+0x84>
 800ad8e:	4b7e      	ldr	r3, [pc, #504]	@ (800af88 <lwip_netconn_do_writemore+0x270>)
 800ad90:	f240 6277 	movw	r2, #1655	@ 0x677
 800ad94:	4982      	ldr	r1, [pc, #520]	@ (800afa0 <lwip_netconn_do_writemore+0x288>)
 800ad96:	487e      	ldr	r0, [pc, #504]	@ (800af90 <lwip_netconn_do_writemore+0x278>)
 800ad98:	f7f6 f9b8 	bl	800110c <printf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	899b      	ldrh	r3, [r3, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d106      	bne.n	800adb4 <lwip_netconn_do_writemore+0x9c>
 800ada6:	4b78      	ldr	r3, [pc, #480]	@ (800af88 <lwip_netconn_do_writemore+0x270>)
 800ada8:	f240 6279 	movw	r2, #1657	@ 0x679
 800adac:	497d      	ldr	r1, [pc, #500]	@ (800afa4 <lwip_netconn_do_writemore+0x28c>)
 800adae:	4878      	ldr	r0, [pc, #480]	@ (800af90 <lwip_netconn_do_writemore+0x278>)
 800adb0:	f7f6 f9ac 	bl	800110c <printf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	7f1b      	ldrb	r3, [r3, #28]
 800adba:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	7f1b      	ldrb	r3, [r3, #28]
 800adc0:	f003 0302 	and.w	r3, r3, #2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d104      	bne.n	800add2 <lwip_netconn_do_writemore+0xba>
 800adc8:	7ebb      	ldrb	r3, [r7, #26]
 800adca:	f003 0304 	and.w	r3, r3, #4
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <lwip_netconn_do_writemore+0xbe>
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <lwip_netconn_do_writemore+0xc0>
 800add6:	2300      	movs	r3, #0
 800add8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a1b      	ldr	r3, [r3, #32]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	4413      	add	r3, r2
 800adea:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a1b      	ldr	r3, [r3, #32]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae04:	d307      	bcc.n	800ae16 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ae06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae0a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae0c:	7ebb      	ldrb	r3, [r7, #26]
 800ae0e:	f043 0302 	orr.w	r3, r3, #2
 800ae12:	76bb      	strb	r3, [r7, #26]
 800ae14:	e001      	b.n	800ae1a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ae22:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ae24:	89fa      	ldrh	r2, [r7, #14]
 800ae26:	8bbb      	ldrh	r3, [r7, #28]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d216      	bcs.n	800ae5a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ae2c:	89fb      	ldrh	r3, [r7, #14]
 800ae2e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ae30:	7e3b      	ldrb	r3, [r7, #24]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00d      	beq.n	800ae52 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ae36:	8bbb      	ldrh	r3, [r7, #28]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10e      	bne.n	800ae5a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1b      	ldr	r3, [r3, #32]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d102      	bne.n	800ae4c <lwip_netconn_do_writemore+0x134>
 800ae46:	f06f 0306 	mvn.w	r3, #6
 800ae4a:	e000      	b.n	800ae4e <lwip_netconn_do_writemore+0x136>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ae50:	e07d      	b.n	800af4e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ae52:	7ebb      	ldrb	r3, [r7, #26]
 800ae54:	f043 0302 	orr.w	r3, r3, #2
 800ae58:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	691a      	ldr	r2, [r3, #16]
 800ae60:	8bbb      	ldrh	r3, [r7, #28]
 800ae62:	441a      	add	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d906      	bls.n	800ae7e <lwip_netconn_do_writemore+0x166>
 800ae70:	4b45      	ldr	r3, [pc, #276]	@ (800af88 <lwip_netconn_do_writemore+0x270>)
 800ae72:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800ae76:	494c      	ldr	r1, [pc, #304]	@ (800afa8 <lwip_netconn_do_writemore+0x290>)
 800ae78:	4845      	ldr	r0, [pc, #276]	@ (800af90 <lwip_netconn_do_writemore+0x278>)
 800ae7a:	f7f6 f947 	bl	800110c <printf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae7e:	8bbb      	ldrh	r3, [r7, #28]
 800ae80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d103      	bne.n	800ae90 <lwip_netconn_do_writemore+0x178>
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae8e:	d209      	bcs.n	800aea4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae94:	8bba      	ldrh	r2, [r7, #28]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d10b      	bne.n	800aeb2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	899b      	ldrh	r3, [r3, #12]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d906      	bls.n	800aeb2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800aea4:	2301      	movs	r3, #1
 800aea6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aea8:	7ebb      	ldrb	r3, [r7, #26]
 800aeaa:	f043 0302 	orr.w	r3, r3, #2
 800aeae:	76bb      	strb	r3, [r7, #26]
 800aeb0:	e001      	b.n	800aeb6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6858      	ldr	r0, [r3, #4]
 800aeba:	7ebb      	ldrb	r3, [r7, #26]
 800aebc:	8bba      	ldrh	r2, [r7, #28]
 800aebe:	6979      	ldr	r1, [r7, #20]
 800aec0:	f006 fd4a 	bl	8011958 <tcp_write>
 800aec4:	4603      	mov	r3, r0
 800aec6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800aec8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d12c      	bne.n	800af2a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	6999      	ldr	r1, [r3, #24]
 800aed6:	8bba      	ldrh	r2, [r7, #28]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a1b      	ldr	r3, [r3, #32]
 800aedc:	440a      	add	r2, r1
 800aede:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	6919      	ldr	r1, [r3, #16]
 800aee6:	8bba      	ldrh	r2, [r7, #28]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	440a      	add	r2, r1
 800aeee:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a1b      	ldr	r3, [r3, #32]
 800aef4:	691a      	ldr	r2, [r3, #16]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d113      	bne.n	800af2a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	899a      	ldrh	r2, [r3, #12]
 800af08:	3a01      	subs	r2, #1
 800af0a:	b292      	uxth	r2, r2
 800af0c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	899b      	ldrh	r3, [r3, #12]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d008      	beq.n	800af2a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a1b      	ldr	r3, [r3, #32]
 800af1c:	689a      	ldr	r2, [r3, #8]
 800af1e:	3208      	adds	r2, #8
 800af20:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	2200      	movs	r2, #0
 800af28:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800af2a:	7e7b      	ldrb	r3, [r7, #25]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <lwip_netconn_do_writemore+0x222>
 800af30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f43f af50 	beq.w	800adda <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800af3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d004      	beq.n	800af4c <lwip_netconn_do_writemore+0x234>
 800af42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4a:	d146      	bne.n	800afda <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800af4c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800af4e:	7e3b      	ldrb	r3, [r7, #24]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d02b      	beq.n	800afac <lwip_netconn_do_writemore+0x294>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	699a      	ldr	r2, [r3, #24]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	695b      	ldr	r3, [r3, #20]
 800af60:	429a      	cmp	r2, r3
 800af62:	d223      	bcs.n	800afac <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d005      	beq.n	800af78 <lwip_netconn_do_writemore+0x260>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af70:	2200      	movs	r2, #0
 800af72:	2103      	movs	r1, #3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7f1b      	ldrb	r3, [r3, #28]
 800af7c:	f043 0310 	orr.w	r3, r3, #16
 800af80:	b2da      	uxtb	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	771a      	strb	r2, [r3, #28]
 800af86:	e028      	b.n	800afda <lwip_netconn_do_writemore+0x2c2>
 800af88:	08017db8 	.word	0x08017db8
 800af8c:	08017f10 	.word	0x08017f10
 800af90:	08017dfc 	.word	0x08017dfc
 800af94:	08018218 	.word	0x08018218
 800af98:	08017f20 	.word	0x08017f20
 800af9c:	08018238 	.word	0x08018238
 800afa0:	08018250 	.word	0x08018250
 800afa4:	08018290 	.word	0x08018290
 800afa8:	080182b8 	.word	0x080182b8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800afb4:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800afb8:	d305      	bcc.n	800afc6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d909      	bls.n	800afda <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d005      	beq.n	800afda <lwip_netconn_do_writemore+0x2c2>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd2:	2200      	movs	r2, #0
 800afd4:	2103      	movs	r1, #3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800afda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d11d      	bne.n	800b01e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	699a      	ldr	r2, [r3, #24]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d002      	beq.n	800aff8 <lwip_netconn_do_writemore+0x2e0>
 800aff2:	7e3b      	ldrb	r3, [r7, #24]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800aff8:	2301      	movs	r3, #1
 800affa:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	4618      	mov	r0, r3
 800b002:	f007 fa93 	bl	801252c <tcp_output>
 800b006:	4603      	mov	r3, r0
 800b008:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b00a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b00e:	f113 0f04 	cmn.w	r3, #4
 800b012:	d12c      	bne.n	800b06e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b014:	7b3b      	ldrb	r3, [r7, #12]
 800b016:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b018:	2301      	movs	r3, #1
 800b01a:	76fb      	strb	r3, [r7, #27]
 800b01c:	e027      	b.n	800b06e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b01e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b026:	d120      	bne.n	800b06a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f007 fa7d 	bl	801252c <tcp_output>
 800b032:	4603      	mov	r3, r0
 800b034:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b036:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b03a:	f113 0f04 	cmn.w	r3, #4
 800b03e:	d104      	bne.n	800b04a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b040:	7b7b      	ldrb	r3, [r7, #13]
 800b042:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b044:	2301      	movs	r3, #1
 800b046:	76fb      	strb	r3, [r7, #27]
 800b048:	e011      	b.n	800b06e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b04a:	7e3b      	ldrb	r3, [r7, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00e      	beq.n	800b06e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a1b      	ldr	r3, [r3, #32]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d102      	bne.n	800b060 <lwip_netconn_do_writemore+0x348>
 800b05a:	f06f 0306 	mvn.w	r3, #6
 800b05e:	e000      	b.n	800b062 <lwip_netconn_do_writemore+0x34a>
 800b060:	2300      	movs	r3, #0
 800b062:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b064:	2301      	movs	r3, #1
 800b066:	76fb      	strb	r3, [r7, #27]
 800b068:	e001      	b.n	800b06e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b06a:	2301      	movs	r3, #1
 800b06c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b06e:	7efb      	ldrb	r3, [r7, #27]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d015      	beq.n	800b0a0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	330c      	adds	r3, #12
 800b07c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	7ffa      	ldrb	r2, [r7, #31]
 800b084:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b092:	78fb      	ldrb	r3, [r7, #3]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d006      	beq.n	800b0a6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	f00b fa8b 	bl	80165b4 <sys_sem_signal>
 800b09e:	e002      	b.n	800b0a6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a4:	e000      	b.n	800b0a8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3720      	adds	r7, #32
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fe fd92 	bl	8009bea <netconn_err>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d166      	bne.n	800b1a0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b0dc:	2b10      	cmp	r3, #16
 800b0de:	d15d      	bne.n	800b19c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	785b      	ldrb	r3, [r3, #1]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b0ea:	23fb      	movs	r3, #251	@ 0xfb
 800b0ec:	73fb      	strb	r3, [r7, #15]
 800b0ee:	e057      	b.n	800b1a0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d04d      	beq.n	800b196 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2201      	movs	r2, #1
 800b100:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d006      	beq.n	800b11a <lwip_netconn_do_write+0x6a>
 800b10c:	4b28      	ldr	r3, [pc, #160]	@ (800b1b0 <lwip_netconn_do_write+0x100>)
 800b10e:	f240 7223 	movw	r2, #1827	@ 0x723
 800b112:	4928      	ldr	r1, [pc, #160]	@ (800b1b4 <lwip_netconn_do_write+0x104>)
 800b114:	4828      	ldr	r0, [pc, #160]	@ (800b1b8 <lwip_netconn_do_write+0x108>)
 800b116:	f7f5 fff9 	bl	800110c <printf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d106      	bne.n	800b130 <lwip_netconn_do_write+0x80>
 800b122:	4b23      	ldr	r3, [pc, #140]	@ (800b1b0 <lwip_netconn_do_write+0x100>)
 800b124:	f240 7224 	movw	r2, #1828	@ 0x724
 800b128:	4924      	ldr	r1, [pc, #144]	@ (800b1bc <lwip_netconn_do_write+0x10c>)
 800b12a:	4823      	ldr	r0, [pc, #140]	@ (800b1b8 <lwip_netconn_do_write+0x108>)
 800b12c:	f7f5 ffee 	bl	800110c <printf>
        msg->conn->current_msg = msg;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2100      	movs	r1, #0
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff fdea 	bl	800ad18 <lwip_netconn_do_writemore>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d02e      	beq.n	800b1a8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	785b      	ldrb	r3, [r3, #1]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d006      	beq.n	800b162 <lwip_netconn_do_write+0xb2>
 800b154:	4b16      	ldr	r3, [pc, #88]	@ (800b1b0 <lwip_netconn_do_write+0x100>)
 800b156:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800b15a:	4919      	ldr	r1, [pc, #100]	@ (800b1c0 <lwip_netconn_do_write+0x110>)
 800b15c:	4816      	ldr	r0, [pc, #88]	@ (800b1b8 <lwip_netconn_do_write+0x108>)
 800b15e:	f7f5 ffd5 	bl	800110c <printf>
          UNLOCK_TCPIP_CORE();
 800b162:	4818      	ldr	r0, [pc, #96]	@ (800b1c4 <lwip_netconn_do_write+0x114>)
 800b164:	f00b fa97 	bl	8016696 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	330c      	adds	r3, #12
 800b16e:	2100      	movs	r1, #0
 800b170:	4618      	mov	r0, r3
 800b172:	f00b f9ee 	bl	8016552 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b176:	4813      	ldr	r0, [pc, #76]	@ (800b1c4 <lwip_netconn_do_write+0x114>)
 800b178:	f00b fa7e 	bl	8016678 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d110      	bne.n	800b1a8 <lwip_netconn_do_write+0xf8>
 800b186:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b0 <lwip_netconn_do_write+0x100>)
 800b188:	f240 722c 	movw	r2, #1836	@ 0x72c
 800b18c:	490c      	ldr	r1, [pc, #48]	@ (800b1c0 <lwip_netconn_do_write+0x110>)
 800b18e:	480a      	ldr	r0, [pc, #40]	@ (800b1b8 <lwip_netconn_do_write+0x108>)
 800b190:	f7f5 ffbc 	bl	800110c <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b194:	e008      	b.n	800b1a8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b196:	23f5      	movs	r3, #245	@ 0xf5
 800b198:	73fb      	strb	r3, [r7, #15]
 800b19a:	e001      	b.n	800b1a0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b19c:	23fa      	movs	r3, #250	@ 0xfa
 800b19e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	7bfa      	ldrb	r2, [r7, #15]
 800b1a4:	711a      	strb	r2, [r3, #4]
 800b1a6:	e000      	b.n	800b1aa <lwip_netconn_do_write+0xfa>
        return;
 800b1a8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	08017db8 	.word	0x08017db8
 800b1b4:	0801815c 	.word	0x0801815c
 800b1b8:	08017dfc 	.word	0x08017dfc
 800b1bc:	080182e4 	.word	0x080182e4
 800b1c0:	08018178 	.word	0x08018178
 800b1c4:	20008e4c 	.word	0x20008e4c

0800b1c8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	785b      	ldrb	r3, [r3, #1]
 800b1da:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d069      	beq.n	800b2ba <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1f0:	2b10      	cmp	r3, #16
 800b1f2:	d162      	bne.n	800b2ba <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d002      	beq.n	800b202 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1fc:	7afb      	ldrb	r3, [r7, #11]
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d05b      	beq.n	800b2ba <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b202:	7afb      	ldrb	r3, [r7, #11]
 800b204:	2b03      	cmp	r3, #3
 800b206:	d103      	bne.n	800b210 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	22f5      	movs	r2, #245	@ 0xf5
 800b20c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b20e:	e059      	b.n	800b2c4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b210:	7afb      	ldrb	r3, [r7, #11]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d103      	bne.n	800b21e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	22fb      	movs	r2, #251	@ 0xfb
 800b21a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b21c:	e052      	b.n	800b2c4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	7a1b      	ldrb	r3, [r3, #8]
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b00      	cmp	r3, #0
 800b228:	d004      	beq.n	800b234 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff f958 	bl	800a4e4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d006      	beq.n	800b24c <lwip_netconn_do_close+0x84>
 800b23e:	4b23      	ldr	r3, [pc, #140]	@ (800b2cc <lwip_netconn_do_close+0x104>)
 800b240:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b244:	4922      	ldr	r1, [pc, #136]	@ (800b2d0 <lwip_netconn_do_close+0x108>)
 800b246:	4823      	ldr	r0, [pc, #140]	@ (800b2d4 <lwip_netconn_do_close+0x10c>)
 800b248:	f7f5 ff60 	bl	800110c <printf>
      msg->conn->state = NETCONN_CLOSE;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2204      	movs	r2, #4
 800b252:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2100      	movs	r1, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff f9bc 	bl	800a5e0 <lwip_netconn_do_close_internal>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d029      	beq.n	800b2c2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	785b      	ldrb	r3, [r3, #1]
 800b274:	2b04      	cmp	r3, #4
 800b276:	d006      	beq.n	800b286 <lwip_netconn_do_close+0xbe>
 800b278:	4b14      	ldr	r3, [pc, #80]	@ (800b2cc <lwip_netconn_do_close+0x104>)
 800b27a:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b27e:	4916      	ldr	r1, [pc, #88]	@ (800b2d8 <lwip_netconn_do_close+0x110>)
 800b280:	4814      	ldr	r0, [pc, #80]	@ (800b2d4 <lwip_netconn_do_close+0x10c>)
 800b282:	f7f5 ff43 	bl	800110c <printf>
        UNLOCK_TCPIP_CORE();
 800b286:	4815      	ldr	r0, [pc, #84]	@ (800b2dc <lwip_netconn_do_close+0x114>)
 800b288:	f00b fa05 	bl	8016696 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	330c      	adds	r3, #12
 800b292:	2100      	movs	r1, #0
 800b294:	4618      	mov	r0, r3
 800b296:	f00b f95c 	bl	8016552 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b29a:	4810      	ldr	r0, [pc, #64]	@ (800b2dc <lwip_netconn_do_close+0x114>)
 800b29c:	f00b f9ec 	bl	8016678 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	785b      	ldrb	r3, [r3, #1]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00b      	beq.n	800b2c2 <lwip_netconn_do_close+0xfa>
 800b2aa:	4b08      	ldr	r3, [pc, #32]	@ (800b2cc <lwip_netconn_do_close+0x104>)
 800b2ac:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b2b0:	4909      	ldr	r1, [pc, #36]	@ (800b2d8 <lwip_netconn_do_close+0x110>)
 800b2b2:	4808      	ldr	r0, [pc, #32]	@ (800b2d4 <lwip_netconn_do_close+0x10c>)
 800b2b4:	f7f5 ff2a 	bl	800110c <printf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b2b8:	e003      	b.n	800b2c2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	22f5      	movs	r2, #245	@ 0xf5
 800b2be:	711a      	strb	r2, [r3, #4]
 800b2c0:	e000      	b.n	800b2c4 <lwip_netconn_do_close+0xfc>
      return;
 800b2c2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	08017db8 	.word	0x08017db8
 800b2d0:	0801815c 	.word	0x0801815c
 800b2d4:	08017dfc 	.word	0x08017dfc
 800b2d8:	08018178 	.word	0x08018178
 800b2dc:	20008e4c 	.word	0x20008e4c

0800b2e0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d013      	beq.n	800b316 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00b      	beq.n	800b30e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f001 fdba 	bl	800ce74 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	605a      	str	r2, [r3, #4]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685a      	ldr	r2, [r3, #4]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	2006      	movs	r0, #6
 800b312:	f000 ff0b 	bl	800c12c <memp_free>
  }
}
 800b316:	bf00      	nop
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b32a:	f008 f9b7 	bl	801369c <sys_timeouts_sleeptime>
 800b32e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b336:	d10b      	bne.n	800b350 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b338:	4813      	ldr	r0, [pc, #76]	@ (800b388 <tcpip_timeouts_mbox_fetch+0x68>)
 800b33a:	f00b f9ac 	bl	8016696 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b33e:	2200      	movs	r2, #0
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f00b f864 	bl	8016410 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b348:	480f      	ldr	r0, [pc, #60]	@ (800b388 <tcpip_timeouts_mbox_fetch+0x68>)
 800b34a:	f00b f995 	bl	8016678 <sys_mutex_lock>
    return;
 800b34e:	e018      	b.n	800b382 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d102      	bne.n	800b35c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b356:	f008 f967 	bl	8013628 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b35a:	e7e6      	b.n	800b32a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b35c:	480a      	ldr	r0, [pc, #40]	@ (800b388 <tcpip_timeouts_mbox_fetch+0x68>)
 800b35e:	f00b f99a 	bl	8016696 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f00b f852 	bl	8016410 <sys_arch_mbox_fetch>
 800b36c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b36e:	4806      	ldr	r0, [pc, #24]	@ (800b388 <tcpip_timeouts_mbox_fetch+0x68>)
 800b370:	f00b f982 	bl	8016678 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b37a:	d102      	bne.n	800b382 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b37c:	f008 f954 	bl	8013628 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b380:	e7d3      	b.n	800b32a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20008e4c 	.word	0x20008e4c

0800b38c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b394:	4810      	ldr	r0, [pc, #64]	@ (800b3d8 <tcpip_thread+0x4c>)
 800b396:	f00b f96f 	bl	8016678 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b39a:	4b10      	ldr	r3, [pc, #64]	@ (800b3dc <tcpip_thread+0x50>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d005      	beq.n	800b3ae <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b3dc <tcpip_thread+0x50>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a0e      	ldr	r2, [pc, #56]	@ (800b3e0 <tcpip_thread+0x54>)
 800b3a8:	6812      	ldr	r2, [r2, #0]
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b3ae:	f107 030c 	add.w	r3, r7, #12
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	480b      	ldr	r0, [pc, #44]	@ (800b3e4 <tcpip_thread+0x58>)
 800b3b6:	f7ff ffb3 	bl	800b320 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d106      	bne.n	800b3ce <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b3c0:	4b09      	ldr	r3, [pc, #36]	@ (800b3e8 <tcpip_thread+0x5c>)
 800b3c2:	2291      	movs	r2, #145	@ 0x91
 800b3c4:	4909      	ldr	r1, [pc, #36]	@ (800b3ec <tcpip_thread+0x60>)
 800b3c6:	480a      	ldr	r0, [pc, #40]	@ (800b3f0 <tcpip_thread+0x64>)
 800b3c8:	f7f5 fea0 	bl	800110c <printf>
      continue;
 800b3cc:	e003      	b.n	800b3d6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 f80f 	bl	800b3f4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b3d6:	e7ea      	b.n	800b3ae <tcpip_thread+0x22>
 800b3d8:	20008e4c 	.word	0x20008e4c
 800b3dc:	20008e40 	.word	0x20008e40
 800b3e0:	20008e44 	.word	0x20008e44
 800b3e4:	20008e48 	.word	0x20008e48
 800b3e8:	08018310 	.word	0x08018310
 800b3ec:	08018340 	.word	0x08018340
 800b3f0:	08018360 	.word	0x08018360

0800b3f4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	2b02      	cmp	r3, #2
 800b402:	d026      	beq.n	800b452 <tcpip_thread_handle_msg+0x5e>
 800b404:	2b02      	cmp	r3, #2
 800b406:	dc2b      	bgt.n	800b460 <tcpip_thread_handle_msg+0x6c>
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <tcpip_thread_handle_msg+0x1e>
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d015      	beq.n	800b43c <tcpip_thread_handle_msg+0x48>
 800b410:	e026      	b.n	800b460 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	6850      	ldr	r0, [r2, #4]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	6892      	ldr	r2, [r2, #8]
 800b41e:	4611      	mov	r1, r2
 800b420:	4798      	blx	r3
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f001 fd21 	bl	800ce74 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b432:	6879      	ldr	r1, [r7, #4]
 800b434:	2009      	movs	r0, #9
 800b436:	f000 fe79 	bl	800c12c <memp_free>
      break;
 800b43a:	e018      	b.n	800b46e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	6892      	ldr	r2, [r2, #8]
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	2008      	movs	r0, #8
 800b44c:	f000 fe6e 	bl	800c12c <memp_free>
      break;
 800b450:	e00d      	b.n	800b46e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	6892      	ldr	r2, [r2, #8]
 800b45a:	4610      	mov	r0, r2
 800b45c:	4798      	blx	r3
      break;
 800b45e:	e006      	b.n	800b46e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b460:	4b05      	ldr	r3, [pc, #20]	@ (800b478 <tcpip_thread_handle_msg+0x84>)
 800b462:	22cf      	movs	r2, #207	@ 0xcf
 800b464:	4905      	ldr	r1, [pc, #20]	@ (800b47c <tcpip_thread_handle_msg+0x88>)
 800b466:	4806      	ldr	r0, [pc, #24]	@ (800b480 <tcpip_thread_handle_msg+0x8c>)
 800b468:	f7f5 fe50 	bl	800110c <printf>
      break;
 800b46c:	bf00      	nop
  }
}
 800b46e:	bf00      	nop
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	08018310 	.word	0x08018310
 800b47c:	08018340 	.word	0x08018340
 800b480:	08018360 	.word	0x08018360

0800b484 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b490:	481a      	ldr	r0, [pc, #104]	@ (800b4fc <tcpip_inpkt+0x78>)
 800b492:	f00b f818 	bl	80164c6 <sys_mbox_valid>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d105      	bne.n	800b4a8 <tcpip_inpkt+0x24>
 800b49c:	4b18      	ldr	r3, [pc, #96]	@ (800b500 <tcpip_inpkt+0x7c>)
 800b49e:	22fc      	movs	r2, #252	@ 0xfc
 800b4a0:	4918      	ldr	r1, [pc, #96]	@ (800b504 <tcpip_inpkt+0x80>)
 800b4a2:	4819      	ldr	r0, [pc, #100]	@ (800b508 <tcpip_inpkt+0x84>)
 800b4a4:	f7f5 fe32 	bl	800110c <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b4a8:	2009      	movs	r0, #9
 800b4aa:	f000 fdc9 	bl	800c040 <memp_malloc>
 800b4ae:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d102      	bne.n	800b4bc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ba:	e01a      	b.n	800b4f2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b4d4:	6979      	ldr	r1, [r7, #20]
 800b4d6:	4809      	ldr	r0, [pc, #36]	@ (800b4fc <tcpip_inpkt+0x78>)
 800b4d8:	f00a ff80 	bl	80163dc <sys_mbox_trypost>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d006      	beq.n	800b4f0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b4e2:	6979      	ldr	r1, [r7, #20]
 800b4e4:	2009      	movs	r0, #9
 800b4e6:	f000 fe21 	bl	800c12c <memp_free>
    return ERR_MEM;
 800b4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ee:	e000      	b.n	800b4f2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b4f0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	20008e48 	.word	0x20008e48
 800b500:	08018310 	.word	0x08018310
 800b504:	08018388 	.word	0x08018388
 800b508:	08018360 	.word	0x08018360

0800b50c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b51c:	f003 0318 	and.w	r3, r3, #24
 800b520:	2b00      	cmp	r3, #0
 800b522:	d006      	beq.n	800b532 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b524:	4a08      	ldr	r2, [pc, #32]	@ (800b548 <tcpip_input+0x3c>)
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7ff ffab 	bl	800b484 <tcpip_inpkt>
 800b52e:	4603      	mov	r3, r0
 800b530:	e005      	b.n	800b53e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b532:	4a06      	ldr	r2, [pc, #24]	@ (800b54c <tcpip_input+0x40>)
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff ffa4 	bl	800b484 <tcpip_inpkt>
 800b53c:	4603      	mov	r3, r0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	080161c9 	.word	0x080161c9
 800b54c:	080150d1 	.word	0x080150d1

0800b550 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b55a:	4819      	ldr	r0, [pc, #100]	@ (800b5c0 <tcpip_try_callback+0x70>)
 800b55c:	f00a ffb3 	bl	80164c6 <sys_mbox_valid>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d106      	bne.n	800b574 <tcpip_try_callback+0x24>
 800b566:	4b17      	ldr	r3, [pc, #92]	@ (800b5c4 <tcpip_try_callback+0x74>)
 800b568:	f240 125d 	movw	r2, #349	@ 0x15d
 800b56c:	4916      	ldr	r1, [pc, #88]	@ (800b5c8 <tcpip_try_callback+0x78>)
 800b56e:	4817      	ldr	r0, [pc, #92]	@ (800b5cc <tcpip_try_callback+0x7c>)
 800b570:	f7f5 fdcc 	bl	800110c <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b574:	2008      	movs	r0, #8
 800b576:	f000 fd63 	bl	800c040 <memp_malloc>
 800b57a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b582:	f04f 33ff 	mov.w	r3, #4294967295
 800b586:	e017      	b.n	800b5b8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2201      	movs	r2, #1
 800b58c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b59a:	68f9      	ldr	r1, [r7, #12]
 800b59c:	4808      	ldr	r0, [pc, #32]	@ (800b5c0 <tcpip_try_callback+0x70>)
 800b59e:	f00a ff1d 	bl	80163dc <sys_mbox_trypost>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d006      	beq.n	800b5b6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b5a8:	68f9      	ldr	r1, [r7, #12]
 800b5aa:	2008      	movs	r0, #8
 800b5ac:	f000 fdbe 	bl	800c12c <memp_free>
    return ERR_MEM;
 800b5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b4:	e000      	b.n	800b5b8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20008e48 	.word	0x20008e48
 800b5c4:	08018310 	.word	0x08018310
 800b5c8:	08018388 	.word	0x08018388
 800b5cc:	08018360 	.word	0x08018360

0800b5d0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b5dc:	4806      	ldr	r0, [pc, #24]	@ (800b5f8 <tcpip_send_msg_wait_sem+0x28>)
 800b5de:	f00b f84b 	bl	8016678 <sys_mutex_lock>
  fn(apimsg);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	68b8      	ldr	r0, [r7, #8]
 800b5e6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b5e8:	4803      	ldr	r0, [pc, #12]	@ (800b5f8 <tcpip_send_msg_wait_sem+0x28>)
 800b5ea:	f00b f854 	bl	8016696 <sys_mutex_unlock>
  return ERR_OK;
 800b5ee:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	20008e4c 	.word	0x20008e4c

0800b5fc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af02      	add	r7, sp, #8
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b606:	f000 f872 	bl	800b6ee <lwip_init>

  tcpip_init_done = initfunc;
 800b60a:	4a17      	ldr	r2, [pc, #92]	@ (800b668 <tcpip_init+0x6c>)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b610:	4a16      	ldr	r2, [pc, #88]	@ (800b66c <tcpip_init+0x70>)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b616:	2106      	movs	r1, #6
 800b618:	4815      	ldr	r0, [pc, #84]	@ (800b670 <tcpip_init+0x74>)
 800b61a:	f00a feab 	bl	8016374 <sys_mbox_new>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d006      	beq.n	800b632 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b624:	4b13      	ldr	r3, [pc, #76]	@ (800b674 <tcpip_init+0x78>)
 800b626:	f240 2261 	movw	r2, #609	@ 0x261
 800b62a:	4913      	ldr	r1, [pc, #76]	@ (800b678 <tcpip_init+0x7c>)
 800b62c:	4813      	ldr	r0, [pc, #76]	@ (800b67c <tcpip_init+0x80>)
 800b62e:	f7f5 fd6d 	bl	800110c <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b632:	4813      	ldr	r0, [pc, #76]	@ (800b680 <tcpip_init+0x84>)
 800b634:	f00b f804 	bl	8016640 <sys_mutex_new>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d006      	beq.n	800b64c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b63e:	4b0d      	ldr	r3, [pc, #52]	@ (800b674 <tcpip_init+0x78>)
 800b640:	f240 2265 	movw	r2, #613	@ 0x265
 800b644:	490f      	ldr	r1, [pc, #60]	@ (800b684 <tcpip_init+0x88>)
 800b646:	480d      	ldr	r0, [pc, #52]	@ (800b67c <tcpip_init+0x80>)
 800b648:	f7f5 fd60 	bl	800110c <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b64c:	2300      	movs	r3, #0
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b654:	2200      	movs	r2, #0
 800b656:	490c      	ldr	r1, [pc, #48]	@ (800b688 <tcpip_init+0x8c>)
 800b658:	480c      	ldr	r0, [pc, #48]	@ (800b68c <tcpip_init+0x90>)
 800b65a:	f00b f829 	bl	80166b0 <sys_thread_new>
}
 800b65e:	bf00      	nop
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20008e40 	.word	0x20008e40
 800b66c:	20008e44 	.word	0x20008e44
 800b670:	20008e48 	.word	0x20008e48
 800b674:	08018310 	.word	0x08018310
 800b678:	08018398 	.word	0x08018398
 800b67c:	08018360 	.word	0x08018360
 800b680:	20008e4c 	.word	0x20008e4c
 800b684:	080183bc 	.word	0x080183bc
 800b688:	0800b38d 	.word	0x0800b38d
 800b68c:	080183e0 	.word	0x080183e0

0800b690 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b69a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b69e:	021b      	lsls	r3, r3, #8
 800b6a0:	b21a      	sxth	r2, r3
 800b6a2:	88fb      	ldrh	r3, [r7, #6]
 800b6a4:	0a1b      	lsrs	r3, r3, #8
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	b21b      	sxth	r3, r3
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	b21b      	sxth	r3, r3
 800b6ae:	b29b      	uxth	r3, r3
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	061a      	lsls	r2, r3, #24
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	021b      	lsls	r3, r3, #8
 800b6cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b6d0:	431a      	orrs	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	0a1b      	lsrs	r3, r3, #8
 800b6d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	0e1b      	lsrs	r3, r3, #24
 800b6e0:	4313      	orrs	r3, r2
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b6f8:	f00a ff94 	bl	8016624 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b6fc:	f000 f8d4 	bl	800b8a8 <mem_init>
  memp_init();
 800b700:	f000 fc30 	bl	800bf64 <memp_init>
  pbuf_init();
  netif_init();
 800b704:	f000 fd3c 	bl	800c180 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b708:	f008 f800 	bl	801370c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b70c:	f001 fe4c 	bl	800d3a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b710:	f007 ff42 	bl	8013598 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b726:	4b05      	ldr	r3, [pc, #20]	@ (800b73c <ptr_to_mem+0x20>)
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	88fb      	ldrh	r3, [r7, #6]
 800b72c:	4413      	add	r3, r2
}
 800b72e:	4618      	mov	r0, r3
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	200094bc 	.word	0x200094bc

0800b740 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b748:	4b05      	ldr	r3, [pc, #20]	@ (800b760 <mem_to_ptr+0x20>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	b29b      	uxth	r3, r3
}
 800b752:	4618      	mov	r0, r3
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	200094bc 	.word	0x200094bc

0800b764 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b764:	b590      	push	{r4, r7, lr}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b76c:	4b45      	ldr	r3, [pc, #276]	@ (800b884 <plug_holes+0x120>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	429a      	cmp	r2, r3
 800b774:	d206      	bcs.n	800b784 <plug_holes+0x20>
 800b776:	4b44      	ldr	r3, [pc, #272]	@ (800b888 <plug_holes+0x124>)
 800b778:	f240 12df 	movw	r2, #479	@ 0x1df
 800b77c:	4943      	ldr	r1, [pc, #268]	@ (800b88c <plug_holes+0x128>)
 800b77e:	4844      	ldr	r0, [pc, #272]	@ (800b890 <plug_holes+0x12c>)
 800b780:	f7f5 fcc4 	bl	800110c <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b784:	4b43      	ldr	r3, [pc, #268]	@ (800b894 <plug_holes+0x130>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d306      	bcc.n	800b79c <plug_holes+0x38>
 800b78e:	4b3e      	ldr	r3, [pc, #248]	@ (800b888 <plug_holes+0x124>)
 800b790:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b794:	4940      	ldr	r1, [pc, #256]	@ (800b898 <plug_holes+0x134>)
 800b796:	483e      	ldr	r0, [pc, #248]	@ (800b890 <plug_holes+0x12c>)
 800b798:	f7f5 fcb8 	bl	800110c <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	791b      	ldrb	r3, [r3, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d006      	beq.n	800b7b2 <plug_holes+0x4e>
 800b7a4:	4b38      	ldr	r3, [pc, #224]	@ (800b888 <plug_holes+0x124>)
 800b7a6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b7aa:	493c      	ldr	r1, [pc, #240]	@ (800b89c <plug_holes+0x138>)
 800b7ac:	4838      	ldr	r0, [pc, #224]	@ (800b890 <plug_holes+0x12c>)
 800b7ae:	f7f5 fcad 	bl	800110c <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	881b      	ldrh	r3, [r3, #0]
 800b7b6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b7ba:	d906      	bls.n	800b7ca <plug_holes+0x66>
 800b7bc:	4b32      	ldr	r3, [pc, #200]	@ (800b888 <plug_holes+0x124>)
 800b7be:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b7c2:	4937      	ldr	r1, [pc, #220]	@ (800b8a0 <plug_holes+0x13c>)
 800b7c4:	4832      	ldr	r0, [pc, #200]	@ (800b890 <plug_holes+0x12c>)
 800b7c6:	f7f5 fca1 	bl	800110c <printf>

  nmem = ptr_to_mem(mem->next);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	881b      	ldrh	r3, [r3, #0]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7ff ffa4 	bl	800b71c <ptr_to_mem>
 800b7d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d024      	beq.n	800b828 <plug_holes+0xc4>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	791b      	ldrb	r3, [r3, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d120      	bne.n	800b828 <plug_holes+0xc4>
 800b7e6:	4b2b      	ldr	r3, [pc, #172]	@ (800b894 <plug_holes+0x130>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d01b      	beq.n	800b828 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b7f0:	4b2c      	ldr	r3, [pc, #176]	@ (800b8a4 <plug_holes+0x140>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d102      	bne.n	800b800 <plug_holes+0x9c>
      lfree = mem;
 800b7fa:	4a2a      	ldr	r2, [pc, #168]	@ (800b8a4 <plug_holes+0x140>)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	881a      	ldrh	r2, [r3, #0]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b810:	d00a      	beq.n	800b828 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	881b      	ldrh	r3, [r3, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff ff80 	bl	800b71c <ptr_to_mem>
 800b81c:	4604      	mov	r4, r0
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff ff8e 	bl	800b740 <mem_to_ptr>
 800b824:	4603      	mov	r3, r0
 800b826:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	885b      	ldrh	r3, [r3, #2]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7ff ff75 	bl	800b71c <ptr_to_mem>
 800b832:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d01f      	beq.n	800b87c <plug_holes+0x118>
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	791b      	ldrb	r3, [r3, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d11b      	bne.n	800b87c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b844:	4b17      	ldr	r3, [pc, #92]	@ (800b8a4 <plug_holes+0x140>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d102      	bne.n	800b854 <plug_holes+0xf0>
      lfree = pmem;
 800b84e:	4a15      	ldr	r2, [pc, #84]	@ (800b8a4 <plug_holes+0x140>)
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	881a      	ldrh	r2, [r3, #0]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b864:	d00a      	beq.n	800b87c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff ff56 	bl	800b71c <ptr_to_mem>
 800b870:	4604      	mov	r4, r0
 800b872:	68b8      	ldr	r0, [r7, #8]
 800b874:	f7ff ff64 	bl	800b740 <mem_to_ptr>
 800b878:	4603      	mov	r3, r0
 800b87a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b87c:	bf00      	nop
 800b87e:	3714      	adds	r7, #20
 800b880:	46bd      	mov	sp, r7
 800b882:	bd90      	pop	{r4, r7, pc}
 800b884:	200094bc 	.word	0x200094bc
 800b888:	080183f0 	.word	0x080183f0
 800b88c:	08018420 	.word	0x08018420
 800b890:	08018438 	.word	0x08018438
 800b894:	200094c0 	.word	0x200094c0
 800b898:	08018460 	.word	0x08018460
 800b89c:	0801847c 	.word	0x0801847c
 800b8a0:	08018498 	.word	0x08018498
 800b8a4:	200094c8 	.word	0x200094c8

0800b8a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b8ae:	4b1f      	ldr	r3, [pc, #124]	@ (800b92c <mem_init+0x84>)
 800b8b0:	3303      	adds	r3, #3
 800b8b2:	f023 0303 	bic.w	r3, r3, #3
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b930 <mem_init+0x88>)
 800b8ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b8bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b930 <mem_init+0x88>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b8c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b8d6:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800b8da:	f7ff ff1f 	bl	800b71c <ptr_to_mem>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4a14      	ldr	r2, [pc, #80]	@ (800b934 <mem_init+0x8c>)
 800b8e2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b8e4:	4b13      	ldr	r3, [pc, #76]	@ (800b934 <mem_init+0x8c>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b8ec:	4b11      	ldr	r3, [pc, #68]	@ (800b934 <mem_init+0x8c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b8f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b934 <mem_init+0x8c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b8fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b900:	4b0b      	ldr	r3, [pc, #44]	@ (800b930 <mem_init+0x88>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a0c      	ldr	r2, [pc, #48]	@ (800b938 <mem_init+0x90>)
 800b906:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b908:	480c      	ldr	r0, [pc, #48]	@ (800b93c <mem_init+0x94>)
 800b90a:	f00a fe99 	bl	8016640 <sys_mutex_new>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d006      	beq.n	800b922 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b914:	4b0a      	ldr	r3, [pc, #40]	@ (800b940 <mem_init+0x98>)
 800b916:	f240 221f 	movw	r2, #543	@ 0x21f
 800b91a:	490a      	ldr	r1, [pc, #40]	@ (800b944 <mem_init+0x9c>)
 800b91c:	480a      	ldr	r0, [pc, #40]	@ (800b948 <mem_init+0xa0>)
 800b91e:	f7f5 fbf5 	bl	800110c <printf>
  }
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20008e68 	.word	0x20008e68
 800b930:	200094bc 	.word	0x200094bc
 800b934:	200094c0 	.word	0x200094c0
 800b938:	200094c8 	.word	0x200094c8
 800b93c:	200094c4 	.word	0x200094c4
 800b940:	080183f0 	.word	0x080183f0
 800b944:	080184c4 	.word	0x080184c4
 800b948:	08018438 	.word	0x08018438

0800b94c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff fef3 	bl	800b740 <mem_to_ptr>
 800b95a:	4603      	mov	r3, r0
 800b95c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	881b      	ldrh	r3, [r3, #0]
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff feda 	bl	800b71c <ptr_to_mem>
 800b968:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	885b      	ldrh	r3, [r3, #2]
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff fed4 	bl	800b71c <ptr_to_mem>
 800b974:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b97e:	d818      	bhi.n	800b9b2 <mem_link_valid+0x66>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	885b      	ldrh	r3, [r3, #2]
 800b984:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b988:	d813      	bhi.n	800b9b2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b98e:	8afa      	ldrh	r2, [r7, #22]
 800b990:	429a      	cmp	r2, r3
 800b992:	d004      	beq.n	800b99e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	881b      	ldrh	r3, [r3, #0]
 800b998:	8afa      	ldrh	r2, [r7, #22]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d109      	bne.n	800b9b2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b99e:	4b08      	ldr	r3, [pc, #32]	@ (800b9c0 <mem_link_valid+0x74>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9a2:	693a      	ldr	r2, [r7, #16]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d006      	beq.n	800b9b6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	885b      	ldrh	r3, [r3, #2]
 800b9ac:	8afa      	ldrh	r2, [r7, #22]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d001      	beq.n	800b9b6 <mem_link_valid+0x6a>
    return 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e000      	b.n	800b9b8 <mem_link_valid+0x6c>
  }
  return 1;
 800b9b6:	2301      	movs	r3, #1
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	200094c0 	.word	0x200094c0

0800b9c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d070      	beq.n	800bab4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f003 0303 	and.w	r3, r3, #3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00d      	beq.n	800b9f8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b9dc:	4b37      	ldr	r3, [pc, #220]	@ (800babc <mem_free+0xf8>)
 800b9de:	f240 2273 	movw	r2, #627	@ 0x273
 800b9e2:	4937      	ldr	r1, [pc, #220]	@ (800bac0 <mem_free+0xfc>)
 800b9e4:	4837      	ldr	r0, [pc, #220]	@ (800bac4 <mem_free+0x100>)
 800b9e6:	f7f5 fb91 	bl	800110c <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b9ea:	f00a fe87 	bl	80166fc <sys_arch_protect>
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f00a fe91 	bl	8016718 <sys_arch_unprotect>
    return;
 800b9f6:	e05e      	b.n	800bab6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3b08      	subs	r3, #8
 800b9fc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b9fe:	4b32      	ldr	r3, [pc, #200]	@ (800bac8 <mem_free+0x104>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69fa      	ldr	r2, [r7, #28]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d306      	bcc.n	800ba16 <mem_free+0x52>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f103 020c 	add.w	r2, r3, #12
 800ba0e:	4b2f      	ldr	r3, [pc, #188]	@ (800bacc <mem_free+0x108>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d90d      	bls.n	800ba32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ba16:	4b29      	ldr	r3, [pc, #164]	@ (800babc <mem_free+0xf8>)
 800ba18:	f240 227f 	movw	r2, #639	@ 0x27f
 800ba1c:	492c      	ldr	r1, [pc, #176]	@ (800bad0 <mem_free+0x10c>)
 800ba1e:	4829      	ldr	r0, [pc, #164]	@ (800bac4 <mem_free+0x100>)
 800ba20:	f7f5 fb74 	bl	800110c <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba24:	f00a fe6a 	bl	80166fc <sys_arch_protect>
 800ba28:	6138      	str	r0, [r7, #16]
 800ba2a:	6938      	ldr	r0, [r7, #16]
 800ba2c:	f00a fe74 	bl	8016718 <sys_arch_unprotect>
    return;
 800ba30:	e041      	b.n	800bab6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba32:	4828      	ldr	r0, [pc, #160]	@ (800bad4 <mem_free+0x110>)
 800ba34:	f00a fe20 	bl	8016678 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	791b      	ldrb	r3, [r3, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d110      	bne.n	800ba62 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ba40:	4b1e      	ldr	r3, [pc, #120]	@ (800babc <mem_free+0xf8>)
 800ba42:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ba46:	4924      	ldr	r1, [pc, #144]	@ (800bad8 <mem_free+0x114>)
 800ba48:	481e      	ldr	r0, [pc, #120]	@ (800bac4 <mem_free+0x100>)
 800ba4a:	f7f5 fb5f 	bl	800110c <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800ba4e:	4821      	ldr	r0, [pc, #132]	@ (800bad4 <mem_free+0x110>)
 800ba50:	f00a fe21 	bl	8016696 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba54:	f00a fe52 	bl	80166fc <sys_arch_protect>
 800ba58:	6178      	str	r0, [r7, #20]
 800ba5a:	6978      	ldr	r0, [r7, #20]
 800ba5c:	f00a fe5c 	bl	8016718 <sys_arch_unprotect>
    return;
 800ba60:	e029      	b.n	800bab6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ba62:	69f8      	ldr	r0, [r7, #28]
 800ba64:	f7ff ff72 	bl	800b94c <mem_link_valid>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d110      	bne.n	800ba90 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ba6e:	4b13      	ldr	r3, [pc, #76]	@ (800babc <mem_free+0xf8>)
 800ba70:	f240 2295 	movw	r2, #661	@ 0x295
 800ba74:	4919      	ldr	r1, [pc, #100]	@ (800badc <mem_free+0x118>)
 800ba76:	4813      	ldr	r0, [pc, #76]	@ (800bac4 <mem_free+0x100>)
 800ba78:	f7f5 fb48 	bl	800110c <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800ba7c:	4815      	ldr	r0, [pc, #84]	@ (800bad4 <mem_free+0x110>)
 800ba7e:	f00a fe0a 	bl	8016696 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba82:	f00a fe3b 	bl	80166fc <sys_arch_protect>
 800ba86:	61b8      	str	r0, [r7, #24]
 800ba88:	69b8      	ldr	r0, [r7, #24]
 800ba8a:	f00a fe45 	bl	8016718 <sys_arch_unprotect>
    return;
 800ba8e:	e012      	b.n	800bab6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	2200      	movs	r2, #0
 800ba94:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ba96:	4b12      	ldr	r3, [pc, #72]	@ (800bae0 <mem_free+0x11c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	69fa      	ldr	r2, [r7, #28]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d202      	bcs.n	800baa6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800baa0:	4a0f      	ldr	r2, [pc, #60]	@ (800bae0 <mem_free+0x11c>)
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800baa6:	69f8      	ldr	r0, [r7, #28]
 800baa8:	f7ff fe5c 	bl	800b764 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800baac:	4809      	ldr	r0, [pc, #36]	@ (800bad4 <mem_free+0x110>)
 800baae:	f00a fdf2 	bl	8016696 <sys_mutex_unlock>
 800bab2:	e000      	b.n	800bab6 <mem_free+0xf2>
    return;
 800bab4:	bf00      	nop
}
 800bab6:	3720      	adds	r7, #32
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	080183f0 	.word	0x080183f0
 800bac0:	080184e0 	.word	0x080184e0
 800bac4:	08018438 	.word	0x08018438
 800bac8:	200094bc 	.word	0x200094bc
 800bacc:	200094c0 	.word	0x200094c0
 800bad0:	08018504 	.word	0x08018504
 800bad4:	200094c4 	.word	0x200094c4
 800bad8:	08018520 	.word	0x08018520
 800badc:	08018548 	.word	0x08018548
 800bae0:	200094c8 	.word	0x200094c8

0800bae4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b088      	sub	sp, #32
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800baf0:	887b      	ldrh	r3, [r7, #2]
 800baf2:	3303      	adds	r3, #3
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	f023 0303 	bic.w	r3, r3, #3
 800bafa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bafc:	8bfb      	ldrh	r3, [r7, #30]
 800bafe:	2b0b      	cmp	r3, #11
 800bb00:	d801      	bhi.n	800bb06 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb02:	230c      	movs	r3, #12
 800bb04:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb06:	8bfb      	ldrh	r3, [r7, #30]
 800bb08:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bb0c:	d803      	bhi.n	800bb16 <mem_trim+0x32>
 800bb0e:	8bfa      	ldrh	r2, [r7, #30]
 800bb10:	887b      	ldrh	r3, [r7, #2]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d201      	bcs.n	800bb1a <mem_trim+0x36>
    return NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	e0d8      	b.n	800bccc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bb1a:	4b6e      	ldr	r3, [pc, #440]	@ (800bcd4 <mem_trim+0x1f0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d304      	bcc.n	800bb2e <mem_trim+0x4a>
 800bb24:	4b6c      	ldr	r3, [pc, #432]	@ (800bcd8 <mem_trim+0x1f4>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d306      	bcc.n	800bb3c <mem_trim+0x58>
 800bb2e:	4b6b      	ldr	r3, [pc, #428]	@ (800bcdc <mem_trim+0x1f8>)
 800bb30:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bb34:	496a      	ldr	r1, [pc, #424]	@ (800bce0 <mem_trim+0x1fc>)
 800bb36:	486b      	ldr	r0, [pc, #428]	@ (800bce4 <mem_trim+0x200>)
 800bb38:	f7f5 fae8 	bl	800110c <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bb3c:	4b65      	ldr	r3, [pc, #404]	@ (800bcd4 <mem_trim+0x1f0>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d304      	bcc.n	800bb50 <mem_trim+0x6c>
 800bb46:	4b64      	ldr	r3, [pc, #400]	@ (800bcd8 <mem_trim+0x1f4>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d307      	bcc.n	800bb60 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb50:	f00a fdd4 	bl	80166fc <sys_arch_protect>
 800bb54:	60b8      	str	r0, [r7, #8]
 800bb56:	68b8      	ldr	r0, [r7, #8]
 800bb58:	f00a fdde 	bl	8016718 <sys_arch_unprotect>
    return rmem;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	e0b5      	b.n	800bccc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3b08      	subs	r3, #8
 800bb64:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bb66:	69b8      	ldr	r0, [r7, #24]
 800bb68:	f7ff fdea 	bl	800b740 <mem_to_ptr>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	881a      	ldrh	r2, [r3, #0]
 800bb74:	8afb      	ldrh	r3, [r7, #22]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	3b08      	subs	r3, #8
 800bb7c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bb7e:	8bfa      	ldrh	r2, [r7, #30]
 800bb80:	8abb      	ldrh	r3, [r7, #20]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d906      	bls.n	800bb94 <mem_trim+0xb0>
 800bb86:	4b55      	ldr	r3, [pc, #340]	@ (800bcdc <mem_trim+0x1f8>)
 800bb88:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bb8c:	4956      	ldr	r1, [pc, #344]	@ (800bce8 <mem_trim+0x204>)
 800bb8e:	4855      	ldr	r0, [pc, #340]	@ (800bce4 <mem_trim+0x200>)
 800bb90:	f7f5 fabc 	bl	800110c <printf>
  if (newsize > size) {
 800bb94:	8bfa      	ldrh	r2, [r7, #30]
 800bb96:	8abb      	ldrh	r3, [r7, #20]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d901      	bls.n	800bba0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	e095      	b.n	800bccc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bba0:	8bfa      	ldrh	r2, [r7, #30]
 800bba2:	8abb      	ldrh	r3, [r7, #20]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d101      	bne.n	800bbac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	e08f      	b.n	800bccc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bbac:	484f      	ldr	r0, [pc, #316]	@ (800bcec <mem_trim+0x208>)
 800bbae:	f00a fd63 	bl	8016678 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff fdb0 	bl	800b71c <ptr_to_mem>
 800bbbc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	791b      	ldrb	r3, [r3, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d13f      	bne.n	800bc46 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bbce:	d106      	bne.n	800bbde <mem_trim+0xfa>
 800bbd0:	4b42      	ldr	r3, [pc, #264]	@ (800bcdc <mem_trim+0x1f8>)
 800bbd2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bbd6:	4946      	ldr	r1, [pc, #280]	@ (800bcf0 <mem_trim+0x20c>)
 800bbd8:	4842      	ldr	r0, [pc, #264]	@ (800bce4 <mem_trim+0x200>)
 800bbda:	f7f5 fa97 	bl	800110c <printf>
    /* remember the old next pointer */
    next = mem2->next;
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bbe4:	8afa      	ldrh	r2, [r7, #22]
 800bbe6:	8bfb      	ldrh	r3, [r7, #30]
 800bbe8:	4413      	add	r3, r2
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	3308      	adds	r3, #8
 800bbee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bbf0:	4b40      	ldr	r3, [pc, #256]	@ (800bcf4 <mem_trim+0x210>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d106      	bne.n	800bc08 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bbfa:	89fb      	ldrh	r3, [r7, #14]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff fd8d 	bl	800b71c <ptr_to_mem>
 800bc02:	4603      	mov	r3, r0
 800bc04:	4a3b      	ldr	r2, [pc, #236]	@ (800bcf4 <mem_trim+0x210>)
 800bc06:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bc08:	89fb      	ldrh	r3, [r7, #14]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7ff fd86 	bl	800b71c <ptr_to_mem>
 800bc10:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	2200      	movs	r2, #0
 800bc16:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	89ba      	ldrh	r2, [r7, #12]
 800bc1c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	8afa      	ldrh	r2, [r7, #22]
 800bc22:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	89fa      	ldrh	r2, [r7, #14]
 800bc28:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	881b      	ldrh	r3, [r3, #0]
 800bc2e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc32:	d047      	beq.n	800bcc4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7ff fd6f 	bl	800b71c <ptr_to_mem>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	89fb      	ldrh	r3, [r7, #14]
 800bc42:	8053      	strh	r3, [r2, #2]
 800bc44:	e03e      	b.n	800bcc4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bc46:	8bfb      	ldrh	r3, [r7, #30]
 800bc48:	f103 0214 	add.w	r2, r3, #20
 800bc4c:	8abb      	ldrh	r3, [r7, #20]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d838      	bhi.n	800bcc4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc52:	8afa      	ldrh	r2, [r7, #22]
 800bc54:	8bfb      	ldrh	r3, [r7, #30]
 800bc56:	4413      	add	r3, r2
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	3308      	adds	r3, #8
 800bc5c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc66:	d106      	bne.n	800bc76 <mem_trim+0x192>
 800bc68:	4b1c      	ldr	r3, [pc, #112]	@ (800bcdc <mem_trim+0x1f8>)
 800bc6a:	f240 3216 	movw	r2, #790	@ 0x316
 800bc6e:	4920      	ldr	r1, [pc, #128]	@ (800bcf0 <mem_trim+0x20c>)
 800bc70:	481c      	ldr	r0, [pc, #112]	@ (800bce4 <mem_trim+0x200>)
 800bc72:	f7f5 fa4b 	bl	800110c <printf>
    mem2 = ptr_to_mem(ptr2);
 800bc76:	89fb      	ldrh	r3, [r7, #14]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7ff fd4f 	bl	800b71c <ptr_to_mem>
 800bc7e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bc80:	4b1c      	ldr	r3, [pc, #112]	@ (800bcf4 <mem_trim+0x210>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d202      	bcs.n	800bc90 <mem_trim+0x1ac>
      lfree = mem2;
 800bc8a:	4a1a      	ldr	r2, [pc, #104]	@ (800bcf4 <mem_trim+0x210>)
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	2200      	movs	r2, #0
 800bc94:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	881a      	ldrh	r2, [r3, #0]
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	8afa      	ldrh	r2, [r7, #22]
 800bca2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	89fa      	ldrh	r2, [r7, #14]
 800bca8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bcb2:	d007      	beq.n	800bcc4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fd2f 	bl	800b71c <ptr_to_mem>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	89fb      	ldrh	r3, [r7, #14]
 800bcc2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bcc4:	4809      	ldr	r0, [pc, #36]	@ (800bcec <mem_trim+0x208>)
 800bcc6:	f00a fce6 	bl	8016696 <sys_mutex_unlock>
  return rmem;
 800bcca:	687b      	ldr	r3, [r7, #4]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3720      	adds	r7, #32
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	200094bc 	.word	0x200094bc
 800bcd8:	200094c0 	.word	0x200094c0
 800bcdc:	080183f0 	.word	0x080183f0
 800bce0:	0801857c 	.word	0x0801857c
 800bce4:	08018438 	.word	0x08018438
 800bce8:	08018594 	.word	0x08018594
 800bcec:	200094c4 	.word	0x200094c4
 800bcf0:	080185b4 	.word	0x080185b4
 800bcf4:	200094c8 	.word	0x200094c8

0800bcf8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd02:	88fb      	ldrh	r3, [r7, #6]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <mem_malloc+0x14>
    return NULL;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	e0e2      	b.n	800bed2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bd0c:	88fb      	ldrh	r3, [r7, #6]
 800bd0e:	3303      	adds	r3, #3
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	f023 0303 	bic.w	r3, r3, #3
 800bd16:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bd18:	8bbb      	ldrh	r3, [r7, #28]
 800bd1a:	2b0b      	cmp	r3, #11
 800bd1c:	d801      	bhi.n	800bd22 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bd1e:	230c      	movs	r3, #12
 800bd20:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bd22:	8bbb      	ldrh	r3, [r7, #28]
 800bd24:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bd28:	d803      	bhi.n	800bd32 <mem_malloc+0x3a>
 800bd2a:	8bba      	ldrh	r2, [r7, #28]
 800bd2c:	88fb      	ldrh	r3, [r7, #6]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d201      	bcs.n	800bd36 <mem_malloc+0x3e>
    return NULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	e0cd      	b.n	800bed2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bd36:	4869      	ldr	r0, [pc, #420]	@ (800bedc <mem_malloc+0x1e4>)
 800bd38:	f00a fc9e 	bl	8016678 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd3c:	4b68      	ldr	r3, [pc, #416]	@ (800bee0 <mem_malloc+0x1e8>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff fcfd 	bl	800b740 <mem_to_ptr>
 800bd46:	4603      	mov	r3, r0
 800bd48:	83fb      	strh	r3, [r7, #30]
 800bd4a:	e0b7      	b.n	800bebc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bd4c:	8bfb      	ldrh	r3, [r7, #30]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff fce4 	bl	800b71c <ptr_to_mem>
 800bd54:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	791b      	ldrb	r3, [r3, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f040 80a7 	bne.w	800beae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
 800bd66:	8bfb      	ldrh	r3, [r7, #30]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	f1a3 0208 	sub.w	r2, r3, #8
 800bd6e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bd70:	429a      	cmp	r2, r3
 800bd72:	f0c0 809c 	bcc.w	800beae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	881b      	ldrh	r3, [r3, #0]
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	8bfb      	ldrh	r3, [r7, #30]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	f1a3 0208 	sub.w	r2, r3, #8
 800bd84:	8bbb      	ldrh	r3, [r7, #28]
 800bd86:	3314      	adds	r3, #20
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d333      	bcc.n	800bdf4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bd8c:	8bfa      	ldrh	r2, [r7, #30]
 800bd8e:	8bbb      	ldrh	r3, [r7, #28]
 800bd90:	4413      	add	r3, r2
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	3308      	adds	r3, #8
 800bd96:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bd98:	8a7b      	ldrh	r3, [r7, #18]
 800bd9a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bd9e:	d106      	bne.n	800bdae <mem_malloc+0xb6>
 800bda0:	4b50      	ldr	r3, [pc, #320]	@ (800bee4 <mem_malloc+0x1ec>)
 800bda2:	f240 3287 	movw	r2, #903	@ 0x387
 800bda6:	4950      	ldr	r1, [pc, #320]	@ (800bee8 <mem_malloc+0x1f0>)
 800bda8:	4850      	ldr	r0, [pc, #320]	@ (800beec <mem_malloc+0x1f4>)
 800bdaa:	f7f5 f9af 	bl	800110c <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bdae:	8a7b      	ldrh	r3, [r7, #18]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff fcb3 	bl	800b71c <ptr_to_mem>
 800bdb6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	881a      	ldrh	r2, [r3, #0]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	8bfa      	ldrh	r2, [r7, #30]
 800bdca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	8a7a      	ldrh	r2, [r7, #18]
 800bdd0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	881b      	ldrh	r3, [r3, #0]
 800bddc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bde0:	d00b      	beq.n	800bdfa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	881b      	ldrh	r3, [r3, #0]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff fc98 	bl	800b71c <ptr_to_mem>
 800bdec:	4602      	mov	r2, r0
 800bdee:	8a7b      	ldrh	r3, [r7, #18]
 800bdf0:	8053      	strh	r3, [r2, #2]
 800bdf2:	e002      	b.n	800bdfa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bdfa:	4b39      	ldr	r3, [pc, #228]	@ (800bee0 <mem_malloc+0x1e8>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	429a      	cmp	r2, r3
 800be02:	d127      	bne.n	800be54 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800be04:	4b36      	ldr	r3, [pc, #216]	@ (800bee0 <mem_malloc+0x1e8>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be0a:	e005      	b.n	800be18 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	881b      	ldrh	r3, [r3, #0]
 800be10:	4618      	mov	r0, r3
 800be12:	f7ff fc83 	bl	800b71c <ptr_to_mem>
 800be16:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	791b      	ldrb	r3, [r3, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d004      	beq.n	800be2a <mem_malloc+0x132>
 800be20:	4b33      	ldr	r3, [pc, #204]	@ (800bef0 <mem_malloc+0x1f8>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	69ba      	ldr	r2, [r7, #24]
 800be26:	429a      	cmp	r2, r3
 800be28:	d1f0      	bne.n	800be0c <mem_malloc+0x114>
          }
          lfree = cur;
 800be2a:	4a2d      	ldr	r2, [pc, #180]	@ (800bee0 <mem_malloc+0x1e8>)
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be30:	4b2b      	ldr	r3, [pc, #172]	@ (800bee0 <mem_malloc+0x1e8>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	4b2e      	ldr	r3, [pc, #184]	@ (800bef0 <mem_malloc+0x1f8>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d00b      	beq.n	800be54 <mem_malloc+0x15c>
 800be3c:	4b28      	ldr	r3, [pc, #160]	@ (800bee0 <mem_malloc+0x1e8>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	791b      	ldrb	r3, [r3, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d006      	beq.n	800be54 <mem_malloc+0x15c>
 800be46:	4b27      	ldr	r3, [pc, #156]	@ (800bee4 <mem_malloc+0x1ec>)
 800be48:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800be4c:	4929      	ldr	r1, [pc, #164]	@ (800bef4 <mem_malloc+0x1fc>)
 800be4e:	4827      	ldr	r0, [pc, #156]	@ (800beec <mem_malloc+0x1f4>)
 800be50:	f7f5 f95c 	bl	800110c <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800be54:	4821      	ldr	r0, [pc, #132]	@ (800bedc <mem_malloc+0x1e4>)
 800be56:	f00a fc1e 	bl	8016696 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800be5a:	8bba      	ldrh	r2, [r7, #28]
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	4413      	add	r3, r2
 800be60:	3308      	adds	r3, #8
 800be62:	4a23      	ldr	r2, [pc, #140]	@ (800bef0 <mem_malloc+0x1f8>)
 800be64:	6812      	ldr	r2, [r2, #0]
 800be66:	4293      	cmp	r3, r2
 800be68:	d906      	bls.n	800be78 <mem_malloc+0x180>
 800be6a:	4b1e      	ldr	r3, [pc, #120]	@ (800bee4 <mem_malloc+0x1ec>)
 800be6c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800be70:	4921      	ldr	r1, [pc, #132]	@ (800bef8 <mem_malloc+0x200>)
 800be72:	481e      	ldr	r0, [pc, #120]	@ (800beec <mem_malloc+0x1f4>)
 800be74:	f7f5 f94a 	bl	800110c <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	f003 0303 	and.w	r3, r3, #3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d006      	beq.n	800be90 <mem_malloc+0x198>
 800be82:	4b18      	ldr	r3, [pc, #96]	@ (800bee4 <mem_malloc+0x1ec>)
 800be84:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800be88:	491c      	ldr	r1, [pc, #112]	@ (800befc <mem_malloc+0x204>)
 800be8a:	4818      	ldr	r0, [pc, #96]	@ (800beec <mem_malloc+0x1f4>)
 800be8c:	f7f5 f93e 	bl	800110c <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f003 0303 	and.w	r3, r3, #3
 800be96:	2b00      	cmp	r3, #0
 800be98:	d006      	beq.n	800bea8 <mem_malloc+0x1b0>
 800be9a:	4b12      	ldr	r3, [pc, #72]	@ (800bee4 <mem_malloc+0x1ec>)
 800be9c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800bea0:	4917      	ldr	r1, [pc, #92]	@ (800bf00 <mem_malloc+0x208>)
 800bea2:	4812      	ldr	r0, [pc, #72]	@ (800beec <mem_malloc+0x1f4>)
 800bea4:	f7f5 f932 	bl	800110c <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	3308      	adds	r3, #8
 800beac:	e011      	b.n	800bed2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800beae:	8bfb      	ldrh	r3, [r7, #30]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff fc33 	bl	800b71c <ptr_to_mem>
 800beb6:	4603      	mov	r3, r0
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bebc:	8bfa      	ldrh	r2, [r7, #30]
 800bebe:	8bbb      	ldrh	r3, [r7, #28]
 800bec0:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800bec4:	429a      	cmp	r2, r3
 800bec6:	f4ff af41 	bcc.w	800bd4c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800beca:	4804      	ldr	r0, [pc, #16]	@ (800bedc <mem_malloc+0x1e4>)
 800becc:	f00a fbe3 	bl	8016696 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3720      	adds	r7, #32
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	200094c4 	.word	0x200094c4
 800bee0:	200094c8 	.word	0x200094c8
 800bee4:	080183f0 	.word	0x080183f0
 800bee8:	080185b4 	.word	0x080185b4
 800beec:	08018438 	.word	0x08018438
 800bef0:	200094c0 	.word	0x200094c0
 800bef4:	080185c8 	.word	0x080185c8
 800bef8:	080185e4 	.word	0x080185e4
 800befc:	08018614 	.word	0x08018614
 800bf00:	08018644 	.word	0x08018644

0800bf04 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	2200      	movs	r2, #0
 800bf12:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	3303      	adds	r3, #3
 800bf1a:	f023 0303 	bic.w	r3, r3, #3
 800bf1e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	e011      	b.n	800bf4a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	4413      	add	r3, r2
 800bf42:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	3301      	adds	r3, #1
 800bf48:	60fb      	str	r3, [r7, #12]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	885b      	ldrh	r3, [r3, #2]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	4293      	cmp	r3, r2
 800bf54:	dbe7      	blt.n	800bf26 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bf56:	bf00      	nop
 800bf58:	bf00      	nop
 800bf5a:	3714      	adds	r7, #20
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	80fb      	strh	r3, [r7, #6]
 800bf6e:	e009      	b.n	800bf84 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bf70:	88fb      	ldrh	r3, [r7, #6]
 800bf72:	4a08      	ldr	r2, [pc, #32]	@ (800bf94 <memp_init+0x30>)
 800bf74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff ffc3 	bl	800bf04 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bf7e:	88fb      	ldrh	r3, [r7, #6]
 800bf80:	3301      	adds	r3, #1
 800bf82:	80fb      	strh	r3, [r7, #6]
 800bf84:	88fb      	ldrh	r3, [r7, #6]
 800bf86:	2b0c      	cmp	r3, #12
 800bf88:	d9f2      	bls.n	800bf70 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bf8a:	bf00      	nop
 800bf8c:	bf00      	nop
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	0801ae5c 	.word	0x0801ae5c

0800bf98 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bfa0:	f00a fbac 	bl	80166fc <sys_arch_protect>
 800bfa4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d015      	beq.n	800bfe0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	6812      	ldr	r2, [r2, #0]
 800bfbc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f003 0303 	and.w	r3, r3, #3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d006      	beq.n	800bfd6 <do_memp_malloc_pool+0x3e>
 800bfc8:	4b09      	ldr	r3, [pc, #36]	@ (800bff0 <do_memp_malloc_pool+0x58>)
 800bfca:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800bfce:	4909      	ldr	r1, [pc, #36]	@ (800bff4 <do_memp_malloc_pool+0x5c>)
 800bfd0:	4809      	ldr	r0, [pc, #36]	@ (800bff8 <do_memp_malloc_pool+0x60>)
 800bfd2:	f7f5 f89b 	bl	800110c <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f00a fb9e 	bl	8016718 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	e003      	b.n	800bfe8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f00a fb99 	bl	8016718 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	08018668 	.word	0x08018668
 800bff4:	08018698 	.word	0x08018698
 800bff8:	080186bc 	.word	0x080186bc

0800bffc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d106      	bne.n	800c018 <memp_malloc_pool+0x1c>
 800c00a:	4b0a      	ldr	r3, [pc, #40]	@ (800c034 <memp_malloc_pool+0x38>)
 800c00c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c010:	4909      	ldr	r1, [pc, #36]	@ (800c038 <memp_malloc_pool+0x3c>)
 800c012:	480a      	ldr	r0, [pc, #40]	@ (800c03c <memp_malloc_pool+0x40>)
 800c014:	f7f5 f87a 	bl	800110c <printf>
  if (desc == NULL) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <memp_malloc_pool+0x26>
    return NULL;
 800c01e:	2300      	movs	r3, #0
 800c020:	e003      	b.n	800c02a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f7ff ffb8 	bl	800bf98 <do_memp_malloc_pool>
 800c028:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	08018668 	.word	0x08018668
 800c038:	080186e4 	.word	0x080186e4
 800c03c:	080186bc 	.word	0x080186bc

0800c040 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	4603      	mov	r3, r0
 800c048:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c04a:	79fb      	ldrb	r3, [r7, #7]
 800c04c:	2b0c      	cmp	r3, #12
 800c04e:	d908      	bls.n	800c062 <memp_malloc+0x22>
 800c050:	4b0a      	ldr	r3, [pc, #40]	@ (800c07c <memp_malloc+0x3c>)
 800c052:	f240 1257 	movw	r2, #343	@ 0x157
 800c056:	490a      	ldr	r1, [pc, #40]	@ (800c080 <memp_malloc+0x40>)
 800c058:	480a      	ldr	r0, [pc, #40]	@ (800c084 <memp_malloc+0x44>)
 800c05a:	f7f5 f857 	bl	800110c <printf>
 800c05e:	2300      	movs	r3, #0
 800c060:	e008      	b.n	800c074 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c062:	79fb      	ldrb	r3, [r7, #7]
 800c064:	4a08      	ldr	r2, [pc, #32]	@ (800c088 <memp_malloc+0x48>)
 800c066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff ff94 	bl	800bf98 <do_memp_malloc_pool>
 800c070:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c072:	68fb      	ldr	r3, [r7, #12]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	08018668 	.word	0x08018668
 800c080:	080186f8 	.word	0x080186f8
 800c084:	080186bc 	.word	0x080186bc
 800c088:	0801ae5c 	.word	0x0801ae5c

0800c08c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	f003 0303 	and.w	r3, r3, #3
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d006      	beq.n	800c0ae <do_memp_free_pool+0x22>
 800c0a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d8 <do_memp_free_pool+0x4c>)
 800c0a2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c0a6:	490d      	ldr	r1, [pc, #52]	@ (800c0dc <do_memp_free_pool+0x50>)
 800c0a8:	480d      	ldr	r0, [pc, #52]	@ (800c0e0 <do_memp_free_pool+0x54>)
 800c0aa:	f7f5 f82f 	bl	800110c <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c0b2:	f00a fb23 	bl	80166fc <sys_arch_protect>
 800c0b6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c0ca:	68b8      	ldr	r0, [r7, #8]
 800c0cc:	f00a fb24 	bl	8016718 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c0d0:	bf00      	nop
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	08018668 	.word	0x08018668
 800c0dc:	08018718 	.word	0x08018718
 800c0e0:	080186bc 	.word	0x080186bc

0800c0e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d106      	bne.n	800c102 <memp_free_pool+0x1e>
 800c0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c120 <memp_free_pool+0x3c>)
 800c0f6:	f240 1295 	movw	r2, #405	@ 0x195
 800c0fa:	490a      	ldr	r1, [pc, #40]	@ (800c124 <memp_free_pool+0x40>)
 800c0fc:	480a      	ldr	r0, [pc, #40]	@ (800c128 <memp_free_pool+0x44>)
 800c0fe:	f7f5 f805 	bl	800110c <printf>
  if ((desc == NULL) || (mem == NULL)) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d007      	beq.n	800c118 <memp_free_pool+0x34>
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d004      	beq.n	800c118 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff ffbb 	bl	800c08c <do_memp_free_pool>
 800c116:	e000      	b.n	800c11a <memp_free_pool+0x36>
    return;
 800c118:	bf00      	nop
}
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	08018668 	.word	0x08018668
 800c124:	080186e4 	.word	0x080186e4
 800c128:	080186bc 	.word	0x080186bc

0800c12c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	4603      	mov	r3, r0
 800c134:	6039      	str	r1, [r7, #0]
 800c136:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c138:	79fb      	ldrb	r3, [r7, #7]
 800c13a:	2b0c      	cmp	r3, #12
 800c13c:	d907      	bls.n	800c14e <memp_free+0x22>
 800c13e:	4b0c      	ldr	r3, [pc, #48]	@ (800c170 <memp_free+0x44>)
 800c140:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c144:	490b      	ldr	r1, [pc, #44]	@ (800c174 <memp_free+0x48>)
 800c146:	480c      	ldr	r0, [pc, #48]	@ (800c178 <memp_free+0x4c>)
 800c148:	f7f4 ffe0 	bl	800110c <printf>
 800c14c:	e00c      	b.n	800c168 <memp_free+0x3c>

  if (mem == NULL) {
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d008      	beq.n	800c166 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c154:	79fb      	ldrb	r3, [r7, #7]
 800c156:	4a09      	ldr	r2, [pc, #36]	@ (800c17c <memp_free+0x50>)
 800c158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff ff94 	bl	800c08c <do_memp_free_pool>
 800c164:	e000      	b.n	800c168 <memp_free+0x3c>
    return;
 800c166:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	08018668 	.word	0x08018668
 800c174:	08018738 	.word	0x08018738
 800c178:	080186bc 	.word	0x080186bc
 800c17c:	0801ae5c 	.word	0x0801ae5c

0800c180 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c180:	b480      	push	{r7}
 800c182:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c184:	bf00      	nop
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
	...

0800c190 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d108      	bne.n	800c1b6 <netif_add+0x26>
 800c1a4:	4b57      	ldr	r3, [pc, #348]	@ (800c304 <netif_add+0x174>)
 800c1a6:	f240 1227 	movw	r2, #295	@ 0x127
 800c1aa:	4957      	ldr	r1, [pc, #348]	@ (800c308 <netif_add+0x178>)
 800c1ac:	4857      	ldr	r0, [pc, #348]	@ (800c30c <netif_add+0x17c>)
 800c1ae:	f7f4 ffad 	bl	800110c <printf>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	e0a2      	b.n	800c2fc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d108      	bne.n	800c1ce <netif_add+0x3e>
 800c1bc:	4b51      	ldr	r3, [pc, #324]	@ (800c304 <netif_add+0x174>)
 800c1be:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c1c2:	4953      	ldr	r1, [pc, #332]	@ (800c310 <netif_add+0x180>)
 800c1c4:	4851      	ldr	r0, [pc, #324]	@ (800c30c <netif_add+0x17c>)
 800c1c6:	f7f4 ffa1 	bl	800110c <printf>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	e096      	b.n	800c2fc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c1d4:	4b4f      	ldr	r3, [pc, #316]	@ (800c314 <netif_add+0x184>)
 800c1d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c1de:	4b4d      	ldr	r3, [pc, #308]	@ (800c314 <netif_add+0x184>)
 800c1e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c1e8:	4b4a      	ldr	r3, [pc, #296]	@ (800c314 <netif_add+0x184>)
 800c1ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4a45      	ldr	r2, [pc, #276]	@ (800c318 <netif_add+0x188>)
 800c202:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2200      	movs	r2, #0
 800c208:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6a3a      	ldr	r2, [r7, #32]
 800c21c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c21e:	4b3f      	ldr	r3, [pc, #252]	@ (800c31c <netif_add+0x18c>)
 800c220:	781a      	ldrb	r2, [r3, #0]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c22c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	68b9      	ldr	r1, [r7, #8]
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f000 f913 	bl	800c460 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	4798      	blx	r3
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <netif_add+0xba>
    return NULL;
 800c246:	2300      	movs	r3, #0
 800c248:	e058      	b.n	800c2fc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c250:	2bff      	cmp	r3, #255	@ 0xff
 800c252:	d103      	bne.n	800c25c <netif_add+0xcc>
        netif->num = 0;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c260:	4b2f      	ldr	r3, [pc, #188]	@ (800c320 <netif_add+0x190>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	617b      	str	r3, [r7, #20]
 800c266:	e02b      	b.n	800c2c0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d106      	bne.n	800c27e <netif_add+0xee>
 800c270:	4b24      	ldr	r3, [pc, #144]	@ (800c304 <netif_add+0x174>)
 800c272:	f240 128b 	movw	r2, #395	@ 0x18b
 800c276:	492b      	ldr	r1, [pc, #172]	@ (800c324 <netif_add+0x194>)
 800c278:	4824      	ldr	r0, [pc, #144]	@ (800c30c <netif_add+0x17c>)
 800c27a:	f7f4 ff47 	bl	800110c <printf>
        num_netifs++;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	3301      	adds	r3, #1
 800c282:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	2bff      	cmp	r3, #255	@ 0xff
 800c288:	dd06      	ble.n	800c298 <netif_add+0x108>
 800c28a:	4b1e      	ldr	r3, [pc, #120]	@ (800c304 <netif_add+0x174>)
 800c28c:	f240 128d 	movw	r2, #397	@ 0x18d
 800c290:	4925      	ldr	r1, [pc, #148]	@ (800c328 <netif_add+0x198>)
 800c292:	481e      	ldr	r0, [pc, #120]	@ (800c30c <netif_add+0x17c>)
 800c294:	f7f4 ff3a 	bl	800110c <printf>
        if (netif2->num == netif->num) {
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d108      	bne.n	800c2ba <netif_add+0x12a>
          netif->num++;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c2b8:	e005      	b.n	800c2c6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	617b      	str	r3, [r7, #20]
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1d0      	bne.n	800c268 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1be      	bne.n	800c24a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2d2:	2bfe      	cmp	r3, #254	@ 0xfe
 800c2d4:	d103      	bne.n	800c2de <netif_add+0x14e>
    netif_num = 0;
 800c2d6:	4b11      	ldr	r3, [pc, #68]	@ (800c31c <netif_add+0x18c>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	701a      	strb	r2, [r3, #0]
 800c2dc:	e006      	b.n	800c2ec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c31c <netif_add+0x18c>)
 800c2ea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c2ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c320 <netif_add+0x190>)
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c2f4:	4a0a      	ldr	r2, [pc, #40]	@ (800c320 <netif_add+0x190>)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	08018754 	.word	0x08018754
 800c308:	080187e8 	.word	0x080187e8
 800c30c:	080187a4 	.word	0x080187a4
 800c310:	08018804 	.word	0x08018804
 800c314:	0801aed0 	.word	0x0801aed0
 800c318:	0800c73b 	.word	0x0800c73b
 800c31c:	2000c5a0 	.word	0x2000c5a0
 800c320:	2000c598 	.word	0x2000c598
 800c324:	08018828 	.word	0x08018828
 800c328:	0801883c 	.word	0x0801883c

0800c32c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f002 fe07 	bl	800ef4c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f007 fd21 	bl	8013d88 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c346:	bf00      	nop
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
	...

0800c350 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d106      	bne.n	800c370 <netif_do_set_ipaddr+0x20>
 800c362:	4b1d      	ldr	r3, [pc, #116]	@ (800c3d8 <netif_do_set_ipaddr+0x88>)
 800c364:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c368:	491c      	ldr	r1, [pc, #112]	@ (800c3dc <netif_do_set_ipaddr+0x8c>)
 800c36a:	481d      	ldr	r0, [pc, #116]	@ (800c3e0 <netif_do_set_ipaddr+0x90>)
 800c36c:	f7f4 fece 	bl	800110c <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d106      	bne.n	800c384 <netif_do_set_ipaddr+0x34>
 800c376:	4b18      	ldr	r3, [pc, #96]	@ (800c3d8 <netif_do_set_ipaddr+0x88>)
 800c378:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c37c:	4917      	ldr	r1, [pc, #92]	@ (800c3dc <netif_do_set_ipaddr+0x8c>)
 800c37e:	4818      	ldr	r0, [pc, #96]	@ (800c3e0 <netif_do_set_ipaddr+0x90>)
 800c380:	f7f4 fec4 	bl	800110c <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3304      	adds	r3, #4
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d01c      	beq.n	800c3cc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3304      	adds	r3, #4
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c3a2:	f107 0314 	add.w	r3, r7, #20
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7ff ffbf 	bl	800c32c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d002      	beq.n	800c3ba <netif_do_set_ipaddr+0x6a>
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	e000      	b.n	800c3bc <netif_do_set_ipaddr+0x6c>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f000 f8d2 	bl	800c56c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e000      	b.n	800c3ce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	08018754 	.word	0x08018754
 800c3dc:	0801886c 	.word	0x0801886c
 800c3e0:	080187a4 	.word	0x080187a4

0800c3e4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d00a      	beq.n	800c414 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <netif_do_set_netmask+0x26>
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	e000      	b.n	800c40c <netif_do_set_netmask+0x28>
 800c40a:	2300      	movs	r3, #0
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c410:	2301      	movs	r3, #1
 800c412:	e000      	b.n	800c416 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3714      	adds	r7, #20
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c422:	b480      	push	{r7}
 800c424:	b085      	sub	sp, #20
 800c426:	af00      	add	r7, sp, #0
 800c428:	60f8      	str	r0, [r7, #12]
 800c42a:	60b9      	str	r1, [r7, #8]
 800c42c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	330c      	adds	r3, #12
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d00a      	beq.n	800c452 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d002      	beq.n	800c448 <netif_do_set_gw+0x26>
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	e000      	b.n	800c44a <netif_do_set_gw+0x28>
 800c448:	2300      	movs	r3, #0
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c44e:	2301      	movs	r3, #1
 800c450:	e000      	b.n	800c454 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
 800c46c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c46e:	2300      	movs	r3, #0
 800c470:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c472:	2300      	movs	r3, #0
 800c474:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d101      	bne.n	800c480 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c47c:	4b1c      	ldr	r3, [pc, #112]	@ (800c4f0 <netif_set_addr+0x90>)
 800c47e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c486:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f0 <netif_set_addr+0x90>)
 800c488:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c490:	4b17      	ldr	r3, [pc, #92]	@ (800c4f0 <netif_set_addr+0x90>)
 800c492:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <netif_set_addr+0x42>
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <netif_set_addr+0x46>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e000      	b.n	800c4a8 <netif_set_addr+0x48>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d006      	beq.n	800c4be <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c4b0:	f107 0310 	add.w	r3, r7, #16
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	68b9      	ldr	r1, [r7, #8]
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f7ff ff49 	bl	800c350 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c4be:	69fa      	ldr	r2, [r7, #28]
 800c4c0:	6879      	ldr	r1, [r7, #4]
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f7ff ff8e 	bl	800c3e4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c4c8:	69ba      	ldr	r2, [r7, #24]
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f7ff ffa8 	bl	800c422 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d106      	bne.n	800c4e6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c4d8:	f107 0310 	add.w	r3, r7, #16
 800c4dc:	461a      	mov	r2, r3
 800c4de:	68b9      	ldr	r1, [r7, #8]
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7ff ff35 	bl	800c350 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c4e6:	bf00      	nop
 800c4e8:	3720      	adds	r7, #32
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0801aed0 	.word	0x0801aed0

0800c4f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c4fc:	4a04      	ldr	r2, [pc, #16]	@ (800c510 <netif_set_default+0x1c>)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c502:	bf00      	nop
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	2000c59c 	.word	0x2000c59c

0800c514 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d107      	bne.n	800c532 <netif_set_up+0x1e>
 800c522:	4b0f      	ldr	r3, [pc, #60]	@ (800c560 <netif_set_up+0x4c>)
 800c524:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c528:	490e      	ldr	r1, [pc, #56]	@ (800c564 <netif_set_up+0x50>)
 800c52a:	480f      	ldr	r0, [pc, #60]	@ (800c568 <netif_set_up+0x54>)
 800c52c:	f7f4 fdee 	bl	800110c <printf>
 800c530:	e013      	b.n	800c55a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c538:	f003 0301 	and.w	r3, r3, #1
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10c      	bne.n	800c55a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c546:	f043 0301 	orr.w	r3, r3, #1
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c552:	2103      	movs	r1, #3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f809 	bl	800c56c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	08018754 	.word	0x08018754
 800c564:	080188dc 	.word	0x080188dc
 800c568:	080187a4 	.word	0x080187a4

0800c56c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	460b      	mov	r3, r1
 800c576:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d106      	bne.n	800c58c <netif_issue_reports+0x20>
 800c57e:	4b18      	ldr	r3, [pc, #96]	@ (800c5e0 <netif_issue_reports+0x74>)
 800c580:	f240 326d 	movw	r2, #877	@ 0x36d
 800c584:	4917      	ldr	r1, [pc, #92]	@ (800c5e4 <netif_issue_reports+0x78>)
 800c586:	4818      	ldr	r0, [pc, #96]	@ (800c5e8 <netif_issue_reports+0x7c>)
 800c588:	f7f4 fdc0 	bl	800110c <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c592:	f003 0304 	and.w	r3, r3, #4
 800c596:	2b00      	cmp	r3, #0
 800c598:	d01e      	beq.n	800c5d8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c5a0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d017      	beq.n	800c5d8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c5a8:	78fb      	ldrb	r3, [r7, #3]
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d013      	beq.n	800c5da <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00e      	beq.n	800c5da <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c5c2:	f003 0308 	and.w	r3, r3, #8
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d007      	beq.n	800c5da <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f008 fb43 	bl	8014c5c <etharp_request>
 800c5d6:	e000      	b.n	800c5da <netif_issue_reports+0x6e>
    return;
 800c5d8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	08018754 	.word	0x08018754
 800c5e4:	080188f8 	.word	0x080188f8
 800c5e8:	080187a4 	.word	0x080187a4

0800c5ec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d107      	bne.n	800c60a <netif_set_down+0x1e>
 800c5fa:	4b12      	ldr	r3, [pc, #72]	@ (800c644 <netif_set_down+0x58>)
 800c5fc:	f240 329b 	movw	r2, #923	@ 0x39b
 800c600:	4911      	ldr	r1, [pc, #68]	@ (800c648 <netif_set_down+0x5c>)
 800c602:	4812      	ldr	r0, [pc, #72]	@ (800c64c <netif_set_down+0x60>)
 800c604:	f7f4 fd82 	bl	800110c <printf>
 800c608:	e019      	b.n	800c63e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	d012      	beq.n	800c63e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c61e:	f023 0301 	bic.w	r3, r3, #1
 800c622:	b2da      	uxtb	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c630:	f003 0308 	and.w	r3, r3, #8
 800c634:	2b00      	cmp	r3, #0
 800c636:	d002      	beq.n	800c63e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f007 fecd 	bl	80143d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	08018754 	.word	0x08018754
 800c648:	0801891c 	.word	0x0801891c
 800c64c:	080187a4 	.word	0x080187a4

0800c650 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d107      	bne.n	800c66e <netif_set_link_up+0x1e>
 800c65e:	4b13      	ldr	r3, [pc, #76]	@ (800c6ac <netif_set_link_up+0x5c>)
 800c660:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c664:	4912      	ldr	r1, [pc, #72]	@ (800c6b0 <netif_set_link_up+0x60>)
 800c666:	4813      	ldr	r0, [pc, #76]	@ (800c6b4 <netif_set_link_up+0x64>)
 800c668:	f7f4 fd50 	bl	800110c <printf>
 800c66c:	e01b      	b.n	800c6a6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d114      	bne.n	800c6a6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c682:	f043 0304 	orr.w	r3, r3, #4
 800c686:	b2da      	uxtb	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c68e:	2103      	movs	r1, #3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff ff6b 	bl	800c56c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d003      	beq.n	800c6a6 <netif_set_link_up+0x56>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	69db      	ldr	r3, [r3, #28]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	08018754 	.word	0x08018754
 800c6b0:	0801893c 	.word	0x0801893c
 800c6b4:	080187a4 	.word	0x080187a4

0800c6b8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d107      	bne.n	800c6d6 <netif_set_link_down+0x1e>
 800c6c6:	4b11      	ldr	r3, [pc, #68]	@ (800c70c <netif_set_link_down+0x54>)
 800c6c8:	f240 4206 	movw	r2, #1030	@ 0x406
 800c6cc:	4910      	ldr	r1, [pc, #64]	@ (800c710 <netif_set_link_down+0x58>)
 800c6ce:	4811      	ldr	r0, [pc, #68]	@ (800c714 <netif_set_link_down+0x5c>)
 800c6d0:	f7f4 fd1c 	bl	800110c <printf>
 800c6d4:	e017      	b.n	800c706 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6dc:	f003 0304 	and.w	r3, r3, #4
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d010      	beq.n	800c706 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6ea:	f023 0304 	bic.w	r3, r3, #4
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d003      	beq.n	800c706 <netif_set_link_down+0x4e>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	69db      	ldr	r3, [r3, #28]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	08018754 	.word	0x08018754
 800c710:	08018960 	.word	0x08018960
 800c714:	080187a4 	.word	0x080187a4

0800c718 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	61da      	str	r2, [r3, #28]
  }
}
 800c72e:	bf00      	nop
 800c730:	370c      	adds	r7, #12
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b085      	sub	sp, #20
 800c73e:	af00      	add	r7, sp, #0
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c746:	f06f 030b 	mvn.w	r3, #11
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
	...

0800c758 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c762:	79fb      	ldrb	r3, [r7, #7]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d013      	beq.n	800c790 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c768:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a0 <netif_get_by_index+0x48>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	60fb      	str	r3, [r7, #12]
 800c76e:	e00c      	b.n	800c78a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c776:	3301      	adds	r3, #1
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	79fa      	ldrb	r2, [r7, #7]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d101      	bne.n	800c784 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	e006      	b.n	800c792 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1ef      	bne.n	800c770 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	2000c598 	.word	0x2000c598

0800c7a4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c7aa:	f009 ffa7 	bl	80166fc <sys_arch_protect>
 800c7ae:	6038      	str	r0, [r7, #0]
 800c7b0:	4b0d      	ldr	r3, [pc, #52]	@ (800c7e8 <pbuf_free_ooseq+0x44>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	701a      	strb	r2, [r3, #0]
 800c7b6:	6838      	ldr	r0, [r7, #0]
 800c7b8:	f009 ffae 	bl	8016718 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800c7ec <pbuf_free_ooseq+0x48>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	607b      	str	r3, [r7, #4]
 800c7c2:	e00a      	b.n	800c7da <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f002 fbfb 	bl	800efc8 <tcp_free_ooseq>
      return;
 800c7d2:	e005      	b.n	800c7e0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	607b      	str	r3, [r7, #4]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1f1      	bne.n	800c7c4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	2000c5a1 	.word	0x2000c5a1
 800c7ec:	2000c5b0 	.word	0x2000c5b0

0800c7f0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c7f8:	f7ff ffd4 	bl	800c7a4 <pbuf_free_ooseq>
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c80a:	f009 ff77 	bl	80166fc <sys_arch_protect>
 800c80e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c810:	4b0f      	ldr	r3, [pc, #60]	@ (800c850 <pbuf_pool_is_empty+0x4c>)
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c816:	4b0e      	ldr	r3, [pc, #56]	@ (800c850 <pbuf_pool_is_empty+0x4c>)
 800c818:	2201      	movs	r2, #1
 800c81a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f009 ff7b 	bl	8016718 <sys_arch_unprotect>

  if (!queued) {
 800c822:	78fb      	ldrb	r3, [r7, #3]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10f      	bne.n	800c848 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c828:	2100      	movs	r1, #0
 800c82a:	480a      	ldr	r0, [pc, #40]	@ (800c854 <pbuf_pool_is_empty+0x50>)
 800c82c:	f7fe fe90 	bl	800b550 <tcpip_try_callback>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d008      	beq.n	800c848 <pbuf_pool_is_empty+0x44>
 800c836:	f009 ff61 	bl	80166fc <sys_arch_protect>
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	4b04      	ldr	r3, [pc, #16]	@ (800c850 <pbuf_pool_is_empty+0x4c>)
 800c83e:	2200      	movs	r2, #0
 800c840:	701a      	strb	r2, [r3, #0]
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f009 ff68 	bl	8016718 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c848:	bf00      	nop
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	2000c5a1 	.word	0x2000c5a1
 800c854:	0800c7f1 	.word	0x0800c7f1

0800c858 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4611      	mov	r1, r2
 800c864:	461a      	mov	r2, r3
 800c866:	460b      	mov	r3, r1
 800c868:	80fb      	strh	r3, [r7, #6]
 800c86a:	4613      	mov	r3, r2
 800c86c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	88fa      	ldrh	r2, [r7, #6]
 800c87e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	88ba      	ldrh	r2, [r7, #4]
 800c884:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c886:	8b3b      	ldrh	r3, [r7, #24]
 800c888:	b2da      	uxtb	r2, r3
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	7f3a      	ldrb	r2, [r7, #28]
 800c892:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2201      	movs	r2, #1
 800c898:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2200      	movs	r2, #0
 800c89e:	73da      	strb	r2, [r3, #15]
}
 800c8a0:	bf00      	nop
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08c      	sub	sp, #48	@ 0x30
 800c8b0:	af02      	add	r7, sp, #8
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	71fb      	strb	r3, [r7, #7]
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	80bb      	strh	r3, [r7, #4]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c8be:	79fb      	ldrb	r3, [r7, #7]
 800c8c0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c8c2:	887b      	ldrh	r3, [r7, #2]
 800c8c4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c8c8:	d07f      	beq.n	800c9ca <pbuf_alloc+0x11e>
 800c8ca:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c8ce:	f300 80c8 	bgt.w	800ca62 <pbuf_alloc+0x1b6>
 800c8d2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c8d6:	d010      	beq.n	800c8fa <pbuf_alloc+0x4e>
 800c8d8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c8dc:	f300 80c1 	bgt.w	800ca62 <pbuf_alloc+0x1b6>
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d002      	beq.n	800c8ea <pbuf_alloc+0x3e>
 800c8e4:	2b41      	cmp	r3, #65	@ 0x41
 800c8e6:	f040 80bc 	bne.w	800ca62 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c8ea:	887a      	ldrh	r2, [r7, #2]
 800c8ec:	88bb      	ldrh	r3, [r7, #4]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	f000 f8d1 	bl	800ca98 <pbuf_alloc_reference>
 800c8f6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c8f8:	e0bd      	b.n	800ca76 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c902:	88bb      	ldrh	r3, [r7, #4]
 800c904:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c906:	200c      	movs	r0, #12
 800c908:	f7ff fb9a 	bl	800c040 <memp_malloc>
 800c90c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d109      	bne.n	800c928 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c914:	f7ff ff76 	bl	800c804 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c91e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c920:	f000 faa8 	bl	800ce74 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c924:	2300      	movs	r3, #0
 800c926:	e0a7      	b.n	800ca78 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c928:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c92a:	3303      	adds	r3, #3
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	f023 0303 	bic.w	r3, r3, #3
 800c932:	b29b      	uxth	r3, r3
 800c934:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c938:	b29b      	uxth	r3, r3
 800c93a:	8b7a      	ldrh	r2, [r7, #26]
 800c93c:	4293      	cmp	r3, r2
 800c93e:	bf28      	it	cs
 800c940:	4613      	movcs	r3, r2
 800c942:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c944:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c946:	3310      	adds	r3, #16
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	4413      	add	r3, r2
 800c94c:	3303      	adds	r3, #3
 800c94e:	f023 0303 	bic.w	r3, r3, #3
 800c952:	4618      	mov	r0, r3
 800c954:	89f9      	ldrh	r1, [r7, #14]
 800c956:	8b7a      	ldrh	r2, [r7, #26]
 800c958:	2300      	movs	r3, #0
 800c95a:	9301      	str	r3, [sp, #4]
 800c95c:	887b      	ldrh	r3, [r7, #2]
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	460b      	mov	r3, r1
 800c962:	4601      	mov	r1, r0
 800c964:	6938      	ldr	r0, [r7, #16]
 800c966:	f7ff ff77 	bl	800c858 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	f003 0303 	and.w	r3, r3, #3
 800c972:	2b00      	cmp	r3, #0
 800c974:	d006      	beq.n	800c984 <pbuf_alloc+0xd8>
 800c976:	4b42      	ldr	r3, [pc, #264]	@ (800ca80 <pbuf_alloc+0x1d4>)
 800c978:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c97c:	4941      	ldr	r1, [pc, #260]	@ (800ca84 <pbuf_alloc+0x1d8>)
 800c97e:	4842      	ldr	r0, [pc, #264]	@ (800ca88 <pbuf_alloc+0x1dc>)
 800c980:	f7f4 fbc4 	bl	800110c <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c984:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c986:	3303      	adds	r3, #3
 800c988:	f023 0303 	bic.w	r3, r3, #3
 800c98c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c990:	d106      	bne.n	800c9a0 <pbuf_alloc+0xf4>
 800c992:	4b3b      	ldr	r3, [pc, #236]	@ (800ca80 <pbuf_alloc+0x1d4>)
 800c994:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c998:	493c      	ldr	r1, [pc, #240]	@ (800ca8c <pbuf_alloc+0x1e0>)
 800c99a:	483b      	ldr	r0, [pc, #236]	@ (800ca88 <pbuf_alloc+0x1dc>)
 800c99c:	f7f4 fbb6 	bl	800110c <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d102      	bne.n	800c9ac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9aa:	e002      	b.n	800c9b2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	693a      	ldr	r2, [r7, #16]
 800c9b0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c9b6:	8b7a      	ldrh	r2, [r7, #26]
 800c9b8:	89fb      	ldrh	r3, [r7, #14]
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c9c2:	8b7b      	ldrh	r3, [r7, #26]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d19e      	bne.n	800c906 <pbuf_alloc+0x5a>
      break;
 800c9c8:	e055      	b.n	800ca76 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c9ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9cc:	3303      	adds	r3, #3
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	f023 0303 	bic.w	r3, r3, #3
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	88bb      	ldrh	r3, [r7, #4]
 800c9d8:	3303      	adds	r3, #3
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	f023 0303 	bic.w	r3, r3, #3
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	4413      	add	r3, r2
 800c9e4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c9e6:	8b3b      	ldrh	r3, [r7, #24]
 800c9e8:	3310      	adds	r3, #16
 800c9ea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c9ec:	8b3a      	ldrh	r2, [r7, #24]
 800c9ee:	88bb      	ldrh	r3, [r7, #4]
 800c9f0:	3303      	adds	r3, #3
 800c9f2:	f023 0303 	bic.w	r3, r3, #3
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d306      	bcc.n	800ca08 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c9fa:	8afa      	ldrh	r2, [r7, #22]
 800c9fc:	88bb      	ldrh	r3, [r7, #4]
 800c9fe:	3303      	adds	r3, #3
 800ca00:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d201      	bcs.n	800ca0c <pbuf_alloc+0x160>
        return NULL;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e035      	b.n	800ca78 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ca0c:	8afb      	ldrh	r3, [r7, #22]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff f972 	bl	800bcf8 <mem_malloc>
 800ca14:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ca16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d101      	bne.n	800ca20 <pbuf_alloc+0x174>
        return NULL;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	e02b      	b.n	800ca78 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ca20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca22:	3310      	adds	r3, #16
 800ca24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca26:	4413      	add	r3, r2
 800ca28:	3303      	adds	r3, #3
 800ca2a:	f023 0303 	bic.w	r3, r3, #3
 800ca2e:	4618      	mov	r0, r3
 800ca30:	88b9      	ldrh	r1, [r7, #4]
 800ca32:	88ba      	ldrh	r2, [r7, #4]
 800ca34:	2300      	movs	r3, #0
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	887b      	ldrh	r3, [r7, #2]
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4601      	mov	r1, r0
 800ca40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca42:	f7ff ff09 	bl	800c858 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f003 0303 	and.w	r3, r3, #3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d010      	beq.n	800ca74 <pbuf_alloc+0x1c8>
 800ca52:	4b0b      	ldr	r3, [pc, #44]	@ (800ca80 <pbuf_alloc+0x1d4>)
 800ca54:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ca58:	490d      	ldr	r1, [pc, #52]	@ (800ca90 <pbuf_alloc+0x1e4>)
 800ca5a:	480b      	ldr	r0, [pc, #44]	@ (800ca88 <pbuf_alloc+0x1dc>)
 800ca5c:	f7f4 fb56 	bl	800110c <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ca60:	e008      	b.n	800ca74 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ca62:	4b07      	ldr	r3, [pc, #28]	@ (800ca80 <pbuf_alloc+0x1d4>)
 800ca64:	f240 1227 	movw	r2, #295	@ 0x127
 800ca68:	490a      	ldr	r1, [pc, #40]	@ (800ca94 <pbuf_alloc+0x1e8>)
 800ca6a:	4807      	ldr	r0, [pc, #28]	@ (800ca88 <pbuf_alloc+0x1dc>)
 800ca6c:	f7f4 fb4e 	bl	800110c <printf>
      return NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	e001      	b.n	800ca78 <pbuf_alloc+0x1cc>
      break;
 800ca74:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ca76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3728      	adds	r7, #40	@ 0x28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	08018984 	.word	0x08018984
 800ca84:	080189b4 	.word	0x080189b4
 800ca88:	080189e4 	.word	0x080189e4
 800ca8c:	08018a0c 	.word	0x08018a0c
 800ca90:	08018a40 	.word	0x08018a40
 800ca94:	08018a6c 	.word	0x08018a6c

0800ca98 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af02      	add	r7, sp, #8
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	807b      	strh	r3, [r7, #2]
 800caa4:	4613      	mov	r3, r2
 800caa6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800caa8:	883b      	ldrh	r3, [r7, #0]
 800caaa:	2b41      	cmp	r3, #65	@ 0x41
 800caac:	d009      	beq.n	800cac2 <pbuf_alloc_reference+0x2a>
 800caae:	883b      	ldrh	r3, [r7, #0]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d006      	beq.n	800cac2 <pbuf_alloc_reference+0x2a>
 800cab4:	4b0f      	ldr	r3, [pc, #60]	@ (800caf4 <pbuf_alloc_reference+0x5c>)
 800cab6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800caba:	490f      	ldr	r1, [pc, #60]	@ (800caf8 <pbuf_alloc_reference+0x60>)
 800cabc:	480f      	ldr	r0, [pc, #60]	@ (800cafc <pbuf_alloc_reference+0x64>)
 800cabe:	f7f4 fb25 	bl	800110c <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cac2:	200b      	movs	r0, #11
 800cac4:	f7ff fabc 	bl	800c040 <memp_malloc>
 800cac8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cad0:	2300      	movs	r3, #0
 800cad2:	e00b      	b.n	800caec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cad4:	8879      	ldrh	r1, [r7, #2]
 800cad6:	887a      	ldrh	r2, [r7, #2]
 800cad8:	2300      	movs	r3, #0
 800cada:	9301      	str	r3, [sp, #4]
 800cadc:	883b      	ldrh	r3, [r7, #0]
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	460b      	mov	r3, r1
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f7ff feb7 	bl	800c858 <pbuf_init_alloced_pbuf>
  return p;
 800caea:	68fb      	ldr	r3, [r7, #12]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	08018984 	.word	0x08018984
 800caf8:	08018a88 	.word	0x08018a88
 800cafc:	080189e4 	.word	0x080189e4

0800cb00 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b088      	sub	sp, #32
 800cb04:	af02      	add	r7, sp, #8
 800cb06:	607b      	str	r3, [r7, #4]
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73fb      	strb	r3, [r7, #15]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	81bb      	strh	r3, [r7, #12]
 800cb10:	4613      	mov	r3, r2
 800cb12:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cb14:	7bfb      	ldrb	r3, [r7, #15]
 800cb16:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cb18:	8a7b      	ldrh	r3, [r7, #18]
 800cb1a:	3303      	adds	r3, #3
 800cb1c:	f023 0203 	bic.w	r2, r3, #3
 800cb20:	89bb      	ldrh	r3, [r7, #12]
 800cb22:	441a      	add	r2, r3
 800cb24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d901      	bls.n	800cb2e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e018      	b.n	800cb60 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cb2e:	6a3b      	ldr	r3, [r7, #32]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d007      	beq.n	800cb44 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cb34:	8a7b      	ldrh	r3, [r7, #18]
 800cb36:	3303      	adds	r3, #3
 800cb38:	f023 0303 	bic.w	r3, r3, #3
 800cb3c:	6a3a      	ldr	r2, [r7, #32]
 800cb3e:	4413      	add	r3, r2
 800cb40:	617b      	str	r3, [r7, #20]
 800cb42:	e001      	b.n	800cb48 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	89b9      	ldrh	r1, [r7, #12]
 800cb4c:	89ba      	ldrh	r2, [r7, #12]
 800cb4e:	2302      	movs	r3, #2
 800cb50:	9301      	str	r3, [sp, #4]
 800cb52:	897b      	ldrh	r3, [r7, #10]
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	460b      	mov	r3, r1
 800cb58:	6979      	ldr	r1, [r7, #20]
 800cb5a:	f7ff fe7d 	bl	800c858 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cb5e:	687b      	ldr	r3, [r7, #4]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3718      	adds	r7, #24
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	460b      	mov	r3, r1
 800cb72:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <pbuf_realloc+0x20>
 800cb7a:	4b3a      	ldr	r3, [pc, #232]	@ (800cc64 <pbuf_realloc+0xfc>)
 800cb7c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800cb80:	4939      	ldr	r1, [pc, #228]	@ (800cc68 <pbuf_realloc+0x100>)
 800cb82:	483a      	ldr	r0, [pc, #232]	@ (800cc6c <pbuf_realloc+0x104>)
 800cb84:	f7f4 fac2 	bl	800110c <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	891b      	ldrh	r3, [r3, #8]
 800cb8c:	887a      	ldrh	r2, [r7, #2]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d263      	bcs.n	800cc5a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	891a      	ldrh	r2, [r3, #8]
 800cb96:	887b      	ldrh	r3, [r7, #2]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cb9c:	887b      	ldrh	r3, [r7, #2]
 800cb9e:	817b      	strh	r3, [r7, #10]
  q = p;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cba4:	e018      	b.n	800cbd8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	895b      	ldrh	r3, [r3, #10]
 800cbaa:	897a      	ldrh	r2, [r7, #10]
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	891a      	ldrh	r2, [r3, #8]
 800cbb4:	893b      	ldrh	r3, [r7, #8]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d106      	bne.n	800cbd8 <pbuf_realloc+0x70>
 800cbca:	4b26      	ldr	r3, [pc, #152]	@ (800cc64 <pbuf_realloc+0xfc>)
 800cbcc:	f240 12af 	movw	r2, #431	@ 0x1af
 800cbd0:	4927      	ldr	r1, [pc, #156]	@ (800cc70 <pbuf_realloc+0x108>)
 800cbd2:	4826      	ldr	r0, [pc, #152]	@ (800cc6c <pbuf_realloc+0x104>)
 800cbd4:	f7f4 fa9a 	bl	800110c <printf>
  while (rem_len > q->len) {
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	895b      	ldrh	r3, [r3, #10]
 800cbdc:	897a      	ldrh	r2, [r7, #10]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d8e1      	bhi.n	800cba6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	7b1b      	ldrb	r3, [r3, #12]
 800cbe6:	f003 030f 	and.w	r3, r3, #15
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d121      	bne.n	800cc32 <pbuf_realloc+0xca>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	895b      	ldrh	r3, [r3, #10]
 800cbf2:	897a      	ldrh	r2, [r7, #10]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d01c      	beq.n	800cc32 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	7b5b      	ldrb	r3, [r3, #13]
 800cbfc:	f003 0302 	and.w	r3, r3, #2
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d116      	bne.n	800cc32 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	685a      	ldr	r2, [r3, #4]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	1ad3      	subs	r3, r2, r3
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	897b      	ldrh	r3, [r7, #10]
 800cc10:	4413      	add	r3, r2
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	4619      	mov	r1, r3
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f7fe ff64 	bl	800bae4 <mem_trim>
 800cc1c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d106      	bne.n	800cc32 <pbuf_realloc+0xca>
 800cc24:	4b0f      	ldr	r3, [pc, #60]	@ (800cc64 <pbuf_realloc+0xfc>)
 800cc26:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800cc2a:	4912      	ldr	r1, [pc, #72]	@ (800cc74 <pbuf_realloc+0x10c>)
 800cc2c:	480f      	ldr	r0, [pc, #60]	@ (800cc6c <pbuf_realloc+0x104>)
 800cc2e:	f7f4 fa6d 	bl	800110c <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	897a      	ldrh	r2, [r7, #10]
 800cc36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	895a      	ldrh	r2, [r3, #10]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d004      	beq.n	800cc52 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f000 f911 	bl	800ce74 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	601a      	str	r2, [r3, #0]
 800cc58:	e000      	b.n	800cc5c <pbuf_realloc+0xf4>
    return;
 800cc5a:	bf00      	nop

}
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	08018984 	.word	0x08018984
 800cc68:	08018a9c 	.word	0x08018a9c
 800cc6c:	080189e4 	.word	0x080189e4
 800cc70:	08018ab4 	.word	0x08018ab4
 800cc74:	08018acc 	.word	0x08018acc

0800cc78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	4613      	mov	r3, r2
 800cc84:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d106      	bne.n	800cc9a <pbuf_add_header_impl+0x22>
 800cc8c:	4b2b      	ldr	r3, [pc, #172]	@ (800cd3c <pbuf_add_header_impl+0xc4>)
 800cc8e:	f240 12df 	movw	r2, #479	@ 0x1df
 800cc92:	492b      	ldr	r1, [pc, #172]	@ (800cd40 <pbuf_add_header_impl+0xc8>)
 800cc94:	482b      	ldr	r0, [pc, #172]	@ (800cd44 <pbuf_add_header_impl+0xcc>)
 800cc96:	f7f4 fa39 	bl	800110c <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d003      	beq.n	800cca8 <pbuf_add_header_impl+0x30>
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cca6:	d301      	bcc.n	800ccac <pbuf_add_header_impl+0x34>
    return 1;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e043      	b.n	800cd34 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <pbuf_add_header_impl+0x3e>
    return 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	e03e      	b.n	800cd34 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	891a      	ldrh	r2, [r3, #8]
 800ccbe:	8a7b      	ldrh	r3, [r7, #18]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	8a7a      	ldrh	r2, [r7, #18]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d901      	bls.n	800ccce <pbuf_add_header_impl+0x56>
    return 1;
 800ccca:	2301      	movs	r3, #1
 800cccc:	e032      	b.n	800cd34 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	7b1b      	ldrb	r3, [r3, #12]
 800ccd2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ccd4:	8a3b      	ldrh	r3, [r7, #16]
 800ccd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00c      	beq.n	800ccf8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	685a      	ldr	r2, [r3, #4]
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	425b      	negs	r3, r3
 800cce6:	4413      	add	r3, r2
 800cce8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3310      	adds	r3, #16
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d20d      	bcs.n	800cd10 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e01d      	b.n	800cd34 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d006      	beq.n	800cd0c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	425b      	negs	r3, r3
 800cd06:	4413      	add	r3, r2
 800cd08:	617b      	str	r3, [r7, #20]
 800cd0a:	e001      	b.n	800cd10 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e011      	b.n	800cd34 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	895a      	ldrh	r2, [r3, #10]
 800cd1a:	8a7b      	ldrh	r3, [r7, #18]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	891a      	ldrh	r2, [r3, #8]
 800cd28:	8a7b      	ldrh	r3, [r7, #18]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	811a      	strh	r2, [r3, #8]


  return 0;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	08018984 	.word	0x08018984
 800cd40:	08018ae8 	.word	0x08018ae8
 800cd44:	080189e4 	.word	0x080189e4

0800cd48 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cd52:	2200      	movs	r2, #0
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7ff ff8e 	bl	800cc78 <pbuf_add_header_impl>
 800cd5c:	4603      	mov	r3, r0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
	...

0800cd68 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <pbuf_remove_header+0x1e>
 800cd78:	4b20      	ldr	r3, [pc, #128]	@ (800cdfc <pbuf_remove_header+0x94>)
 800cd7a:	f240 224b 	movw	r2, #587	@ 0x24b
 800cd7e:	4920      	ldr	r1, [pc, #128]	@ (800ce00 <pbuf_remove_header+0x98>)
 800cd80:	4820      	ldr	r0, [pc, #128]	@ (800ce04 <pbuf_remove_header+0x9c>)
 800cd82:	f7f4 f9c3 	bl	800110c <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d003      	beq.n	800cd94 <pbuf_remove_header+0x2c>
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd92:	d301      	bcc.n	800cd98 <pbuf_remove_header+0x30>
    return 1;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e02c      	b.n	800cdf2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <pbuf_remove_header+0x3a>
    return 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	e027      	b.n	800cdf2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	895b      	ldrh	r3, [r3, #10]
 800cdaa:	89fa      	ldrh	r2, [r7, #14]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d908      	bls.n	800cdc2 <pbuf_remove_header+0x5a>
 800cdb0:	4b12      	ldr	r3, [pc, #72]	@ (800cdfc <pbuf_remove_header+0x94>)
 800cdb2:	f240 2255 	movw	r2, #597	@ 0x255
 800cdb6:	4914      	ldr	r1, [pc, #80]	@ (800ce08 <pbuf_remove_header+0xa0>)
 800cdb8:	4812      	ldr	r0, [pc, #72]	@ (800ce04 <pbuf_remove_header+0x9c>)
 800cdba:	f7f4 f9a7 	bl	800110c <printf>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e017      	b.n	800cdf2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	441a      	add	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	895a      	ldrh	r2, [r3, #10]
 800cdd8:	89fb      	ldrh	r3, [r7, #14]
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	891a      	ldrh	r2, [r3, #8]
 800cde6:	89fb      	ldrh	r3, [r7, #14]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	08018984 	.word	0x08018984
 800ce00:	08018ae8 	.word	0x08018ae8
 800ce04:	080189e4 	.word	0x080189e4
 800ce08:	08018af4 	.word	0x08018af4

0800ce0c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	460b      	mov	r3, r1
 800ce16:	807b      	strh	r3, [r7, #2]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ce1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	da08      	bge.n	800ce36 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ce24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce28:	425b      	negs	r3, r3
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f7ff ff9b 	bl	800cd68 <pbuf_remove_header>
 800ce32:	4603      	mov	r3, r0
 800ce34:	e007      	b.n	800ce46 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ce36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce3a:	787a      	ldrb	r2, [r7, #1]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff ff1a 	bl	800cc78 <pbuf_add_header_impl>
 800ce44:	4603      	mov	r3, r0
  }
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b082      	sub	sp, #8
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	460b      	mov	r3, r1
 800ce58:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ce5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff ffd2 	bl	800ce0c <pbuf_header_impl>
 800ce68:	4603      	mov	r3, r0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
	...

0800ce74 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b088      	sub	sp, #32
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10b      	bne.n	800ce9a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d106      	bne.n	800ce96 <pbuf_free+0x22>
 800ce88:	4b3b      	ldr	r3, [pc, #236]	@ (800cf78 <pbuf_free+0x104>)
 800ce8a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ce8e:	493b      	ldr	r1, [pc, #236]	@ (800cf7c <pbuf_free+0x108>)
 800ce90:	483b      	ldr	r0, [pc, #236]	@ (800cf80 <pbuf_free+0x10c>)
 800ce92:	f7f4 f93b 	bl	800110c <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	e069      	b.n	800cf6e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ce9e:	e062      	b.n	800cf66 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cea0:	f009 fc2c 	bl	80166fc <sys_arch_protect>
 800cea4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	7b9b      	ldrb	r3, [r3, #14]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <pbuf_free+0x48>
 800ceae:	4b32      	ldr	r3, [pc, #200]	@ (800cf78 <pbuf_free+0x104>)
 800ceb0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800ceb4:	4933      	ldr	r1, [pc, #204]	@ (800cf84 <pbuf_free+0x110>)
 800ceb6:	4832      	ldr	r0, [pc, #200]	@ (800cf80 <pbuf_free+0x10c>)
 800ceb8:	f7f4 f928 	bl	800110c <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	7b9b      	ldrb	r3, [r3, #14]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	739a      	strb	r2, [r3, #14]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7b9b      	ldrb	r3, [r3, #14]
 800cecc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cece:	69b8      	ldr	r0, [r7, #24]
 800ced0:	f009 fc22 	bl	8016718 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d143      	bne.n	800cf62 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7b1b      	ldrb	r3, [r3, #12]
 800cee4:	f003 030f 	and.w	r3, r3, #15
 800cee8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	7b5b      	ldrb	r3, [r3, #13]
 800ceee:	f003 0302 	and.w	r3, r3, #2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d011      	beq.n	800cf1a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d106      	bne.n	800cf10 <pbuf_free+0x9c>
 800cf02:	4b1d      	ldr	r3, [pc, #116]	@ (800cf78 <pbuf_free+0x104>)
 800cf04:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800cf08:	491f      	ldr	r1, [pc, #124]	@ (800cf88 <pbuf_free+0x114>)
 800cf0a:	481d      	ldr	r0, [pc, #116]	@ (800cf80 <pbuf_free+0x10c>)
 800cf0c:	f7f4 f8fe 	bl	800110c <printf>
        pc->custom_free_function(p);
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	691b      	ldr	r3, [r3, #16]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	4798      	blx	r3
 800cf18:	e01d      	b.n	800cf56 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cf1a:	7bfb      	ldrb	r3, [r7, #15]
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d104      	bne.n	800cf2a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	200c      	movs	r0, #12
 800cf24:	f7ff f902 	bl	800c12c <memp_free>
 800cf28:	e015      	b.n	800cf56 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cf2a:	7bfb      	ldrb	r3, [r7, #15]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d104      	bne.n	800cf3a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cf30:	6879      	ldr	r1, [r7, #4]
 800cf32:	200b      	movs	r0, #11
 800cf34:	f7ff f8fa 	bl	800c12c <memp_free>
 800cf38:	e00d      	b.n	800cf56 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cf3a:	7bfb      	ldrb	r3, [r7, #15]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d103      	bne.n	800cf48 <pbuf_free+0xd4>
          mem_free(p);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7fe fd3f 	bl	800b9c4 <mem_free>
 800cf46:	e006      	b.n	800cf56 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cf48:	4b0b      	ldr	r3, [pc, #44]	@ (800cf78 <pbuf_free+0x104>)
 800cf4a:	f240 320f 	movw	r2, #783	@ 0x30f
 800cf4e:	490f      	ldr	r1, [pc, #60]	@ (800cf8c <pbuf_free+0x118>)
 800cf50:	480b      	ldr	r0, [pc, #44]	@ (800cf80 <pbuf_free+0x10c>)
 800cf52:	f7f4 f8db 	bl	800110c <printf>
        }
      }
      count++;
 800cf56:	7ffb      	ldrb	r3, [r7, #31]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	607b      	str	r3, [r7, #4]
 800cf60:	e001      	b.n	800cf66 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d199      	bne.n	800cea0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cf6c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3720      	adds	r7, #32
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	08018984 	.word	0x08018984
 800cf7c:	08018ae8 	.word	0x08018ae8
 800cf80:	080189e4 	.word	0x080189e4
 800cf84:	08018b14 	.word	0x08018b14
 800cf88:	08018b2c 	.word	0x08018b2c
 800cf8c:	08018b50 	.word	0x08018b50

0800cf90 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cf9c:	e005      	b.n	800cfaa <pbuf_clen+0x1a>
    ++len;
 800cf9e:	89fb      	ldrh	r3, [r7, #14]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1f6      	bne.n	800cf9e <pbuf_clen+0xe>
  }
  return len;
 800cfb0:	89fb      	ldrh	r3, [r7, #14]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
	...

0800cfc0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d016      	beq.n	800cffc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cfce:	f009 fb95 	bl	80166fc <sys_arch_protect>
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	7b9b      	ldrb	r3, [r3, #14]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	739a      	strb	r2, [r3, #14]
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f009 fb99 	bl	8016718 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7b9b      	ldrb	r3, [r3, #14]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <pbuf_ref+0x3c>
 800cfee:	4b05      	ldr	r3, [pc, #20]	@ (800d004 <pbuf_ref+0x44>)
 800cff0:	f240 3242 	movw	r2, #834	@ 0x342
 800cff4:	4904      	ldr	r1, [pc, #16]	@ (800d008 <pbuf_ref+0x48>)
 800cff6:	4805      	ldr	r0, [pc, #20]	@ (800d00c <pbuf_ref+0x4c>)
 800cff8:	f7f4 f888 	bl	800110c <printf>
  }
}
 800cffc:	bf00      	nop
 800cffe:	3710      	adds	r7, #16
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	08018984 	.word	0x08018984
 800d008:	08018b64 	.word	0x08018b64
 800d00c:	080189e4 	.word	0x080189e4

0800d010 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <pbuf_cat+0x16>
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d107      	bne.n	800d036 <pbuf_cat+0x26>
 800d026:	4b20      	ldr	r3, [pc, #128]	@ (800d0a8 <pbuf_cat+0x98>)
 800d028:	f240 3259 	movw	r2, #857	@ 0x359
 800d02c:	491f      	ldr	r1, [pc, #124]	@ (800d0ac <pbuf_cat+0x9c>)
 800d02e:	4820      	ldr	r0, [pc, #128]	@ (800d0b0 <pbuf_cat+0xa0>)
 800d030:	f7f4 f86c 	bl	800110c <printf>
 800d034:	e034      	b.n	800d0a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	e00a      	b.n	800d052 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	891a      	ldrh	r2, [r3, #8]
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	891b      	ldrh	r3, [r3, #8]
 800d044:	4413      	add	r3, r2
 800d046:	b29a      	uxth	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	60fb      	str	r3, [r7, #12]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1f0      	bne.n	800d03c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	891a      	ldrh	r2, [r3, #8]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	895b      	ldrh	r3, [r3, #10]
 800d062:	429a      	cmp	r2, r3
 800d064:	d006      	beq.n	800d074 <pbuf_cat+0x64>
 800d066:	4b10      	ldr	r3, [pc, #64]	@ (800d0a8 <pbuf_cat+0x98>)
 800d068:	f240 3262 	movw	r2, #866	@ 0x362
 800d06c:	4911      	ldr	r1, [pc, #68]	@ (800d0b4 <pbuf_cat+0xa4>)
 800d06e:	4810      	ldr	r0, [pc, #64]	@ (800d0b0 <pbuf_cat+0xa0>)
 800d070:	f7f4 f84c 	bl	800110c <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d006      	beq.n	800d08a <pbuf_cat+0x7a>
 800d07c:	4b0a      	ldr	r3, [pc, #40]	@ (800d0a8 <pbuf_cat+0x98>)
 800d07e:	f240 3263 	movw	r2, #867	@ 0x363
 800d082:	490d      	ldr	r1, [pc, #52]	@ (800d0b8 <pbuf_cat+0xa8>)
 800d084:	480a      	ldr	r0, [pc, #40]	@ (800d0b0 <pbuf_cat+0xa0>)
 800d086:	f7f4 f841 	bl	800110c <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	891a      	ldrh	r2, [r3, #8]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	891b      	ldrh	r3, [r3, #8]
 800d092:	4413      	add	r3, r2
 800d094:	b29a      	uxth	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	683a      	ldr	r2, [r7, #0]
 800d09e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	08018984 	.word	0x08018984
 800d0ac:	08018b78 	.word	0x08018b78
 800d0b0:	080189e4 	.word	0x080189e4
 800d0b4:	08018bb0 	.word	0x08018bb0
 800d0b8:	08018be0 	.word	0x08018be0

0800d0bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b086      	sub	sp, #24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	617b      	str	r3, [r7, #20]
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d008      	beq.n	800d0e6 <pbuf_copy+0x2a>
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d005      	beq.n	800d0e6 <pbuf_copy+0x2a>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	891a      	ldrh	r2, [r3, #8]
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	891b      	ldrh	r3, [r3, #8]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d209      	bcs.n	800d0fa <pbuf_copy+0x3e>
 800d0e6:	4b57      	ldr	r3, [pc, #348]	@ (800d244 <pbuf_copy+0x188>)
 800d0e8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d0ec:	4956      	ldr	r1, [pc, #344]	@ (800d248 <pbuf_copy+0x18c>)
 800d0ee:	4857      	ldr	r0, [pc, #348]	@ (800d24c <pbuf_copy+0x190>)
 800d0f0:	f7f4 f80c 	bl	800110c <printf>
 800d0f4:	f06f 030f 	mvn.w	r3, #15
 800d0f8:	e09f      	b.n	800d23a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	895b      	ldrh	r3, [r3, #10]
 800d0fe:	461a      	mov	r2, r3
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	1ad2      	subs	r2, r2, r3
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	895b      	ldrh	r3, [r3, #10]
 800d108:	4619      	mov	r1, r3
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	1acb      	subs	r3, r1, r3
 800d10e:	429a      	cmp	r2, r3
 800d110:	d306      	bcc.n	800d120 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	895b      	ldrh	r3, [r3, #10]
 800d116:	461a      	mov	r2, r3
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	60fb      	str	r3, [r7, #12]
 800d11e:	e005      	b.n	800d12c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	895b      	ldrh	r3, [r3, #10]
 800d124:	461a      	mov	r2, r3
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	685a      	ldr	r2, [r3, #4]
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	18d0      	adds	r0, r2, r3
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	685a      	ldr	r2, [r3, #4]
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	4413      	add	r3, r2
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	4619      	mov	r1, r3
 800d140:	f009 fd21 	bl	8016b86 <memcpy>
    offset_to += len;
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	4413      	add	r3, r2
 800d14a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	4413      	add	r3, r2
 800d152:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	895b      	ldrh	r3, [r3, #10]
 800d158:	461a      	mov	r2, r3
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d906      	bls.n	800d16e <pbuf_copy+0xb2>
 800d160:	4b38      	ldr	r3, [pc, #224]	@ (800d244 <pbuf_copy+0x188>)
 800d162:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d166:	493a      	ldr	r1, [pc, #232]	@ (800d250 <pbuf_copy+0x194>)
 800d168:	4838      	ldr	r0, [pc, #224]	@ (800d24c <pbuf_copy+0x190>)
 800d16a:	f7f3 ffcf 	bl	800110c <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	895b      	ldrh	r3, [r3, #10]
 800d172:	461a      	mov	r2, r3
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	4293      	cmp	r3, r2
 800d178:	d906      	bls.n	800d188 <pbuf_copy+0xcc>
 800d17a:	4b32      	ldr	r3, [pc, #200]	@ (800d244 <pbuf_copy+0x188>)
 800d17c:	f240 32da 	movw	r2, #986	@ 0x3da
 800d180:	4934      	ldr	r1, [pc, #208]	@ (800d254 <pbuf_copy+0x198>)
 800d182:	4832      	ldr	r0, [pc, #200]	@ (800d24c <pbuf_copy+0x190>)
 800d184:	f7f3 ffc2 	bl	800110c <printf>
    if (offset_from >= p_from->len) {
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	895b      	ldrh	r3, [r3, #10]
 800d18c:	461a      	mov	r2, r3
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	4293      	cmp	r3, r2
 800d192:	d304      	bcc.n	800d19e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d194:	2300      	movs	r3, #0
 800d196:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	895b      	ldrh	r3, [r3, #10]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d114      	bne.n	800d1d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10c      	bne.n	800d1d4 <pbuf_copy+0x118>
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d009      	beq.n	800d1d4 <pbuf_copy+0x118>
 800d1c0:	4b20      	ldr	r3, [pc, #128]	@ (800d244 <pbuf_copy+0x188>)
 800d1c2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d1c6:	4924      	ldr	r1, [pc, #144]	@ (800d258 <pbuf_copy+0x19c>)
 800d1c8:	4820      	ldr	r0, [pc, #128]	@ (800d24c <pbuf_copy+0x190>)
 800d1ca:	f7f3 ff9f 	bl	800110c <printf>
 800d1ce:	f06f 030f 	mvn.w	r3, #15
 800d1d2:	e032      	b.n	800d23a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d013      	beq.n	800d202 <pbuf_copy+0x146>
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	895a      	ldrh	r2, [r3, #10]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	891b      	ldrh	r3, [r3, #8]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d10d      	bne.n	800d202 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d009      	beq.n	800d202 <pbuf_copy+0x146>
 800d1ee:	4b15      	ldr	r3, [pc, #84]	@ (800d244 <pbuf_copy+0x188>)
 800d1f0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d1f4:	4919      	ldr	r1, [pc, #100]	@ (800d25c <pbuf_copy+0x1a0>)
 800d1f6:	4815      	ldr	r0, [pc, #84]	@ (800d24c <pbuf_copy+0x190>)
 800d1f8:	f7f3 ff88 	bl	800110c <printf>
 800d1fc:	f06f 0305 	mvn.w	r3, #5
 800d200:	e01b      	b.n	800d23a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d013      	beq.n	800d230 <pbuf_copy+0x174>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	895a      	ldrh	r2, [r3, #10]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	891b      	ldrh	r3, [r3, #8]
 800d210:	429a      	cmp	r2, r3
 800d212:	d10d      	bne.n	800d230 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d009      	beq.n	800d230 <pbuf_copy+0x174>
 800d21c:	4b09      	ldr	r3, [pc, #36]	@ (800d244 <pbuf_copy+0x188>)
 800d21e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d222:	490e      	ldr	r1, [pc, #56]	@ (800d25c <pbuf_copy+0x1a0>)
 800d224:	4809      	ldr	r0, [pc, #36]	@ (800d24c <pbuf_copy+0x190>)
 800d226:	f7f3 ff71 	bl	800110c <printf>
 800d22a:	f06f 0305 	mvn.w	r3, #5
 800d22e:	e004      	b.n	800d23a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	f47f af61 	bne.w	800d0fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3718      	adds	r7, #24
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	08018984 	.word	0x08018984
 800d248:	08018c2c 	.word	0x08018c2c
 800d24c:	080189e4 	.word	0x080189e4
 800d250:	08018c5c 	.word	0x08018c5c
 800d254:	08018c74 	.word	0x08018c74
 800d258:	08018c90 	.word	0x08018c90
 800d25c:	08018ca0 	.word	0x08018ca0

0800d260 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b088      	sub	sp, #32
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	4611      	mov	r1, r2
 800d26c:	461a      	mov	r2, r3
 800d26e:	460b      	mov	r3, r1
 800d270:	80fb      	strh	r3, [r7, #6]
 800d272:	4613      	mov	r3, r2
 800d274:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d108      	bne.n	800d296 <pbuf_copy_partial+0x36>
 800d284:	4b2b      	ldr	r3, [pc, #172]	@ (800d334 <pbuf_copy_partial+0xd4>)
 800d286:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d28a:	492b      	ldr	r1, [pc, #172]	@ (800d338 <pbuf_copy_partial+0xd8>)
 800d28c:	482b      	ldr	r0, [pc, #172]	@ (800d33c <pbuf_copy_partial+0xdc>)
 800d28e:	f7f3 ff3d 	bl	800110c <printf>
 800d292:	2300      	movs	r3, #0
 800d294:	e04a      	b.n	800d32c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d108      	bne.n	800d2ae <pbuf_copy_partial+0x4e>
 800d29c:	4b25      	ldr	r3, [pc, #148]	@ (800d334 <pbuf_copy_partial+0xd4>)
 800d29e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d2a2:	4927      	ldr	r1, [pc, #156]	@ (800d340 <pbuf_copy_partial+0xe0>)
 800d2a4:	4825      	ldr	r0, [pc, #148]	@ (800d33c <pbuf_copy_partial+0xdc>)
 800d2a6:	f7f3 ff31 	bl	800110c <printf>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e03e      	b.n	800d32c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	61fb      	str	r3, [r7, #28]
 800d2b2:	e034      	b.n	800d31e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d2b4:	88bb      	ldrh	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00a      	beq.n	800d2d0 <pbuf_copy_partial+0x70>
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	895b      	ldrh	r3, [r3, #10]
 800d2be:	88ba      	ldrh	r2, [r7, #4]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d305      	bcc.n	800d2d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d2c4:	69fb      	ldr	r3, [r7, #28]
 800d2c6:	895b      	ldrh	r3, [r3, #10]
 800d2c8:	88ba      	ldrh	r2, [r7, #4]
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	80bb      	strh	r3, [r7, #4]
 800d2ce:	e023      	b.n	800d318 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	895a      	ldrh	r2, [r3, #10]
 800d2d4:	88bb      	ldrh	r3, [r7, #4]
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d2da:	8b3a      	ldrh	r2, [r7, #24]
 800d2dc:	88fb      	ldrh	r3, [r7, #6]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d901      	bls.n	800d2e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d2e2:	88fb      	ldrh	r3, [r7, #6]
 800d2e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d2e6:	8b7b      	ldrh	r3, [r7, #26]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	18d0      	adds	r0, r2, r3
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	88bb      	ldrh	r3, [r7, #4]
 800d2f2:	4413      	add	r3, r2
 800d2f4:	8b3a      	ldrh	r2, [r7, #24]
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	f009 fc45 	bl	8016b86 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d2fc:	8afa      	ldrh	r2, [r7, #22]
 800d2fe:	8b3b      	ldrh	r3, [r7, #24]
 800d300:	4413      	add	r3, r2
 800d302:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d304:	8b7a      	ldrh	r2, [r7, #26]
 800d306:	8b3b      	ldrh	r3, [r7, #24]
 800d308:	4413      	add	r3, r2
 800d30a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d30c:	88fa      	ldrh	r2, [r7, #6]
 800d30e:	8b3b      	ldrh	r3, [r7, #24]
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d314:	2300      	movs	r3, #0
 800d316:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	61fb      	str	r3, [r7, #28]
 800d31e:	88fb      	ldrh	r3, [r7, #6]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d002      	beq.n	800d32a <pbuf_copy_partial+0xca>
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1c4      	bne.n	800d2b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d32a:	8afb      	ldrh	r3, [r7, #22]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3720      	adds	r7, #32
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	08018984 	.word	0x08018984
 800d338:	08018ccc 	.word	0x08018ccc
 800d33c:	080189e4 	.word	0x080189e4
 800d340:	08018cec 	.word	0x08018cec

0800d344 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	4603      	mov	r3, r0
 800d34c:	603a      	str	r2, [r7, #0]
 800d34e:	71fb      	strb	r3, [r7, #7]
 800d350:	460b      	mov	r3, r1
 800d352:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	8919      	ldrh	r1, [r3, #8]
 800d358:	88ba      	ldrh	r2, [r7, #4]
 800d35a:	79fb      	ldrb	r3, [r7, #7]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff faa5 	bl	800c8ac <pbuf_alloc>
 800d362:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d101      	bne.n	800d36e <pbuf_clone+0x2a>
    return NULL;
 800d36a:	2300      	movs	r3, #0
 800d36c:	e011      	b.n	800d392 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f7ff fea3 	bl	800d0bc <pbuf_copy>
 800d376:	4603      	mov	r3, r0
 800d378:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d37a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d006      	beq.n	800d390 <pbuf_clone+0x4c>
 800d382:	4b06      	ldr	r3, [pc, #24]	@ (800d39c <pbuf_clone+0x58>)
 800d384:	f240 5224 	movw	r2, #1316	@ 0x524
 800d388:	4905      	ldr	r1, [pc, #20]	@ (800d3a0 <pbuf_clone+0x5c>)
 800d38a:	4806      	ldr	r0, [pc, #24]	@ (800d3a4 <pbuf_clone+0x60>)
 800d38c:	f7f3 febe 	bl	800110c <printf>
  return q;
 800d390:	68fb      	ldr	r3, [r7, #12]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	08018984 	.word	0x08018984
 800d3a0:	08018df8 	.word	0x08018df8
 800d3a4:	080189e4 	.word	0x080189e4

0800d3a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d3ac:	f009 f9c4 	bl	8016738 <rand>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	4b01      	ldr	r3, [pc, #4]	@ (800d3c8 <tcp_init+0x20>)
 800d3c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d3c4:	bf00      	nop
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	20000024 	.word	0x20000024

0800d3cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	7d1b      	ldrb	r3, [r3, #20]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	d105      	bne.n	800d3e8 <tcp_free+0x1c>
 800d3dc:	4b06      	ldr	r3, [pc, #24]	@ (800d3f8 <tcp_free+0x2c>)
 800d3de:	22d4      	movs	r2, #212	@ 0xd4
 800d3e0:	4906      	ldr	r1, [pc, #24]	@ (800d3fc <tcp_free+0x30>)
 800d3e2:	4807      	ldr	r0, [pc, #28]	@ (800d400 <tcp_free+0x34>)
 800d3e4:	f7f3 fe92 	bl	800110c <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d3e8:	6879      	ldr	r1, [r7, #4]
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	f7fe fe9e 	bl	800c12c <memp_free>
}
 800d3f0:	bf00      	nop
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	08018e84 	.word	0x08018e84
 800d3fc:	08018eb4 	.word	0x08018eb4
 800d400:	08018ec8 	.word	0x08018ec8

0800d404 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7d1b      	ldrb	r3, [r3, #20]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d105      	bne.n	800d420 <tcp_free_listen+0x1c>
 800d414:	4b06      	ldr	r3, [pc, #24]	@ (800d430 <tcp_free_listen+0x2c>)
 800d416:	22df      	movs	r2, #223	@ 0xdf
 800d418:	4906      	ldr	r1, [pc, #24]	@ (800d434 <tcp_free_listen+0x30>)
 800d41a:	4807      	ldr	r0, [pc, #28]	@ (800d438 <tcp_free_listen+0x34>)
 800d41c:	f7f3 fe76 	bl	800110c <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d420:	6879      	ldr	r1, [r7, #4]
 800d422:	2002      	movs	r0, #2
 800d424:	f7fe fe82 	bl	800c12c <memp_free>
}
 800d428:	bf00      	nop
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	08018e84 	.word	0x08018e84
 800d434:	08018ef0 	.word	0x08018ef0
 800d438:	08018ec8 	.word	0x08018ec8

0800d43c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d440:	f001 f85e 	bl	800e500 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d444:	4b07      	ldr	r3, [pc, #28]	@ (800d464 <tcp_tmr+0x28>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	3301      	adds	r3, #1
 800d44a:	b2da      	uxtb	r2, r3
 800d44c:	4b05      	ldr	r3, [pc, #20]	@ (800d464 <tcp_tmr+0x28>)
 800d44e:	701a      	strb	r2, [r3, #0]
 800d450:	4b04      	ldr	r3, [pc, #16]	@ (800d464 <tcp_tmr+0x28>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	f003 0301 	and.w	r3, r3, #1
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d45c:	f000 fd0e 	bl	800de7c <tcp_slowtmr>
  }
}
 800d460:	bf00      	nop
 800d462:	bd80      	pop	{r7, pc}
 800d464:	2000c5b9 	.word	0x2000c5b9

0800d468 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d105      	bne.n	800d484 <tcp_remove_listener+0x1c>
 800d478:	4b0d      	ldr	r3, [pc, #52]	@ (800d4b0 <tcp_remove_listener+0x48>)
 800d47a:	22ff      	movs	r2, #255	@ 0xff
 800d47c:	490d      	ldr	r1, [pc, #52]	@ (800d4b4 <tcp_remove_listener+0x4c>)
 800d47e:	480e      	ldr	r0, [pc, #56]	@ (800d4b8 <tcp_remove_listener+0x50>)
 800d480:	f7f3 fe44 	bl	800110c <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	60fb      	str	r3, [r7, #12]
 800d488:	e00a      	b.n	800d4a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	429a      	cmp	r2, r3
 800d492:	d102      	bne.n	800d49a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	60fb      	str	r3, [r7, #12]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1f1      	bne.n	800d48a <tcp_remove_listener+0x22>
    }
  }
}
 800d4a6:	bf00      	nop
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	08018e84 	.word	0x08018e84
 800d4b4:	08018f0c 	.word	0x08018f0c
 800d4b8:	08018ec8 	.word	0x08018ec8

0800d4bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d106      	bne.n	800d4d8 <tcp_listen_closed+0x1c>
 800d4ca:	4b14      	ldr	r3, [pc, #80]	@ (800d51c <tcp_listen_closed+0x60>)
 800d4cc:	f240 1211 	movw	r2, #273	@ 0x111
 800d4d0:	4913      	ldr	r1, [pc, #76]	@ (800d520 <tcp_listen_closed+0x64>)
 800d4d2:	4814      	ldr	r0, [pc, #80]	@ (800d524 <tcp_listen_closed+0x68>)
 800d4d4:	f7f3 fe1a 	bl	800110c <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	7d1b      	ldrb	r3, [r3, #20]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d006      	beq.n	800d4ee <tcp_listen_closed+0x32>
 800d4e0:	4b0e      	ldr	r3, [pc, #56]	@ (800d51c <tcp_listen_closed+0x60>)
 800d4e2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d4e6:	4910      	ldr	r1, [pc, #64]	@ (800d528 <tcp_listen_closed+0x6c>)
 800d4e8:	480e      	ldr	r0, [pc, #56]	@ (800d524 <tcp_listen_closed+0x68>)
 800d4ea:	f7f3 fe0f 	bl	800110c <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	e00b      	b.n	800d50c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d4f4:	4a0d      	ldr	r2, [pc, #52]	@ (800d52c <tcp_listen_closed+0x70>)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	6879      	ldr	r1, [r7, #4]
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff ffb1 	bl	800d468 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	3301      	adds	r3, #1
 800d50a:	60fb      	str	r3, [r7, #12]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d9f0      	bls.n	800d4f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d512:	bf00      	nop
 800d514:	bf00      	nop
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	08018e84 	.word	0x08018e84
 800d520:	08018f34 	.word	0x08018f34
 800d524:	08018ec8 	.word	0x08018ec8
 800d528:	08018f40 	.word	0x08018f40
 800d52c:	0801aea8 	.word	0x0801aea8

0800d530 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d530:	b5b0      	push	{r4, r5, r7, lr}
 800d532:	b088      	sub	sp, #32
 800d534:	af04      	add	r7, sp, #16
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	460b      	mov	r3, r1
 800d53a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <tcp_close_shutdown+0x20>
 800d542:	4b63      	ldr	r3, [pc, #396]	@ (800d6d0 <tcp_close_shutdown+0x1a0>)
 800d544:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d548:	4962      	ldr	r1, [pc, #392]	@ (800d6d4 <tcp_close_shutdown+0x1a4>)
 800d54a:	4863      	ldr	r0, [pc, #396]	@ (800d6d8 <tcp_close_shutdown+0x1a8>)
 800d54c:	f7f3 fdde 	bl	800110c <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d550:	78fb      	ldrb	r3, [r7, #3]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d066      	beq.n	800d624 <tcp_close_shutdown+0xf4>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	7d1b      	ldrb	r3, [r3, #20]
 800d55a:	2b04      	cmp	r3, #4
 800d55c:	d003      	beq.n	800d566 <tcp_close_shutdown+0x36>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	7d1b      	ldrb	r3, [r3, #20]
 800d562:	2b07      	cmp	r3, #7
 800d564:	d15e      	bne.n	800d624 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d104      	bne.n	800d578 <tcp_close_shutdown+0x48>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d572:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d576:	d055      	beq.n	800d624 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	8b5b      	ldrh	r3, [r3, #26]
 800d57c:	f003 0310 	and.w	r3, r3, #16
 800d580:	2b00      	cmp	r3, #0
 800d582:	d106      	bne.n	800d592 <tcp_close_shutdown+0x62>
 800d584:	4b52      	ldr	r3, [pc, #328]	@ (800d6d0 <tcp_close_shutdown+0x1a0>)
 800d586:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d58a:	4954      	ldr	r1, [pc, #336]	@ (800d6dc <tcp_close_shutdown+0x1ac>)
 800d58c:	4852      	ldr	r0, [pc, #328]	@ (800d6d8 <tcp_close_shutdown+0x1a8>)
 800d58e:	f7f3 fdbd 	bl	800110c <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d59a:	687d      	ldr	r5, [r7, #4]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	3304      	adds	r3, #4
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	8ad2      	ldrh	r2, [r2, #22]
 800d5a4:	6879      	ldr	r1, [r7, #4]
 800d5a6:	8b09      	ldrh	r1, [r1, #24]
 800d5a8:	9102      	str	r1, [sp, #8]
 800d5aa:	9201      	str	r2, [sp, #4]
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	462b      	mov	r3, r5
 800d5b0:	4622      	mov	r2, r4
 800d5b2:	4601      	mov	r1, r0
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f005 fd6d 	bl	8013094 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f001 fb50 	bl	800ec60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d5c0:	4b47      	ldr	r3, [pc, #284]	@ (800d6e0 <tcp_close_shutdown+0x1b0>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d105      	bne.n	800d5d6 <tcp_close_shutdown+0xa6>
 800d5ca:	4b45      	ldr	r3, [pc, #276]	@ (800d6e0 <tcp_close_shutdown+0x1b0>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	4a43      	ldr	r2, [pc, #268]	@ (800d6e0 <tcp_close_shutdown+0x1b0>)
 800d5d2:	6013      	str	r3, [r2, #0]
 800d5d4:	e013      	b.n	800d5fe <tcp_close_shutdown+0xce>
 800d5d6:	4b42      	ldr	r3, [pc, #264]	@ (800d6e0 <tcp_close_shutdown+0x1b0>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	e00c      	b.n	800d5f8 <tcp_close_shutdown+0xc8>
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d104      	bne.n	800d5f2 <tcp_close_shutdown+0xc2>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68da      	ldr	r2, [r3, #12]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	60da      	str	r2, [r3, #12]
 800d5f0:	e005      	b.n	800d5fe <tcp_close_shutdown+0xce>
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	60fb      	str	r3, [r7, #12]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1ef      	bne.n	800d5de <tcp_close_shutdown+0xae>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	60da      	str	r2, [r3, #12]
 800d604:	4b37      	ldr	r3, [pc, #220]	@ (800d6e4 <tcp_close_shutdown+0x1b4>)
 800d606:	2201      	movs	r2, #1
 800d608:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d60a:	4b37      	ldr	r3, [pc, #220]	@ (800d6e8 <tcp_close_shutdown+0x1b8>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	429a      	cmp	r2, r3
 800d612:	d102      	bne.n	800d61a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d614:	f003 ffe4 	bl	80115e0 <tcp_trigger_input_pcb_close>
 800d618:	e002      	b.n	800d620 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7ff fed6 	bl	800d3cc <tcp_free>
      }
      return ERR_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	e050      	b.n	800d6c6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7d1b      	ldrb	r3, [r3, #20]
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d03b      	beq.n	800d6a4 <tcp_close_shutdown+0x174>
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	dc44      	bgt.n	800d6ba <tcp_close_shutdown+0x18a>
 800d630:	2b00      	cmp	r3, #0
 800d632:	d002      	beq.n	800d63a <tcp_close_shutdown+0x10a>
 800d634:	2b01      	cmp	r3, #1
 800d636:	d02a      	beq.n	800d68e <tcp_close_shutdown+0x15e>
 800d638:	e03f      	b.n	800d6ba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	8adb      	ldrh	r3, [r3, #22]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d021      	beq.n	800d686 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d642:	4b2a      	ldr	r3, [pc, #168]	@ (800d6ec <tcp_close_shutdown+0x1bc>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d105      	bne.n	800d658 <tcp_close_shutdown+0x128>
 800d64c:	4b27      	ldr	r3, [pc, #156]	@ (800d6ec <tcp_close_shutdown+0x1bc>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	4a26      	ldr	r2, [pc, #152]	@ (800d6ec <tcp_close_shutdown+0x1bc>)
 800d654:	6013      	str	r3, [r2, #0]
 800d656:	e013      	b.n	800d680 <tcp_close_shutdown+0x150>
 800d658:	4b24      	ldr	r3, [pc, #144]	@ (800d6ec <tcp_close_shutdown+0x1bc>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	60bb      	str	r3, [r7, #8]
 800d65e:	e00c      	b.n	800d67a <tcp_close_shutdown+0x14a>
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	429a      	cmp	r2, r3
 800d668:	d104      	bne.n	800d674 <tcp_close_shutdown+0x144>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	68da      	ldr	r2, [r3, #12]
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	60da      	str	r2, [r3, #12]
 800d672:	e005      	b.n	800d680 <tcp_close_shutdown+0x150>
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	60bb      	str	r3, [r7, #8]
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1ef      	bne.n	800d660 <tcp_close_shutdown+0x130>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7ff fea0 	bl	800d3cc <tcp_free>
      break;
 800d68c:	e01a      	b.n	800d6c4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7ff ff14 	bl	800d4bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	4816      	ldr	r0, [pc, #88]	@ (800d6f0 <tcp_close_shutdown+0x1c0>)
 800d698:	f001 fb32 	bl	800ed00 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff feb1 	bl	800d404 <tcp_free_listen>
      break;
 800d6a2:	e00f      	b.n	800d6c4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	480e      	ldr	r0, [pc, #56]	@ (800d6e0 <tcp_close_shutdown+0x1b0>)
 800d6a8:	f001 fb2a 	bl	800ed00 <tcp_pcb_remove>
 800d6ac:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e4 <tcp_close_shutdown+0x1b4>)
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7ff fe8a 	bl	800d3cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d6b8:	e004      	b.n	800d6c4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f81a 	bl	800d6f4 <tcp_close_shutdown_fin>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	e000      	b.n	800d6c6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bdb0      	pop	{r4, r5, r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	08018e84 	.word	0x08018e84
 800d6d4:	08018f58 	.word	0x08018f58
 800d6d8:	08018ec8 	.word	0x08018ec8
 800d6dc:	08018f78 	.word	0x08018f78
 800d6e0:	2000c5b0 	.word	0x2000c5b0
 800d6e4:	2000c5b8 	.word	0x2000c5b8
 800d6e8:	2000c5f0 	.word	0x2000c5f0
 800d6ec:	2000c5a8 	.word	0x2000c5a8
 800d6f0:	2000c5ac 	.word	0x2000c5ac

0800d6f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d106      	bne.n	800d710 <tcp_close_shutdown_fin+0x1c>
 800d702:	4b2e      	ldr	r3, [pc, #184]	@ (800d7bc <tcp_close_shutdown_fin+0xc8>)
 800d704:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d708:	492d      	ldr	r1, [pc, #180]	@ (800d7c0 <tcp_close_shutdown_fin+0xcc>)
 800d70a:	482e      	ldr	r0, [pc, #184]	@ (800d7c4 <tcp_close_shutdown_fin+0xd0>)
 800d70c:	f7f3 fcfe 	bl	800110c <printf>

  switch (pcb->state) {
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	7d1b      	ldrb	r3, [r3, #20]
 800d714:	2b07      	cmp	r3, #7
 800d716:	d020      	beq.n	800d75a <tcp_close_shutdown_fin+0x66>
 800d718:	2b07      	cmp	r3, #7
 800d71a:	dc2b      	bgt.n	800d774 <tcp_close_shutdown_fin+0x80>
 800d71c:	2b03      	cmp	r3, #3
 800d71e:	d002      	beq.n	800d726 <tcp_close_shutdown_fin+0x32>
 800d720:	2b04      	cmp	r3, #4
 800d722:	d00d      	beq.n	800d740 <tcp_close_shutdown_fin+0x4c>
 800d724:	e026      	b.n	800d774 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f004 fdc2 	bl	80122b0 <tcp_send_fin>
 800d72c:	4603      	mov	r3, r0
 800d72e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d11f      	bne.n	800d778 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2205      	movs	r2, #5
 800d73c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d73e:	e01b      	b.n	800d778 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f004 fdb5 	bl	80122b0 <tcp_send_fin>
 800d746:	4603      	mov	r3, r0
 800d748:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d114      	bne.n	800d77c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2205      	movs	r2, #5
 800d756:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d758:	e010      	b.n	800d77c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f004 fda8 	bl	80122b0 <tcp_send_fin>
 800d760:	4603      	mov	r3, r0
 800d762:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d109      	bne.n	800d780 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2209      	movs	r2, #9
 800d770:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d772:	e005      	b.n	800d780 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d774:	2300      	movs	r3, #0
 800d776:	e01c      	b.n	800d7b2 <tcp_close_shutdown_fin+0xbe>
      break;
 800d778:	bf00      	nop
 800d77a:	e002      	b.n	800d782 <tcp_close_shutdown_fin+0x8e>
      break;
 800d77c:	bf00      	nop
 800d77e:	e000      	b.n	800d782 <tcp_close_shutdown_fin+0x8e>
      break;
 800d780:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d103      	bne.n	800d792 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f004 fece 	bl	801252c <tcp_output>
 800d790:	e00d      	b.n	800d7ae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79a:	d108      	bne.n	800d7ae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	8b5b      	ldrh	r3, [r3, #26]
 800d7a0:	f043 0308 	orr.w	r3, r3, #8
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	e001      	b.n	800d7b2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d7ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	08018e84 	.word	0x08018e84
 800d7c0:	08018f34 	.word	0x08018f34
 800d7c4:	08018ec8 	.word	0x08018ec8

0800d7c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d109      	bne.n	800d7ea <tcp_close+0x22>
 800d7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d814 <tcp_close+0x4c>)
 800d7d8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d7dc:	490e      	ldr	r1, [pc, #56]	@ (800d818 <tcp_close+0x50>)
 800d7de:	480f      	ldr	r0, [pc, #60]	@ (800d81c <tcp_close+0x54>)
 800d7e0:	f7f3 fc94 	bl	800110c <printf>
 800d7e4:	f06f 030f 	mvn.w	r3, #15
 800d7e8:	e00f      	b.n	800d80a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	7d1b      	ldrb	r3, [r3, #20]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d006      	beq.n	800d800 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	8b5b      	ldrh	r3, [r3, #26]
 800d7f6:	f043 0310 	orr.w	r3, r3, #16
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d800:	2101      	movs	r1, #1
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7ff fe94 	bl	800d530 <tcp_close_shutdown>
 800d808:	4603      	mov	r3, r0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	08018e84 	.word	0x08018e84
 800d818:	08018f94 	.word	0x08018f94
 800d81c:	08018ec8 	.word	0x08018ec8

0800d820 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d109      	bne.n	800d846 <tcp_shutdown+0x26>
 800d832:	4b26      	ldr	r3, [pc, #152]	@ (800d8cc <tcp_shutdown+0xac>)
 800d834:	f240 2207 	movw	r2, #519	@ 0x207
 800d838:	4925      	ldr	r1, [pc, #148]	@ (800d8d0 <tcp_shutdown+0xb0>)
 800d83a:	4826      	ldr	r0, [pc, #152]	@ (800d8d4 <tcp_shutdown+0xb4>)
 800d83c:	f7f3 fc66 	bl	800110c <printf>
 800d840:	f06f 030f 	mvn.w	r3, #15
 800d844:	e03d      	b.n	800d8c2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	7d1b      	ldrb	r3, [r3, #20]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d102      	bne.n	800d854 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d84e:	f06f 030a 	mvn.w	r3, #10
 800d852:	e036      	b.n	800d8c2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d01b      	beq.n	800d892 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	8b5b      	ldrh	r3, [r3, #26]
 800d85e:	f043 0310 	orr.w	r3, r3, #16
 800d862:	b29a      	uxth	r2, r3
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d005      	beq.n	800d87a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d86e:	2101      	movs	r1, #1
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f7ff fe5d 	bl	800d530 <tcp_close_shutdown>
 800d876:	4603      	mov	r3, r0
 800d878:	e023      	b.n	800d8c2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d007      	beq.n	800d892 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d886:	4618      	mov	r0, r3
 800d888:	f7ff faf4 	bl	800ce74 <pbuf_free>
      pcb->refused_data = NULL;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d013      	beq.n	800d8c0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	7d1b      	ldrb	r3, [r3, #20]
 800d89c:	2b04      	cmp	r3, #4
 800d89e:	dc02      	bgt.n	800d8a6 <tcp_shutdown+0x86>
 800d8a0:	2b03      	cmp	r3, #3
 800d8a2:	da02      	bge.n	800d8aa <tcp_shutdown+0x8a>
 800d8a4:	e009      	b.n	800d8ba <tcp_shutdown+0x9a>
 800d8a6:	2b07      	cmp	r3, #7
 800d8a8:	d107      	bne.n	800d8ba <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f7ff fe3d 	bl	800d530 <tcp_close_shutdown>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	e003      	b.n	800d8c2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d8ba:	f06f 030a 	mvn.w	r3, #10
 800d8be:	e000      	b.n	800d8c2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	08018e84 	.word	0x08018e84
 800d8d0:	08018fac 	.word	0x08018fac
 800d8d4:	08018ec8 	.word	0x08018ec8

0800d8d8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b08e      	sub	sp, #56	@ 0x38
 800d8dc:	af04      	add	r7, sp, #16
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d107      	bne.n	800d8f8 <tcp_abandon+0x20>
 800d8e8:	4b52      	ldr	r3, [pc, #328]	@ (800da34 <tcp_abandon+0x15c>)
 800d8ea:	f240 223d 	movw	r2, #573	@ 0x23d
 800d8ee:	4952      	ldr	r1, [pc, #328]	@ (800da38 <tcp_abandon+0x160>)
 800d8f0:	4852      	ldr	r0, [pc, #328]	@ (800da3c <tcp_abandon+0x164>)
 800d8f2:	f7f3 fc0b 	bl	800110c <printf>
 800d8f6:	e099      	b.n	800da2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	7d1b      	ldrb	r3, [r3, #20]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d106      	bne.n	800d90e <tcp_abandon+0x36>
 800d900:	4b4c      	ldr	r3, [pc, #304]	@ (800da34 <tcp_abandon+0x15c>)
 800d902:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d906:	494e      	ldr	r1, [pc, #312]	@ (800da40 <tcp_abandon+0x168>)
 800d908:	484c      	ldr	r0, [pc, #304]	@ (800da3c <tcp_abandon+0x164>)
 800d90a:	f7f3 fbff 	bl	800110c <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	7d1b      	ldrb	r3, [r3, #20]
 800d912:	2b0a      	cmp	r3, #10
 800d914:	d107      	bne.n	800d926 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d916:	6879      	ldr	r1, [r7, #4]
 800d918:	484a      	ldr	r0, [pc, #296]	@ (800da44 <tcp_abandon+0x16c>)
 800d91a:	f001 f9f1 	bl	800ed00 <tcp_pcb_remove>
    tcp_free(pcb);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7ff fd54 	bl	800d3cc <tcp_free>
 800d924:	e082      	b.n	800da2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d932:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d938:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d940:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	7d1b      	ldrb	r3, [r3, #20]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d126      	bne.n	800d99e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	8adb      	ldrh	r3, [r3, #22]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d02e      	beq.n	800d9b6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d958:	4b3b      	ldr	r3, [pc, #236]	@ (800da48 <tcp_abandon+0x170>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d105      	bne.n	800d96e <tcp_abandon+0x96>
 800d962:	4b39      	ldr	r3, [pc, #228]	@ (800da48 <tcp_abandon+0x170>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	4a37      	ldr	r2, [pc, #220]	@ (800da48 <tcp_abandon+0x170>)
 800d96a:	6013      	str	r3, [r2, #0]
 800d96c:	e013      	b.n	800d996 <tcp_abandon+0xbe>
 800d96e:	4b36      	ldr	r3, [pc, #216]	@ (800da48 <tcp_abandon+0x170>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	61fb      	str	r3, [r7, #28]
 800d974:	e00c      	b.n	800d990 <tcp_abandon+0xb8>
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d104      	bne.n	800d98a <tcp_abandon+0xb2>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	68da      	ldr	r2, [r3, #12]
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	60da      	str	r2, [r3, #12]
 800d988:	e005      	b.n	800d996 <tcp_abandon+0xbe>
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	61fb      	str	r3, [r7, #28]
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1ef      	bne.n	800d976 <tcp_abandon+0x9e>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	60da      	str	r2, [r3, #12]
 800d99c:	e00b      	b.n	800d9b6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	8adb      	ldrh	r3, [r3, #22]
 800d9a6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d9a8:	6879      	ldr	r1, [r7, #4]
 800d9aa:	4828      	ldr	r0, [pc, #160]	@ (800da4c <tcp_abandon+0x174>)
 800d9ac:	f001 f9a8 	bl	800ed00 <tcp_pcb_remove>
 800d9b0:	4b27      	ldr	r3, [pc, #156]	@ (800da50 <tcp_abandon+0x178>)
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d004      	beq.n	800d9c8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 fe7c 	bl	800e6c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 fe73 	bl	800e6c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d004      	beq.n	800d9ec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 fe6a 	bl	800e6c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00e      	beq.n	800da10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	8b12      	ldrh	r2, [r2, #24]
 800d9fc:	9202      	str	r2, [sp, #8]
 800d9fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800da00:	9201      	str	r2, [sp, #4]
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	460b      	mov	r3, r1
 800da06:	697a      	ldr	r2, [r7, #20]
 800da08:	69b9      	ldr	r1, [r7, #24]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f005 fb42 	bl	8013094 <tcp_rst>
    }
    last_state = pcb->state;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	7d1b      	ldrb	r3, [r3, #20]
 800da14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7ff fcd8 	bl	800d3cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d004      	beq.n	800da2c <tcp_abandon+0x154>
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	f06f 010c 	mvn.w	r1, #12
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	4798      	blx	r3
  }
}
 800da2c:	3728      	adds	r7, #40	@ 0x28
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	08018e84 	.word	0x08018e84
 800da38:	08018fc8 	.word	0x08018fc8
 800da3c:	08018ec8 	.word	0x08018ec8
 800da40:	08018fe4 	.word	0x08018fe4
 800da44:	2000c5b4 	.word	0x2000c5b4
 800da48:	2000c5a8 	.word	0x2000c5a8
 800da4c:	2000c5b0 	.word	0x2000c5b0
 800da50:	2000c5b8 	.word	0x2000c5b8

0800da54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800da5c:	2101      	movs	r1, #1
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff ff3a 	bl	800d8d8 <tcp_abandon>
}
 800da64:	bf00      	nop
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d106      	bne.n	800da88 <tcp_update_rcv_ann_wnd+0x1c>
 800da7a:	4b25      	ldr	r3, [pc, #148]	@ (800db10 <tcp_update_rcv_ann_wnd+0xa4>)
 800da7c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800da80:	4924      	ldr	r1, [pc, #144]	@ (800db14 <tcp_update_rcv_ann_wnd+0xa8>)
 800da82:	4825      	ldr	r0, [pc, #148]	@ (800db18 <tcp_update_rcv_ann_wnd+0xac>)
 800da84:	f7f3 fb42 	bl	800110c <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800da90:	4413      	add	r3, r2
 800da92:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800da9c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800daa0:	bf28      	it	cs
 800daa2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800daa6:	b292      	uxth	r2, r2
 800daa8:	4413      	add	r3, r2
 800daaa:	68fa      	ldr	r2, [r7, #12]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	2b00      	cmp	r3, #0
 800dab0:	db08      	blt.n	800dac4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	e020      	b.n	800db06 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dacc:	1ad3      	subs	r3, r2, r3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	dd03      	ble.n	800dada <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dad8:	e014      	b.n	800db04 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daec:	d306      	bcc.n	800dafc <tcp_update_rcv_ann_wnd+0x90>
 800daee:	4b08      	ldr	r3, [pc, #32]	@ (800db10 <tcp_update_rcv_ann_wnd+0xa4>)
 800daf0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800daf4:	4909      	ldr	r1, [pc, #36]	@ (800db1c <tcp_update_rcv_ann_wnd+0xb0>)
 800daf6:	4808      	ldr	r0, [pc, #32]	@ (800db18 <tcp_update_rcv_ann_wnd+0xac>)
 800daf8:	f7f3 fb08 	bl	800110c <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	b29a      	uxth	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800db04:	2300      	movs	r3, #0
  }
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	08018e84 	.word	0x08018e84
 800db14:	080190e0 	.word	0x080190e0
 800db18:	08018ec8 	.word	0x08018ec8
 800db1c:	08019104 	.word	0x08019104

0800db20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	460b      	mov	r3, r1
 800db2a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d107      	bne.n	800db42 <tcp_recved+0x22>
 800db32:	4b1f      	ldr	r3, [pc, #124]	@ (800dbb0 <tcp_recved+0x90>)
 800db34:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800db38:	491e      	ldr	r1, [pc, #120]	@ (800dbb4 <tcp_recved+0x94>)
 800db3a:	481f      	ldr	r0, [pc, #124]	@ (800dbb8 <tcp_recved+0x98>)
 800db3c:	f7f3 fae6 	bl	800110c <printf>
 800db40:	e032      	b.n	800dba8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	7d1b      	ldrb	r3, [r3, #20]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d106      	bne.n	800db58 <tcp_recved+0x38>
 800db4a:	4b19      	ldr	r3, [pc, #100]	@ (800dbb0 <tcp_recved+0x90>)
 800db4c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800db50:	491a      	ldr	r1, [pc, #104]	@ (800dbbc <tcp_recved+0x9c>)
 800db52:	4819      	ldr	r0, [pc, #100]	@ (800dbb8 <tcp_recved+0x98>)
 800db54:	f7f3 fada 	bl	800110c <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800db5c:	887b      	ldrh	r3, [r7, #2]
 800db5e:	4413      	add	r3, r2
 800db60:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800db62:	89fb      	ldrh	r3, [r7, #14]
 800db64:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800db68:	d804      	bhi.n	800db74 <tcp_recved+0x54>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db6e:	89fa      	ldrh	r2, [r7, #14]
 800db70:	429a      	cmp	r2, r3
 800db72:	d204      	bcs.n	800db7e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800db7a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800db7c:	e002      	b.n	800db84 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	89fa      	ldrh	r2, [r7, #14]
 800db82:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff ff71 	bl	800da6c <tcp_update_rcv_ann_wnd>
 800db8a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800db92:	d309      	bcc.n	800dba8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	8b5b      	ldrh	r3, [r3, #26]
 800db98:	f043 0302 	orr.w	r3, r3, #2
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f004 fcc2 	bl	801252c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	08018e84 	.word	0x08018e84
 800dbb4:	08019120 	.word	0x08019120
 800dbb8:	08018ec8 	.word	0x08018ec8
 800dbbc:	08019138 	.word	0x08019138

0800dbc0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800dbca:	4b1e      	ldr	r3, [pc, #120]	@ (800dc44 <tcp_new_port+0x84>)
 800dbcc:	881b      	ldrh	r3, [r3, #0]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	4b1c      	ldr	r3, [pc, #112]	@ (800dc44 <tcp_new_port+0x84>)
 800dbd4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dbd6:	4b1b      	ldr	r3, [pc, #108]	@ (800dc44 <tcp_new_port+0x84>)
 800dbd8:	881b      	ldrh	r3, [r3, #0]
 800dbda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d103      	bne.n	800dbea <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800dbe2:	4b18      	ldr	r3, [pc, #96]	@ (800dc44 <tcp_new_port+0x84>)
 800dbe4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800dbe8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dbea:	2300      	movs	r3, #0
 800dbec:	71fb      	strb	r3, [r7, #7]
 800dbee:	e01e      	b.n	800dc2e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dbf0:	79fb      	ldrb	r3, [r7, #7]
 800dbf2:	4a15      	ldr	r2, [pc, #84]	@ (800dc48 <tcp_new_port+0x88>)
 800dbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	603b      	str	r3, [r7, #0]
 800dbfc:	e011      	b.n	800dc22 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	8ada      	ldrh	r2, [r3, #22]
 800dc02:	4b10      	ldr	r3, [pc, #64]	@ (800dc44 <tcp_new_port+0x84>)
 800dc04:	881b      	ldrh	r3, [r3, #0]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d108      	bne.n	800dc1c <tcp_new_port+0x5c>
        n++;
 800dc0a:	88bb      	ldrh	r3, [r7, #4]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800dc10:	88bb      	ldrh	r3, [r7, #4]
 800dc12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dc16:	d3d8      	bcc.n	800dbca <tcp_new_port+0xa>
          return 0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	e00d      	b.n	800dc38 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	603b      	str	r3, [r7, #0]
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1ea      	bne.n	800dbfe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dc28:	79fb      	ldrb	r3, [r7, #7]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	71fb      	strb	r3, [r7, #7]
 800dc2e:	79fb      	ldrb	r3, [r7, #7]
 800dc30:	2b03      	cmp	r3, #3
 800dc32:	d9dd      	bls.n	800dbf0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dc34:	4b03      	ldr	r3, [pc, #12]	@ (800dc44 <tcp_new_port+0x84>)
 800dc36:	881b      	ldrh	r3, [r3, #0]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	20000024 	.word	0x20000024
 800dc48:	0801aea8 	.word	0x0801aea8

0800dc4c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08a      	sub	sp, #40	@ 0x28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	603b      	str	r3, [r7, #0]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d109      	bne.n	800dc7a <tcp_connect+0x2e>
 800dc66:	4b7d      	ldr	r3, [pc, #500]	@ (800de5c <tcp_connect+0x210>)
 800dc68:	f240 4235 	movw	r2, #1077	@ 0x435
 800dc6c:	497c      	ldr	r1, [pc, #496]	@ (800de60 <tcp_connect+0x214>)
 800dc6e:	487d      	ldr	r0, [pc, #500]	@ (800de64 <tcp_connect+0x218>)
 800dc70:	f7f3 fa4c 	bl	800110c <printf>
 800dc74:	f06f 030f 	mvn.w	r3, #15
 800dc78:	e0ec      	b.n	800de54 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d109      	bne.n	800dc94 <tcp_connect+0x48>
 800dc80:	4b76      	ldr	r3, [pc, #472]	@ (800de5c <tcp_connect+0x210>)
 800dc82:	f240 4236 	movw	r2, #1078	@ 0x436
 800dc86:	4978      	ldr	r1, [pc, #480]	@ (800de68 <tcp_connect+0x21c>)
 800dc88:	4876      	ldr	r0, [pc, #472]	@ (800de64 <tcp_connect+0x218>)
 800dc8a:	f7f3 fa3f 	bl	800110c <printf>
 800dc8e:	f06f 030f 	mvn.w	r3, #15
 800dc92:	e0df      	b.n	800de54 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	7d1b      	ldrb	r3, [r3, #20]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d009      	beq.n	800dcb0 <tcp_connect+0x64>
 800dc9c:	4b6f      	ldr	r3, [pc, #444]	@ (800de5c <tcp_connect+0x210>)
 800dc9e:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800dca2:	4972      	ldr	r1, [pc, #456]	@ (800de6c <tcp_connect+0x220>)
 800dca4:	486f      	ldr	r0, [pc, #444]	@ (800de64 <tcp_connect+0x218>)
 800dca6:	f7f3 fa31 	bl	800110c <printf>
 800dcaa:	f06f 0309 	mvn.w	r3, #9
 800dcae:	e0d1      	b.n	800de54 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <tcp_connect+0x70>
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	e000      	b.n	800dcbe <tcp_connect+0x72>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	88fa      	ldrh	r2, [r7, #6]
 800dcc6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	7a1b      	ldrb	r3, [r3, #8]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d006      	beq.n	800dcde <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	7a1b      	ldrb	r3, [r3, #8]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fe fd3f 	bl	800c758 <netif_get_by_index>
 800dcda:	6278      	str	r0, [r7, #36]	@ 0x24
 800dcdc:	e005      	b.n	800dcea <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	3304      	adds	r3, #4
 800dce2:	4618      	mov	r0, r3
 800dce4:	f007 f95a 	bl	8014f9c <ip4_route>
 800dce8:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800dcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d102      	bne.n	800dcf6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800dcf0:	f06f 0303 	mvn.w	r3, #3
 800dcf4:	e0ae      	b.n	800de54 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d003      	beq.n	800dd04 <tcp_connect+0xb8>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d111      	bne.n	800dd28 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800dd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d002      	beq.n	800dd10 <tcp_connect+0xc4>
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	e000      	b.n	800dd12 <tcp_connect+0xc6>
 800dd10:	2300      	movs	r3, #0
 800dd12:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d102      	bne.n	800dd20 <tcp_connect+0xd4>
      return ERR_RTE;
 800dd1a:	f06f 0303 	mvn.w	r3, #3
 800dd1e:	e099      	b.n	800de54 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	8adb      	ldrh	r3, [r3, #22]
 800dd2c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	8adb      	ldrh	r3, [r3, #22]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d10c      	bne.n	800dd50 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800dd36:	f7ff ff43 	bl	800dbc0 <tcp_new_port>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	8adb      	ldrh	r3, [r3, #22]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d102      	bne.n	800dd50 <tcp_connect+0x104>
      return ERR_BUF;
 800dd4a:	f06f 0301 	mvn.w	r3, #1
 800dd4e:	e081      	b.n	800de54 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f001 f869 	bl	800ee28 <tcp_next_iss>
 800dd56:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	1e5a      	subs	r2, r3, #1
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	1e5a      	subs	r2, r3, #1
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	1e5a      	subs	r2, r3, #1
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dd82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dd9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dda4:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	3304      	adds	r3, #4
 800ddae:	461a      	mov	r2, r3
 800ddb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ddb2:	f001 f85f 	bl	800ee74 <tcp_eff_send_mss_netif>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	461a      	mov	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ddce:	2102      	movs	r1, #2
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f004 fabd 	bl	8012350 <tcp_enqueue_flags>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800ddda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d136      	bne.n	800de50 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2202      	movs	r2, #2
 800dde6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800dde8:	8b7b      	ldrh	r3, [r7, #26]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d021      	beq.n	800de32 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ddee:	4b20      	ldr	r3, [pc, #128]	@ (800de70 <tcp_connect+0x224>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d105      	bne.n	800de04 <tcp_connect+0x1b8>
 800ddf8:	4b1d      	ldr	r3, [pc, #116]	@ (800de70 <tcp_connect+0x224>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	4a1c      	ldr	r2, [pc, #112]	@ (800de70 <tcp_connect+0x224>)
 800de00:	6013      	str	r3, [r2, #0]
 800de02:	e013      	b.n	800de2c <tcp_connect+0x1e0>
 800de04:	4b1a      	ldr	r3, [pc, #104]	@ (800de70 <tcp_connect+0x224>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	623b      	str	r3, [r7, #32]
 800de0a:	e00c      	b.n	800de26 <tcp_connect+0x1da>
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	429a      	cmp	r2, r3
 800de14:	d104      	bne.n	800de20 <tcp_connect+0x1d4>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	68da      	ldr	r2, [r3, #12]
 800de1a:	6a3b      	ldr	r3, [r7, #32]
 800de1c:	60da      	str	r2, [r3, #12]
 800de1e:	e005      	b.n	800de2c <tcp_connect+0x1e0>
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	623b      	str	r3, [r7, #32]
 800de26:	6a3b      	ldr	r3, [r7, #32]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1ef      	bne.n	800de0c <tcp_connect+0x1c0>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2200      	movs	r2, #0
 800de30:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800de32:	4b10      	ldr	r3, [pc, #64]	@ (800de74 <tcp_connect+0x228>)
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	60da      	str	r2, [r3, #12]
 800de3a:	4a0e      	ldr	r2, [pc, #56]	@ (800de74 <tcp_connect+0x228>)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6013      	str	r3, [r2, #0]
 800de40:	f005 faea 	bl	8013418 <tcp_timer_needed>
 800de44:	4b0c      	ldr	r3, [pc, #48]	@ (800de78 <tcp_connect+0x22c>)
 800de46:	2201      	movs	r2, #1
 800de48:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f004 fb6e 	bl	801252c <tcp_output>
  }
  return ret;
 800de50:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3728      	adds	r7, #40	@ 0x28
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	08018e84 	.word	0x08018e84
 800de60:	08019160 	.word	0x08019160
 800de64:	08018ec8 	.word	0x08018ec8
 800de68:	0801917c 	.word	0x0801917c
 800de6c:	08019198 	.word	0x08019198
 800de70:	2000c5a8 	.word	0x2000c5a8
 800de74:	2000c5b0 	.word	0x2000c5b0
 800de78:	2000c5b8 	.word	0x2000c5b8

0800de7c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800de7c:	b5b0      	push	{r4, r5, r7, lr}
 800de7e:	b090      	sub	sp, #64	@ 0x40
 800de80:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800de82:	2300      	movs	r3, #0
 800de84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800de88:	4b95      	ldr	r3, [pc, #596]	@ (800e0e0 <tcp_slowtmr+0x264>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3301      	adds	r3, #1
 800de8e:	4a94      	ldr	r2, [pc, #592]	@ (800e0e0 <tcp_slowtmr+0x264>)
 800de90:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800de92:	4b94      	ldr	r3, [pc, #592]	@ (800e0e4 <tcp_slowtmr+0x268>)
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	3301      	adds	r3, #1
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	4b92      	ldr	r3, [pc, #584]	@ (800e0e4 <tcp_slowtmr+0x268>)
 800de9c:	701a      	strb	r2, [r3, #0]
 800de9e:	e000      	b.n	800dea2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800dea0:	bf00      	nop
  prev = NULL;
 800dea2:	2300      	movs	r3, #0
 800dea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800dea6:	4b90      	ldr	r3, [pc, #576]	@ (800e0e8 <tcp_slowtmr+0x26c>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800deac:	e29d      	b.n	800e3ea <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800deae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb0:	7d1b      	ldrb	r3, [r3, #20]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <tcp_slowtmr+0x48>
 800deb6:	4b8d      	ldr	r3, [pc, #564]	@ (800e0ec <tcp_slowtmr+0x270>)
 800deb8:	f240 42be 	movw	r2, #1214	@ 0x4be
 800debc:	498c      	ldr	r1, [pc, #560]	@ (800e0f0 <tcp_slowtmr+0x274>)
 800debe:	488d      	ldr	r0, [pc, #564]	@ (800e0f4 <tcp_slowtmr+0x278>)
 800dec0:	f7f3 f924 	bl	800110c <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec6:	7d1b      	ldrb	r3, [r3, #20]
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d106      	bne.n	800deda <tcp_slowtmr+0x5e>
 800decc:	4b87      	ldr	r3, [pc, #540]	@ (800e0ec <tcp_slowtmr+0x270>)
 800dece:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800ded2:	4989      	ldr	r1, [pc, #548]	@ (800e0f8 <tcp_slowtmr+0x27c>)
 800ded4:	4887      	ldr	r0, [pc, #540]	@ (800e0f4 <tcp_slowtmr+0x278>)
 800ded6:	f7f3 f919 	bl	800110c <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800deda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dedc:	7d1b      	ldrb	r3, [r3, #20]
 800dede:	2b0a      	cmp	r3, #10
 800dee0:	d106      	bne.n	800def0 <tcp_slowtmr+0x74>
 800dee2:	4b82      	ldr	r3, [pc, #520]	@ (800e0ec <tcp_slowtmr+0x270>)
 800dee4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800dee8:	4984      	ldr	r1, [pc, #528]	@ (800e0fc <tcp_slowtmr+0x280>)
 800deea:	4882      	ldr	r0, [pc, #520]	@ (800e0f4 <tcp_slowtmr+0x278>)
 800deec:	f7f3 f90e 	bl	800110c <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800def0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def2:	7f9a      	ldrb	r2, [r3, #30]
 800def4:	4b7b      	ldr	r3, [pc, #492]	@ (800e0e4 <tcp_slowtmr+0x268>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	429a      	cmp	r2, r3
 800defa:	d105      	bne.n	800df08 <tcp_slowtmr+0x8c>
      prev = pcb;
 800defc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800defe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800df00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800df06:	e270      	b.n	800e3ea <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800df08:	4b76      	ldr	r3, [pc, #472]	@ (800e0e4 <tcp_slowtmr+0x268>)
 800df0a:	781a      	ldrb	r2, [r3, #0]
 800df0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800df10:	2300      	movs	r3, #0
 800df12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800df16:	2300      	movs	r3, #0
 800df18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800df1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1e:	7d1b      	ldrb	r3, [r3, #20]
 800df20:	2b02      	cmp	r3, #2
 800df22:	d10a      	bne.n	800df3a <tcp_slowtmr+0xbe>
 800df24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df2a:	2b05      	cmp	r3, #5
 800df2c:	d905      	bls.n	800df3a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800df2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df32:	3301      	adds	r3, #1
 800df34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df38:	e11e      	b.n	800e178 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800df3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df40:	2b0b      	cmp	r3, #11
 800df42:	d905      	bls.n	800df50 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800df44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df48:	3301      	adds	r3, #1
 800df4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df4e:	e113      	b.n	800e178 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800df50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df52:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800df56:	2b00      	cmp	r3, #0
 800df58:	d075      	beq.n	800e046 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800df5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d006      	beq.n	800df70 <tcp_slowtmr+0xf4>
 800df62:	4b62      	ldr	r3, [pc, #392]	@ (800e0ec <tcp_slowtmr+0x270>)
 800df64:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800df68:	4965      	ldr	r1, [pc, #404]	@ (800e100 <tcp_slowtmr+0x284>)
 800df6a:	4862      	ldr	r0, [pc, #392]	@ (800e0f4 <tcp_slowtmr+0x278>)
 800df6c:	f7f3 f8ce 	bl	800110c <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800df70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df74:	2b00      	cmp	r3, #0
 800df76:	d106      	bne.n	800df86 <tcp_slowtmr+0x10a>
 800df78:	4b5c      	ldr	r3, [pc, #368]	@ (800e0ec <tcp_slowtmr+0x270>)
 800df7a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800df7e:	4961      	ldr	r1, [pc, #388]	@ (800e104 <tcp_slowtmr+0x288>)
 800df80:	485c      	ldr	r0, [pc, #368]	@ (800e0f4 <tcp_slowtmr+0x278>)
 800df82:	f7f3 f8c3 	bl	800110c <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800df86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df88:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800df8c:	2b0b      	cmp	r3, #11
 800df8e:	d905      	bls.n	800df9c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800df90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df94:	3301      	adds	r3, #1
 800df96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df9a:	e0ed      	b.n	800e178 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800df9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dfa2:	3b01      	subs	r3, #1
 800dfa4:	4a58      	ldr	r2, [pc, #352]	@ (800e108 <tcp_slowtmr+0x28c>)
 800dfa6:	5cd3      	ldrb	r3, [r2, r3]
 800dfa8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dfaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dfb0:	7c7a      	ldrb	r2, [r7, #17]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d907      	bls.n	800dfc6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800dfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	b2da      	uxtb	r2, r3
 800dfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800dfc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dfcc:	7c7a      	ldrb	r2, [r7, #17]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	f200 80d2 	bhi.w	800e178 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800dfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d108      	bne.n	800dff4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dfe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dfe4:	f005 f94a 	bl	801327c <tcp_zero_window_probe>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d014      	beq.n	800e018 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800dfee:	2300      	movs	r3, #0
 800dff0:	623b      	str	r3, [r7, #32]
 800dff2:	e011      	b.n	800e018 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dffa:	4619      	mov	r1, r3
 800dffc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dffe:	f004 f80f 	bl	8012020 <tcp_split_unsent_seg>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d107      	bne.n	800e018 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e00a:	f004 fa8f 	bl	801252c <tcp_output>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d101      	bne.n	800e018 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e018:	6a3b      	ldr	r3, [r7, #32]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f000 80ac 	beq.w	800e178 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e022:	2200      	movs	r2, #0
 800e024:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e02a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e02e:	2b06      	cmp	r3, #6
 800e030:	f200 80a2 	bhi.w	800e178 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e036:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e03a:	3301      	adds	r3, #1
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e040:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e044:	e098      	b.n	800e178 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e048:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	db0f      	blt.n	800e070 <tcp_slowtmr+0x1f4>
 800e050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e052:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e056:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d008      	beq.n	800e070 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e060:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e064:	b29b      	uxth	r3, r3
 800e066:	3301      	adds	r3, #1
 800e068:	b29b      	uxth	r3, r3
 800e06a:	b21a      	sxth	r2, r3
 800e06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e072:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e078:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e07c:	429a      	cmp	r2, r3
 800e07e:	db7b      	blt.n	800e178 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e082:	f004 fd47 	bl	8012b14 <tcp_rexmit_rto_prepare>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d007      	beq.n	800e09c <tcp_slowtmr+0x220>
 800e08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e090:	2b00      	cmp	r3, #0
 800e092:	d171      	bne.n	800e178 <tcp_slowtmr+0x2fc>
 800e094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d06d      	beq.n	800e178 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09e:	7d1b      	ldrb	r3, [r3, #20]
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	d03a      	beq.n	800e11a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e0aa:	2b0c      	cmp	r3, #12
 800e0ac:	bf28      	it	cs
 800e0ae:	230c      	movcs	r3, #12
 800e0b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e0b8:	10db      	asrs	r3, r3, #3
 800e0ba:	b21b      	sxth	r3, r3
 800e0bc:	461a      	mov	r2, r3
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e0c4:	4413      	add	r3, r2
 800e0c6:	7efa      	ldrb	r2, [r7, #27]
 800e0c8:	4910      	ldr	r1, [pc, #64]	@ (800e10c <tcp_slowtmr+0x290>)
 800e0ca:	5c8a      	ldrb	r2, [r1, r2]
 800e0cc:	4093      	lsls	r3, r2
 800e0ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	dc1a      	bgt.n	800e110 <tcp_slowtmr+0x294>
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	b21a      	sxth	r2, r3
 800e0de:	e019      	b.n	800e114 <tcp_slowtmr+0x298>
 800e0e0:	2000c5a4 	.word	0x2000c5a4
 800e0e4:	2000c5ba 	.word	0x2000c5ba
 800e0e8:	2000c5b0 	.word	0x2000c5b0
 800e0ec:	08018e84 	.word	0x08018e84
 800e0f0:	080191c8 	.word	0x080191c8
 800e0f4:	08018ec8 	.word	0x08018ec8
 800e0f8:	080191f4 	.word	0x080191f4
 800e0fc:	08019220 	.word	0x08019220
 800e100:	08019250 	.word	0x08019250
 800e104:	08019284 	.word	0x08019284
 800e108:	0801aea0 	.word	0x0801aea0
 800e10c:	0801ae90 	.word	0x0801ae90
 800e110:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e116:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e11c:	2200      	movs	r2, #0
 800e11e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e122:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e128:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e12c:	4293      	cmp	r3, r2
 800e12e:	bf28      	it	cs
 800e130:	4613      	movcs	r3, r2
 800e132:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e134:	8a7b      	ldrh	r3, [r7, #18]
 800e136:	085b      	lsrs	r3, r3, #1
 800e138:	b29a      	uxth	r2, r3
 800e13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e142:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e148:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e14a:	005b      	lsls	r3, r3, #1
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	429a      	cmp	r2, r3
 800e150:	d206      	bcs.n	800e160 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e154:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	b29a      	uxth	r2, r3
 800e15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e15c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e162:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e166:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16c:	2200      	movs	r2, #0
 800e16e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e172:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e174:	f004 fd3e 	bl	8012bf4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e17a:	7d1b      	ldrb	r3, [r3, #20]
 800e17c:	2b06      	cmp	r3, #6
 800e17e:	d111      	bne.n	800e1a4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e182:	8b5b      	ldrh	r3, [r3, #26]
 800e184:	f003 0310 	and.w	r3, r3, #16
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00b      	beq.n	800e1a4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e18c:	4b9c      	ldr	r3, [pc, #624]	@ (800e400 <tcp_slowtmr+0x584>)
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e192:	6a1b      	ldr	r3, [r3, #32]
 800e194:	1ad3      	subs	r3, r2, r3
 800e196:	2b28      	cmp	r3, #40	@ 0x28
 800e198:	d904      	bls.n	800e1a4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e19a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e19e:	3301      	adds	r3, #1
 800e1a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a6:	7a5b      	ldrb	r3, [r3, #9]
 800e1a8:	f003 0308 	and.w	r3, r3, #8
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d04a      	beq.n	800e246 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e1b4:	2b04      	cmp	r3, #4
 800e1b6:	d003      	beq.n	800e1c0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e1bc:	2b07      	cmp	r3, #7
 800e1be:	d142      	bne.n	800e246 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1c0:	4b8f      	ldr	r3, [pc, #572]	@ (800e400 <tcp_slowtmr+0x584>)
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c6:	6a1b      	ldr	r3, [r3, #32]
 800e1c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1cc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e1d0:	4b8c      	ldr	r3, [pc, #560]	@ (800e404 <tcp_slowtmr+0x588>)
 800e1d2:	440b      	add	r3, r1
 800e1d4:	498c      	ldr	r1, [pc, #560]	@ (800e408 <tcp_slowtmr+0x58c>)
 800e1d6:	fba1 1303 	umull	r1, r3, r1, r3
 800e1da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d90a      	bls.n	800e1f6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e1ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e1f4:	e027      	b.n	800e246 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1f6:	4b82      	ldr	r3, [pc, #520]	@ (800e400 <tcp_slowtmr+0x584>)
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
 800e1fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e202:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e208:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e20c:	4618      	mov	r0, r3
 800e20e:	4b7f      	ldr	r3, [pc, #508]	@ (800e40c <tcp_slowtmr+0x590>)
 800e210:	fb00 f303 	mul.w	r3, r0, r3
 800e214:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e216:	497c      	ldr	r1, [pc, #496]	@ (800e408 <tcp_slowtmr+0x58c>)
 800e218:	fba1 1303 	umull	r1, r3, r1, r3
 800e21c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e21e:	429a      	cmp	r2, r3
 800e220:	d911      	bls.n	800e246 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e222:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e224:	f004 ffea 	bl	80131fc <tcp_keepalive>
 800e228:	4603      	mov	r3, r0
 800e22a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e22e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e232:	2b00      	cmp	r3, #0
 800e234:	d107      	bne.n	800e246 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e238:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e23c:	3301      	adds	r3, #1
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e242:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d011      	beq.n	800e272 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e24e:	4b6c      	ldr	r3, [pc, #432]	@ (800e400 <tcp_slowtmr+0x584>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	1ad2      	subs	r2, r2, r3
 800e258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e25e:	4619      	mov	r1, r3
 800e260:	460b      	mov	r3, r1
 800e262:	005b      	lsls	r3, r3, #1
 800e264:	440b      	add	r3, r1
 800e266:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e268:	429a      	cmp	r2, r3
 800e26a:	d302      	bcc.n	800e272 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e26c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e26e:	f000 feab 	bl	800efc8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e274:	7d1b      	ldrb	r3, [r3, #20]
 800e276:	2b03      	cmp	r3, #3
 800e278:	d10b      	bne.n	800e292 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e27a:	4b61      	ldr	r3, [pc, #388]	@ (800e400 <tcp_slowtmr+0x584>)
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	2b28      	cmp	r3, #40	@ 0x28
 800e286:	d904      	bls.n	800e292 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e28c:	3301      	adds	r3, #1
 800e28e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e294:	7d1b      	ldrb	r3, [r3, #20]
 800e296:	2b09      	cmp	r3, #9
 800e298:	d10b      	bne.n	800e2b2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e29a:	4b59      	ldr	r3, [pc, #356]	@ (800e400 <tcp_slowtmr+0x584>)
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a0:	6a1b      	ldr	r3, [r3, #32]
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	2bf0      	cmp	r3, #240	@ 0xf0
 800e2a6:	d904      	bls.n	800e2b2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e2b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d060      	beq.n	800e37c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2c0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e2c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e2c4:	f000 fccc 	bl	800ec60 <tcp_pcb_purge>
      if (prev != NULL) {
 800e2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d010      	beq.n	800e2f0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e2ce:	4b50      	ldr	r3, [pc, #320]	@ (800e410 <tcp_slowtmr+0x594>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d106      	bne.n	800e2e6 <tcp_slowtmr+0x46a>
 800e2d8:	4b4e      	ldr	r3, [pc, #312]	@ (800e414 <tcp_slowtmr+0x598>)
 800e2da:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e2de:	494e      	ldr	r1, [pc, #312]	@ (800e418 <tcp_slowtmr+0x59c>)
 800e2e0:	484e      	ldr	r0, [pc, #312]	@ (800e41c <tcp_slowtmr+0x5a0>)
 800e2e2:	f7f2 ff13 	bl	800110c <printf>
        prev->next = pcb->next;
 800e2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e8:	68da      	ldr	r2, [r3, #12]
 800e2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ec:	60da      	str	r2, [r3, #12]
 800e2ee:	e00f      	b.n	800e310 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e2f0:	4b47      	ldr	r3, [pc, #284]	@ (800e410 <tcp_slowtmr+0x594>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d006      	beq.n	800e308 <tcp_slowtmr+0x48c>
 800e2fa:	4b46      	ldr	r3, [pc, #280]	@ (800e414 <tcp_slowtmr+0x598>)
 800e2fc:	f240 5271 	movw	r2, #1393	@ 0x571
 800e300:	4947      	ldr	r1, [pc, #284]	@ (800e420 <tcp_slowtmr+0x5a4>)
 800e302:	4846      	ldr	r0, [pc, #280]	@ (800e41c <tcp_slowtmr+0x5a0>)
 800e304:	f7f2 ff02 	bl	800110c <printf>
        tcp_active_pcbs = pcb->next;
 800e308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	4a40      	ldr	r2, [pc, #256]	@ (800e410 <tcp_slowtmr+0x594>)
 800e30e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e310:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e314:	2b00      	cmp	r3, #0
 800e316:	d013      	beq.n	800e340 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e320:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e324:	3304      	adds	r3, #4
 800e326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e328:	8ad2      	ldrh	r2, [r2, #22]
 800e32a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e32c:	8b09      	ldrh	r1, [r1, #24]
 800e32e:	9102      	str	r1, [sp, #8]
 800e330:	9201      	str	r2, [sp, #4]
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	462b      	mov	r3, r5
 800e336:	4622      	mov	r2, r4
 800e338:	4601      	mov	r1, r0
 800e33a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e33c:	f004 feaa 	bl	8013094 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e342:	691b      	ldr	r3, [r3, #16]
 800e344:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e348:	7d1b      	ldrb	r3, [r3, #20]
 800e34a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e356:	6838      	ldr	r0, [r7, #0]
 800e358:	f7ff f838 	bl	800d3cc <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e35c:	4b31      	ldr	r3, [pc, #196]	@ (800e424 <tcp_slowtmr+0x5a8>)
 800e35e:	2200      	movs	r2, #0
 800e360:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d004      	beq.n	800e372 <tcp_slowtmr+0x4f6>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f06f 010c 	mvn.w	r1, #12
 800e36e:	68b8      	ldr	r0, [r7, #8]
 800e370:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e372:	4b2c      	ldr	r3, [pc, #176]	@ (800e424 <tcp_slowtmr+0x5a8>)
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d037      	beq.n	800e3ea <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e37a:	e592      	b.n	800dea2 <tcp_slowtmr+0x26>
      prev = pcb;
 800e37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e388:	7f1b      	ldrb	r3, [r3, #28]
 800e38a:	3301      	adds	r3, #1
 800e38c:	b2da      	uxtb	r2, r3
 800e38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e390:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e394:	7f1a      	ldrb	r2, [r3, #28]
 800e396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e398:	7f5b      	ldrb	r3, [r3, #29]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d325      	bcc.n	800e3ea <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e3a4:	4b1f      	ldr	r3, [pc, #124]	@ (800e424 <tcp_slowtmr+0x5a8>)
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00b      	beq.n	800e3cc <tcp_slowtmr+0x550>
 800e3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e3ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3bc:	6912      	ldr	r2, [r2, #16]
 800e3be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	4798      	blx	r3
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e3ca:	e002      	b.n	800e3d2 <tcp_slowtmr+0x556>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e3d2:	4b14      	ldr	r3, [pc, #80]	@ (800e424 <tcp_slowtmr+0x5a8>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f47f ad62 	bne.w	800dea0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e3dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d102      	bne.n	800e3ea <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e3e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3e6:	f004 f8a1 	bl	801252c <tcp_output>
  while (pcb != NULL) {
 800e3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f47f ad5e 	bne.w	800deae <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e3f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e428 <tcp_slowtmr+0x5ac>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e3fc:	e069      	b.n	800e4d2 <tcp_slowtmr+0x656>
 800e3fe:	bf00      	nop
 800e400:	2000c5a4 	.word	0x2000c5a4
 800e404:	000a4cb8 	.word	0x000a4cb8
 800e408:	10624dd3 	.word	0x10624dd3
 800e40c:	000124f8 	.word	0x000124f8
 800e410:	2000c5b0 	.word	0x2000c5b0
 800e414:	08018e84 	.word	0x08018e84
 800e418:	080192bc 	.word	0x080192bc
 800e41c:	08018ec8 	.word	0x08018ec8
 800e420:	080192e8 	.word	0x080192e8
 800e424:	2000c5b8 	.word	0x2000c5b8
 800e428:	2000c5b4 	.word	0x2000c5b4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e42e:	7d1b      	ldrb	r3, [r3, #20]
 800e430:	2b0a      	cmp	r3, #10
 800e432:	d006      	beq.n	800e442 <tcp_slowtmr+0x5c6>
 800e434:	4b2b      	ldr	r3, [pc, #172]	@ (800e4e4 <tcp_slowtmr+0x668>)
 800e436:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e43a:	492b      	ldr	r1, [pc, #172]	@ (800e4e8 <tcp_slowtmr+0x66c>)
 800e43c:	482b      	ldr	r0, [pc, #172]	@ (800e4ec <tcp_slowtmr+0x670>)
 800e43e:	f7f2 fe65 	bl	800110c <printf>
    pcb_remove = 0;
 800e442:	2300      	movs	r3, #0
 800e444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e448:	4b29      	ldr	r3, [pc, #164]	@ (800e4f0 <tcp_slowtmr+0x674>)
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44e:	6a1b      	ldr	r3, [r3, #32]
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	2bf0      	cmp	r3, #240	@ 0xf0
 800e454:	d904      	bls.n	800e460 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e456:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e45a:	3301      	adds	r3, #1
 800e45c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e464:	2b00      	cmp	r3, #0
 800e466:	d02f      	beq.n	800e4c8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e468:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e46a:	f000 fbf9 	bl	800ec60 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e470:	2b00      	cmp	r3, #0
 800e472:	d010      	beq.n	800e496 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e474:	4b1f      	ldr	r3, [pc, #124]	@ (800e4f4 <tcp_slowtmr+0x678>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d106      	bne.n	800e48c <tcp_slowtmr+0x610>
 800e47e:	4b19      	ldr	r3, [pc, #100]	@ (800e4e4 <tcp_slowtmr+0x668>)
 800e480:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e484:	491c      	ldr	r1, [pc, #112]	@ (800e4f8 <tcp_slowtmr+0x67c>)
 800e486:	4819      	ldr	r0, [pc, #100]	@ (800e4ec <tcp_slowtmr+0x670>)
 800e488:	f7f2 fe40 	bl	800110c <printf>
        prev->next = pcb->next;
 800e48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e48e:	68da      	ldr	r2, [r3, #12]
 800e490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e492:	60da      	str	r2, [r3, #12]
 800e494:	e00f      	b.n	800e4b6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e496:	4b17      	ldr	r3, [pc, #92]	@ (800e4f4 <tcp_slowtmr+0x678>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d006      	beq.n	800e4ae <tcp_slowtmr+0x632>
 800e4a0:	4b10      	ldr	r3, [pc, #64]	@ (800e4e4 <tcp_slowtmr+0x668>)
 800e4a2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e4a6:	4915      	ldr	r1, [pc, #84]	@ (800e4fc <tcp_slowtmr+0x680>)
 800e4a8:	4810      	ldr	r0, [pc, #64]	@ (800e4ec <tcp_slowtmr+0x670>)
 800e4aa:	f7f2 fe2f 	bl	800110c <printf>
        tcp_tw_pcbs = pcb->next;
 800e4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	4a10      	ldr	r2, [pc, #64]	@ (800e4f4 <tcp_slowtmr+0x678>)
 800e4b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e4c0:	69f8      	ldr	r0, [r7, #28]
 800e4c2:	f7fe ff83 	bl	800d3cc <tcp_free>
 800e4c6:	e004      	b.n	800e4d2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1a9      	bne.n	800e42c <tcp_slowtmr+0x5b0>
    }
  }
}
 800e4d8:	bf00      	nop
 800e4da:	bf00      	nop
 800e4dc:	3730      	adds	r7, #48	@ 0x30
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bdb0      	pop	{r4, r5, r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	08018e84 	.word	0x08018e84
 800e4e8:	08019314 	.word	0x08019314
 800e4ec:	08018ec8 	.word	0x08018ec8
 800e4f0:	2000c5a4 	.word	0x2000c5a4
 800e4f4:	2000c5b4 	.word	0x2000c5b4
 800e4f8:	08019344 	.word	0x08019344
 800e4fc:	0801936c 	.word	0x0801936c

0800e500 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e506:	4b2d      	ldr	r3, [pc, #180]	@ (800e5bc <tcp_fasttmr+0xbc>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	3301      	adds	r3, #1
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	4b2b      	ldr	r3, [pc, #172]	@ (800e5bc <tcp_fasttmr+0xbc>)
 800e510:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e512:	4b2b      	ldr	r3, [pc, #172]	@ (800e5c0 <tcp_fasttmr+0xc0>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e518:	e048      	b.n	800e5ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	7f9a      	ldrb	r2, [r3, #30]
 800e51e:	4b27      	ldr	r3, [pc, #156]	@ (800e5bc <tcp_fasttmr+0xbc>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	429a      	cmp	r2, r3
 800e524:	d03f      	beq.n	800e5a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e526:	4b25      	ldr	r3, [pc, #148]	@ (800e5bc <tcp_fasttmr+0xbc>)
 800e528:	781a      	ldrb	r2, [r3, #0]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	8b5b      	ldrh	r3, [r3, #26]
 800e532:	f003 0301 	and.w	r3, r3, #1
 800e536:	2b00      	cmp	r3, #0
 800e538:	d010      	beq.n	800e55c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	8b5b      	ldrh	r3, [r3, #26]
 800e53e:	f043 0302 	orr.w	r3, r3, #2
 800e542:	b29a      	uxth	r2, r3
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f003 ffef 	bl	801252c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	8b5b      	ldrh	r3, [r3, #26]
 800e552:	f023 0303 	bic.w	r3, r3, #3
 800e556:	b29a      	uxth	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	8b5b      	ldrh	r3, [r3, #26]
 800e560:	f003 0308 	and.w	r3, r3, #8
 800e564:	2b00      	cmp	r3, #0
 800e566:	d009      	beq.n	800e57c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	8b5b      	ldrh	r3, [r3, #26]
 800e56c:	f023 0308 	bic.w	r3, r3, #8
 800e570:	b29a      	uxth	r2, r3
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f7ff f8bc 	bl	800d6f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00a      	beq.n	800e5a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e58a:	4b0e      	ldr	r3, [pc, #56]	@ (800e5c4 <tcp_fasttmr+0xc4>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f000 f819 	bl	800e5c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e596:	4b0b      	ldr	r3, [pc, #44]	@ (800e5c4 <tcp_fasttmr+0xc4>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d000      	beq.n	800e5a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e59e:	e7b8      	b.n	800e512 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	607b      	str	r3, [r7, #4]
 800e5a4:	e002      	b.n	800e5ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1b3      	bne.n	800e51a <tcp_fasttmr+0x1a>
    }
  }
}
 800e5b2:	bf00      	nop
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	2000c5ba 	.word	0x2000c5ba
 800e5c0:	2000c5b0 	.word	0x2000c5b0
 800e5c4:	2000c5b8 	.word	0x2000c5b8

0800e5c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e5c8:	b590      	push	{r4, r7, lr}
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d109      	bne.n	800e5ea <tcp_process_refused_data+0x22>
 800e5d6:	4b37      	ldr	r3, [pc, #220]	@ (800e6b4 <tcp_process_refused_data+0xec>)
 800e5d8:	f240 6209 	movw	r2, #1545	@ 0x609
 800e5dc:	4936      	ldr	r1, [pc, #216]	@ (800e6b8 <tcp_process_refused_data+0xf0>)
 800e5de:	4837      	ldr	r0, [pc, #220]	@ (800e6bc <tcp_process_refused_data+0xf4>)
 800e5e0:	f7f2 fd94 	bl	800110c <printf>
 800e5e4:	f06f 030f 	mvn.w	r3, #15
 800e5e8:	e060      	b.n	800e6ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5ee:	7b5b      	ldrb	r3, [r3, #13]
 800e5f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00b      	beq.n	800e620 <tcp_process_refused_data+0x58>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6918      	ldr	r0, [r3, #16]
 800e612:	2300      	movs	r3, #0
 800e614:	68ba      	ldr	r2, [r7, #8]
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	47a0      	blx	r4
 800e61a:	4603      	mov	r3, r0
 800e61c:	73fb      	strb	r3, [r7, #15]
 800e61e:	e007      	b.n	800e630 <tcp_process_refused_data+0x68>
 800e620:	2300      	movs	r3, #0
 800e622:	68ba      	ldr	r2, [r7, #8]
 800e624:	6879      	ldr	r1, [r7, #4]
 800e626:	2000      	movs	r0, #0
 800e628:	f000 f8a4 	bl	800e774 <tcp_recv_null>
 800e62c:	4603      	mov	r3, r0
 800e62e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d12a      	bne.n	800e68e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e638:	7bbb      	ldrb	r3, [r7, #14]
 800e63a:	f003 0320 	and.w	r3, r3, #32
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d033      	beq.n	800e6aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e646:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e64a:	d005      	beq.n	800e658 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e650:	3301      	adds	r3, #1
 800e652:	b29a      	uxth	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00b      	beq.n	800e67a <tcp_process_refused_data+0xb2>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6918      	ldr	r0, [r3, #16]
 800e66c:	2300      	movs	r3, #0
 800e66e:	2200      	movs	r2, #0
 800e670:	6879      	ldr	r1, [r7, #4]
 800e672:	47a0      	blx	r4
 800e674:	4603      	mov	r3, r0
 800e676:	73fb      	strb	r3, [r7, #15]
 800e678:	e001      	b.n	800e67e <tcp_process_refused_data+0xb6>
 800e67a:	2300      	movs	r3, #0
 800e67c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e682:	f113 0f0d 	cmn.w	r3, #13
 800e686:	d110      	bne.n	800e6aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e688:	f06f 030c 	mvn.w	r3, #12
 800e68c:	e00e      	b.n	800e6ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e692:	f113 0f0d 	cmn.w	r3, #13
 800e696:	d102      	bne.n	800e69e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e698:	f06f 030c 	mvn.w	r3, #12
 800e69c:	e006      	b.n	800e6ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	68ba      	ldr	r2, [r7, #8]
 800e6a2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e6a4:	f06f 0304 	mvn.w	r3, #4
 800e6a8:	e000      	b.n	800e6ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd90      	pop	{r4, r7, pc}
 800e6b4:	08018e84 	.word	0x08018e84
 800e6b8:	08019394 	.word	0x08019394
 800e6bc:	08018ec8 	.word	0x08018ec8

0800e6c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e6c8:	e007      	b.n	800e6da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 f80a 	bl	800e6ea <tcp_seg_free>
    seg = next;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d1f4      	bne.n	800e6ca <tcp_segs_free+0xa>
  }
}
 800e6e0:	bf00      	nop
 800e6e2:	bf00      	nop
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b082      	sub	sp, #8
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00c      	beq.n	800e712 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d004      	beq.n	800e70a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe fbb5 	bl	800ce74 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e70a:	6879      	ldr	r1, [r7, #4]
 800e70c:	2003      	movs	r0, #3
 800e70e:	f7fd fd0d 	bl	800c12c <memp_free>
  }
}
 800e712:	bf00      	nop
 800e714:	3708      	adds	r7, #8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
	...

0800e71c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d106      	bne.n	800e738 <tcp_seg_copy+0x1c>
 800e72a:	4b0f      	ldr	r3, [pc, #60]	@ (800e768 <tcp_seg_copy+0x4c>)
 800e72c:	f240 6282 	movw	r2, #1666	@ 0x682
 800e730:	490e      	ldr	r1, [pc, #56]	@ (800e76c <tcp_seg_copy+0x50>)
 800e732:	480f      	ldr	r0, [pc, #60]	@ (800e770 <tcp_seg_copy+0x54>)
 800e734:	f7f2 fcea 	bl	800110c <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e738:	2003      	movs	r0, #3
 800e73a:	f7fd fc81 	bl	800c040 <memp_malloc>
 800e73e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d101      	bne.n	800e74a <tcp_seg_copy+0x2e>
    return NULL;
 800e746:	2300      	movs	r3, #0
 800e748:	e00a      	b.n	800e760 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e74a:	2210      	movs	r2, #16
 800e74c:	6879      	ldr	r1, [r7, #4]
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f008 fa19 	bl	8016b86 <memcpy>
  pbuf_ref(cseg->p);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fe fc31 	bl	800cfc0 <pbuf_ref>
  return cseg;
 800e75e:	68fb      	ldr	r3, [r7, #12]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	08018e84 	.word	0x08018e84
 800e76c:	080193d8 	.word	0x080193d8
 800e770:	08018ec8 	.word	0x08018ec8

0800e774 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d109      	bne.n	800e79c <tcp_recv_null+0x28>
 800e788:	4b12      	ldr	r3, [pc, #72]	@ (800e7d4 <tcp_recv_null+0x60>)
 800e78a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e78e:	4912      	ldr	r1, [pc, #72]	@ (800e7d8 <tcp_recv_null+0x64>)
 800e790:	4812      	ldr	r0, [pc, #72]	@ (800e7dc <tcp_recv_null+0x68>)
 800e792:	f7f2 fcbb 	bl	800110c <printf>
 800e796:	f06f 030f 	mvn.w	r3, #15
 800e79a:	e016      	b.n	800e7ca <tcp_recv_null+0x56>

  if (p != NULL) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d009      	beq.n	800e7b6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	891b      	ldrh	r3, [r3, #8]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	68b8      	ldr	r0, [r7, #8]
 800e7aa:	f7ff f9b9 	bl	800db20 <tcp_recved>
    pbuf_free(p);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7fe fb60 	bl	800ce74 <pbuf_free>
 800e7b4:	e008      	b.n	800e7c8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e7b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d104      	bne.n	800e7c8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e7be:	68b8      	ldr	r0, [r7, #8]
 800e7c0:	f7ff f802 	bl	800d7c8 <tcp_close>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	e000      	b.n	800e7ca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	08018e84 	.word	0x08018e84
 800e7d8:	080193f4 	.word	0x080193f4
 800e7dc:	08018ec8 	.word	0x08018ec8

0800e7e0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e7ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	db01      	blt.n	800e7f6 <tcp_kill_prio+0x16>
 800e7f2:	79fb      	ldrb	r3, [r7, #7]
 800e7f4:	e000      	b.n	800e7f8 <tcp_kill_prio+0x18>
 800e7f6:	237f      	movs	r3, #127	@ 0x7f
 800e7f8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e7fa:	7afb      	ldrb	r3, [r7, #11]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d034      	beq.n	800e86a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e800:	7afb      	ldrb	r3, [r7, #11]
 800e802:	3b01      	subs	r3, #1
 800e804:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e806:	2300      	movs	r3, #0
 800e808:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e80a:	2300      	movs	r3, #0
 800e80c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e80e:	4b19      	ldr	r3, [pc, #100]	@ (800e874 <tcp_kill_prio+0x94>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	617b      	str	r3, [r7, #20]
 800e814:	e01f      	b.n	800e856 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	7d5b      	ldrb	r3, [r3, #21]
 800e81a:	7afa      	ldrb	r2, [r7, #11]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d80c      	bhi.n	800e83a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e824:	7afa      	ldrb	r2, [r7, #11]
 800e826:	429a      	cmp	r2, r3
 800e828:	d112      	bne.n	800e850 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e82a:	4b13      	ldr	r3, [pc, #76]	@ (800e878 <tcp_kill_prio+0x98>)
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	6a1b      	ldr	r3, [r3, #32]
 800e832:	1ad3      	subs	r3, r2, r3
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	429a      	cmp	r2, r3
 800e838:	d80a      	bhi.n	800e850 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e83a:	4b0f      	ldr	r3, [pc, #60]	@ (800e878 <tcp_kill_prio+0x98>)
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	6a1b      	ldr	r3, [r3, #32]
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	7d5b      	ldrb	r3, [r3, #21]
 800e84e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	617b      	str	r3, [r7, #20]
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1dc      	bne.n	800e816 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d004      	beq.n	800e86c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e862:	6938      	ldr	r0, [r7, #16]
 800e864:	f7ff f8f6 	bl	800da54 <tcp_abort>
 800e868:	e000      	b.n	800e86c <tcp_kill_prio+0x8c>
    return;
 800e86a:	bf00      	nop
  }
}
 800e86c:	3718      	adds	r7, #24
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	2000c5b0 	.word	0x2000c5b0
 800e878:	2000c5a4 	.word	0x2000c5a4

0800e87c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
 800e882:	4603      	mov	r3, r0
 800e884:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	2b08      	cmp	r3, #8
 800e88a:	d009      	beq.n	800e8a0 <tcp_kill_state+0x24>
 800e88c:	79fb      	ldrb	r3, [r7, #7]
 800e88e:	2b09      	cmp	r3, #9
 800e890:	d006      	beq.n	800e8a0 <tcp_kill_state+0x24>
 800e892:	4b1a      	ldr	r3, [pc, #104]	@ (800e8fc <tcp_kill_state+0x80>)
 800e894:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e898:	4919      	ldr	r1, [pc, #100]	@ (800e900 <tcp_kill_state+0x84>)
 800e89a:	481a      	ldr	r0, [pc, #104]	@ (800e904 <tcp_kill_state+0x88>)
 800e89c:	f7f2 fc36 	bl	800110c <printf>

  inactivity = 0;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8a8:	4b17      	ldr	r3, [pc, #92]	@ (800e908 <tcp_kill_state+0x8c>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	617b      	str	r3, [r7, #20]
 800e8ae:	e017      	b.n	800e8e0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	7d1b      	ldrb	r3, [r3, #20]
 800e8b4:	79fa      	ldrb	r2, [r7, #7]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d10f      	bne.n	800e8da <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e8ba:	4b14      	ldr	r3, [pc, #80]	@ (800e90c <tcp_kill_state+0x90>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	6a1b      	ldr	r3, [r3, #32]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d807      	bhi.n	800e8da <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e8ca:	4b10      	ldr	r3, [pc, #64]	@ (800e90c <tcp_kill_state+0x90>)
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	6a1b      	ldr	r3, [r3, #32]
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	617b      	str	r3, [r7, #20]
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d1e4      	bne.n	800e8b0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d003      	beq.n	800e8f4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	6938      	ldr	r0, [r7, #16]
 800e8f0:	f7fe fff2 	bl	800d8d8 <tcp_abandon>
  }
}
 800e8f4:	bf00      	nop
 800e8f6:	3718      	adds	r7, #24
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	08018e84 	.word	0x08018e84
 800e900:	08019410 	.word	0x08019410
 800e904:	08018ec8 	.word	0x08018ec8
 800e908:	2000c5b0 	.word	0x2000c5b0
 800e90c:	2000c5a4 	.word	0x2000c5a4

0800e910 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e916:	2300      	movs	r3, #0
 800e918:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e91e:	4b12      	ldr	r3, [pc, #72]	@ (800e968 <tcp_kill_timewait+0x58>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	60fb      	str	r3, [r7, #12]
 800e924:	e012      	b.n	800e94c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e926:	4b11      	ldr	r3, [pc, #68]	@ (800e96c <tcp_kill_timewait+0x5c>)
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6a1b      	ldr	r3, [r3, #32]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	429a      	cmp	r2, r3
 800e934:	d807      	bhi.n	800e946 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e936:	4b0d      	ldr	r3, [pc, #52]	@ (800e96c <tcp_kill_timewait+0x5c>)
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6a1b      	ldr	r3, [r3, #32]
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	60fb      	str	r3, [r7, #12]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1e9      	bne.n	800e926 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d002      	beq.n	800e95e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e958:	68b8      	ldr	r0, [r7, #8]
 800e95a:	f7ff f87b 	bl	800da54 <tcp_abort>
  }
}
 800e95e:	bf00      	nop
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	2000c5b4 	.word	0x2000c5b4
 800e96c:	2000c5a4 	.word	0x2000c5a4

0800e970 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e976:	4b10      	ldr	r3, [pc, #64]	@ (800e9b8 <tcp_handle_closepend+0x48>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e97c:	e014      	b.n	800e9a8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	8b5b      	ldrh	r3, [r3, #26]
 800e988:	f003 0308 	and.w	r3, r3, #8
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d009      	beq.n	800e9a4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	8b5b      	ldrh	r3, [r3, #26]
 800e994:	f023 0308 	bic.w	r3, r3, #8
 800e998:	b29a      	uxth	r2, r3
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7fe fea8 	bl	800d6f4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d1e7      	bne.n	800e97e <tcp_handle_closepend+0xe>
  }
}
 800e9ae:	bf00      	nop
 800e9b0:	bf00      	nop
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	2000c5b0 	.word	0x2000c5b0

0800e9bc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9c6:	2001      	movs	r0, #1
 800e9c8:	f7fd fb3a 	bl	800c040 <memp_malloc>
 800e9cc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d126      	bne.n	800ea22 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e9d4:	f7ff ffcc 	bl	800e970 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e9d8:	f7ff ff9a 	bl	800e910 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9dc:	2001      	movs	r0, #1
 800e9de:	f7fd fb2f 	bl	800c040 <memp_malloc>
 800e9e2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d11b      	bne.n	800ea22 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e9ea:	2009      	movs	r0, #9
 800e9ec:	f7ff ff46 	bl	800e87c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9f0:	2001      	movs	r0, #1
 800e9f2:	f7fd fb25 	bl	800c040 <memp_malloc>
 800e9f6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d111      	bne.n	800ea22 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e9fe:	2008      	movs	r0, #8
 800ea00:	f7ff ff3c 	bl	800e87c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea04:	2001      	movs	r0, #1
 800ea06:	f7fd fb1b 	bl	800c040 <memp_malloc>
 800ea0a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d107      	bne.n	800ea22 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ea12:	79fb      	ldrb	r3, [r7, #7]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7ff fee3 	bl	800e7e0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	f7fd fb10 	bl	800c040 <memp_malloc>
 800ea20:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d03f      	beq.n	800eaa8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ea28:	229c      	movs	r2, #156	@ 0x9c
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	68f8      	ldr	r0, [r7, #12]
 800ea2e:	f007 ffd6 	bl	80169de <memset>
    pcb->prio = prio;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	79fa      	ldrb	r2, [r7, #7]
 800ea36:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ea3e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ea48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	22ff      	movs	r2, #255	@ 0xff
 800ea56:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ea5e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2206      	movs	r2, #6
 800ea64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2206      	movs	r2, #6
 800ea6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea74:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2201      	movs	r2, #1
 800ea7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ea7e:	4b0d      	ldr	r3, [pc, #52]	@ (800eab4 <tcp_alloc+0xf8>)
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ea86:	4b0c      	ldr	r3, [pc, #48]	@ (800eab8 <tcp_alloc+0xfc>)
 800ea88:	781a      	ldrb	r2, [r3, #0]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ea94:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	4a08      	ldr	r2, [pc, #32]	@ (800eabc <tcp_alloc+0x100>)
 800ea9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	4a07      	ldr	r2, [pc, #28]	@ (800eac0 <tcp_alloc+0x104>)
 800eaa4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	2000c5a4 	.word	0x2000c5a4
 800eab8:	2000c5ba 	.word	0x2000c5ba
 800eabc:	0800e775 	.word	0x0800e775
 800eac0:	006ddd00 	.word	0x006ddd00

0800eac4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	4603      	mov	r3, r0
 800eacc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800eace:	2040      	movs	r0, #64	@ 0x40
 800ead0:	f7ff ff74 	bl	800e9bc <tcp_alloc>
 800ead4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ead6:	68fb      	ldr	r3, [r7, #12]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d002      	beq.n	800eaf6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	611a      	str	r2, [r3, #16]
  }
}
 800eaf6:	bf00      	nop
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
	...

0800eb04 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00e      	beq.n	800eb32 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	7d1b      	ldrb	r3, [r3, #20]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d106      	bne.n	800eb2a <tcp_recv+0x26>
 800eb1c:	4b07      	ldr	r3, [pc, #28]	@ (800eb3c <tcp_recv+0x38>)
 800eb1e:	f240 72df 	movw	r2, #2015	@ 0x7df
 800eb22:	4907      	ldr	r1, [pc, #28]	@ (800eb40 <tcp_recv+0x3c>)
 800eb24:	4807      	ldr	r0, [pc, #28]	@ (800eb44 <tcp_recv+0x40>)
 800eb26:	f7f2 faf1 	bl	800110c <printf>
    pcb->recv = recv;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	683a      	ldr	r2, [r7, #0]
 800eb2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800eb32:	bf00      	nop
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	08018e84 	.word	0x08018e84
 800eb40:	08019420 	.word	0x08019420
 800eb44:	08018ec8 	.word	0x08018ec8

0800eb48 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00e      	beq.n	800eb76 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	7d1b      	ldrb	r3, [r3, #20]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d106      	bne.n	800eb6e <tcp_sent+0x26>
 800eb60:	4b07      	ldr	r3, [pc, #28]	@ (800eb80 <tcp_sent+0x38>)
 800eb62:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800eb66:	4907      	ldr	r1, [pc, #28]	@ (800eb84 <tcp_sent+0x3c>)
 800eb68:	4807      	ldr	r0, [pc, #28]	@ (800eb88 <tcp_sent+0x40>)
 800eb6a:	f7f2 facf 	bl	800110c <printf>
    pcb->sent = sent;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800eb76:	bf00      	nop
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	08018e84 	.word	0x08018e84
 800eb84:	08019448 	.word	0x08019448
 800eb88:	08018ec8 	.word	0x08018ec8

0800eb8c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00e      	beq.n	800ebba <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	7d1b      	ldrb	r3, [r3, #20]
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d106      	bne.n	800ebb2 <tcp_err+0x26>
 800eba4:	4b07      	ldr	r3, [pc, #28]	@ (800ebc4 <tcp_err+0x38>)
 800eba6:	f640 020d 	movw	r2, #2061	@ 0x80d
 800ebaa:	4907      	ldr	r1, [pc, #28]	@ (800ebc8 <tcp_err+0x3c>)
 800ebac:	4807      	ldr	r0, [pc, #28]	@ (800ebcc <tcp_err+0x40>)
 800ebae:	f7f2 faad 	bl	800110c <printf>
    pcb->errf = err;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	683a      	ldr	r2, [r7, #0]
 800ebb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800ebba:	bf00      	nop
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	08018e84 	.word	0x08018e84
 800ebc8:	08019470 	.word	0x08019470
 800ebcc:	08018ec8 	.word	0x08018ec8

0800ebd0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d008      	beq.n	800ebf2 <tcp_accept+0x22>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	7d1b      	ldrb	r3, [r3, #20]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d104      	bne.n	800ebf2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	619a      	str	r2, [r3, #24]
  }
}
 800ebf2:	bf00      	nop
 800ebf4:	3714      	adds	r7, #20
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
	...

0800ec00 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d107      	bne.n	800ec24 <tcp_poll+0x24>
 800ec14:	4b0e      	ldr	r3, [pc, #56]	@ (800ec50 <tcp_poll+0x50>)
 800ec16:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ec1a:	490e      	ldr	r1, [pc, #56]	@ (800ec54 <tcp_poll+0x54>)
 800ec1c:	480e      	ldr	r0, [pc, #56]	@ (800ec58 <tcp_poll+0x58>)
 800ec1e:	f7f2 fa75 	bl	800110c <printf>
 800ec22:	e011      	b.n	800ec48 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	7d1b      	ldrb	r3, [r3, #20]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d106      	bne.n	800ec3a <tcp_poll+0x3a>
 800ec2c:	4b08      	ldr	r3, [pc, #32]	@ (800ec50 <tcp_poll+0x50>)
 800ec2e:	f640 023e 	movw	r2, #2110	@ 0x83e
 800ec32:	490a      	ldr	r1, [pc, #40]	@ (800ec5c <tcp_poll+0x5c>)
 800ec34:	4808      	ldr	r0, [pc, #32]	@ (800ec58 <tcp_poll+0x58>)
 800ec36:	f7f2 fa69 	bl	800110c <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	79fa      	ldrb	r2, [r7, #7]
 800ec46:	775a      	strb	r2, [r3, #29]
}
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	08018e84 	.word	0x08018e84
 800ec54:	08019498 	.word	0x08019498
 800ec58:	08018ec8 	.word	0x08018ec8
 800ec5c:	080194b0 	.word	0x080194b0

0800ec60 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d107      	bne.n	800ec7e <tcp_pcb_purge+0x1e>
 800ec6e:	4b21      	ldr	r3, [pc, #132]	@ (800ecf4 <tcp_pcb_purge+0x94>)
 800ec70:	f640 0251 	movw	r2, #2129	@ 0x851
 800ec74:	4920      	ldr	r1, [pc, #128]	@ (800ecf8 <tcp_pcb_purge+0x98>)
 800ec76:	4821      	ldr	r0, [pc, #132]	@ (800ecfc <tcp_pcb_purge+0x9c>)
 800ec78:	f7f2 fa48 	bl	800110c <printf>
 800ec7c:	e037      	b.n	800ecee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	7d1b      	ldrb	r3, [r3, #20]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d033      	beq.n	800ecee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ec8a:	2b0a      	cmp	r3, #10
 800ec8c:	d02f      	beq.n	800ecee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d02b      	beq.n	800ecee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d007      	beq.n	800ecae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe f8e6 	bl	800ce74 <pbuf_free>
      pcb->refused_data = NULL;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d002      	beq.n	800ecbc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f986 	bl	800efc8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ecc2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7ff fcf9 	bl	800e6c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7ff fcf4 	bl	800e6c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	08018e84 	.word	0x08018e84
 800ecf8:	080194d0 	.word	0x080194d0
 800ecfc:	08018ec8 	.word	0x08018ec8

0800ed00 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d106      	bne.n	800ed1e <tcp_pcb_remove+0x1e>
 800ed10:	4b3e      	ldr	r3, [pc, #248]	@ (800ee0c <tcp_pcb_remove+0x10c>)
 800ed12:	f640 0283 	movw	r2, #2179	@ 0x883
 800ed16:	493e      	ldr	r1, [pc, #248]	@ (800ee10 <tcp_pcb_remove+0x110>)
 800ed18:	483e      	ldr	r0, [pc, #248]	@ (800ee14 <tcp_pcb_remove+0x114>)
 800ed1a:	f7f2 f9f7 	bl	800110c <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d106      	bne.n	800ed32 <tcp_pcb_remove+0x32>
 800ed24:	4b39      	ldr	r3, [pc, #228]	@ (800ee0c <tcp_pcb_remove+0x10c>)
 800ed26:	f640 0284 	movw	r2, #2180	@ 0x884
 800ed2a:	493b      	ldr	r1, [pc, #236]	@ (800ee18 <tcp_pcb_remove+0x118>)
 800ed2c:	4839      	ldr	r0, [pc, #228]	@ (800ee14 <tcp_pcb_remove+0x114>)
 800ed2e:	f7f2 f9ed 	bl	800110c <printf>

  TCP_RMV(pcblist, pcb);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	683a      	ldr	r2, [r7, #0]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d105      	bne.n	800ed48 <tcp_pcb_remove+0x48>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68da      	ldr	r2, [r3, #12]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	601a      	str	r2, [r3, #0]
 800ed46:	e013      	b.n	800ed70 <tcp_pcb_remove+0x70>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	60fb      	str	r3, [r7, #12]
 800ed4e:	e00c      	b.n	800ed6a <tcp_pcb_remove+0x6a>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	683a      	ldr	r2, [r7, #0]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d104      	bne.n	800ed64 <tcp_pcb_remove+0x64>
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	68da      	ldr	r2, [r3, #12]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	60da      	str	r2, [r3, #12]
 800ed62:	e005      	b.n	800ed70 <tcp_pcb_remove+0x70>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	60fb      	str	r3, [r7, #12]
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1ef      	bne.n	800ed50 <tcp_pcb_remove+0x50>
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	2200      	movs	r2, #0
 800ed74:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ed76:	6838      	ldr	r0, [r7, #0]
 800ed78:	f7ff ff72 	bl	800ec60 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	7d1b      	ldrb	r3, [r3, #20]
 800ed80:	2b0a      	cmp	r3, #10
 800ed82:	d013      	beq.n	800edac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d00f      	beq.n	800edac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	8b5b      	ldrh	r3, [r3, #26]
 800ed90:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d009      	beq.n	800edac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	8b5b      	ldrh	r3, [r3, #26]
 800ed9c:	f043 0302 	orr.w	r3, r3, #2
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eda6:	6838      	ldr	r0, [r7, #0]
 800eda8:	f003 fbc0 	bl	801252c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	7d1b      	ldrb	r3, [r3, #20]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d020      	beq.n	800edf6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d006      	beq.n	800edca <tcp_pcb_remove+0xca>
 800edbc:	4b13      	ldr	r3, [pc, #76]	@ (800ee0c <tcp_pcb_remove+0x10c>)
 800edbe:	f640 0293 	movw	r2, #2195	@ 0x893
 800edc2:	4916      	ldr	r1, [pc, #88]	@ (800ee1c <tcp_pcb_remove+0x11c>)
 800edc4:	4813      	ldr	r0, [pc, #76]	@ (800ee14 <tcp_pcb_remove+0x114>)
 800edc6:	f7f2 f9a1 	bl	800110c <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d006      	beq.n	800ede0 <tcp_pcb_remove+0xe0>
 800edd2:	4b0e      	ldr	r3, [pc, #56]	@ (800ee0c <tcp_pcb_remove+0x10c>)
 800edd4:	f640 0294 	movw	r2, #2196	@ 0x894
 800edd8:	4911      	ldr	r1, [pc, #68]	@ (800ee20 <tcp_pcb_remove+0x120>)
 800edda:	480e      	ldr	r0, [pc, #56]	@ (800ee14 <tcp_pcb_remove+0x114>)
 800eddc:	f7f2 f996 	bl	800110c <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d006      	beq.n	800edf6 <tcp_pcb_remove+0xf6>
 800ede8:	4b08      	ldr	r3, [pc, #32]	@ (800ee0c <tcp_pcb_remove+0x10c>)
 800edea:	f640 0296 	movw	r2, #2198	@ 0x896
 800edee:	490d      	ldr	r1, [pc, #52]	@ (800ee24 <tcp_pcb_remove+0x124>)
 800edf0:	4808      	ldr	r0, [pc, #32]	@ (800ee14 <tcp_pcb_remove+0x114>)
 800edf2:	f7f2 f98b 	bl	800110c <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	2200      	movs	r2, #0
 800edfa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2200      	movs	r2, #0
 800ee00:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ee02:	bf00      	nop
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	08018e84 	.word	0x08018e84
 800ee10:	080194ec 	.word	0x080194ec
 800ee14:	08018ec8 	.word	0x08018ec8
 800ee18:	08019508 	.word	0x08019508
 800ee1c:	08019528 	.word	0x08019528
 800ee20:	08019540 	.word	0x08019540
 800ee24:	0801955c 	.word	0x0801955c

0800ee28 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d106      	bne.n	800ee44 <tcp_next_iss+0x1c>
 800ee36:	4b0a      	ldr	r3, [pc, #40]	@ (800ee60 <tcp_next_iss+0x38>)
 800ee38:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ee3c:	4909      	ldr	r1, [pc, #36]	@ (800ee64 <tcp_next_iss+0x3c>)
 800ee3e:	480a      	ldr	r0, [pc, #40]	@ (800ee68 <tcp_next_iss+0x40>)
 800ee40:	f7f2 f964 	bl	800110c <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ee44:	4b09      	ldr	r3, [pc, #36]	@ (800ee6c <tcp_next_iss+0x44>)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	4b09      	ldr	r3, [pc, #36]	@ (800ee70 <tcp_next_iss+0x48>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	4a07      	ldr	r2, [pc, #28]	@ (800ee6c <tcp_next_iss+0x44>)
 800ee50:	6013      	str	r3, [r2, #0]
  return iss;
 800ee52:	4b06      	ldr	r3, [pc, #24]	@ (800ee6c <tcp_next_iss+0x44>)
 800ee54:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3708      	adds	r7, #8
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	08018e84 	.word	0x08018e84
 800ee64:	08019574 	.word	0x08019574
 800ee68:	08018ec8 	.word	0x08018ec8
 800ee6c:	20000028 	.word	0x20000028
 800ee70:	2000c5a4 	.word	0x2000c5a4

0800ee74 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
 800ee80:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d106      	bne.n	800ee96 <tcp_eff_send_mss_netif+0x22>
 800ee88:	4b14      	ldr	r3, [pc, #80]	@ (800eedc <tcp_eff_send_mss_netif+0x68>)
 800ee8a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ee8e:	4914      	ldr	r1, [pc, #80]	@ (800eee0 <tcp_eff_send_mss_netif+0x6c>)
 800ee90:	4814      	ldr	r0, [pc, #80]	@ (800eee4 <tcp_eff_send_mss_netif+0x70>)
 800ee92:	f7f2 f93b 	bl	800110c <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d101      	bne.n	800eea0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ee9c:	89fb      	ldrh	r3, [r7, #14]
 800ee9e:	e019      	b.n	800eed4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eea4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800eea6:	8afb      	ldrh	r3, [r7, #22]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d012      	beq.n	800eed2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eeac:	2328      	movs	r3, #40	@ 0x28
 800eeae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eeb0:	8afa      	ldrh	r2, [r7, #22]
 800eeb2:	8abb      	ldrh	r3, [r7, #20]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d904      	bls.n	800eec2 <tcp_eff_send_mss_netif+0x4e>
 800eeb8:	8afa      	ldrh	r2, [r7, #22]
 800eeba:	8abb      	ldrh	r3, [r7, #20]
 800eebc:	1ad3      	subs	r3, r2, r3
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	e000      	b.n	800eec4 <tcp_eff_send_mss_netif+0x50>
 800eec2:	2300      	movs	r3, #0
 800eec4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eec6:	8a7a      	ldrh	r2, [r7, #18]
 800eec8:	89fb      	ldrh	r3, [r7, #14]
 800eeca:	4293      	cmp	r3, r2
 800eecc:	bf28      	it	cs
 800eece:	4613      	movcs	r3, r2
 800eed0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eed2:	89fb      	ldrh	r3, [r7, #14]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3718      	adds	r7, #24
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	08018e84 	.word	0x08018e84
 800eee0:	08019590 	.word	0x08019590
 800eee4:	08018ec8 	.word	0x08018ec8

0800eee8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d119      	bne.n	800ef30 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eefc:	4b10      	ldr	r3, [pc, #64]	@ (800ef40 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eefe:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ef02:	4910      	ldr	r1, [pc, #64]	@ (800ef44 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ef04:	4810      	ldr	r0, [pc, #64]	@ (800ef48 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ef06:	f7f2 f901 	bl	800110c <printf>

  while (pcb != NULL) {
 800ef0a:	e011      	b.n	800ef30 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d108      	bne.n	800ef2a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f7fe fd98 	bl	800da54 <tcp_abort>
      pcb = next;
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	60fb      	str	r3, [r7, #12]
 800ef28:	e002      	b.n	800ef30 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1ea      	bne.n	800ef0c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ef36:	bf00      	nop
 800ef38:	bf00      	nop
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	08018e84 	.word	0x08018e84
 800ef44:	080195b8 	.word	0x080195b8
 800ef48:	08018ec8 	.word	0x08018ec8

0800ef4c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d02a      	beq.n	800efb2 <tcp_netif_ip_addr_changed+0x66>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d026      	beq.n	800efb2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ef64:	4b15      	ldr	r3, [pc, #84]	@ (800efbc <tcp_netif_ip_addr_changed+0x70>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f7ff ffbc 	bl	800eee8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ef70:	4b13      	ldr	r3, [pc, #76]	@ (800efc0 <tcp_netif_ip_addr_changed+0x74>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4619      	mov	r1, r3
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f7ff ffb6 	bl	800eee8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d017      	beq.n	800efb2 <tcp_netif_ip_addr_changed+0x66>
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d013      	beq.n	800efb2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef8a:	4b0e      	ldr	r3, [pc, #56]	@ (800efc4 <tcp_netif_ip_addr_changed+0x78>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	60fb      	str	r3, [r7, #12]
 800ef90:	e00c      	b.n	800efac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d103      	bne.n	800efa6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	60fb      	str	r3, [r7, #12]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1ef      	bne.n	800ef92 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800efb2:	bf00      	nop
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	2000c5b0 	.word	0x2000c5b0
 800efc0:	2000c5a8 	.word	0x2000c5a8
 800efc4:	2000c5ac 	.word	0x2000c5ac

0800efc8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d007      	beq.n	800efe8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efdc:	4618      	mov	r0, r3
 800efde:	f7ff fb6f 	bl	800e6c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800efe8:	bf00      	nop
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eff0:	b590      	push	{r4, r7, lr}
 800eff2:	b08d      	sub	sp, #52	@ 0x34
 800eff4:	af04      	add	r7, sp, #16
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d105      	bne.n	800f00c <tcp_input+0x1c>
 800f000:	4b9b      	ldr	r3, [pc, #620]	@ (800f270 <tcp_input+0x280>)
 800f002:	2283      	movs	r2, #131	@ 0x83
 800f004:	499b      	ldr	r1, [pc, #620]	@ (800f274 <tcp_input+0x284>)
 800f006:	489c      	ldr	r0, [pc, #624]	@ (800f278 <tcp_input+0x288>)
 800f008:	f7f2 f880 	bl	800110c <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	4a9a      	ldr	r2, [pc, #616]	@ (800f27c <tcp_input+0x28c>)
 800f012:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	895b      	ldrh	r3, [r3, #10]
 800f018:	2b13      	cmp	r3, #19
 800f01a:	f240 83d1 	bls.w	800f7c0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f01e:	4b98      	ldr	r3, [pc, #608]	@ (800f280 <tcp_input+0x290>)
 800f020:	695b      	ldr	r3, [r3, #20]
 800f022:	4a97      	ldr	r2, [pc, #604]	@ (800f280 <tcp_input+0x290>)
 800f024:	6812      	ldr	r2, [r2, #0]
 800f026:	4611      	mov	r1, r2
 800f028:	4618      	mov	r0, r3
 800f02a:	f006 fa4d 	bl	80154c8 <ip4_addr_isbroadcast_u32>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	f040 83c7 	bne.w	800f7c4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f036:	4b92      	ldr	r3, [pc, #584]	@ (800f280 <tcp_input+0x290>)
 800f038:	695b      	ldr	r3, [r3, #20]
 800f03a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f03e:	2be0      	cmp	r3, #224	@ 0xe0
 800f040:	f000 83c0 	beq.w	800f7c4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f044:	4b8d      	ldr	r3, [pc, #564]	@ (800f27c <tcp_input+0x28c>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	899b      	ldrh	r3, [r3, #12]
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fc fb1f 	bl	800b690 <lwip_htons>
 800f052:	4603      	mov	r3, r0
 800f054:	0b1b      	lsrs	r3, r3, #12
 800f056:	b29b      	uxth	r3, r3
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f05e:	7cbb      	ldrb	r3, [r7, #18]
 800f060:	2b13      	cmp	r3, #19
 800f062:	f240 83b1 	bls.w	800f7c8 <tcp_input+0x7d8>
 800f066:	7cbb      	ldrb	r3, [r7, #18]
 800f068:	b29a      	uxth	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	891b      	ldrh	r3, [r3, #8]
 800f06e:	429a      	cmp	r2, r3
 800f070:	f200 83aa 	bhi.w	800f7c8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f074:	7cbb      	ldrb	r3, [r7, #18]
 800f076:	b29b      	uxth	r3, r3
 800f078:	3b14      	subs	r3, #20
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	4b81      	ldr	r3, [pc, #516]	@ (800f284 <tcp_input+0x294>)
 800f07e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f080:	4b81      	ldr	r3, [pc, #516]	@ (800f288 <tcp_input+0x298>)
 800f082:	2200      	movs	r2, #0
 800f084:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	895a      	ldrh	r2, [r3, #10]
 800f08a:	7cbb      	ldrb	r3, [r7, #18]
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	429a      	cmp	r2, r3
 800f090:	d309      	bcc.n	800f0a6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f092:	4b7c      	ldr	r3, [pc, #496]	@ (800f284 <tcp_input+0x294>)
 800f094:	881a      	ldrh	r2, [r3, #0]
 800f096:	4b7d      	ldr	r3, [pc, #500]	@ (800f28c <tcp_input+0x29c>)
 800f098:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f09a:	7cbb      	ldrb	r3, [r7, #18]
 800f09c:	4619      	mov	r1, r3
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7fd fe62 	bl	800cd68 <pbuf_remove_header>
 800f0a4:	e04e      	b.n	800f144 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d105      	bne.n	800f0ba <tcp_input+0xca>
 800f0ae:	4b70      	ldr	r3, [pc, #448]	@ (800f270 <tcp_input+0x280>)
 800f0b0:	22c2      	movs	r2, #194	@ 0xc2
 800f0b2:	4977      	ldr	r1, [pc, #476]	@ (800f290 <tcp_input+0x2a0>)
 800f0b4:	4870      	ldr	r0, [pc, #448]	@ (800f278 <tcp_input+0x288>)
 800f0b6:	f7f2 f829 	bl	800110c <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f0ba:	2114      	movs	r1, #20
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7fd fe53 	bl	800cd68 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	895a      	ldrh	r2, [r3, #10]
 800f0c6:	4b71      	ldr	r3, [pc, #452]	@ (800f28c <tcp_input+0x29c>)
 800f0c8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f0ca:	4b6e      	ldr	r3, [pc, #440]	@ (800f284 <tcp_input+0x294>)
 800f0cc:	881a      	ldrh	r2, [r3, #0]
 800f0ce:	4b6f      	ldr	r3, [pc, #444]	@ (800f28c <tcp_input+0x29c>)
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f0d6:	4b6d      	ldr	r3, [pc, #436]	@ (800f28c <tcp_input+0x29c>)
 800f0d8:	881b      	ldrh	r3, [r3, #0]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7fd fe43 	bl	800cd68 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	895b      	ldrh	r3, [r3, #10]
 800f0e8:	8a3a      	ldrh	r2, [r7, #16]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	f200 836e 	bhi.w	800f7cc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	4a64      	ldr	r2, [pc, #400]	@ (800f288 <tcp_input+0x298>)
 800f0f8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	8a3a      	ldrh	r2, [r7, #16]
 800f100:	4611      	mov	r1, r2
 800f102:	4618      	mov	r0, r3
 800f104:	f7fd fe30 	bl	800cd68 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	891a      	ldrh	r2, [r3, #8]
 800f10c:	8a3b      	ldrh	r3, [r7, #16]
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	b29a      	uxth	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	895b      	ldrh	r3, [r3, #10]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d005      	beq.n	800f12a <tcp_input+0x13a>
 800f11e:	4b54      	ldr	r3, [pc, #336]	@ (800f270 <tcp_input+0x280>)
 800f120:	22df      	movs	r2, #223	@ 0xdf
 800f122:	495c      	ldr	r1, [pc, #368]	@ (800f294 <tcp_input+0x2a4>)
 800f124:	4854      	ldr	r0, [pc, #336]	@ (800f278 <tcp_input+0x288>)
 800f126:	f7f1 fff1 	bl	800110c <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	891a      	ldrh	r2, [r3, #8]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	891b      	ldrh	r3, [r3, #8]
 800f134:	429a      	cmp	r2, r3
 800f136:	d005      	beq.n	800f144 <tcp_input+0x154>
 800f138:	4b4d      	ldr	r3, [pc, #308]	@ (800f270 <tcp_input+0x280>)
 800f13a:	22e0      	movs	r2, #224	@ 0xe0
 800f13c:	4956      	ldr	r1, [pc, #344]	@ (800f298 <tcp_input+0x2a8>)
 800f13e:	484e      	ldr	r0, [pc, #312]	@ (800f278 <tcp_input+0x288>)
 800f140:	f7f1 ffe4 	bl	800110c <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f144:	4b4d      	ldr	r3, [pc, #308]	@ (800f27c <tcp_input+0x28c>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	881b      	ldrh	r3, [r3, #0]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	4a4b      	ldr	r2, [pc, #300]	@ (800f27c <tcp_input+0x28c>)
 800f14e:	6814      	ldr	r4, [r2, #0]
 800f150:	4618      	mov	r0, r3
 800f152:	f7fc fa9d 	bl	800b690 <lwip_htons>
 800f156:	4603      	mov	r3, r0
 800f158:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f15a:	4b48      	ldr	r3, [pc, #288]	@ (800f27c <tcp_input+0x28c>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	885b      	ldrh	r3, [r3, #2]
 800f160:	b29b      	uxth	r3, r3
 800f162:	4a46      	ldr	r2, [pc, #280]	@ (800f27c <tcp_input+0x28c>)
 800f164:	6814      	ldr	r4, [r2, #0]
 800f166:	4618      	mov	r0, r3
 800f168:	f7fc fa92 	bl	800b690 <lwip_htons>
 800f16c:	4603      	mov	r3, r0
 800f16e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f170:	4b42      	ldr	r3, [pc, #264]	@ (800f27c <tcp_input+0x28c>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	4a41      	ldr	r2, [pc, #260]	@ (800f27c <tcp_input+0x28c>)
 800f178:	6814      	ldr	r4, [r2, #0]
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fc fa9e 	bl	800b6bc <lwip_htonl>
 800f180:	4603      	mov	r3, r0
 800f182:	6063      	str	r3, [r4, #4]
 800f184:	6863      	ldr	r3, [r4, #4]
 800f186:	4a45      	ldr	r2, [pc, #276]	@ (800f29c <tcp_input+0x2ac>)
 800f188:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f18a:	4b3c      	ldr	r3, [pc, #240]	@ (800f27c <tcp_input+0x28c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	4a3a      	ldr	r2, [pc, #232]	@ (800f27c <tcp_input+0x28c>)
 800f192:	6814      	ldr	r4, [r2, #0]
 800f194:	4618      	mov	r0, r3
 800f196:	f7fc fa91 	bl	800b6bc <lwip_htonl>
 800f19a:	4603      	mov	r3, r0
 800f19c:	60a3      	str	r3, [r4, #8]
 800f19e:	68a3      	ldr	r3, [r4, #8]
 800f1a0:	4a3f      	ldr	r2, [pc, #252]	@ (800f2a0 <tcp_input+0x2b0>)
 800f1a2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f1a4:	4b35      	ldr	r3, [pc, #212]	@ (800f27c <tcp_input+0x28c>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	89db      	ldrh	r3, [r3, #14]
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	4a33      	ldr	r2, [pc, #204]	@ (800f27c <tcp_input+0x28c>)
 800f1ae:	6814      	ldr	r4, [r2, #0]
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fc fa6d 	bl	800b690 <lwip_htons>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f1ba:	4b30      	ldr	r3, [pc, #192]	@ (800f27c <tcp_input+0x28c>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	899b      	ldrh	r3, [r3, #12]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fc fa64 	bl	800b690 <lwip_htons>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1d0:	b2da      	uxtb	r2, r3
 800f1d2:	4b34      	ldr	r3, [pc, #208]	@ (800f2a4 <tcp_input+0x2b4>)
 800f1d4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	891a      	ldrh	r2, [r3, #8]
 800f1da:	4b33      	ldr	r3, [pc, #204]	@ (800f2a8 <tcp_input+0x2b8>)
 800f1dc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f1de:	4b31      	ldr	r3, [pc, #196]	@ (800f2a4 <tcp_input+0x2b4>)
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	f003 0303 	and.w	r3, r3, #3
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00c      	beq.n	800f204 <tcp_input+0x214>
    tcplen++;
 800f1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800f2a8 <tcp_input+0x2b8>)
 800f1ec:	881b      	ldrh	r3, [r3, #0]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	4b2d      	ldr	r3, [pc, #180]	@ (800f2a8 <tcp_input+0x2b8>)
 800f1f4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	891a      	ldrh	r2, [r3, #8]
 800f1fa:	4b2b      	ldr	r3, [pc, #172]	@ (800f2a8 <tcp_input+0x2b8>)
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	f200 82e6 	bhi.w	800f7d0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f204:	2300      	movs	r3, #0
 800f206:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f208:	4b28      	ldr	r3, [pc, #160]	@ (800f2ac <tcp_input+0x2bc>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	61fb      	str	r3, [r7, #28]
 800f20e:	e09d      	b.n	800f34c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	7d1b      	ldrb	r3, [r3, #20]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d105      	bne.n	800f224 <tcp_input+0x234>
 800f218:	4b15      	ldr	r3, [pc, #84]	@ (800f270 <tcp_input+0x280>)
 800f21a:	22fb      	movs	r2, #251	@ 0xfb
 800f21c:	4924      	ldr	r1, [pc, #144]	@ (800f2b0 <tcp_input+0x2c0>)
 800f21e:	4816      	ldr	r0, [pc, #88]	@ (800f278 <tcp_input+0x288>)
 800f220:	f7f1 ff74 	bl	800110c <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	7d1b      	ldrb	r3, [r3, #20]
 800f228:	2b0a      	cmp	r3, #10
 800f22a:	d105      	bne.n	800f238 <tcp_input+0x248>
 800f22c:	4b10      	ldr	r3, [pc, #64]	@ (800f270 <tcp_input+0x280>)
 800f22e:	22fc      	movs	r2, #252	@ 0xfc
 800f230:	4920      	ldr	r1, [pc, #128]	@ (800f2b4 <tcp_input+0x2c4>)
 800f232:	4811      	ldr	r0, [pc, #68]	@ (800f278 <tcp_input+0x288>)
 800f234:	f7f1 ff6a 	bl	800110c <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	7d1b      	ldrb	r3, [r3, #20]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d105      	bne.n	800f24c <tcp_input+0x25c>
 800f240:	4b0b      	ldr	r3, [pc, #44]	@ (800f270 <tcp_input+0x280>)
 800f242:	22fd      	movs	r2, #253	@ 0xfd
 800f244:	491c      	ldr	r1, [pc, #112]	@ (800f2b8 <tcp_input+0x2c8>)
 800f246:	480c      	ldr	r0, [pc, #48]	@ (800f278 <tcp_input+0x288>)
 800f248:	f7f1 ff60 	bl	800110c <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	7a1b      	ldrb	r3, [r3, #8]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d033      	beq.n	800f2bc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	7a1a      	ldrb	r2, [r3, #8]
 800f258:	4b09      	ldr	r3, [pc, #36]	@ (800f280 <tcp_input+0x290>)
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f260:	3301      	adds	r3, #1
 800f262:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f264:	429a      	cmp	r2, r3
 800f266:	d029      	beq.n	800f2bc <tcp_input+0x2cc>
      prev = pcb;
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	61bb      	str	r3, [r7, #24]
      continue;
 800f26c:	e06b      	b.n	800f346 <tcp_input+0x356>
 800f26e:	bf00      	nop
 800f270:	080195ec 	.word	0x080195ec
 800f274:	08019620 	.word	0x08019620
 800f278:	08019638 	.word	0x08019638
 800f27c:	2000c5cc 	.word	0x2000c5cc
 800f280:	20008e50 	.word	0x20008e50
 800f284:	2000c5d0 	.word	0x2000c5d0
 800f288:	2000c5d4 	.word	0x2000c5d4
 800f28c:	2000c5d2 	.word	0x2000c5d2
 800f290:	08019660 	.word	0x08019660
 800f294:	08019670 	.word	0x08019670
 800f298:	0801967c 	.word	0x0801967c
 800f29c:	2000c5dc 	.word	0x2000c5dc
 800f2a0:	2000c5e0 	.word	0x2000c5e0
 800f2a4:	2000c5e8 	.word	0x2000c5e8
 800f2a8:	2000c5e6 	.word	0x2000c5e6
 800f2ac:	2000c5b0 	.word	0x2000c5b0
 800f2b0:	0801969c 	.word	0x0801969c
 800f2b4:	080196c4 	.word	0x080196c4
 800f2b8:	080196f0 	.word	0x080196f0
    }

    if (pcb->remote_port == tcphdr->src &&
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	8b1a      	ldrh	r2, [r3, #24]
 800f2c0:	4b72      	ldr	r3, [pc, #456]	@ (800f48c <tcp_input+0x49c>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d13a      	bne.n	800f342 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	8ada      	ldrh	r2, [r3, #22]
 800f2d0:	4b6e      	ldr	r3, [pc, #440]	@ (800f48c <tcp_input+0x49c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	885b      	ldrh	r3, [r3, #2]
 800f2d6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d132      	bne.n	800f342 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	685a      	ldr	r2, [r3, #4]
 800f2e0:	4b6b      	ldr	r3, [pc, #428]	@ (800f490 <tcp_input+0x4a0>)
 800f2e2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d12c      	bne.n	800f342 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	4b68      	ldr	r3, [pc, #416]	@ (800f490 <tcp_input+0x4a0>)
 800f2ee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d126      	bne.n	800f342 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	69fa      	ldr	r2, [r7, #28]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d106      	bne.n	800f30c <tcp_input+0x31c>
 800f2fe:	4b65      	ldr	r3, [pc, #404]	@ (800f494 <tcp_input+0x4a4>)
 800f300:	f240 120d 	movw	r2, #269	@ 0x10d
 800f304:	4964      	ldr	r1, [pc, #400]	@ (800f498 <tcp_input+0x4a8>)
 800f306:	4865      	ldr	r0, [pc, #404]	@ (800f49c <tcp_input+0x4ac>)
 800f308:	f7f1 ff00 	bl	800110c <printf>
      if (prev != NULL) {
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00a      	beq.n	800f328 <tcp_input+0x338>
        prev->next = pcb->next;
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	68da      	ldr	r2, [r3, #12]
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f31a:	4b61      	ldr	r3, [pc, #388]	@ (800f4a0 <tcp_input+0x4b0>)
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f322:	4a5f      	ldr	r2, [pc, #380]	@ (800f4a0 <tcp_input+0x4b0>)
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	68db      	ldr	r3, [r3, #12]
 800f32c:	69fa      	ldr	r2, [r7, #28]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d111      	bne.n	800f356 <tcp_input+0x366>
 800f332:	4b58      	ldr	r3, [pc, #352]	@ (800f494 <tcp_input+0x4a4>)
 800f334:	f240 1215 	movw	r2, #277	@ 0x115
 800f338:	495a      	ldr	r1, [pc, #360]	@ (800f4a4 <tcp_input+0x4b4>)
 800f33a:	4858      	ldr	r0, [pc, #352]	@ (800f49c <tcp_input+0x4ac>)
 800f33c:	f7f1 fee6 	bl	800110c <printf>
      break;
 800f340:	e009      	b.n	800f356 <tcp_input+0x366>
    }
    prev = pcb;
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	61fb      	str	r3, [r7, #28]
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f47f af5e 	bne.w	800f210 <tcp_input+0x220>
 800f354:	e000      	b.n	800f358 <tcp_input+0x368>
      break;
 800f356:	bf00      	nop
  }

  if (pcb == NULL) {
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f040 80aa 	bne.w	800f4b4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f360:	4b51      	ldr	r3, [pc, #324]	@ (800f4a8 <tcp_input+0x4b8>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	61fb      	str	r3, [r7, #28]
 800f366:	e03f      	b.n	800f3e8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	7d1b      	ldrb	r3, [r3, #20]
 800f36c:	2b0a      	cmp	r3, #10
 800f36e:	d006      	beq.n	800f37e <tcp_input+0x38e>
 800f370:	4b48      	ldr	r3, [pc, #288]	@ (800f494 <tcp_input+0x4a4>)
 800f372:	f240 121f 	movw	r2, #287	@ 0x11f
 800f376:	494d      	ldr	r1, [pc, #308]	@ (800f4ac <tcp_input+0x4bc>)
 800f378:	4848      	ldr	r0, [pc, #288]	@ (800f49c <tcp_input+0x4ac>)
 800f37a:	f7f1 fec7 	bl	800110c <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	7a1b      	ldrb	r3, [r3, #8]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d009      	beq.n	800f39a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	7a1a      	ldrb	r2, [r3, #8]
 800f38a:	4b41      	ldr	r3, [pc, #260]	@ (800f490 <tcp_input+0x4a0>)
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f392:	3301      	adds	r3, #1
 800f394:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f396:	429a      	cmp	r2, r3
 800f398:	d122      	bne.n	800f3e0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	8b1a      	ldrh	r2, [r3, #24]
 800f39e:	4b3b      	ldr	r3, [pc, #236]	@ (800f48c <tcp_input+0x49c>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	881b      	ldrh	r3, [r3, #0]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d11b      	bne.n	800f3e2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	8ada      	ldrh	r2, [r3, #22]
 800f3ae:	4b37      	ldr	r3, [pc, #220]	@ (800f48c <tcp_input+0x49c>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	885b      	ldrh	r3, [r3, #2]
 800f3b4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d113      	bne.n	800f3e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	4b34      	ldr	r3, [pc, #208]	@ (800f490 <tcp_input+0x4a0>)
 800f3c0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d10d      	bne.n	800f3e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	4b31      	ldr	r3, [pc, #196]	@ (800f490 <tcp_input+0x4a0>)
 800f3cc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d107      	bne.n	800f3e2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f3d2:	69f8      	ldr	r0, [r7, #28]
 800f3d4:	f000 fb56 	bl	800fa84 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7fd fd4b 	bl	800ce74 <pbuf_free>
        return;
 800f3de:	e1fd      	b.n	800f7dc <tcp_input+0x7ec>
        continue;
 800f3e0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	61fb      	str	r3, [r7, #28]
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d1bc      	bne.n	800f368 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3f2:	4b2f      	ldr	r3, [pc, #188]	@ (800f4b0 <tcp_input+0x4c0>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	617b      	str	r3, [r7, #20]
 800f3f8:	e02a      	b.n	800f450 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	7a1b      	ldrb	r3, [r3, #8]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00c      	beq.n	800f41c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	7a1a      	ldrb	r2, [r3, #8]
 800f406:	4b22      	ldr	r3, [pc, #136]	@ (800f490 <tcp_input+0x4a0>)
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f40e:	3301      	adds	r3, #1
 800f410:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f412:	429a      	cmp	r2, r3
 800f414:	d002      	beq.n	800f41c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	61bb      	str	r3, [r7, #24]
        continue;
 800f41a:	e016      	b.n	800f44a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	8ada      	ldrh	r2, [r3, #22]
 800f420:	4b1a      	ldr	r3, [pc, #104]	@ (800f48c <tcp_input+0x49c>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	885b      	ldrh	r3, [r3, #2]
 800f426:	b29b      	uxth	r3, r3
 800f428:	429a      	cmp	r2, r3
 800f42a:	d10c      	bne.n	800f446 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	4b17      	ldr	r3, [pc, #92]	@ (800f490 <tcp_input+0x4a0>)
 800f432:	695b      	ldr	r3, [r3, #20]
 800f434:	429a      	cmp	r2, r3
 800f436:	d00f      	beq.n	800f458 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00d      	beq.n	800f45a <tcp_input+0x46a>
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d009      	beq.n	800f45a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1d1      	bne.n	800f3fa <tcp_input+0x40a>
 800f456:	e000      	b.n	800f45a <tcp_input+0x46a>
            break;
 800f458:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d029      	beq.n	800f4b4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d00a      	beq.n	800f47c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	68da      	ldr	r2, [r3, #12]
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f46e:	4b10      	ldr	r3, [pc, #64]	@ (800f4b0 <tcp_input+0x4c0>)
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f476:	4a0e      	ldr	r2, [pc, #56]	@ (800f4b0 <tcp_input+0x4c0>)
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f47c:	6978      	ldr	r0, [r7, #20]
 800f47e:	f000 fa03 	bl	800f888 <tcp_listen_input>
      }
      pbuf_free(p);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f7fd fcf6 	bl	800ce74 <pbuf_free>
      return;
 800f488:	e1a8      	b.n	800f7dc <tcp_input+0x7ec>
 800f48a:	bf00      	nop
 800f48c:	2000c5cc 	.word	0x2000c5cc
 800f490:	20008e50 	.word	0x20008e50
 800f494:	080195ec 	.word	0x080195ec
 800f498:	08019718 	.word	0x08019718
 800f49c:	08019638 	.word	0x08019638
 800f4a0:	2000c5b0 	.word	0x2000c5b0
 800f4a4:	08019744 	.word	0x08019744
 800f4a8:	2000c5b4 	.word	0x2000c5b4
 800f4ac:	08019770 	.word	0x08019770
 800f4b0:	2000c5ac 	.word	0x2000c5ac
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	f000 8158 	beq.w	800f76c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f4bc:	4b95      	ldr	r3, [pc, #596]	@ (800f714 <tcp_input+0x724>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	891a      	ldrh	r2, [r3, #8]
 800f4c6:	4b93      	ldr	r3, [pc, #588]	@ (800f714 <tcp_input+0x724>)
 800f4c8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f4ca:	4a92      	ldr	r2, [pc, #584]	@ (800f714 <tcp_input+0x724>)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f4d0:	4b91      	ldr	r3, [pc, #580]	@ (800f718 <tcp_input+0x728>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4a8f      	ldr	r2, [pc, #572]	@ (800f714 <tcp_input+0x724>)
 800f4d6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f4d8:	4b90      	ldr	r3, [pc, #576]	@ (800f71c <tcp_input+0x72c>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f4de:	4b90      	ldr	r3, [pc, #576]	@ (800f720 <tcp_input+0x730>)
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f4e4:	4b8f      	ldr	r3, [pc, #572]	@ (800f724 <tcp_input+0x734>)
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f4ea:	4b8f      	ldr	r3, [pc, #572]	@ (800f728 <tcp_input+0x738>)
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	f003 0308 	and.w	r3, r3, #8
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d006      	beq.n	800f504 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	7b5b      	ldrb	r3, [r3, #13]
 800f4fa:	f043 0301 	orr.w	r3, r3, #1
 800f4fe:	b2da      	uxtb	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d017      	beq.n	800f53c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f50c:	69f8      	ldr	r0, [r7, #28]
 800f50e:	f7ff f85b 	bl	800e5c8 <tcp_process_refused_data>
 800f512:	4603      	mov	r3, r0
 800f514:	f113 0f0d 	cmn.w	r3, #13
 800f518:	d007      	beq.n	800f52a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00c      	beq.n	800f53c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f522:	4b82      	ldr	r3, [pc, #520]	@ (800f72c <tcp_input+0x73c>)
 800f524:	881b      	ldrh	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d008      	beq.n	800f53c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f040 80e3 	bne.w	800f6fa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f534:	69f8      	ldr	r0, [r7, #28]
 800f536:	f003 fdff 	bl	8013138 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f53a:	e0de      	b.n	800f6fa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f53c:	4a7c      	ldr	r2, [pc, #496]	@ (800f730 <tcp_input+0x740>)
 800f53e:	69fb      	ldr	r3, [r7, #28]
 800f540:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f542:	69f8      	ldr	r0, [r7, #28]
 800f544:	f000 fb18 	bl	800fb78 <tcp_process>
 800f548:	4603      	mov	r3, r0
 800f54a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f54c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f550:	f113 0f0d 	cmn.w	r3, #13
 800f554:	f000 80d3 	beq.w	800f6fe <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f558:	4b71      	ldr	r3, [pc, #452]	@ (800f720 <tcp_input+0x730>)
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	f003 0308 	and.w	r3, r3, #8
 800f560:	2b00      	cmp	r3, #0
 800f562:	d015      	beq.n	800f590 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d008      	beq.n	800f580 <tcp_input+0x590>
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f574:	69fa      	ldr	r2, [r7, #28]
 800f576:	6912      	ldr	r2, [r2, #16]
 800f578:	f06f 010d 	mvn.w	r1, #13
 800f57c:	4610      	mov	r0, r2
 800f57e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f580:	69f9      	ldr	r1, [r7, #28]
 800f582:	486c      	ldr	r0, [pc, #432]	@ (800f734 <tcp_input+0x744>)
 800f584:	f7ff fbbc 	bl	800ed00 <tcp_pcb_remove>
        tcp_free(pcb);
 800f588:	69f8      	ldr	r0, [r7, #28]
 800f58a:	f7fd ff1f 	bl	800d3cc <tcp_free>
 800f58e:	e0da      	b.n	800f746 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f590:	2300      	movs	r3, #0
 800f592:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f594:	4b63      	ldr	r3, [pc, #396]	@ (800f724 <tcp_input+0x734>)
 800f596:	881b      	ldrh	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d01d      	beq.n	800f5d8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f59c:	4b61      	ldr	r3, [pc, #388]	@ (800f724 <tcp_input+0x734>)
 800f59e:	881b      	ldrh	r3, [r3, #0]
 800f5a0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00a      	beq.n	800f5c2 <tcp_input+0x5d2>
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5b2:	69fa      	ldr	r2, [r7, #28]
 800f5b4:	6910      	ldr	r0, [r2, #16]
 800f5b6:	89fa      	ldrh	r2, [r7, #14]
 800f5b8:	69f9      	ldr	r1, [r7, #28]
 800f5ba:	4798      	blx	r3
 800f5bc:	4603      	mov	r3, r0
 800f5be:	74fb      	strb	r3, [r7, #19]
 800f5c0:	e001      	b.n	800f5c6 <tcp_input+0x5d6>
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f5c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5ca:	f113 0f0d 	cmn.w	r3, #13
 800f5ce:	f000 8098 	beq.w	800f702 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f5d2:	4b54      	ldr	r3, [pc, #336]	@ (800f724 <tcp_input+0x734>)
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f5d8:	69f8      	ldr	r0, [r7, #28]
 800f5da:	f000 f915 	bl	800f808 <tcp_input_delayed_close>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	f040 8090 	bne.w	800f706 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f5e6:	4b4d      	ldr	r3, [pc, #308]	@ (800f71c <tcp_input+0x72c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d041      	beq.n	800f672 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d006      	beq.n	800f604 <tcp_input+0x614>
 800f5f6:	4b50      	ldr	r3, [pc, #320]	@ (800f738 <tcp_input+0x748>)
 800f5f8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f5fc:	494f      	ldr	r1, [pc, #316]	@ (800f73c <tcp_input+0x74c>)
 800f5fe:	4850      	ldr	r0, [pc, #320]	@ (800f740 <tcp_input+0x750>)
 800f600:	f7f1 fd84 	bl	800110c <printf>
          if (pcb->flags & TF_RXCLOSED) {
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	8b5b      	ldrh	r3, [r3, #26]
 800f608:	f003 0310 	and.w	r3, r3, #16
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d008      	beq.n	800f622 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f610:	4b42      	ldr	r3, [pc, #264]	@ (800f71c <tcp_input+0x72c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4618      	mov	r0, r3
 800f616:	f7fd fc2d 	bl	800ce74 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f61a:	69f8      	ldr	r0, [r7, #28]
 800f61c:	f7fe fa1a 	bl	800da54 <tcp_abort>
            goto aborted;
 800f620:	e091      	b.n	800f746 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d00c      	beq.n	800f646 <tcp_input+0x656>
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	6918      	ldr	r0, [r3, #16]
 800f636:	4b39      	ldr	r3, [pc, #228]	@ (800f71c <tcp_input+0x72c>)
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	2300      	movs	r3, #0
 800f63c:	69f9      	ldr	r1, [r7, #28]
 800f63e:	47a0      	blx	r4
 800f640:	4603      	mov	r3, r0
 800f642:	74fb      	strb	r3, [r7, #19]
 800f644:	e008      	b.n	800f658 <tcp_input+0x668>
 800f646:	4b35      	ldr	r3, [pc, #212]	@ (800f71c <tcp_input+0x72c>)
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	2300      	movs	r3, #0
 800f64c:	69f9      	ldr	r1, [r7, #28]
 800f64e:	2000      	movs	r0, #0
 800f650:	f7ff f890 	bl	800e774 <tcp_recv_null>
 800f654:	4603      	mov	r3, r0
 800f656:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f658:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f65c:	f113 0f0d 	cmn.w	r3, #13
 800f660:	d053      	beq.n	800f70a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f662:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d003      	beq.n	800f672 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f66a:	4b2c      	ldr	r3, [pc, #176]	@ (800f71c <tcp_input+0x72c>)
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f672:	4b2b      	ldr	r3, [pc, #172]	@ (800f720 <tcp_input+0x730>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	f003 0320 	and.w	r3, r3, #32
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d030      	beq.n	800f6e0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f682:	2b00      	cmp	r3, #0
 800f684:	d009      	beq.n	800f69a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f68a:	7b5a      	ldrb	r2, [r3, #13]
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f690:	f042 0220 	orr.w	r2, r2, #32
 800f694:	b2d2      	uxtb	r2, r2
 800f696:	735a      	strb	r2, [r3, #13]
 800f698:	e022      	b.n	800f6e0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f69e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f6a2:	d005      	beq.n	800f6b0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00b      	beq.n	800f6d2 <tcp_input+0x6e2>
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	6918      	ldr	r0, [r3, #16]
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	69f9      	ldr	r1, [r7, #28]
 800f6ca:	47a0      	blx	r4
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	74fb      	strb	r3, [r7, #19]
 800f6d0:	e001      	b.n	800f6d6 <tcp_input+0x6e6>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f6d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6da:	f113 0f0d 	cmn.w	r3, #13
 800f6de:	d016      	beq.n	800f70e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f6e0:	4b13      	ldr	r3, [pc, #76]	@ (800f730 <tcp_input+0x740>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f6e6:	69f8      	ldr	r0, [r7, #28]
 800f6e8:	f000 f88e 	bl	800f808 <tcp_input_delayed_close>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d128      	bne.n	800f744 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f6f2:	69f8      	ldr	r0, [r7, #28]
 800f6f4:	f002 ff1a 	bl	801252c <tcp_output>
 800f6f8:	e025      	b.n	800f746 <tcp_input+0x756>
        goto aborted;
 800f6fa:	bf00      	nop
 800f6fc:	e023      	b.n	800f746 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f6fe:	bf00      	nop
 800f700:	e021      	b.n	800f746 <tcp_input+0x756>
              goto aborted;
 800f702:	bf00      	nop
 800f704:	e01f      	b.n	800f746 <tcp_input+0x756>
          goto aborted;
 800f706:	bf00      	nop
 800f708:	e01d      	b.n	800f746 <tcp_input+0x756>
            goto aborted;
 800f70a:	bf00      	nop
 800f70c:	e01b      	b.n	800f746 <tcp_input+0x756>
              goto aborted;
 800f70e:	bf00      	nop
 800f710:	e019      	b.n	800f746 <tcp_input+0x756>
 800f712:	bf00      	nop
 800f714:	2000c5bc 	.word	0x2000c5bc
 800f718:	2000c5cc 	.word	0x2000c5cc
 800f71c:	2000c5ec 	.word	0x2000c5ec
 800f720:	2000c5e9 	.word	0x2000c5e9
 800f724:	2000c5e4 	.word	0x2000c5e4
 800f728:	2000c5e8 	.word	0x2000c5e8
 800f72c:	2000c5e6 	.word	0x2000c5e6
 800f730:	2000c5f0 	.word	0x2000c5f0
 800f734:	2000c5b0 	.word	0x2000c5b0
 800f738:	080195ec 	.word	0x080195ec
 800f73c:	080197a0 	.word	0x080197a0
 800f740:	08019638 	.word	0x08019638
          goto aborted;
 800f744:	bf00      	nop
    tcp_input_pcb = NULL;
 800f746:	4b27      	ldr	r3, [pc, #156]	@ (800f7e4 <tcp_input+0x7f4>)
 800f748:	2200      	movs	r2, #0
 800f74a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f74c:	4b26      	ldr	r3, [pc, #152]	@ (800f7e8 <tcp_input+0x7f8>)
 800f74e:	2200      	movs	r2, #0
 800f750:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f752:	4b26      	ldr	r3, [pc, #152]	@ (800f7ec <tcp_input+0x7fc>)
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d03f      	beq.n	800f7da <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f75a:	4b24      	ldr	r3, [pc, #144]	@ (800f7ec <tcp_input+0x7fc>)
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fd fb88 	bl	800ce74 <pbuf_free>
      inseg.p = NULL;
 800f764:	4b21      	ldr	r3, [pc, #132]	@ (800f7ec <tcp_input+0x7fc>)
 800f766:	2200      	movs	r2, #0
 800f768:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f76a:	e036      	b.n	800f7da <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f76c:	4b20      	ldr	r3, [pc, #128]	@ (800f7f0 <tcp_input+0x800>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	899b      	ldrh	r3, [r3, #12]
 800f772:	b29b      	uxth	r3, r3
 800f774:	4618      	mov	r0, r3
 800f776:	f7fb ff8b 	bl	800b690 <lwip_htons>
 800f77a:	4603      	mov	r3, r0
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	f003 0304 	and.w	r3, r3, #4
 800f782:	2b00      	cmp	r3, #0
 800f784:	d118      	bne.n	800f7b8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f786:	4b1b      	ldr	r3, [pc, #108]	@ (800f7f4 <tcp_input+0x804>)
 800f788:	6819      	ldr	r1, [r3, #0]
 800f78a:	4b1b      	ldr	r3, [pc, #108]	@ (800f7f8 <tcp_input+0x808>)
 800f78c:	881b      	ldrh	r3, [r3, #0]
 800f78e:	461a      	mov	r2, r3
 800f790:	4b1a      	ldr	r3, [pc, #104]	@ (800f7fc <tcp_input+0x80c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f796:	4b16      	ldr	r3, [pc, #88]	@ (800f7f0 <tcp_input+0x800>)
 800f798:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f79a:	885b      	ldrh	r3, [r3, #2]
 800f79c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f79e:	4a14      	ldr	r2, [pc, #80]	@ (800f7f0 <tcp_input+0x800>)
 800f7a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7a2:	8812      	ldrh	r2, [r2, #0]
 800f7a4:	b292      	uxth	r2, r2
 800f7a6:	9202      	str	r2, [sp, #8]
 800f7a8:	9301      	str	r3, [sp, #4]
 800f7aa:	4b15      	ldr	r3, [pc, #84]	@ (800f800 <tcp_input+0x810>)
 800f7ac:	9300      	str	r3, [sp, #0]
 800f7ae:	4b15      	ldr	r3, [pc, #84]	@ (800f804 <tcp_input+0x814>)
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	2000      	movs	r0, #0
 800f7b4:	f003 fc6e 	bl	8013094 <tcp_rst>
    pbuf_free(p);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7fd fb5b 	bl	800ce74 <pbuf_free>
  return;
 800f7be:	e00c      	b.n	800f7da <tcp_input+0x7ea>
    goto dropped;
 800f7c0:	bf00      	nop
 800f7c2:	e006      	b.n	800f7d2 <tcp_input+0x7e2>
    goto dropped;
 800f7c4:	bf00      	nop
 800f7c6:	e004      	b.n	800f7d2 <tcp_input+0x7e2>
    goto dropped;
 800f7c8:	bf00      	nop
 800f7ca:	e002      	b.n	800f7d2 <tcp_input+0x7e2>
      goto dropped;
 800f7cc:	bf00      	nop
 800f7ce:	e000      	b.n	800f7d2 <tcp_input+0x7e2>
      goto dropped;
 800f7d0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7fd fb4e 	bl	800ce74 <pbuf_free>
 800f7d8:	e000      	b.n	800f7dc <tcp_input+0x7ec>
  return;
 800f7da:	bf00      	nop
}
 800f7dc:	3724      	adds	r7, #36	@ 0x24
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd90      	pop	{r4, r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	2000c5f0 	.word	0x2000c5f0
 800f7e8:	2000c5ec 	.word	0x2000c5ec
 800f7ec:	2000c5bc 	.word	0x2000c5bc
 800f7f0:	2000c5cc 	.word	0x2000c5cc
 800f7f4:	2000c5e0 	.word	0x2000c5e0
 800f7f8:	2000c5e6 	.word	0x2000c5e6
 800f7fc:	2000c5dc 	.word	0x2000c5dc
 800f800:	20008e60 	.word	0x20008e60
 800f804:	20008e64 	.word	0x20008e64

0800f808 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d106      	bne.n	800f824 <tcp_input_delayed_close+0x1c>
 800f816:	4b17      	ldr	r3, [pc, #92]	@ (800f874 <tcp_input_delayed_close+0x6c>)
 800f818:	f240 225a 	movw	r2, #602	@ 0x25a
 800f81c:	4916      	ldr	r1, [pc, #88]	@ (800f878 <tcp_input_delayed_close+0x70>)
 800f81e:	4817      	ldr	r0, [pc, #92]	@ (800f87c <tcp_input_delayed_close+0x74>)
 800f820:	f7f1 fc74 	bl	800110c <printf>

  if (recv_flags & TF_CLOSED) {
 800f824:	4b16      	ldr	r3, [pc, #88]	@ (800f880 <tcp_input_delayed_close+0x78>)
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	f003 0310 	and.w	r3, r3, #16
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d01c      	beq.n	800f86a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	8b5b      	ldrh	r3, [r3, #26]
 800f834:	f003 0310 	and.w	r3, r3, #16
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d10d      	bne.n	800f858 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f842:	2b00      	cmp	r3, #0
 800f844:	d008      	beq.n	800f858 <tcp_input_delayed_close+0x50>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	6912      	ldr	r2, [r2, #16]
 800f850:	f06f 010e 	mvn.w	r1, #14
 800f854:	4610      	mov	r0, r2
 800f856:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f858:	6879      	ldr	r1, [r7, #4]
 800f85a:	480a      	ldr	r0, [pc, #40]	@ (800f884 <tcp_input_delayed_close+0x7c>)
 800f85c:	f7ff fa50 	bl	800ed00 <tcp_pcb_remove>
    tcp_free(pcb);
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f7fd fdb3 	bl	800d3cc <tcp_free>
    return 1;
 800f866:	2301      	movs	r3, #1
 800f868:	e000      	b.n	800f86c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f86a:	2300      	movs	r3, #0
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	080195ec 	.word	0x080195ec
 800f878:	080197bc 	.word	0x080197bc
 800f87c:	08019638 	.word	0x08019638
 800f880:	2000c5e9 	.word	0x2000c5e9
 800f884:	2000c5b0 	.word	0x2000c5b0

0800f888 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f888:	b590      	push	{r4, r7, lr}
 800f88a:	b08b      	sub	sp, #44	@ 0x2c
 800f88c:	af04      	add	r7, sp, #16
 800f88e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f890:	4b6f      	ldr	r3, [pc, #444]	@ (800fa50 <tcp_listen_input+0x1c8>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	f003 0304 	and.w	r3, r3, #4
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f040 80d2 	bne.w	800fa42 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d106      	bne.n	800f8b2 <tcp_listen_input+0x2a>
 800f8a4:	4b6b      	ldr	r3, [pc, #428]	@ (800fa54 <tcp_listen_input+0x1cc>)
 800f8a6:	f240 2281 	movw	r2, #641	@ 0x281
 800f8aa:	496b      	ldr	r1, [pc, #428]	@ (800fa58 <tcp_listen_input+0x1d0>)
 800f8ac:	486b      	ldr	r0, [pc, #428]	@ (800fa5c <tcp_listen_input+0x1d4>)
 800f8ae:	f7f1 fc2d 	bl	800110c <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f8b2:	4b67      	ldr	r3, [pc, #412]	@ (800fa50 <tcp_listen_input+0x1c8>)
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	f003 0310 	and.w	r3, r3, #16
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d019      	beq.n	800f8f2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8be:	4b68      	ldr	r3, [pc, #416]	@ (800fa60 <tcp_listen_input+0x1d8>)
 800f8c0:	6819      	ldr	r1, [r3, #0]
 800f8c2:	4b68      	ldr	r3, [pc, #416]	@ (800fa64 <tcp_listen_input+0x1dc>)
 800f8c4:	881b      	ldrh	r3, [r3, #0]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	4b67      	ldr	r3, [pc, #412]	@ (800fa68 <tcp_listen_input+0x1e0>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8ce:	4b67      	ldr	r3, [pc, #412]	@ (800fa6c <tcp_listen_input+0x1e4>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8d2:	885b      	ldrh	r3, [r3, #2]
 800f8d4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8d6:	4a65      	ldr	r2, [pc, #404]	@ (800fa6c <tcp_listen_input+0x1e4>)
 800f8d8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8da:	8812      	ldrh	r2, [r2, #0]
 800f8dc:	b292      	uxth	r2, r2
 800f8de:	9202      	str	r2, [sp, #8]
 800f8e0:	9301      	str	r3, [sp, #4]
 800f8e2:	4b63      	ldr	r3, [pc, #396]	@ (800fa70 <tcp_listen_input+0x1e8>)
 800f8e4:	9300      	str	r3, [sp, #0]
 800f8e6:	4b63      	ldr	r3, [pc, #396]	@ (800fa74 <tcp_listen_input+0x1ec>)
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f003 fbd2 	bl	8013094 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f8f0:	e0a9      	b.n	800fa46 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f8f2:	4b57      	ldr	r3, [pc, #348]	@ (800fa50 <tcp_listen_input+0x1c8>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	f003 0302 	and.w	r3, r3, #2
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f000 80a3 	beq.w	800fa46 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	7d5b      	ldrb	r3, [r3, #21]
 800f904:	4618      	mov	r0, r3
 800f906:	f7ff f859 	bl	800e9bc <tcp_alloc>
 800f90a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d111      	bne.n	800f936 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	699b      	ldr	r3, [r3, #24]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d00a      	beq.n	800f930 <tcp_listen_input+0xa8>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	699b      	ldr	r3, [r3, #24]
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	6910      	ldr	r0, [r2, #16]
 800f922:	f04f 32ff 	mov.w	r2, #4294967295
 800f926:	2100      	movs	r1, #0
 800f928:	4798      	blx	r3
 800f92a:	4603      	mov	r3, r0
 800f92c:	73bb      	strb	r3, [r7, #14]
      return;
 800f92e:	e08b      	b.n	800fa48 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f930:	23f0      	movs	r3, #240	@ 0xf0
 800f932:	73bb      	strb	r3, [r7, #14]
      return;
 800f934:	e088      	b.n	800fa48 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f936:	4b50      	ldr	r3, [pc, #320]	@ (800fa78 <tcp_listen_input+0x1f0>)
 800f938:	695a      	ldr	r2, [r3, #20]
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f93e:	4b4e      	ldr	r3, [pc, #312]	@ (800fa78 <tcp_listen_input+0x1f0>)
 800f940:	691a      	ldr	r2, [r3, #16]
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	8ada      	ldrh	r2, [r3, #22]
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f94e:	4b47      	ldr	r3, [pc, #284]	@ (800fa6c <tcp_listen_input+0x1e4>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	881b      	ldrh	r3, [r3, #0]
 800f954:	b29a      	uxth	r2, r3
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	2203      	movs	r2, #3
 800f95e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f960:	4b41      	ldr	r3, [pc, #260]	@ (800fa68 <tcp_listen_input+0x1e0>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	1c5a      	adds	r2, r3, #1
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f972:	6978      	ldr	r0, [r7, #20]
 800f974:	f7ff fa58 	bl	800ee28 <tcp_next_iss>
 800f978:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	693a      	ldr	r2, [r7, #16]
 800f97e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	693a      	ldr	r2, [r7, #16]
 800f984:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	693a      	ldr	r2, [r7, #16]
 800f98a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	693a      	ldr	r2, [r7, #16]
 800f990:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f992:	4b35      	ldr	r3, [pc, #212]	@ (800fa68 <tcp_listen_input+0x1e0>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	1e5a      	subs	r2, r3, #1
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	691a      	ldr	r2, [r3, #16]
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	7a5b      	ldrb	r3, [r3, #9]
 800f9ae:	f003 030c 	and.w	r3, r3, #12
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	7a1a      	ldrb	r2, [r3, #8]
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f9c0:	4b2e      	ldr	r3, [pc, #184]	@ (800fa7c <tcp_listen_input+0x1f4>)
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	60da      	str	r2, [r3, #12]
 800f9c8:	4a2c      	ldr	r2, [pc, #176]	@ (800fa7c <tcp_listen_input+0x1f4>)
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	6013      	str	r3, [r2, #0]
 800f9ce:	f003 fd23 	bl	8013418 <tcp_timer_needed>
 800f9d2:	4b2b      	ldr	r3, [pc, #172]	@ (800fa80 <tcp_listen_input+0x1f8>)
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f9d8:	6978      	ldr	r0, [r7, #20]
 800f9da:	f001 fd8b 	bl	80114f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f9de:	4b23      	ldr	r3, [pc, #140]	@ (800fa6c <tcp_listen_input+0x1e4>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	89db      	ldrh	r3, [r3, #14]
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	3304      	adds	r3, #4
 800fa00:	4618      	mov	r0, r3
 800fa02:	f005 facb 	bl	8014f9c <ip4_route>
 800fa06:	4601      	mov	r1, r0
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	3304      	adds	r3, #4
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f7ff fa30 	bl	800ee74 <tcp_eff_send_mss_netif>
 800fa14:	4603      	mov	r3, r0
 800fa16:	461a      	mov	r2, r3
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fa1c:	2112      	movs	r1, #18
 800fa1e:	6978      	ldr	r0, [r7, #20]
 800fa20:	f002 fc96 	bl	8012350 <tcp_enqueue_flags>
 800fa24:	4603      	mov	r3, r0
 800fa26:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fa28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d004      	beq.n	800fa3a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fa30:	2100      	movs	r1, #0
 800fa32:	6978      	ldr	r0, [r7, #20]
 800fa34:	f7fd ff50 	bl	800d8d8 <tcp_abandon>
      return;
 800fa38:	e006      	b.n	800fa48 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fa3a:	6978      	ldr	r0, [r7, #20]
 800fa3c:	f002 fd76 	bl	801252c <tcp_output>
  return;
 800fa40:	e001      	b.n	800fa46 <tcp_listen_input+0x1be>
    return;
 800fa42:	bf00      	nop
 800fa44:	e000      	b.n	800fa48 <tcp_listen_input+0x1c0>
  return;
 800fa46:	bf00      	nop
}
 800fa48:	371c      	adds	r7, #28
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd90      	pop	{r4, r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	2000c5e8 	.word	0x2000c5e8
 800fa54:	080195ec 	.word	0x080195ec
 800fa58:	080197e4 	.word	0x080197e4
 800fa5c:	08019638 	.word	0x08019638
 800fa60:	2000c5e0 	.word	0x2000c5e0
 800fa64:	2000c5e6 	.word	0x2000c5e6
 800fa68:	2000c5dc 	.word	0x2000c5dc
 800fa6c:	2000c5cc 	.word	0x2000c5cc
 800fa70:	20008e60 	.word	0x20008e60
 800fa74:	20008e64 	.word	0x20008e64
 800fa78:	20008e50 	.word	0x20008e50
 800fa7c:	2000c5b0 	.word	0x2000c5b0
 800fa80:	2000c5b8 	.word	0x2000c5b8

0800fa84 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b086      	sub	sp, #24
 800fa88:	af04      	add	r7, sp, #16
 800fa8a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fa8c:	4b2f      	ldr	r3, [pc, #188]	@ (800fb4c <tcp_timewait_input+0xc8>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	f003 0304 	and.w	r3, r3, #4
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d153      	bne.n	800fb40 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d106      	bne.n	800faac <tcp_timewait_input+0x28>
 800fa9e:	4b2c      	ldr	r3, [pc, #176]	@ (800fb50 <tcp_timewait_input+0xcc>)
 800faa0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800faa4:	492b      	ldr	r1, [pc, #172]	@ (800fb54 <tcp_timewait_input+0xd0>)
 800faa6:	482c      	ldr	r0, [pc, #176]	@ (800fb58 <tcp_timewait_input+0xd4>)
 800faa8:	f7f1 fb30 	bl	800110c <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800faac:	4b27      	ldr	r3, [pc, #156]	@ (800fb4c <tcp_timewait_input+0xc8>)
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	f003 0302 	and.w	r3, r3, #2
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d02a      	beq.n	800fb0e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fab8:	4b28      	ldr	r3, [pc, #160]	@ (800fb5c <tcp_timewait_input+0xd8>)
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	db2d      	blt.n	800fb22 <tcp_timewait_input+0x9e>
 800fac6:	4b25      	ldr	r3, [pc, #148]	@ (800fb5c <tcp_timewait_input+0xd8>)
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800face:	6879      	ldr	r1, [r7, #4]
 800fad0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fad2:	440b      	add	r3, r1
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	dc23      	bgt.n	800fb22 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fada:	4b21      	ldr	r3, [pc, #132]	@ (800fb60 <tcp_timewait_input+0xdc>)
 800fadc:	6819      	ldr	r1, [r3, #0]
 800fade:	4b21      	ldr	r3, [pc, #132]	@ (800fb64 <tcp_timewait_input+0xe0>)
 800fae0:	881b      	ldrh	r3, [r3, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	4b1d      	ldr	r3, [pc, #116]	@ (800fb5c <tcp_timewait_input+0xd8>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faea:	4b1f      	ldr	r3, [pc, #124]	@ (800fb68 <tcp_timewait_input+0xe4>)
 800faec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faee:	885b      	ldrh	r3, [r3, #2]
 800faf0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faf2:	4a1d      	ldr	r2, [pc, #116]	@ (800fb68 <tcp_timewait_input+0xe4>)
 800faf4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faf6:	8812      	ldrh	r2, [r2, #0]
 800faf8:	b292      	uxth	r2, r2
 800fafa:	9202      	str	r2, [sp, #8]
 800fafc:	9301      	str	r3, [sp, #4]
 800fafe:	4b1b      	ldr	r3, [pc, #108]	@ (800fb6c <tcp_timewait_input+0xe8>)
 800fb00:	9300      	str	r3, [sp, #0]
 800fb02:	4b1b      	ldr	r3, [pc, #108]	@ (800fb70 <tcp_timewait_input+0xec>)
 800fb04:	4602      	mov	r2, r0
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f003 fac4 	bl	8013094 <tcp_rst>
      return;
 800fb0c:	e01b      	b.n	800fb46 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fb0e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb4c <tcp_timewait_input+0xc8>)
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	f003 0301 	and.w	r3, r3, #1
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d003      	beq.n	800fb22 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fb1a:	4b16      	ldr	r3, [pc, #88]	@ (800fb74 <tcp_timewait_input+0xf0>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fb22:	4b10      	ldr	r3, [pc, #64]	@ (800fb64 <tcp_timewait_input+0xe0>)
 800fb24:	881b      	ldrh	r3, [r3, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00c      	beq.n	800fb44 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	8b5b      	ldrh	r3, [r3, #26]
 800fb2e:	f043 0302 	orr.w	r3, r3, #2
 800fb32:	b29a      	uxth	r2, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f002 fcf7 	bl	801252c <tcp_output>
  }
  return;
 800fb3e:	e001      	b.n	800fb44 <tcp_timewait_input+0xc0>
    return;
 800fb40:	bf00      	nop
 800fb42:	e000      	b.n	800fb46 <tcp_timewait_input+0xc2>
  return;
 800fb44:	bf00      	nop
}
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	2000c5e8 	.word	0x2000c5e8
 800fb50:	080195ec 	.word	0x080195ec
 800fb54:	08019804 	.word	0x08019804
 800fb58:	08019638 	.word	0x08019638
 800fb5c:	2000c5dc 	.word	0x2000c5dc
 800fb60:	2000c5e0 	.word	0x2000c5e0
 800fb64:	2000c5e6 	.word	0x2000c5e6
 800fb68:	2000c5cc 	.word	0x2000c5cc
 800fb6c:	20008e60 	.word	0x20008e60
 800fb70:	20008e64 	.word	0x20008e64
 800fb74:	2000c5a4 	.word	0x2000c5a4

0800fb78 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fb78:	b590      	push	{r4, r7, lr}
 800fb7a:	b08d      	sub	sp, #52	@ 0x34
 800fb7c:	af04      	add	r7, sp, #16
 800fb7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fb80:	2300      	movs	r3, #0
 800fb82:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fb84:	2300      	movs	r3, #0
 800fb86:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d106      	bne.n	800fb9c <tcp_process+0x24>
 800fb8e:	4b9d      	ldr	r3, [pc, #628]	@ (800fe04 <tcp_process+0x28c>)
 800fb90:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800fb94:	499c      	ldr	r1, [pc, #624]	@ (800fe08 <tcp_process+0x290>)
 800fb96:	489d      	ldr	r0, [pc, #628]	@ (800fe0c <tcp_process+0x294>)
 800fb98:	f7f1 fab8 	bl	800110c <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fb9c:	4b9c      	ldr	r3, [pc, #624]	@ (800fe10 <tcp_process+0x298>)
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	f003 0304 	and.w	r3, r3, #4
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d04e      	beq.n	800fc46 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d108      	bne.n	800fbc2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fbb4:	4b97      	ldr	r3, [pc, #604]	@ (800fe14 <tcp_process+0x29c>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d123      	bne.n	800fc04 <tcp_process+0x8c>
        acceptable = 1;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	76fb      	strb	r3, [r7, #27]
 800fbc0:	e020      	b.n	800fc04 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbc6:	4b94      	ldr	r3, [pc, #592]	@ (800fe18 <tcp_process+0x2a0>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d102      	bne.n	800fbd4 <tcp_process+0x5c>
        acceptable = 1;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	76fb      	strb	r3, [r7, #27]
 800fbd2:	e017      	b.n	800fc04 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fbd4:	4b90      	ldr	r3, [pc, #576]	@ (800fe18 <tcp_process+0x2a0>)
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbdc:	1ad3      	subs	r3, r2, r3
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	db10      	blt.n	800fc04 <tcp_process+0x8c>
 800fbe2:	4b8d      	ldr	r3, [pc, #564]	@ (800fe18 <tcp_process+0x2a0>)
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbea:	6879      	ldr	r1, [r7, #4]
 800fbec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fbee:	440b      	add	r3, r1
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	dc06      	bgt.n	800fc04 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	8b5b      	ldrh	r3, [r3, #26]
 800fbfa:	f043 0302 	orr.w	r3, r3, #2
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fc04:	7efb      	ldrb	r3, [r7, #27]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d01b      	beq.n	800fc42 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	7d1b      	ldrb	r3, [r3, #20]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d106      	bne.n	800fc20 <tcp_process+0xa8>
 800fc12:	4b7c      	ldr	r3, [pc, #496]	@ (800fe04 <tcp_process+0x28c>)
 800fc14:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fc18:	4980      	ldr	r1, [pc, #512]	@ (800fe1c <tcp_process+0x2a4>)
 800fc1a:	487c      	ldr	r0, [pc, #496]	@ (800fe0c <tcp_process+0x294>)
 800fc1c:	f7f1 fa76 	bl	800110c <printf>
      recv_flags |= TF_RESET;
 800fc20:	4b7f      	ldr	r3, [pc, #508]	@ (800fe20 <tcp_process+0x2a8>)
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	f043 0308 	orr.w	r3, r3, #8
 800fc28:	b2da      	uxtb	r2, r3
 800fc2a:	4b7d      	ldr	r3, [pc, #500]	@ (800fe20 <tcp_process+0x2a8>)
 800fc2c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	8b5b      	ldrh	r3, [r3, #26]
 800fc32:	f023 0301 	bic.w	r3, r3, #1
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fc3c:	f06f 030d 	mvn.w	r3, #13
 800fc40:	e37a      	b.n	8010338 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fc42:	2300      	movs	r3, #0
 800fc44:	e378      	b.n	8010338 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fc46:	4b72      	ldr	r3, [pc, #456]	@ (800fe10 <tcp_process+0x298>)
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	f003 0302 	and.w	r3, r3, #2
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d010      	beq.n	800fc74 <tcp_process+0xfc>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	7d1b      	ldrb	r3, [r3, #20]
 800fc56:	2b02      	cmp	r3, #2
 800fc58:	d00c      	beq.n	800fc74 <tcp_process+0xfc>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	7d1b      	ldrb	r3, [r3, #20]
 800fc5e:	2b03      	cmp	r3, #3
 800fc60:	d008      	beq.n	800fc74 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	8b5b      	ldrh	r3, [r3, #26]
 800fc66:	f043 0302 	orr.w	r3, r3, #2
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fc70:	2300      	movs	r3, #0
 800fc72:	e361      	b.n	8010338 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	8b5b      	ldrh	r3, [r3, #26]
 800fc78:	f003 0310 	and.w	r3, r3, #16
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d103      	bne.n	800fc88 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fc80:	4b68      	ldr	r3, [pc, #416]	@ (800fe24 <tcp_process+0x2ac>)
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f001 fc2b 	bl	80114f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	7d1b      	ldrb	r3, [r3, #20]
 800fca2:	3b02      	subs	r3, #2
 800fca4:	2b07      	cmp	r3, #7
 800fca6:	f200 8337 	bhi.w	8010318 <tcp_process+0x7a0>
 800fcaa:	a201      	add	r2, pc, #4	@ (adr r2, 800fcb0 <tcp_process+0x138>)
 800fcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb0:	0800fcd1 	.word	0x0800fcd1
 800fcb4:	0800ff01 	.word	0x0800ff01
 800fcb8:	08010079 	.word	0x08010079
 800fcbc:	080100a3 	.word	0x080100a3
 800fcc0:	080101c7 	.word	0x080101c7
 800fcc4:	08010079 	.word	0x08010079
 800fcc8:	08010253 	.word	0x08010253
 800fccc:	080102e3 	.word	0x080102e3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fcd0:	4b4f      	ldr	r3, [pc, #316]	@ (800fe10 <tcp_process+0x298>)
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	f003 0310 	and.w	r3, r3, #16
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f000 80e4 	beq.w	800fea6 <tcp_process+0x32e>
 800fcde:	4b4c      	ldr	r3, [pc, #304]	@ (800fe10 <tcp_process+0x298>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	f003 0302 	and.w	r3, r3, #2
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f000 80dd 	beq.w	800fea6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcf0:	1c5a      	adds	r2, r3, #1
 800fcf2:	4b48      	ldr	r3, [pc, #288]	@ (800fe14 <tcp_process+0x29c>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	f040 80d5 	bne.w	800fea6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fcfc:	4b46      	ldr	r3, [pc, #280]	@ (800fe18 <tcp_process+0x2a0>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	1c5a      	adds	r2, r3, #1
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800fd0e:	4b41      	ldr	r3, [pc, #260]	@ (800fe14 <tcp_process+0x29c>)
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fd16:	4b44      	ldr	r3, [pc, #272]	@ (800fe28 <tcp_process+0x2b0>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	89db      	ldrh	r3, [r3, #14]
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fd30:	4b39      	ldr	r3, [pc, #228]	@ (800fe18 <tcp_process+0x2a0>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	1e5a      	subs	r2, r3, #1
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2204      	movs	r2, #4
 800fd3e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	3304      	adds	r3, #4
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f005 f927 	bl	8014f9c <ip4_route>
 800fd4e:	4601      	mov	r1, r0
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	3304      	adds	r3, #4
 800fd54:	461a      	mov	r2, r3
 800fd56:	4620      	mov	r0, r4
 800fd58:	f7ff f88c 	bl	800ee74 <tcp_eff_send_mss_netif>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	461a      	mov	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd68:	009a      	lsls	r2, r3, #2
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd6e:	005b      	lsls	r3, r3, #1
 800fd70:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fd74:	428b      	cmp	r3, r1
 800fd76:	bf38      	it	cc
 800fd78:	460b      	movcc	r3, r1
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d204      	bcs.n	800fd88 <tcp_process+0x210>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	e00d      	b.n	800fda4 <tcp_process+0x22c>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd8c:	005b      	lsls	r3, r3, #1
 800fd8e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d904      	bls.n	800fda0 <tcp_process+0x228>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd9a:	005b      	lsls	r3, r3, #1
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	e001      	b.n	800fda4 <tcp_process+0x22c>
 800fda0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d106      	bne.n	800fdc2 <tcp_process+0x24a>
 800fdb4:	4b13      	ldr	r3, [pc, #76]	@ (800fe04 <tcp_process+0x28c>)
 800fdb6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800fdba:	491c      	ldr	r1, [pc, #112]	@ (800fe2c <tcp_process+0x2b4>)
 800fdbc:	4813      	ldr	r0, [pc, #76]	@ (800fe0c <tcp_process+0x294>)
 800fdbe:	f7f1 f9a5 	bl	800110c <printf>
        --pcb->snd_queuelen;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	b29a      	uxth	r2, r3
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fdd6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d12a      	bne.n	800fe34 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fde2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d106      	bne.n	800fdf8 <tcp_process+0x280>
 800fdea:	4b06      	ldr	r3, [pc, #24]	@ (800fe04 <tcp_process+0x28c>)
 800fdec:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800fdf0:	490f      	ldr	r1, [pc, #60]	@ (800fe30 <tcp_process+0x2b8>)
 800fdf2:	4806      	ldr	r0, [pc, #24]	@ (800fe0c <tcp_process+0x294>)
 800fdf4:	f7f1 f98a 	bl	800110c <printf>
          pcb->unsent = rseg->next;
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fe00:	e01c      	b.n	800fe3c <tcp_process+0x2c4>
 800fe02:	bf00      	nop
 800fe04:	080195ec 	.word	0x080195ec
 800fe08:	08019824 	.word	0x08019824
 800fe0c:	08019638 	.word	0x08019638
 800fe10:	2000c5e8 	.word	0x2000c5e8
 800fe14:	2000c5e0 	.word	0x2000c5e0
 800fe18:	2000c5dc 	.word	0x2000c5dc
 800fe1c:	08019840 	.word	0x08019840
 800fe20:	2000c5e9 	.word	0x2000c5e9
 800fe24:	2000c5a4 	.word	0x2000c5a4
 800fe28:	2000c5cc 	.word	0x2000c5cc
 800fe2c:	08019860 	.word	0x08019860
 800fe30:	08019878 	.word	0x08019878
        } else {
          pcb->unacked = rseg->next;
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800fe3c:	69f8      	ldr	r0, [r7, #28]
 800fe3e:	f7fe fc54 	bl	800e6ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d104      	bne.n	800fe54 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe50:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fe52:	e006      	b.n	800fe62 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d00a      	beq.n	800fe82 <tcp_process+0x30a>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	6910      	ldr	r0, [r2, #16]
 800fe76:	2200      	movs	r2, #0
 800fe78:	6879      	ldr	r1, [r7, #4]
 800fe7a:	4798      	blx	r3
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	76bb      	strb	r3, [r7, #26]
 800fe80:	e001      	b.n	800fe86 <tcp_process+0x30e>
 800fe82:	2300      	movs	r3, #0
 800fe84:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fe86:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe8a:	f113 0f0d 	cmn.w	r3, #13
 800fe8e:	d102      	bne.n	800fe96 <tcp_process+0x31e>
          return ERR_ABRT;
 800fe90:	f06f 030c 	mvn.w	r3, #12
 800fe94:	e250      	b.n	8010338 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	8b5b      	ldrh	r3, [r3, #26]
 800fe9a:	f043 0302 	orr.w	r3, r3, #2
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fea4:	e23a      	b.n	801031c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fea6:	4b98      	ldr	r3, [pc, #608]	@ (8010108 <tcp_process+0x590>)
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	f003 0310 	and.w	r3, r3, #16
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 8234 	beq.w	801031c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feb4:	4b95      	ldr	r3, [pc, #596]	@ (801010c <tcp_process+0x594>)
 800feb6:	6819      	ldr	r1, [r3, #0]
 800feb8:	4b95      	ldr	r3, [pc, #596]	@ (8010110 <tcp_process+0x598>)
 800feba:	881b      	ldrh	r3, [r3, #0]
 800febc:	461a      	mov	r2, r3
 800febe:	4b95      	ldr	r3, [pc, #596]	@ (8010114 <tcp_process+0x59c>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fec4:	4b94      	ldr	r3, [pc, #592]	@ (8010118 <tcp_process+0x5a0>)
 800fec6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fec8:	885b      	ldrh	r3, [r3, #2]
 800feca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fecc:	4a92      	ldr	r2, [pc, #584]	@ (8010118 <tcp_process+0x5a0>)
 800fece:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fed0:	8812      	ldrh	r2, [r2, #0]
 800fed2:	b292      	uxth	r2, r2
 800fed4:	9202      	str	r2, [sp, #8]
 800fed6:	9301      	str	r3, [sp, #4]
 800fed8:	4b90      	ldr	r3, [pc, #576]	@ (801011c <tcp_process+0x5a4>)
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	4b90      	ldr	r3, [pc, #576]	@ (8010120 <tcp_process+0x5a8>)
 800fede:	4602      	mov	r2, r0
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f003 f8d7 	bl	8013094 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800feec:	2b05      	cmp	r3, #5
 800feee:	f200 8215 	bhi.w	801031c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f002 fea3 	bl	8012c44 <tcp_rexmit_rto>
      break;
 800fefe:	e20d      	b.n	801031c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ff00:	4b81      	ldr	r3, [pc, #516]	@ (8010108 <tcp_process+0x590>)
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	f003 0310 	and.w	r3, r3, #16
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	f000 80a1 	beq.w	8010050 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff0e:	4b7f      	ldr	r3, [pc, #508]	@ (801010c <tcp_process+0x594>)
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff16:	1ad3      	subs	r3, r2, r3
 800ff18:	3b01      	subs	r3, #1
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	db7e      	blt.n	801001c <tcp_process+0x4a4>
 800ff1e:	4b7b      	ldr	r3, [pc, #492]	@ (801010c <tcp_process+0x594>)
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	dc77      	bgt.n	801001c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2204      	movs	r2, #4
 800ff30:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d102      	bne.n	800ff40 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ff3a:	23fa      	movs	r3, #250	@ 0xfa
 800ff3c:	76bb      	strb	r3, [r7, #26]
 800ff3e:	e01d      	b.n	800ff7c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff44:	699b      	ldr	r3, [r3, #24]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <tcp_process+0x3e0>
 800ff4a:	4b76      	ldr	r3, [pc, #472]	@ (8010124 <tcp_process+0x5ac>)
 800ff4c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ff50:	4975      	ldr	r1, [pc, #468]	@ (8010128 <tcp_process+0x5b0>)
 800ff52:	4876      	ldr	r0, [pc, #472]	@ (801012c <tcp_process+0x5b4>)
 800ff54:	f7f1 f8da 	bl	800110c <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff5c:	699b      	ldr	r3, [r3, #24]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00a      	beq.n	800ff78 <tcp_process+0x400>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff66:	699b      	ldr	r3, [r3, #24]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	6910      	ldr	r0, [r2, #16]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	6879      	ldr	r1, [r7, #4]
 800ff70:	4798      	blx	r3
 800ff72:	4603      	mov	r3, r0
 800ff74:	76bb      	strb	r3, [r7, #26]
 800ff76:	e001      	b.n	800ff7c <tcp_process+0x404>
 800ff78:	23f0      	movs	r3, #240	@ 0xf0
 800ff7a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ff7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00a      	beq.n	800ff9a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ff84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff88:	f113 0f0d 	cmn.w	r3, #13
 800ff8c:	d002      	beq.n	800ff94 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7fd fd60 	bl	800da54 <tcp_abort>
            }
            return ERR_ABRT;
 800ff94:	f06f 030c 	mvn.w	r3, #12
 800ff98:	e1ce      	b.n	8010338 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f000 fae0 	bl	8010560 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ffa0:	4b63      	ldr	r3, [pc, #396]	@ (8010130 <tcp_process+0x5b8>)
 800ffa2:	881b      	ldrh	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d005      	beq.n	800ffb4 <tcp_process+0x43c>
            recv_acked--;
 800ffa8:	4b61      	ldr	r3, [pc, #388]	@ (8010130 <tcp_process+0x5b8>)
 800ffaa:	881b      	ldrh	r3, [r3, #0]
 800ffac:	3b01      	subs	r3, #1
 800ffae:	b29a      	uxth	r2, r3
 800ffb0:	4b5f      	ldr	r3, [pc, #380]	@ (8010130 <tcp_process+0x5b8>)
 800ffb2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffb8:	009a      	lsls	r2, r3, #2
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffbe:	005b      	lsls	r3, r3, #1
 800ffc0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ffc4:	428b      	cmp	r3, r1
 800ffc6:	bf38      	it	cc
 800ffc8:	460b      	movcc	r3, r1
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d204      	bcs.n	800ffd8 <tcp_process+0x460>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	e00d      	b.n	800fff4 <tcp_process+0x47c>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffdc:	005b      	lsls	r3, r3, #1
 800ffde:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d904      	bls.n	800fff0 <tcp_process+0x478>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffea:	005b      	lsls	r3, r3, #1
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	e001      	b.n	800fff4 <tcp_process+0x47c>
 800fff0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fffa:	4b4e      	ldr	r3, [pc, #312]	@ (8010134 <tcp_process+0x5bc>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	f003 0320 	and.w	r3, r3, #32
 8010002:	2b00      	cmp	r3, #0
 8010004:	d037      	beq.n	8010076 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	8b5b      	ldrh	r3, [r3, #26]
 801000a:	f043 0302 	orr.w	r3, r3, #2
 801000e:	b29a      	uxth	r2, r3
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2207      	movs	r2, #7
 8010018:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801001a:	e02c      	b.n	8010076 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801001c:	4b3b      	ldr	r3, [pc, #236]	@ (801010c <tcp_process+0x594>)
 801001e:	6819      	ldr	r1, [r3, #0]
 8010020:	4b3b      	ldr	r3, [pc, #236]	@ (8010110 <tcp_process+0x598>)
 8010022:	881b      	ldrh	r3, [r3, #0]
 8010024:	461a      	mov	r2, r3
 8010026:	4b3b      	ldr	r3, [pc, #236]	@ (8010114 <tcp_process+0x59c>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801002c:	4b3a      	ldr	r3, [pc, #232]	@ (8010118 <tcp_process+0x5a0>)
 801002e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010030:	885b      	ldrh	r3, [r3, #2]
 8010032:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010034:	4a38      	ldr	r2, [pc, #224]	@ (8010118 <tcp_process+0x5a0>)
 8010036:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010038:	8812      	ldrh	r2, [r2, #0]
 801003a:	b292      	uxth	r2, r2
 801003c:	9202      	str	r2, [sp, #8]
 801003e:	9301      	str	r3, [sp, #4]
 8010040:	4b36      	ldr	r3, [pc, #216]	@ (801011c <tcp_process+0x5a4>)
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	4b36      	ldr	r3, [pc, #216]	@ (8010120 <tcp_process+0x5a8>)
 8010046:	4602      	mov	r2, r0
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f003 f823 	bl	8013094 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801004e:	e167      	b.n	8010320 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010050:	4b2d      	ldr	r3, [pc, #180]	@ (8010108 <tcp_process+0x590>)
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	f003 0302 	and.w	r3, r3, #2
 8010058:	2b00      	cmp	r3, #0
 801005a:	f000 8161 	beq.w	8010320 <tcp_process+0x7a8>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010062:	1e5a      	subs	r2, r3, #1
 8010064:	4b2b      	ldr	r3, [pc, #172]	@ (8010114 <tcp_process+0x59c>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	429a      	cmp	r2, r3
 801006a:	f040 8159 	bne.w	8010320 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f002 fe0a 	bl	8012c88 <tcp_rexmit>
      break;
 8010074:	e154      	b.n	8010320 <tcp_process+0x7a8>
 8010076:	e153      	b.n	8010320 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f000 fa71 	bl	8010560 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801007e:	4b2d      	ldr	r3, [pc, #180]	@ (8010134 <tcp_process+0x5bc>)
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	f003 0320 	and.w	r3, r3, #32
 8010086:	2b00      	cmp	r3, #0
 8010088:	f000 814c 	beq.w	8010324 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	8b5b      	ldrh	r3, [r3, #26]
 8010090:	f043 0302 	orr.w	r3, r3, #2
 8010094:	b29a      	uxth	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2207      	movs	r2, #7
 801009e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80100a0:	e140      	b.n	8010324 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 fa5c 	bl	8010560 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80100a8:	4b22      	ldr	r3, [pc, #136]	@ (8010134 <tcp_process+0x5bc>)
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	f003 0320 	and.w	r3, r3, #32
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d071      	beq.n	8010198 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100b4:	4b14      	ldr	r3, [pc, #80]	@ (8010108 <tcp_process+0x590>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	f003 0310 	and.w	r3, r3, #16
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d060      	beq.n	8010182 <tcp_process+0x60a>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80100c4:	4b11      	ldr	r3, [pc, #68]	@ (801010c <tcp_process+0x594>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d15a      	bne.n	8010182 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d156      	bne.n	8010182 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	8b5b      	ldrh	r3, [r3, #26]
 80100d8:	f043 0302 	orr.w	r3, r3, #2
 80100dc:	b29a      	uxth	r2, r3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7fe fdbc 	bl	800ec60 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80100e8:	4b13      	ldr	r3, [pc, #76]	@ (8010138 <tcp_process+0x5c0>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d105      	bne.n	80100fe <tcp_process+0x586>
 80100f2:	4b11      	ldr	r3, [pc, #68]	@ (8010138 <tcp_process+0x5c0>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	4a0f      	ldr	r2, [pc, #60]	@ (8010138 <tcp_process+0x5c0>)
 80100fa:	6013      	str	r3, [r2, #0]
 80100fc:	e02e      	b.n	801015c <tcp_process+0x5e4>
 80100fe:	4b0e      	ldr	r3, [pc, #56]	@ (8010138 <tcp_process+0x5c0>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	617b      	str	r3, [r7, #20]
 8010104:	e027      	b.n	8010156 <tcp_process+0x5de>
 8010106:	bf00      	nop
 8010108:	2000c5e8 	.word	0x2000c5e8
 801010c:	2000c5e0 	.word	0x2000c5e0
 8010110:	2000c5e6 	.word	0x2000c5e6
 8010114:	2000c5dc 	.word	0x2000c5dc
 8010118:	2000c5cc 	.word	0x2000c5cc
 801011c:	20008e60 	.word	0x20008e60
 8010120:	20008e64 	.word	0x20008e64
 8010124:	080195ec 	.word	0x080195ec
 8010128:	0801988c 	.word	0x0801988c
 801012c:	08019638 	.word	0x08019638
 8010130:	2000c5e4 	.word	0x2000c5e4
 8010134:	2000c5e9 	.word	0x2000c5e9
 8010138:	2000c5b0 	.word	0x2000c5b0
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	429a      	cmp	r2, r3
 8010144:	d104      	bne.n	8010150 <tcp_process+0x5d8>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	68da      	ldr	r2, [r3, #12]
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	60da      	str	r2, [r3, #12]
 801014e:	e005      	b.n	801015c <tcp_process+0x5e4>
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	617b      	str	r3, [r7, #20]
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d1ef      	bne.n	801013c <tcp_process+0x5c4>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2200      	movs	r2, #0
 8010160:	60da      	str	r2, [r3, #12]
 8010162:	4b77      	ldr	r3, [pc, #476]	@ (8010340 <tcp_process+0x7c8>)
 8010164:	2201      	movs	r2, #1
 8010166:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	220a      	movs	r2, #10
 801016c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801016e:	4b75      	ldr	r3, [pc, #468]	@ (8010344 <tcp_process+0x7cc>)
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	60da      	str	r2, [r3, #12]
 8010176:	4a73      	ldr	r2, [pc, #460]	@ (8010344 <tcp_process+0x7cc>)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6013      	str	r3, [r2, #0]
 801017c:	f003 f94c 	bl	8013418 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010180:	e0d2      	b.n	8010328 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	8b5b      	ldrh	r3, [r3, #26]
 8010186:	f043 0302 	orr.w	r3, r3, #2
 801018a:	b29a      	uxth	r2, r3
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2208      	movs	r2, #8
 8010194:	751a      	strb	r2, [r3, #20]
      break;
 8010196:	e0c7      	b.n	8010328 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010198:	4b6b      	ldr	r3, [pc, #428]	@ (8010348 <tcp_process+0x7d0>)
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	f003 0310 	and.w	r3, r3, #16
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f000 80c1 	beq.w	8010328 <tcp_process+0x7b0>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101aa:	4b68      	ldr	r3, [pc, #416]	@ (801034c <tcp_process+0x7d4>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	f040 80ba 	bne.w	8010328 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f040 80b5 	bne.w	8010328 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2206      	movs	r2, #6
 80101c2:	751a      	strb	r2, [r3, #20]
      break;
 80101c4:	e0b0      	b.n	8010328 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 f9ca 	bl	8010560 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80101cc:	4b60      	ldr	r3, [pc, #384]	@ (8010350 <tcp_process+0x7d8>)
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	f003 0320 	and.w	r3, r3, #32
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f000 80a9 	beq.w	801032c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	8b5b      	ldrh	r3, [r3, #26]
 80101de:	f043 0302 	orr.w	r3, r3, #2
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f7fe fd39 	bl	800ec60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80101ee:	4b59      	ldr	r3, [pc, #356]	@ (8010354 <tcp_process+0x7dc>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d105      	bne.n	8010204 <tcp_process+0x68c>
 80101f8:	4b56      	ldr	r3, [pc, #344]	@ (8010354 <tcp_process+0x7dc>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	68db      	ldr	r3, [r3, #12]
 80101fe:	4a55      	ldr	r2, [pc, #340]	@ (8010354 <tcp_process+0x7dc>)
 8010200:	6013      	str	r3, [r2, #0]
 8010202:	e013      	b.n	801022c <tcp_process+0x6b4>
 8010204:	4b53      	ldr	r3, [pc, #332]	@ (8010354 <tcp_process+0x7dc>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	613b      	str	r3, [r7, #16]
 801020a:	e00c      	b.n	8010226 <tcp_process+0x6ae>
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	429a      	cmp	r2, r3
 8010214:	d104      	bne.n	8010220 <tcp_process+0x6a8>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	68da      	ldr	r2, [r3, #12]
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	60da      	str	r2, [r3, #12]
 801021e:	e005      	b.n	801022c <tcp_process+0x6b4>
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	613b      	str	r3, [r7, #16]
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d1ef      	bne.n	801020c <tcp_process+0x694>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	60da      	str	r2, [r3, #12]
 8010232:	4b43      	ldr	r3, [pc, #268]	@ (8010340 <tcp_process+0x7c8>)
 8010234:	2201      	movs	r2, #1
 8010236:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	220a      	movs	r2, #10
 801023c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801023e:	4b41      	ldr	r3, [pc, #260]	@ (8010344 <tcp_process+0x7cc>)
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	60da      	str	r2, [r3, #12]
 8010246:	4a3f      	ldr	r2, [pc, #252]	@ (8010344 <tcp_process+0x7cc>)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6013      	str	r3, [r2, #0]
 801024c:	f003 f8e4 	bl	8013418 <tcp_timer_needed>
      }
      break;
 8010250:	e06c      	b.n	801032c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 f984 	bl	8010560 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010258:	4b3b      	ldr	r3, [pc, #236]	@ (8010348 <tcp_process+0x7d0>)
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	f003 0310 	and.w	r3, r3, #16
 8010260:	2b00      	cmp	r3, #0
 8010262:	d065      	beq.n	8010330 <tcp_process+0x7b8>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010268:	4b38      	ldr	r3, [pc, #224]	@ (801034c <tcp_process+0x7d4>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	429a      	cmp	r2, r3
 801026e:	d15f      	bne.n	8010330 <tcp_process+0x7b8>
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010274:	2b00      	cmp	r3, #0
 8010276:	d15b      	bne.n	8010330 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f7fe fcf1 	bl	800ec60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801027e:	4b35      	ldr	r3, [pc, #212]	@ (8010354 <tcp_process+0x7dc>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	429a      	cmp	r2, r3
 8010286:	d105      	bne.n	8010294 <tcp_process+0x71c>
 8010288:	4b32      	ldr	r3, [pc, #200]	@ (8010354 <tcp_process+0x7dc>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	4a31      	ldr	r2, [pc, #196]	@ (8010354 <tcp_process+0x7dc>)
 8010290:	6013      	str	r3, [r2, #0]
 8010292:	e013      	b.n	80102bc <tcp_process+0x744>
 8010294:	4b2f      	ldr	r3, [pc, #188]	@ (8010354 <tcp_process+0x7dc>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	60fb      	str	r3, [r7, #12]
 801029a:	e00c      	b.n	80102b6 <tcp_process+0x73e>
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d104      	bne.n	80102b0 <tcp_process+0x738>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	68da      	ldr	r2, [r3, #12]
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	60da      	str	r2, [r3, #12]
 80102ae:	e005      	b.n	80102bc <tcp_process+0x744>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	68db      	ldr	r3, [r3, #12]
 80102b4:	60fb      	str	r3, [r7, #12]
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d1ef      	bne.n	801029c <tcp_process+0x724>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2200      	movs	r2, #0
 80102c0:	60da      	str	r2, [r3, #12]
 80102c2:	4b1f      	ldr	r3, [pc, #124]	@ (8010340 <tcp_process+0x7c8>)
 80102c4:	2201      	movs	r2, #1
 80102c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	220a      	movs	r2, #10
 80102cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80102ce:	4b1d      	ldr	r3, [pc, #116]	@ (8010344 <tcp_process+0x7cc>)
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	60da      	str	r2, [r3, #12]
 80102d6:	4a1b      	ldr	r2, [pc, #108]	@ (8010344 <tcp_process+0x7cc>)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6013      	str	r3, [r2, #0]
 80102dc:	f003 f89c 	bl	8013418 <tcp_timer_needed>
      }
      break;
 80102e0:	e026      	b.n	8010330 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 f93c 	bl	8010560 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80102e8:	4b17      	ldr	r3, [pc, #92]	@ (8010348 <tcp_process+0x7d0>)
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	f003 0310 	and.w	r3, r3, #16
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d01f      	beq.n	8010334 <tcp_process+0x7bc>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102f8:	4b14      	ldr	r3, [pc, #80]	@ (801034c <tcp_process+0x7d4>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d119      	bne.n	8010334 <tcp_process+0x7bc>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010304:	2b00      	cmp	r3, #0
 8010306:	d115      	bne.n	8010334 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010308:	4b11      	ldr	r3, [pc, #68]	@ (8010350 <tcp_process+0x7d8>)
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	f043 0310 	orr.w	r3, r3, #16
 8010310:	b2da      	uxtb	r2, r3
 8010312:	4b0f      	ldr	r3, [pc, #60]	@ (8010350 <tcp_process+0x7d8>)
 8010314:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010316:	e00d      	b.n	8010334 <tcp_process+0x7bc>
    default:
      break;
 8010318:	bf00      	nop
 801031a:	e00c      	b.n	8010336 <tcp_process+0x7be>
      break;
 801031c:	bf00      	nop
 801031e:	e00a      	b.n	8010336 <tcp_process+0x7be>
      break;
 8010320:	bf00      	nop
 8010322:	e008      	b.n	8010336 <tcp_process+0x7be>
      break;
 8010324:	bf00      	nop
 8010326:	e006      	b.n	8010336 <tcp_process+0x7be>
      break;
 8010328:	bf00      	nop
 801032a:	e004      	b.n	8010336 <tcp_process+0x7be>
      break;
 801032c:	bf00      	nop
 801032e:	e002      	b.n	8010336 <tcp_process+0x7be>
      break;
 8010330:	bf00      	nop
 8010332:	e000      	b.n	8010336 <tcp_process+0x7be>
      break;
 8010334:	bf00      	nop
  }
  return ERR_OK;
 8010336:	2300      	movs	r3, #0
}
 8010338:	4618      	mov	r0, r3
 801033a:	3724      	adds	r7, #36	@ 0x24
 801033c:	46bd      	mov	sp, r7
 801033e:	bd90      	pop	{r4, r7, pc}
 8010340:	2000c5b8 	.word	0x2000c5b8
 8010344:	2000c5b4 	.word	0x2000c5b4
 8010348:	2000c5e8 	.word	0x2000c5e8
 801034c:	2000c5e0 	.word	0x2000c5e0
 8010350:	2000c5e9 	.word	0x2000c5e9
 8010354:	2000c5b0 	.word	0x2000c5b0

08010358 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010358:	b590      	push	{r4, r7, lr}
 801035a:	b085      	sub	sp, #20
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d106      	bne.n	8010376 <tcp_oos_insert_segment+0x1e>
 8010368:	4b3b      	ldr	r3, [pc, #236]	@ (8010458 <tcp_oos_insert_segment+0x100>)
 801036a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801036e:	493b      	ldr	r1, [pc, #236]	@ (801045c <tcp_oos_insert_segment+0x104>)
 8010370:	483b      	ldr	r0, [pc, #236]	@ (8010460 <tcp_oos_insert_segment+0x108>)
 8010372:	f7f0 fecb 	bl	800110c <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	899b      	ldrh	r3, [r3, #12]
 801037c:	b29b      	uxth	r3, r3
 801037e:	4618      	mov	r0, r3
 8010380:	f7fb f986 	bl	800b690 <lwip_htons>
 8010384:	4603      	mov	r3, r0
 8010386:	b2db      	uxtb	r3, r3
 8010388:	f003 0301 	and.w	r3, r3, #1
 801038c:	2b00      	cmp	r3, #0
 801038e:	d028      	beq.n	80103e2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010390:	6838      	ldr	r0, [r7, #0]
 8010392:	f7fe f995 	bl	800e6c0 <tcp_segs_free>
    next = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	603b      	str	r3, [r7, #0]
 801039a:	e056      	b.n	801044a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	899b      	ldrh	r3, [r3, #12]
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fb f973 	bl	800b690 <lwip_htons>
 80103aa:	4603      	mov	r3, r0
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	f003 0301 	and.w	r3, r3, #1
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00d      	beq.n	80103d2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	68db      	ldr	r3, [r3, #12]
 80103ba:	899b      	ldrh	r3, [r3, #12]
 80103bc:	b29c      	uxth	r4, r3
 80103be:	2001      	movs	r0, #1
 80103c0:	f7fb f966 	bl	800b690 <lwip_htons>
 80103c4:	4603      	mov	r3, r0
 80103c6:	461a      	mov	r2, r3
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	68db      	ldr	r3, [r3, #12]
 80103cc:	4322      	orrs	r2, r4
 80103ce:	b292      	uxth	r2, r2
 80103d0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80103dc:	68f8      	ldr	r0, [r7, #12]
 80103de:	f7fe f984 	bl	800e6ea <tcp_seg_free>
    while (next &&
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00e      	beq.n	8010406 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	891b      	ldrh	r3, [r3, #8]
 80103ec:	461a      	mov	r2, r3
 80103ee:	4b1d      	ldr	r3, [pc, #116]	@ (8010464 <tcp_oos_insert_segment+0x10c>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	441a      	add	r2, r3
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	6839      	ldr	r1, [r7, #0]
 80103fc:	8909      	ldrh	r1, [r1, #8]
 80103fe:	440b      	add	r3, r1
 8010400:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010402:	2b00      	cmp	r3, #0
 8010404:	daca      	bge.n	801039c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d01e      	beq.n	801044a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	891b      	ldrh	r3, [r3, #8]
 8010410:	461a      	mov	r2, r3
 8010412:	4b14      	ldr	r3, [pc, #80]	@ (8010464 <tcp_oos_insert_segment+0x10c>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	441a      	add	r2, r3
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010420:	2b00      	cmp	r3, #0
 8010422:	dd12      	ble.n	801044a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	b29a      	uxth	r2, r3
 801042c:	4b0d      	ldr	r3, [pc, #52]	@ (8010464 <tcp_oos_insert_segment+0x10c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	b29b      	uxth	r3, r3
 8010432:	1ad3      	subs	r3, r2, r3
 8010434:	b29a      	uxth	r2, r3
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	685a      	ldr	r2, [r3, #4]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	891b      	ldrh	r3, [r3, #8]
 8010442:	4619      	mov	r1, r3
 8010444:	4610      	mov	r0, r2
 8010446:	f7fc fb8f 	bl	800cb68 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	683a      	ldr	r2, [r7, #0]
 801044e:	601a      	str	r2, [r3, #0]
}
 8010450:	bf00      	nop
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	bd90      	pop	{r4, r7, pc}
 8010458:	080195ec 	.word	0x080195ec
 801045c:	080198ac 	.word	0x080198ac
 8010460:	08019638 	.word	0x08019638
 8010464:	2000c5dc 	.word	0x2000c5dc

08010468 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010468:	b5b0      	push	{r4, r5, r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
 8010474:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010476:	e03e      	b.n	80104f6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	4618      	mov	r0, r3
 8010488:	f7fc fd82 	bl	800cf90 <pbuf_clen>
 801048c:	4603      	mov	r3, r0
 801048e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010496:	8a7a      	ldrh	r2, [r7, #18]
 8010498:	429a      	cmp	r2, r3
 801049a:	d906      	bls.n	80104aa <tcp_free_acked_segments+0x42>
 801049c:	4b2a      	ldr	r3, [pc, #168]	@ (8010548 <tcp_free_acked_segments+0xe0>)
 801049e:	f240 4257 	movw	r2, #1111	@ 0x457
 80104a2:	492a      	ldr	r1, [pc, #168]	@ (801054c <tcp_free_acked_segments+0xe4>)
 80104a4:	482a      	ldr	r0, [pc, #168]	@ (8010550 <tcp_free_acked_segments+0xe8>)
 80104a6:	f7f0 fe31 	bl	800110c <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80104b0:	8a7b      	ldrh	r3, [r7, #18]
 80104b2:	1ad3      	subs	r3, r2, r3
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	891a      	ldrh	r2, [r3, #8]
 80104c0:	4b24      	ldr	r3, [pc, #144]	@ (8010554 <tcp_free_acked_segments+0xec>)
 80104c2:	881b      	ldrh	r3, [r3, #0]
 80104c4:	4413      	add	r3, r2
 80104c6:	b29a      	uxth	r2, r3
 80104c8:	4b22      	ldr	r3, [pc, #136]	@ (8010554 <tcp_free_acked_segments+0xec>)
 80104ca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80104cc:	6978      	ldr	r0, [r7, #20]
 80104ce:	f7fe f90c 	bl	800e6ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00c      	beq.n	80104f6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d109      	bne.n	80104f6 <tcp_free_acked_segments+0x8e>
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d106      	bne.n	80104f6 <tcp_free_acked_segments+0x8e>
 80104e8:	4b17      	ldr	r3, [pc, #92]	@ (8010548 <tcp_free_acked_segments+0xe0>)
 80104ea:	f240 4261 	movw	r2, #1121	@ 0x461
 80104ee:	491a      	ldr	r1, [pc, #104]	@ (8010558 <tcp_free_acked_segments+0xf0>)
 80104f0:	4817      	ldr	r0, [pc, #92]	@ (8010550 <tcp_free_acked_segments+0xe8>)
 80104f2:	f7f0 fe0b 	bl	800110c <printf>
  while (seg_list != NULL &&
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d020      	beq.n	801053e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	4618      	mov	r0, r3
 8010504:	f7fb f8da 	bl	800b6bc <lwip_htonl>
 8010508:	4604      	mov	r4, r0
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	891b      	ldrh	r3, [r3, #8]
 801050e:	461d      	mov	r5, r3
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	899b      	ldrh	r3, [r3, #12]
 8010516:	b29b      	uxth	r3, r3
 8010518:	4618      	mov	r0, r3
 801051a:	f7fb f8b9 	bl	800b690 <lwip_htons>
 801051e:	4603      	mov	r3, r0
 8010520:	b2db      	uxtb	r3, r3
 8010522:	f003 0303 	and.w	r3, r3, #3
 8010526:	2b00      	cmp	r3, #0
 8010528:	d001      	beq.n	801052e <tcp_free_acked_segments+0xc6>
 801052a:	2301      	movs	r3, #1
 801052c:	e000      	b.n	8010530 <tcp_free_acked_segments+0xc8>
 801052e:	2300      	movs	r3, #0
 8010530:	442b      	add	r3, r5
 8010532:	18e2      	adds	r2, r4, r3
 8010534:	4b09      	ldr	r3, [pc, #36]	@ (801055c <tcp_free_acked_segments+0xf4>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801053a:	2b00      	cmp	r3, #0
 801053c:	dd9c      	ble.n	8010478 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801053e:	68bb      	ldr	r3, [r7, #8]
}
 8010540:	4618      	mov	r0, r3
 8010542:	3718      	adds	r7, #24
 8010544:	46bd      	mov	sp, r7
 8010546:	bdb0      	pop	{r4, r5, r7, pc}
 8010548:	080195ec 	.word	0x080195ec
 801054c:	080198d4 	.word	0x080198d4
 8010550:	08019638 	.word	0x08019638
 8010554:	2000c5e4 	.word	0x2000c5e4
 8010558:	080198fc 	.word	0x080198fc
 801055c:	2000c5e0 	.word	0x2000c5e0

08010560 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010560:	b5b0      	push	{r4, r5, r7, lr}
 8010562:	b094      	sub	sp, #80	@ 0x50
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d106      	bne.n	8010580 <tcp_receive+0x20>
 8010572:	4b91      	ldr	r3, [pc, #580]	@ (80107b8 <tcp_receive+0x258>)
 8010574:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010578:	4990      	ldr	r1, [pc, #576]	@ (80107bc <tcp_receive+0x25c>)
 801057a:	4891      	ldr	r0, [pc, #580]	@ (80107c0 <tcp_receive+0x260>)
 801057c:	f7f0 fdc6 	bl	800110c <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	7d1b      	ldrb	r3, [r3, #20]
 8010584:	2b03      	cmp	r3, #3
 8010586:	d806      	bhi.n	8010596 <tcp_receive+0x36>
 8010588:	4b8b      	ldr	r3, [pc, #556]	@ (80107b8 <tcp_receive+0x258>)
 801058a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801058e:	498d      	ldr	r1, [pc, #564]	@ (80107c4 <tcp_receive+0x264>)
 8010590:	488b      	ldr	r0, [pc, #556]	@ (80107c0 <tcp_receive+0x260>)
 8010592:	f7f0 fdbb 	bl	800110c <printf>

  if (flags & TCP_ACK) {
 8010596:	4b8c      	ldr	r3, [pc, #560]	@ (80107c8 <tcp_receive+0x268>)
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	f003 0310 	and.w	r3, r3, #16
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f000 8264 	beq.w	8010a6c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80105aa:	461a      	mov	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105b0:	4413      	add	r3, r2
 80105b2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80105b8:	4b84      	ldr	r3, [pc, #528]	@ (80107cc <tcp_receive+0x26c>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	2b00      	cmp	r3, #0
 80105c0:	db1b      	blt.n	80105fa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80105c6:	4b81      	ldr	r3, [pc, #516]	@ (80107cc <tcp_receive+0x26c>)
 80105c8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d106      	bne.n	80105dc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80105d2:	4b7f      	ldr	r3, [pc, #508]	@ (80107d0 <tcp_receive+0x270>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	1ad3      	subs	r3, r2, r3
 80105d8:	2b00      	cmp	r3, #0
 80105da:	db0e      	blt.n	80105fa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80105e0:	4b7b      	ldr	r3, [pc, #492]	@ (80107d0 <tcp_receive+0x270>)
 80105e2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d125      	bne.n	8010634 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80105e8:	4b7a      	ldr	r3, [pc, #488]	@ (80107d4 <tcp_receive+0x274>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	89db      	ldrh	r3, [r3, #14]
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d91c      	bls.n	8010634 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80105fa:	4b76      	ldr	r3, [pc, #472]	@ (80107d4 <tcp_receive+0x274>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	89db      	ldrh	r3, [r3, #14]
 8010600:	b29a      	uxth	r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010614:	429a      	cmp	r2, r3
 8010616:	d205      	bcs.n	8010624 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010624:	4b69      	ldr	r3, [pc, #420]	@ (80107cc <tcp_receive+0x26c>)
 8010626:	681a      	ldr	r2, [r3, #0]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801062c:	4b68      	ldr	r3, [pc, #416]	@ (80107d0 <tcp_receive+0x270>)
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010634:	4b66      	ldr	r3, [pc, #408]	@ (80107d0 <tcp_receive+0x270>)
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801063c:	1ad3      	subs	r3, r2, r3
 801063e:	2b00      	cmp	r3, #0
 8010640:	dc58      	bgt.n	80106f4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010642:	4b65      	ldr	r3, [pc, #404]	@ (80107d8 <tcp_receive+0x278>)
 8010644:	881b      	ldrh	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d14b      	bne.n	80106e2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010654:	4413      	add	r3, r2
 8010656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010658:	429a      	cmp	r2, r3
 801065a:	d142      	bne.n	80106e2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010662:	2b00      	cmp	r3, #0
 8010664:	db3d      	blt.n	80106e2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801066a:	4b59      	ldr	r3, [pc, #356]	@ (80107d0 <tcp_receive+0x270>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	429a      	cmp	r2, r3
 8010670:	d137      	bne.n	80106e2 <tcp_receive+0x182>
              found_dupack = 1;
 8010672:	2301      	movs	r3, #1
 8010674:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801067c:	2bff      	cmp	r3, #255	@ 0xff
 801067e:	d007      	beq.n	8010690 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010686:	3301      	adds	r3, #1
 8010688:	b2da      	uxtb	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010696:	2b03      	cmp	r3, #3
 8010698:	d91b      	bls.n	80106d2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106a4:	4413      	add	r3, r2
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d30a      	bcc.n	80106c8 <tcp_receive+0x168>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106bc:	4413      	add	r3, r2
 80106be:	b29a      	uxth	r2, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80106c6:	e004      	b.n	80106d2 <tcp_receive+0x172>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80106d8:	2b02      	cmp	r3, #2
 80106da:	d902      	bls.n	80106e2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f002 fb3f 	bl	8012d60 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80106e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f040 8161 	bne.w	80109ac <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80106f2:	e15b      	b.n	80109ac <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80106f4:	4b36      	ldr	r3, [pc, #216]	@ (80107d0 <tcp_receive+0x270>)
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	3b01      	subs	r3, #1
 8010700:	2b00      	cmp	r3, #0
 8010702:	f2c0 814e 	blt.w	80109a2 <tcp_receive+0x442>
 8010706:	4b32      	ldr	r3, [pc, #200]	@ (80107d0 <tcp_receive+0x270>)
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801070e:	1ad3      	subs	r3, r2, r3
 8010710:	2b00      	cmp	r3, #0
 8010712:	f300 8146 	bgt.w	80109a2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	8b5b      	ldrh	r3, [r3, #26]
 801071a:	f003 0304 	and.w	r3, r3, #4
 801071e:	2b00      	cmp	r3, #0
 8010720:	d010      	beq.n	8010744 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	8b5b      	ldrh	r3, [r3, #26]
 8010726:	f023 0304 	bic.w	r3, r3, #4
 801072a:	b29a      	uxth	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010752:	10db      	asrs	r3, r3, #3
 8010754:	b21b      	sxth	r3, r3
 8010756:	b29a      	uxth	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801075e:	b29b      	uxth	r3, r3
 8010760:	4413      	add	r3, r2
 8010762:	b29b      	uxth	r3, r3
 8010764:	b21a      	sxth	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801076c:	4b18      	ldr	r3, [pc, #96]	@ (80107d0 <tcp_receive+0x270>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	b29a      	uxth	r2, r3
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010776:	b29b      	uxth	r3, r3
 8010778:	1ad3      	subs	r3, r2, r3
 801077a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2200      	movs	r2, #0
 8010780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010784:	4b12      	ldr	r3, [pc, #72]	@ (80107d0 <tcp_receive+0x270>)
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	7d1b      	ldrb	r3, [r3, #20]
 8010790:	2b03      	cmp	r3, #3
 8010792:	f240 8097 	bls.w	80108c4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d245      	bcs.n	8010832 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	8b5b      	ldrh	r3, [r3, #26]
 80107aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d014      	beq.n	80107dc <tcp_receive+0x27c>
 80107b2:	2301      	movs	r3, #1
 80107b4:	e013      	b.n	80107de <tcp_receive+0x27e>
 80107b6:	bf00      	nop
 80107b8:	080195ec 	.word	0x080195ec
 80107bc:	0801991c 	.word	0x0801991c
 80107c0:	08019638 	.word	0x08019638
 80107c4:	08019938 	.word	0x08019938
 80107c8:	2000c5e8 	.word	0x2000c5e8
 80107cc:	2000c5dc 	.word	0x2000c5dc
 80107d0:	2000c5e0 	.word	0x2000c5e0
 80107d4:	2000c5cc 	.word	0x2000c5cc
 80107d8:	2000c5e6 	.word	0x2000c5e6
 80107dc:	2302      	movs	r3, #2
 80107de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80107e2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107ec:	fb12 f303 	smulbb	r3, r2, r3
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80107f4:	4293      	cmp	r3, r2
 80107f6:	bf28      	it	cs
 80107f8:	4613      	movcs	r3, r2
 80107fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010802:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010804:	4413      	add	r3, r2
 8010806:	b29a      	uxth	r2, r3
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801080e:	429a      	cmp	r2, r3
 8010810:	d309      	bcc.n	8010826 <tcp_receive+0x2c6>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010818:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801081a:	4413      	add	r3, r2
 801081c:	b29a      	uxth	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010824:	e04e      	b.n	80108c4 <tcp_receive+0x364>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801082c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010830:	e048      	b.n	80108c4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010838:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801083a:	4413      	add	r3, r2
 801083c:	b29a      	uxth	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010844:	429a      	cmp	r2, r3
 8010846:	d309      	bcc.n	801085c <tcp_receive+0x2fc>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801084e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010850:	4413      	add	r3, r2
 8010852:	b29a      	uxth	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801085a:	e004      	b.n	8010866 <tcp_receive+0x306>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010862:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010872:	429a      	cmp	r2, r3
 8010874:	d326      	bcc.n	80108c4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010882:	1ad3      	subs	r3, r2, r3
 8010884:	b29a      	uxth	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010896:	4413      	add	r3, r2
 8010898:	b29a      	uxth	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d30a      	bcc.n	80108ba <tcp_receive+0x35a>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80108ae:	4413      	add	r3, r2
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80108b8:	e004      	b.n	80108c4 <tcp_receive+0x364>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108cc:	4a98      	ldr	r2, [pc, #608]	@ (8010b30 <tcp_receive+0x5d0>)
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7ff fdca 	bl	8010468 <tcp_free_acked_segments>
 80108d4:	4602      	mov	r2, r0
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108e2:	4a94      	ldr	r2, [pc, #592]	@ (8010b34 <tcp_receive+0x5d4>)
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7ff fdbf 	bl	8010468 <tcp_free_acked_segments>
 80108ea:	4602      	mov	r2, r0
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d104      	bne.n	8010902 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108fe:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010900:	e002      	b.n	8010908 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2200      	movs	r2, #0
 8010906:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2200      	movs	r2, #0
 801090c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010912:	2b00      	cmp	r3, #0
 8010914:	d103      	bne.n	801091e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2200      	movs	r2, #0
 801091a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010924:	4b84      	ldr	r3, [pc, #528]	@ (8010b38 <tcp_receive+0x5d8>)
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	4413      	add	r3, r2
 801092a:	b29a      	uxth	r2, r3
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	8b5b      	ldrh	r3, [r3, #26]
 8010936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801093a:	2b00      	cmp	r3, #0
 801093c:	d035      	beq.n	80109aa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010942:	2b00      	cmp	r3, #0
 8010944:	d118      	bne.n	8010978 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00c      	beq.n	8010968 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	4618      	mov	r0, r3
 801095c:	f7fa feae 	bl	800b6bc <lwip_htonl>
 8010960:	4603      	mov	r3, r0
 8010962:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010964:	2b00      	cmp	r3, #0
 8010966:	dc20      	bgt.n	80109aa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	8b5b      	ldrh	r3, [r3, #26]
 801096c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010970:	b29a      	uxth	r2, r3
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010976:	e018      	b.n	80109aa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	4618      	mov	r0, r3
 8010986:	f7fa fe99 	bl	800b6bc <lwip_htonl>
 801098a:	4603      	mov	r3, r0
 801098c:	1ae3      	subs	r3, r4, r3
 801098e:	2b00      	cmp	r3, #0
 8010990:	dc0b      	bgt.n	80109aa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	8b5b      	ldrh	r3, [r3, #26]
 8010996:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801099a:	b29a      	uxth	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80109a0:	e003      	b.n	80109aa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f002 fbc8 	bl	8013138 <tcp_send_empty_ack>
 80109a8:	e000      	b.n	80109ac <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80109aa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d05b      	beq.n	8010a6c <tcp_receive+0x50c>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80109b8:	4b60      	ldr	r3, [pc, #384]	@ (8010b3c <tcp_receive+0x5dc>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	2b00      	cmp	r3, #0
 80109c0:	da54      	bge.n	8010a6c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80109c2:	4b5f      	ldr	r3, [pc, #380]	@ (8010b40 <tcp_receive+0x5e0>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	1ad3      	subs	r3, r2, r3
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80109d6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80109e0:	10db      	asrs	r3, r3, #3
 80109e2:	b21b      	sxth	r3, r3
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	1ad3      	subs	r3, r2, r3
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80109f4:	b29a      	uxth	r2, r3
 80109f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80109fa:	4413      	add	r3, r2
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	b21a      	sxth	r2, r3
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010a04:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	da05      	bge.n	8010a18 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010a0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010a10:	425b      	negs	r3, r3
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010a18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010a22:	109b      	asrs	r3, r3, #2
 8010a24:	b21b      	sxth	r3, r3
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	1ad3      	subs	r3, r2, r3
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010a3c:	4413      	add	r3, r2
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	b21a      	sxth	r2, r3
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010a4c:	10db      	asrs	r3, r3, #3
 8010a4e:	b21b      	sxth	r3, r3
 8010a50:	b29a      	uxth	r2, r3
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	4413      	add	r3, r2
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	b21a      	sxth	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010a6c:	4b35      	ldr	r3, [pc, #212]	@ (8010b44 <tcp_receive+0x5e4>)
 8010a6e:	881b      	ldrh	r3, [r3, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f000 84df 	beq.w	8011434 <tcp_receive+0xed4>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	7d1b      	ldrb	r3, [r3, #20]
 8010a7a:	2b06      	cmp	r3, #6
 8010a7c:	f200 84da 	bhi.w	8011434 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a84:	4b30      	ldr	r3, [pc, #192]	@ (8010b48 <tcp_receive+0x5e8>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	3b01      	subs	r3, #1
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	f2c0 808f 	blt.w	8010bb0 <tcp_receive+0x650>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a96:	4b2b      	ldr	r3, [pc, #172]	@ (8010b44 <tcp_receive+0x5e4>)
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8010b48 <tcp_receive+0x5e8>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	440b      	add	r3, r1
 8010aa2:	1ad3      	subs	r3, r2, r3
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	f300 8082 	bgt.w	8010bb0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010aac:	4b27      	ldr	r3, [pc, #156]	@ (8010b4c <tcp_receive+0x5ec>)
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010ab6:	4b24      	ldr	r3, [pc, #144]	@ (8010b48 <tcp_receive+0x5e8>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010abe:	4b23      	ldr	r3, [pc, #140]	@ (8010b4c <tcp_receive+0x5ec>)
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d106      	bne.n	8010ad4 <tcp_receive+0x574>
 8010ac6:	4b22      	ldr	r3, [pc, #136]	@ (8010b50 <tcp_receive+0x5f0>)
 8010ac8:	f240 5294 	movw	r2, #1428	@ 0x594
 8010acc:	4921      	ldr	r1, [pc, #132]	@ (8010b54 <tcp_receive+0x5f4>)
 8010ace:	4822      	ldr	r0, [pc, #136]	@ (8010b58 <tcp_receive+0x5f8>)
 8010ad0:	f7f0 fb1c 	bl	800110c <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d906      	bls.n	8010aec <tcp_receive+0x58c>
 8010ade:	4b1c      	ldr	r3, [pc, #112]	@ (8010b50 <tcp_receive+0x5f0>)
 8010ae0:	f240 5295 	movw	r2, #1429	@ 0x595
 8010ae4:	491d      	ldr	r1, [pc, #116]	@ (8010b5c <tcp_receive+0x5fc>)
 8010ae6:	481c      	ldr	r0, [pc, #112]	@ (8010b58 <tcp_receive+0x5f8>)
 8010ae8:	f7f0 fb10 	bl	800110c <printf>
      off = (u16_t)off32;
 8010aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010af2:	4b16      	ldr	r3, [pc, #88]	@ (8010b4c <tcp_receive+0x5ec>)
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	891b      	ldrh	r3, [r3, #8]
 8010af8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d906      	bls.n	8010b0e <tcp_receive+0x5ae>
 8010b00:	4b13      	ldr	r3, [pc, #76]	@ (8010b50 <tcp_receive+0x5f0>)
 8010b02:	f240 5297 	movw	r2, #1431	@ 0x597
 8010b06:	4916      	ldr	r1, [pc, #88]	@ (8010b60 <tcp_receive+0x600>)
 8010b08:	4813      	ldr	r0, [pc, #76]	@ (8010b58 <tcp_receive+0x5f8>)
 8010b0a:	f7f0 faff 	bl	800110c <printf>
      inseg.len -= off;
 8010b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8010b4c <tcp_receive+0x5ec>)
 8010b10:	891a      	ldrh	r2, [r3, #8]
 8010b12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010b4c <tcp_receive+0x5ec>)
 8010b1c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b4c <tcp_receive+0x5ec>)
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	891a      	ldrh	r2, [r3, #8]
 8010b24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010b2c:	e02a      	b.n	8010b84 <tcp_receive+0x624>
 8010b2e:	bf00      	nop
 8010b30:	08019954 	.word	0x08019954
 8010b34:	0801995c 	.word	0x0801995c
 8010b38:	2000c5e4 	.word	0x2000c5e4
 8010b3c:	2000c5e0 	.word	0x2000c5e0
 8010b40:	2000c5a4 	.word	0x2000c5a4
 8010b44:	2000c5e6 	.word	0x2000c5e6
 8010b48:	2000c5dc 	.word	0x2000c5dc
 8010b4c:	2000c5bc 	.word	0x2000c5bc
 8010b50:	080195ec 	.word	0x080195ec
 8010b54:	08019964 	.word	0x08019964
 8010b58:	08019638 	.word	0x08019638
 8010b5c:	08019974 	.word	0x08019974
 8010b60:	08019984 	.word	0x08019984
        off -= p->len;
 8010b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b66:	895b      	ldrh	r3, [r3, #10]
 8010b68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b6c:	1ad3      	subs	r3, r2, r3
 8010b6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b74:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010b76:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b86:	895b      	ldrh	r3, [r3, #10]
 8010b88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d8e9      	bhi.n	8010b64 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010b90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b94:	4619      	mov	r1, r3
 8010b96:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010b98:	f7fc f8e6 	bl	800cd68 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ba0:	4a90      	ldr	r2, [pc, #576]	@ (8010de4 <tcp_receive+0x884>)
 8010ba2:	6013      	str	r3, [r2, #0]
 8010ba4:	4b90      	ldr	r3, [pc, #576]	@ (8010de8 <tcp_receive+0x888>)
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	4a8e      	ldr	r2, [pc, #568]	@ (8010de4 <tcp_receive+0x884>)
 8010baa:	6812      	ldr	r2, [r2, #0]
 8010bac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010bae:	e00d      	b.n	8010bcc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8010de4 <tcp_receive+0x884>)
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bb8:	1ad3      	subs	r3, r2, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	da06      	bge.n	8010bcc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	8b5b      	ldrh	r3, [r3, #26]
 8010bc2:	f043 0302 	orr.w	r3, r3, #2
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010bcc:	4b85      	ldr	r3, [pc, #532]	@ (8010de4 <tcp_receive+0x884>)
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bd4:	1ad3      	subs	r3, r2, r3
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	f2c0 8427 	blt.w	801142a <tcp_receive+0xeca>
 8010bdc:	4b81      	ldr	r3, [pc, #516]	@ (8010de4 <tcp_receive+0x884>)
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010be4:	6879      	ldr	r1, [r7, #4]
 8010be6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010be8:	440b      	add	r3, r1
 8010bea:	1ad3      	subs	r3, r2, r3
 8010bec:	3301      	adds	r3, #1
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f300 841b 	bgt.w	801142a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010bf8:	4b7a      	ldr	r3, [pc, #488]	@ (8010de4 <tcp_receive+0x884>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	f040 8298 	bne.w	8011132 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010c02:	4b79      	ldr	r3, [pc, #484]	@ (8010de8 <tcp_receive+0x888>)
 8010c04:	891c      	ldrh	r4, [r3, #8]
 8010c06:	4b78      	ldr	r3, [pc, #480]	@ (8010de8 <tcp_receive+0x888>)
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	899b      	ldrh	r3, [r3, #12]
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fa fd3e 	bl	800b690 <lwip_htons>
 8010c14:	4603      	mov	r3, r0
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	f003 0303 	and.w	r3, r3, #3
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d001      	beq.n	8010c24 <tcp_receive+0x6c4>
 8010c20:	2301      	movs	r3, #1
 8010c22:	e000      	b.n	8010c26 <tcp_receive+0x6c6>
 8010c24:	2300      	movs	r3, #0
 8010c26:	4423      	add	r3, r4
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	4b70      	ldr	r3, [pc, #448]	@ (8010dec <tcp_receive+0x88c>)
 8010c2c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010c32:	4b6e      	ldr	r3, [pc, #440]	@ (8010dec <tcp_receive+0x88c>)
 8010c34:	881b      	ldrh	r3, [r3, #0]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d274      	bcs.n	8010d24 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8010de8 <tcp_receive+0x888>)
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	899b      	ldrh	r3, [r3, #12]
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fa fd24 	bl	800b690 <lwip_htons>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	f003 0301 	and.w	r3, r3, #1
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d01e      	beq.n	8010c92 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010c54:	4b64      	ldr	r3, [pc, #400]	@ (8010de8 <tcp_receive+0x888>)
 8010c56:	68db      	ldr	r3, [r3, #12]
 8010c58:	899b      	ldrh	r3, [r3, #12]
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	b21b      	sxth	r3, r3
 8010c5e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010c62:	b21c      	sxth	r4, r3
 8010c64:	4b60      	ldr	r3, [pc, #384]	@ (8010de8 <tcp_receive+0x888>)
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	899b      	ldrh	r3, [r3, #12]
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fa fd0f 	bl	800b690 <lwip_htons>
 8010c72:	4603      	mov	r3, r0
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7fa fd07 	bl	800b690 <lwip_htons>
 8010c82:	4603      	mov	r3, r0
 8010c84:	b21b      	sxth	r3, r3
 8010c86:	4323      	orrs	r3, r4
 8010c88:	b21a      	sxth	r2, r3
 8010c8a:	4b57      	ldr	r3, [pc, #348]	@ (8010de8 <tcp_receive+0x888>)
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	b292      	uxth	r2, r2
 8010c90:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010c96:	4b54      	ldr	r3, [pc, #336]	@ (8010de8 <tcp_receive+0x888>)
 8010c98:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010c9a:	4b53      	ldr	r3, [pc, #332]	@ (8010de8 <tcp_receive+0x888>)
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	899b      	ldrh	r3, [r3, #12]
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7fa fcf4 	bl	800b690 <lwip_htons>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	f003 0302 	and.w	r3, r3, #2
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d005      	beq.n	8010cc0 <tcp_receive+0x760>
            inseg.len -= 1;
 8010cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8010de8 <tcp_receive+0x888>)
 8010cb6:	891b      	ldrh	r3, [r3, #8]
 8010cb8:	3b01      	subs	r3, #1
 8010cba:	b29a      	uxth	r2, r3
 8010cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8010de8 <tcp_receive+0x888>)
 8010cbe:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010cc0:	4b49      	ldr	r3, [pc, #292]	@ (8010de8 <tcp_receive+0x888>)
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	4a48      	ldr	r2, [pc, #288]	@ (8010de8 <tcp_receive+0x888>)
 8010cc6:	8912      	ldrh	r2, [r2, #8]
 8010cc8:	4611      	mov	r1, r2
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fb ff4c 	bl	800cb68 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010cd0:	4b45      	ldr	r3, [pc, #276]	@ (8010de8 <tcp_receive+0x888>)
 8010cd2:	891c      	ldrh	r4, [r3, #8]
 8010cd4:	4b44      	ldr	r3, [pc, #272]	@ (8010de8 <tcp_receive+0x888>)
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	899b      	ldrh	r3, [r3, #12]
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7fa fcd7 	bl	800b690 <lwip_htons>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	f003 0303 	and.w	r3, r3, #3
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d001      	beq.n	8010cf2 <tcp_receive+0x792>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	e000      	b.n	8010cf4 <tcp_receive+0x794>
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	4423      	add	r3, r4
 8010cf6:	b29a      	uxth	r2, r3
 8010cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8010dec <tcp_receive+0x88c>)
 8010cfa:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8010dec <tcp_receive+0x88c>)
 8010cfe:	881b      	ldrh	r3, [r3, #0]
 8010d00:	461a      	mov	r2, r3
 8010d02:	4b38      	ldr	r3, [pc, #224]	@ (8010de4 <tcp_receive+0x884>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	441a      	add	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d0c:	6879      	ldr	r1, [r7, #4]
 8010d0e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010d10:	440b      	add	r3, r1
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d006      	beq.n	8010d24 <tcp_receive+0x7c4>
 8010d16:	4b36      	ldr	r3, [pc, #216]	@ (8010df0 <tcp_receive+0x890>)
 8010d18:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010d1c:	4935      	ldr	r1, [pc, #212]	@ (8010df4 <tcp_receive+0x894>)
 8010d1e:	4836      	ldr	r0, [pc, #216]	@ (8010df8 <tcp_receive+0x898>)
 8010d20:	f7f0 f9f4 	bl	800110c <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 80e6 	beq.w	8010efa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8010de8 <tcp_receive+0x888>)
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	899b      	ldrh	r3, [r3, #12]
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7fa fcaa 	bl	800b690 <lwip_htons>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	f003 0301 	and.w	r3, r3, #1
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d010      	beq.n	8010d6a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010d48:	e00a      	b.n	8010d60 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d4e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f7fd fcc5 	bl	800e6ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d1f0      	bne.n	8010d4a <tcp_receive+0x7ea>
 8010d68:	e0c7      	b.n	8010efa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010d70:	e051      	b.n	8010e16 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	899b      	ldrh	r3, [r3, #12]
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fa fc88 	bl	800b690 <lwip_htons>
 8010d80:	4603      	mov	r3, r0
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	f003 0301 	and.w	r3, r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d03c      	beq.n	8010e06 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010d8c:	4b16      	ldr	r3, [pc, #88]	@ (8010de8 <tcp_receive+0x888>)
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	899b      	ldrh	r3, [r3, #12]
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7fa fc7b 	bl	800b690 <lwip_htons>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	b2db      	uxtb	r3, r3
 8010d9e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d12f      	bne.n	8010e06 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010da6:	4b10      	ldr	r3, [pc, #64]	@ (8010de8 <tcp_receive+0x888>)
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	899b      	ldrh	r3, [r3, #12]
 8010dac:	b29c      	uxth	r4, r3
 8010dae:	2001      	movs	r0, #1
 8010db0:	f7fa fc6e 	bl	800b690 <lwip_htons>
 8010db4:	4603      	mov	r3, r0
 8010db6:	461a      	mov	r2, r3
 8010db8:	4b0b      	ldr	r3, [pc, #44]	@ (8010de8 <tcp_receive+0x888>)
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	4322      	orrs	r2, r4
 8010dbe:	b292      	uxth	r2, r2
 8010dc0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010dc2:	4b09      	ldr	r3, [pc, #36]	@ (8010de8 <tcp_receive+0x888>)
 8010dc4:	891c      	ldrh	r4, [r3, #8]
 8010dc6:	4b08      	ldr	r3, [pc, #32]	@ (8010de8 <tcp_receive+0x888>)
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	899b      	ldrh	r3, [r3, #12]
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fa fc5e 	bl	800b690 <lwip_htons>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	f003 0303 	and.w	r3, r3, #3
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00d      	beq.n	8010dfc <tcp_receive+0x89c>
 8010de0:	2301      	movs	r3, #1
 8010de2:	e00c      	b.n	8010dfe <tcp_receive+0x89e>
 8010de4:	2000c5dc 	.word	0x2000c5dc
 8010de8:	2000c5bc 	.word	0x2000c5bc
 8010dec:	2000c5e6 	.word	0x2000c5e6
 8010df0:	080195ec 	.word	0x080195ec
 8010df4:	08019994 	.word	0x08019994
 8010df8:	08019638 	.word	0x08019638
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	4423      	add	r3, r4
 8010e00:	b29a      	uxth	r2, r3
 8010e02:	4b98      	ldr	r3, [pc, #608]	@ (8011064 <tcp_receive+0xb04>)
 8010e04:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e08:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010e10:	6938      	ldr	r0, [r7, #16]
 8010e12:	f7fd fc6a 	bl	800e6ea <tcp_seg_free>
            while (next &&
 8010e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00e      	beq.n	8010e3a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010e1c:	4b91      	ldr	r3, [pc, #580]	@ (8011064 <tcp_receive+0xb04>)
 8010e1e:	881b      	ldrh	r3, [r3, #0]
 8010e20:	461a      	mov	r2, r3
 8010e22:	4b91      	ldr	r3, [pc, #580]	@ (8011068 <tcp_receive+0xb08>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	441a      	add	r2, r3
 8010e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e30:	8909      	ldrh	r1, [r1, #8]
 8010e32:	440b      	add	r3, r1
 8010e34:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	da9b      	bge.n	8010d72 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d059      	beq.n	8010ef4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010e40:	4b88      	ldr	r3, [pc, #544]	@ (8011064 <tcp_receive+0xb04>)
 8010e42:	881b      	ldrh	r3, [r3, #0]
 8010e44:	461a      	mov	r2, r3
 8010e46:	4b88      	ldr	r3, [pc, #544]	@ (8011068 <tcp_receive+0xb08>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	441a      	add	r2, r3
 8010e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	dd4d      	ble.n	8010ef4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e5a:	68db      	ldr	r3, [r3, #12]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	4b81      	ldr	r3, [pc, #516]	@ (8011068 <tcp_receive+0xb08>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	b29a      	uxth	r2, r3
 8010e6a:	4b80      	ldr	r3, [pc, #512]	@ (801106c <tcp_receive+0xb0c>)
 8010e6c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010e6e:	4b7f      	ldr	r3, [pc, #508]	@ (801106c <tcp_receive+0xb0c>)
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	899b      	ldrh	r3, [r3, #12]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7fa fc0a 	bl	800b690 <lwip_htons>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	f003 0302 	and.w	r3, r3, #2
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d005      	beq.n	8010e94 <tcp_receive+0x934>
                inseg.len -= 1;
 8010e88:	4b78      	ldr	r3, [pc, #480]	@ (801106c <tcp_receive+0xb0c>)
 8010e8a:	891b      	ldrh	r3, [r3, #8]
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	4b76      	ldr	r3, [pc, #472]	@ (801106c <tcp_receive+0xb0c>)
 8010e92:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010e94:	4b75      	ldr	r3, [pc, #468]	@ (801106c <tcp_receive+0xb0c>)
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	4a74      	ldr	r2, [pc, #464]	@ (801106c <tcp_receive+0xb0c>)
 8010e9a:	8912      	ldrh	r2, [r2, #8]
 8010e9c:	4611      	mov	r1, r2
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fb fe62 	bl	800cb68 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010ea4:	4b71      	ldr	r3, [pc, #452]	@ (801106c <tcp_receive+0xb0c>)
 8010ea6:	891c      	ldrh	r4, [r3, #8]
 8010ea8:	4b70      	ldr	r3, [pc, #448]	@ (801106c <tcp_receive+0xb0c>)
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	899b      	ldrh	r3, [r3, #12]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fa fbed 	bl	800b690 <lwip_htons>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	f003 0303 	and.w	r3, r3, #3
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d001      	beq.n	8010ec6 <tcp_receive+0x966>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e000      	b.n	8010ec8 <tcp_receive+0x968>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	4423      	add	r3, r4
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	4b65      	ldr	r3, [pc, #404]	@ (8011064 <tcp_receive+0xb04>)
 8010ece:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010ed0:	4b64      	ldr	r3, [pc, #400]	@ (8011064 <tcp_receive+0xb04>)
 8010ed2:	881b      	ldrh	r3, [r3, #0]
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	4b64      	ldr	r3, [pc, #400]	@ (8011068 <tcp_receive+0xb08>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	441a      	add	r2, r3
 8010edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d006      	beq.n	8010ef4 <tcp_receive+0x994>
 8010ee6:	4b62      	ldr	r3, [pc, #392]	@ (8011070 <tcp_receive+0xb10>)
 8010ee8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010eec:	4961      	ldr	r1, [pc, #388]	@ (8011074 <tcp_receive+0xb14>)
 8010eee:	4862      	ldr	r0, [pc, #392]	@ (8011078 <tcp_receive+0xb18>)
 8010ef0:	f7f0 f90c 	bl	800110c <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010ef8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010efa:	4b5a      	ldr	r3, [pc, #360]	@ (8011064 <tcp_receive+0xb04>)
 8010efc:	881b      	ldrh	r3, [r3, #0]
 8010efe:	461a      	mov	r2, r3
 8010f00:	4b59      	ldr	r3, [pc, #356]	@ (8011068 <tcp_receive+0xb08>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	441a      	add	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010f0e:	4b55      	ldr	r3, [pc, #340]	@ (8011064 <tcp_receive+0xb04>)
 8010f10:	881b      	ldrh	r3, [r3, #0]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d206      	bcs.n	8010f24 <tcp_receive+0x9c4>
 8010f16:	4b56      	ldr	r3, [pc, #344]	@ (8011070 <tcp_receive+0xb10>)
 8010f18:	f240 6207 	movw	r2, #1543	@ 0x607
 8010f1c:	4957      	ldr	r1, [pc, #348]	@ (801107c <tcp_receive+0xb1c>)
 8010f1e:	4856      	ldr	r0, [pc, #344]	@ (8011078 <tcp_receive+0xb18>)
 8010f20:	f7f0 f8f4 	bl	800110c <printf>
        pcb->rcv_wnd -= tcplen;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010f28:	4b4e      	ldr	r3, [pc, #312]	@ (8011064 <tcp_receive+0xb04>)
 8010f2a:	881b      	ldrh	r3, [r3, #0]
 8010f2c:	1ad3      	subs	r3, r2, r3
 8010f2e:	b29a      	uxth	r2, r3
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7fc fd99 	bl	800da6c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010f3a:	4b4c      	ldr	r3, [pc, #304]	@ (801106c <tcp_receive+0xb0c>)
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	891b      	ldrh	r3, [r3, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d006      	beq.n	8010f52 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010f44:	4b49      	ldr	r3, [pc, #292]	@ (801106c <tcp_receive+0xb0c>)
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	4a4d      	ldr	r2, [pc, #308]	@ (8011080 <tcp_receive+0xb20>)
 8010f4a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010f4c:	4b47      	ldr	r3, [pc, #284]	@ (801106c <tcp_receive+0xb0c>)
 8010f4e:	2200      	movs	r2, #0
 8010f50:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f52:	4b46      	ldr	r3, [pc, #280]	@ (801106c <tcp_receive+0xb0c>)
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	899b      	ldrh	r3, [r3, #12]
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7fa fb98 	bl	800b690 <lwip_htons>
 8010f60:	4603      	mov	r3, r0
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	f003 0301 	and.w	r3, r3, #1
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	f000 80b8 	beq.w	80110de <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010f6e:	4b45      	ldr	r3, [pc, #276]	@ (8011084 <tcp_receive+0xb24>)
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	f043 0320 	orr.w	r3, r3, #32
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	4b42      	ldr	r3, [pc, #264]	@ (8011084 <tcp_receive+0xb24>)
 8010f7a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010f7c:	e0af      	b.n	80110de <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f82:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f88:	68db      	ldr	r3, [r3, #12]
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	4a36      	ldr	r2, [pc, #216]	@ (8011068 <tcp_receive+0xb08>)
 8010f8e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	891b      	ldrh	r3, [r3, #8]
 8010f94:	461c      	mov	r4, r3
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	899b      	ldrh	r3, [r3, #12]
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7fa fb76 	bl	800b690 <lwip_htons>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	f003 0303 	and.w	r3, r3, #3
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d001      	beq.n	8010fb4 <tcp_receive+0xa54>
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	e000      	b.n	8010fb6 <tcp_receive+0xa56>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	191a      	adds	r2, r3, r4
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fbc:	441a      	add	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010fc6:	461c      	mov	r4, r3
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	891b      	ldrh	r3, [r3, #8]
 8010fcc:	461d      	mov	r5, r3
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	899b      	ldrh	r3, [r3, #12]
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7fa fb5a 	bl	800b690 <lwip_htons>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	f003 0303 	and.w	r3, r3, #3
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d001      	beq.n	8010fec <tcp_receive+0xa8c>
 8010fe8:	2301      	movs	r3, #1
 8010fea:	e000      	b.n	8010fee <tcp_receive+0xa8e>
 8010fec:	2300      	movs	r3, #0
 8010fee:	442b      	add	r3, r5
 8010ff0:	429c      	cmp	r4, r3
 8010ff2:	d206      	bcs.n	8011002 <tcp_receive+0xaa2>
 8010ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8011070 <tcp_receive+0xb10>)
 8010ff6:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010ffa:	4923      	ldr	r1, [pc, #140]	@ (8011088 <tcp_receive+0xb28>)
 8010ffc:	481e      	ldr	r0, [pc, #120]	@ (8011078 <tcp_receive+0xb18>)
 8010ffe:	f7f0 f885 	bl	800110c <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	891b      	ldrh	r3, [r3, #8]
 8011006:	461c      	mov	r4, r3
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	899b      	ldrh	r3, [r3, #12]
 801100e:	b29b      	uxth	r3, r3
 8011010:	4618      	mov	r0, r3
 8011012:	f7fa fb3d 	bl	800b690 <lwip_htons>
 8011016:	4603      	mov	r3, r0
 8011018:	b2db      	uxtb	r3, r3
 801101a:	f003 0303 	and.w	r3, r3, #3
 801101e:	2b00      	cmp	r3, #0
 8011020:	d001      	beq.n	8011026 <tcp_receive+0xac6>
 8011022:	2301      	movs	r3, #1
 8011024:	e000      	b.n	8011028 <tcp_receive+0xac8>
 8011026:	2300      	movs	r3, #0
 8011028:	1919      	adds	r1, r3, r4
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801102e:	b28b      	uxth	r3, r1
 8011030:	1ad3      	subs	r3, r2, r3
 8011032:	b29a      	uxth	r2, r3
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f7fc fd17 	bl	800da6c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	891b      	ldrh	r3, [r3, #8]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d028      	beq.n	801109a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011048:	4b0d      	ldr	r3, [pc, #52]	@ (8011080 <tcp_receive+0xb20>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d01d      	beq.n	801108c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011050:	4b0b      	ldr	r3, [pc, #44]	@ (8011080 <tcp_receive+0xb20>)
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	4619      	mov	r1, r3
 801105a:	4610      	mov	r0, r2
 801105c:	f7fb ffd8 	bl	800d010 <pbuf_cat>
 8011060:	e018      	b.n	8011094 <tcp_receive+0xb34>
 8011062:	bf00      	nop
 8011064:	2000c5e6 	.word	0x2000c5e6
 8011068:	2000c5dc 	.word	0x2000c5dc
 801106c:	2000c5bc 	.word	0x2000c5bc
 8011070:	080195ec 	.word	0x080195ec
 8011074:	080199cc 	.word	0x080199cc
 8011078:	08019638 	.word	0x08019638
 801107c:	08019a08 	.word	0x08019a08
 8011080:	2000c5ec 	.word	0x2000c5ec
 8011084:	2000c5e9 	.word	0x2000c5e9
 8011088:	08019a28 	.word	0x08019a28
            } else {
              recv_data = cseg->p;
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	4a70      	ldr	r2, [pc, #448]	@ (8011254 <tcp_receive+0xcf4>)
 8011092:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	2200      	movs	r2, #0
 8011098:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	899b      	ldrh	r3, [r3, #12]
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fa faf4 	bl	800b690 <lwip_htons>
 80110a8:	4603      	mov	r3, r0
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	f003 0301 	and.w	r3, r3, #1
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d00d      	beq.n	80110d0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80110b4:	4b68      	ldr	r3, [pc, #416]	@ (8011258 <tcp_receive+0xcf8>)
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	f043 0320 	orr.w	r3, r3, #32
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	4b66      	ldr	r3, [pc, #408]	@ (8011258 <tcp_receive+0xcf8>)
 80110c0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	7d1b      	ldrb	r3, [r3, #20]
 80110c6:	2b04      	cmp	r3, #4
 80110c8:	d102      	bne.n	80110d0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2207      	movs	r2, #7
 80110ce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80110d8:	68b8      	ldr	r0, [r7, #8]
 80110da:	f7fd fb06 	bl	800e6ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d008      	beq.n	80110f8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	685a      	ldr	r2, [r3, #4]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80110f2:	429a      	cmp	r2, r3
 80110f4:	f43f af43 	beq.w	8010f7e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	8b5b      	ldrh	r3, [r3, #26]
 80110fc:	f003 0301 	and.w	r3, r3, #1
 8011100:	2b00      	cmp	r3, #0
 8011102:	d00e      	beq.n	8011122 <tcp_receive+0xbc2>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	8b5b      	ldrh	r3, [r3, #26]
 8011108:	f023 0301 	bic.w	r3, r3, #1
 801110c:	b29a      	uxth	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	835a      	strh	r2, [r3, #26]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8b5b      	ldrh	r3, [r3, #26]
 8011116:	f043 0302 	orr.w	r3, r3, #2
 801111a:	b29a      	uxth	r2, r3
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011120:	e187      	b.n	8011432 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	8b5b      	ldrh	r3, [r3, #26]
 8011126:	f043 0301 	orr.w	r3, r3, #1
 801112a:	b29a      	uxth	r2, r3
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011130:	e17f      	b.n	8011432 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011136:	2b00      	cmp	r3, #0
 8011138:	d106      	bne.n	8011148 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801113a:	4848      	ldr	r0, [pc, #288]	@ (801125c <tcp_receive+0xcfc>)
 801113c:	f7fd faee 	bl	800e71c <tcp_seg_copy>
 8011140:	4602      	mov	r2, r0
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	675a      	str	r2, [r3, #116]	@ 0x74
 8011146:	e16c      	b.n	8011422 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011148:	2300      	movs	r3, #0
 801114a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011150:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011152:	e156      	b.n	8011402 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	685a      	ldr	r2, [r3, #4]
 801115a:	4b41      	ldr	r3, [pc, #260]	@ (8011260 <tcp_receive+0xd00>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	429a      	cmp	r2, r3
 8011160:	d11d      	bne.n	801119e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011162:	4b3e      	ldr	r3, [pc, #248]	@ (801125c <tcp_receive+0xcfc>)
 8011164:	891a      	ldrh	r2, [r3, #8]
 8011166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011168:	891b      	ldrh	r3, [r3, #8]
 801116a:	429a      	cmp	r2, r3
 801116c:	f240 814e 	bls.w	801140c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011170:	483a      	ldr	r0, [pc, #232]	@ (801125c <tcp_receive+0xcfc>)
 8011172:	f7fd fad3 	bl	800e71c <tcp_seg_copy>
 8011176:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	2b00      	cmp	r3, #0
 801117c:	f000 8148 	beq.w	8011410 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011182:	2b00      	cmp	r3, #0
 8011184:	d003      	beq.n	801118e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011188:	697a      	ldr	r2, [r7, #20]
 801118a:	601a      	str	r2, [r3, #0]
 801118c:	e002      	b.n	8011194 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	697a      	ldr	r2, [r7, #20]
 8011192:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011194:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011196:	6978      	ldr	r0, [r7, #20]
 8011198:	f7ff f8de 	bl	8010358 <tcp_oos_insert_segment>
                }
                break;
 801119c:	e138      	b.n	8011410 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801119e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d117      	bne.n	80111d4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80111a4:	4b2e      	ldr	r3, [pc, #184]	@ (8011260 <tcp_receive+0xd00>)
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	da57      	bge.n	8011264 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80111b4:	4829      	ldr	r0, [pc, #164]	@ (801125c <tcp_receive+0xcfc>)
 80111b6:	f7fd fab1 	bl	800e71c <tcp_seg_copy>
 80111ba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f000 8128 	beq.w	8011414 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	69ba      	ldr	r2, [r7, #24]
 80111c8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80111ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80111cc:	69b8      	ldr	r0, [r7, #24]
 80111ce:	f7ff f8c3 	bl	8010358 <tcp_oos_insert_segment>
                  }
                  break;
 80111d2:	e11f      	b.n	8011414 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80111d4:	4b22      	ldr	r3, [pc, #136]	@ (8011260 <tcp_receive+0xd00>)
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	1ad3      	subs	r3, r2, r3
 80111e0:	3b01      	subs	r3, #1
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	db3e      	blt.n	8011264 <tcp_receive+0xd04>
 80111e6:	4b1e      	ldr	r3, [pc, #120]	@ (8011260 <tcp_receive+0xd00>)
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	1ad3      	subs	r3, r2, r3
 80111f2:	3301      	adds	r3, #1
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	dc35      	bgt.n	8011264 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80111f8:	4818      	ldr	r0, [pc, #96]	@ (801125c <tcp_receive+0xcfc>)
 80111fa:	f7fd fa8f 	bl	800e71c <tcp_seg_copy>
 80111fe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011200:	69fb      	ldr	r3, [r7, #28]
 8011202:	2b00      	cmp	r3, #0
 8011204:	f000 8108 	beq.w	8011418 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011210:	8912      	ldrh	r2, [r2, #8]
 8011212:	441a      	add	r2, r3
 8011214:	4b12      	ldr	r3, [pc, #72]	@ (8011260 <tcp_receive+0xd00>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	1ad3      	subs	r3, r2, r3
 801121a:	2b00      	cmp	r3, #0
 801121c:	dd12      	ble.n	8011244 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801121e:	4b10      	ldr	r3, [pc, #64]	@ (8011260 <tcp_receive+0xd00>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	b29a      	uxth	r2, r3
 8011224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	b29b      	uxth	r3, r3
 801122c:	1ad3      	subs	r3, r2, r3
 801122e:	b29a      	uxth	r2, r3
 8011230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011232:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011236:	685a      	ldr	r2, [r3, #4]
 8011238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801123a:	891b      	ldrh	r3, [r3, #8]
 801123c:	4619      	mov	r1, r3
 801123e:	4610      	mov	r0, r2
 8011240:	f7fb fc92 	bl	800cb68 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011246:	69fa      	ldr	r2, [r7, #28]
 8011248:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801124a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801124c:	69f8      	ldr	r0, [r7, #28]
 801124e:	f7ff f883 	bl	8010358 <tcp_oos_insert_segment>
                  }
                  break;
 8011252:	e0e1      	b.n	8011418 <tcp_receive+0xeb8>
 8011254:	2000c5ec 	.word	0x2000c5ec
 8011258:	2000c5e9 	.word	0x2000c5e9
 801125c:	2000c5bc 	.word	0x2000c5bc
 8011260:	2000c5dc 	.word	0x2000c5dc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011266:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	f040 80c5 	bne.w	80113fc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011272:	4b7f      	ldr	r3, [pc, #508]	@ (8011470 <tcp_receive+0xf10>)
 8011274:	681a      	ldr	r2, [r3, #0]
 8011276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011278:	68db      	ldr	r3, [r3, #12]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801127e:	2b00      	cmp	r3, #0
 8011280:	f340 80bc 	ble.w	80113fc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	899b      	ldrh	r3, [r3, #12]
 801128a:	b29b      	uxth	r3, r3
 801128c:	4618      	mov	r0, r3
 801128e:	f7fa f9ff 	bl	800b690 <lwip_htons>
 8011292:	4603      	mov	r3, r0
 8011294:	b2db      	uxtb	r3, r3
 8011296:	f003 0301 	and.w	r3, r3, #1
 801129a:	2b00      	cmp	r3, #0
 801129c:	f040 80be 	bne.w	801141c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80112a0:	4874      	ldr	r0, [pc, #464]	@ (8011474 <tcp_receive+0xf14>)
 80112a2:	f7fd fa3b 	bl	800e71c <tcp_seg_copy>
 80112a6:	4602      	mov	r2, r0
 80112a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112aa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80112ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f000 80b5 	beq.w	8011420 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80112b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112be:	8912      	ldrh	r2, [r2, #8]
 80112c0:	441a      	add	r2, r3
 80112c2:	4b6b      	ldr	r3, [pc, #428]	@ (8011470 <tcp_receive+0xf10>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	1ad3      	subs	r3, r2, r3
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	dd12      	ble.n	80112f2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80112cc:	4b68      	ldr	r3, [pc, #416]	@ (8011470 <tcp_receive+0xf10>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	685b      	ldr	r3, [r3, #4]
 80112d8:	b29b      	uxth	r3, r3
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	b29a      	uxth	r2, r3
 80112de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80112e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e4:	685a      	ldr	r2, [r3, #4]
 80112e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e8:	891b      	ldrh	r3, [r3, #8]
 80112ea:	4619      	mov	r1, r3
 80112ec:	4610      	mov	r0, r2
 80112ee:	f7fb fc3b 	bl	800cb68 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80112f2:	4b61      	ldr	r3, [pc, #388]	@ (8011478 <tcp_receive+0xf18>)
 80112f4:	881b      	ldrh	r3, [r3, #0]
 80112f6:	461a      	mov	r2, r3
 80112f8:	4b5d      	ldr	r3, [pc, #372]	@ (8011470 <tcp_receive+0xf10>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	441a      	add	r2, r3
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011302:	6879      	ldr	r1, [r7, #4]
 8011304:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011306:	440b      	add	r3, r1
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	2b00      	cmp	r3, #0
 801130c:	f340 8088 	ble.w	8011420 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	899b      	ldrh	r3, [r3, #12]
 8011318:	b29b      	uxth	r3, r3
 801131a:	4618      	mov	r0, r3
 801131c:	f7fa f9b8 	bl	800b690 <lwip_htons>
 8011320:	4603      	mov	r3, r0
 8011322:	b2db      	uxtb	r3, r3
 8011324:	f003 0301 	and.w	r3, r3, #1
 8011328:	2b00      	cmp	r3, #0
 801132a:	d021      	beq.n	8011370 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801132c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	899b      	ldrh	r3, [r3, #12]
 8011334:	b29b      	uxth	r3, r3
 8011336:	b21b      	sxth	r3, r3
 8011338:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801133c:	b21c      	sxth	r4, r3
 801133e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	68db      	ldr	r3, [r3, #12]
 8011344:	899b      	ldrh	r3, [r3, #12]
 8011346:	b29b      	uxth	r3, r3
 8011348:	4618      	mov	r0, r3
 801134a:	f7fa f9a1 	bl	800b690 <lwip_htons>
 801134e:	4603      	mov	r3, r0
 8011350:	b2db      	uxtb	r3, r3
 8011352:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011356:	b29b      	uxth	r3, r3
 8011358:	4618      	mov	r0, r3
 801135a:	f7fa f999 	bl	800b690 <lwip_htons>
 801135e:	4603      	mov	r3, r0
 8011360:	b21b      	sxth	r3, r3
 8011362:	4323      	orrs	r3, r4
 8011364:	b21a      	sxth	r2, r3
 8011366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	b292      	uxth	r2, r2
 801136e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011374:	b29a      	uxth	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801137a:	4413      	add	r3, r2
 801137c:	b299      	uxth	r1, r3
 801137e:	4b3c      	ldr	r3, [pc, #240]	@ (8011470 <tcp_receive+0xf10>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	b29a      	uxth	r2, r3
 8011384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	1a8a      	subs	r2, r1, r2
 801138a:	b292      	uxth	r2, r2
 801138c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801138e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	685a      	ldr	r2, [r3, #4]
 8011394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	891b      	ldrh	r3, [r3, #8]
 801139a:	4619      	mov	r1, r3
 801139c:	4610      	mov	r0, r2
 801139e:	f7fb fbe3 	bl	800cb68 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80113a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	891c      	ldrh	r4, [r3, #8]
 80113a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	899b      	ldrh	r3, [r3, #12]
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fa f96c 	bl	800b690 <lwip_htons>
 80113b8:	4603      	mov	r3, r0
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	f003 0303 	and.w	r3, r3, #3
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d001      	beq.n	80113c8 <tcp_receive+0xe68>
 80113c4:	2301      	movs	r3, #1
 80113c6:	e000      	b.n	80113ca <tcp_receive+0xe6a>
 80113c8:	2300      	movs	r3, #0
 80113ca:	4423      	add	r3, r4
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	4b2a      	ldr	r3, [pc, #168]	@ (8011478 <tcp_receive+0xf18>)
 80113d0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80113d2:	4b29      	ldr	r3, [pc, #164]	@ (8011478 <tcp_receive+0xf18>)
 80113d4:	881b      	ldrh	r3, [r3, #0]
 80113d6:	461a      	mov	r2, r3
 80113d8:	4b25      	ldr	r3, [pc, #148]	@ (8011470 <tcp_receive+0xf10>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	441a      	add	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113e2:	6879      	ldr	r1, [r7, #4]
 80113e4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80113e6:	440b      	add	r3, r1
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d019      	beq.n	8011420 <tcp_receive+0xec0>
 80113ec:	4b23      	ldr	r3, [pc, #140]	@ (801147c <tcp_receive+0xf1c>)
 80113ee:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80113f2:	4923      	ldr	r1, [pc, #140]	@ (8011480 <tcp_receive+0xf20>)
 80113f4:	4823      	ldr	r0, [pc, #140]	@ (8011484 <tcp_receive+0xf24>)
 80113f6:	f7ef fe89 	bl	800110c <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80113fa:	e011      	b.n	8011420 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80113fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011404:	2b00      	cmp	r3, #0
 8011406:	f47f aea5 	bne.w	8011154 <tcp_receive+0xbf4>
 801140a:	e00a      	b.n	8011422 <tcp_receive+0xec2>
                break;
 801140c:	bf00      	nop
 801140e:	e008      	b.n	8011422 <tcp_receive+0xec2>
                break;
 8011410:	bf00      	nop
 8011412:	e006      	b.n	8011422 <tcp_receive+0xec2>
                  break;
 8011414:	bf00      	nop
 8011416:	e004      	b.n	8011422 <tcp_receive+0xec2>
                  break;
 8011418:	bf00      	nop
 801141a:	e002      	b.n	8011422 <tcp_receive+0xec2>
                  break;
 801141c:	bf00      	nop
 801141e:	e000      	b.n	8011422 <tcp_receive+0xec2>
                break;
 8011420:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f001 fe88 	bl	8013138 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011428:	e003      	b.n	8011432 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f001 fe84 	bl	8013138 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011430:	e01a      	b.n	8011468 <tcp_receive+0xf08>
 8011432:	e019      	b.n	8011468 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011434:	4b0e      	ldr	r3, [pc, #56]	@ (8011470 <tcp_receive+0xf10>)
 8011436:	681a      	ldr	r2, [r3, #0]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	2b00      	cmp	r3, #0
 8011440:	db0a      	blt.n	8011458 <tcp_receive+0xef8>
 8011442:	4b0b      	ldr	r3, [pc, #44]	@ (8011470 <tcp_receive+0xf10>)
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801144a:	6879      	ldr	r1, [r7, #4]
 801144c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801144e:	440b      	add	r3, r1
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	3301      	adds	r3, #1
 8011454:	2b00      	cmp	r3, #0
 8011456:	dd07      	ble.n	8011468 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	8b5b      	ldrh	r3, [r3, #26]
 801145c:	f043 0302 	orr.w	r3, r3, #2
 8011460:	b29a      	uxth	r2, r3
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011466:	e7ff      	b.n	8011468 <tcp_receive+0xf08>
 8011468:	bf00      	nop
 801146a:	3750      	adds	r7, #80	@ 0x50
 801146c:	46bd      	mov	sp, r7
 801146e:	bdb0      	pop	{r4, r5, r7, pc}
 8011470:	2000c5dc 	.word	0x2000c5dc
 8011474:	2000c5bc 	.word	0x2000c5bc
 8011478:	2000c5e6 	.word	0x2000c5e6
 801147c:	080195ec 	.word	0x080195ec
 8011480:	08019994 	.word	0x08019994
 8011484:	08019638 	.word	0x08019638

08011488 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801148e:	4b15      	ldr	r3, [pc, #84]	@ (80114e4 <tcp_get_next_optbyte+0x5c>)
 8011490:	881b      	ldrh	r3, [r3, #0]
 8011492:	1c5a      	adds	r2, r3, #1
 8011494:	b291      	uxth	r1, r2
 8011496:	4a13      	ldr	r2, [pc, #76]	@ (80114e4 <tcp_get_next_optbyte+0x5c>)
 8011498:	8011      	strh	r1, [r2, #0]
 801149a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801149c:	4b12      	ldr	r3, [pc, #72]	@ (80114e8 <tcp_get_next_optbyte+0x60>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d004      	beq.n	80114ae <tcp_get_next_optbyte+0x26>
 80114a4:	4b11      	ldr	r3, [pc, #68]	@ (80114ec <tcp_get_next_optbyte+0x64>)
 80114a6:	881b      	ldrh	r3, [r3, #0]
 80114a8:	88fa      	ldrh	r2, [r7, #6]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d208      	bcs.n	80114c0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80114ae:	4b10      	ldr	r3, [pc, #64]	@ (80114f0 <tcp_get_next_optbyte+0x68>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	3314      	adds	r3, #20
 80114b4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80114b6:	88fb      	ldrh	r3, [r7, #6]
 80114b8:	683a      	ldr	r2, [r7, #0]
 80114ba:	4413      	add	r3, r2
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	e00b      	b.n	80114d8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80114c0:	88fb      	ldrh	r3, [r7, #6]
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	4b09      	ldr	r3, [pc, #36]	@ (80114ec <tcp_get_next_optbyte+0x64>)
 80114c6:	881b      	ldrh	r3, [r3, #0]
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	1ad3      	subs	r3, r2, r3
 80114cc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80114ce:	4b06      	ldr	r3, [pc, #24]	@ (80114e8 <tcp_get_next_optbyte+0x60>)
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	797b      	ldrb	r3, [r7, #5]
 80114d4:	4413      	add	r3, r2
 80114d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80114d8:	4618      	mov	r0, r3
 80114da:	370c      	adds	r7, #12
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr
 80114e4:	2000c5d8 	.word	0x2000c5d8
 80114e8:	2000c5d4 	.word	0x2000c5d4
 80114ec:	2000c5d2 	.word	0x2000c5d2
 80114f0:	2000c5cc 	.word	0x2000c5cc

080114f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b084      	sub	sp, #16
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d106      	bne.n	8011510 <tcp_parseopt+0x1c>
 8011502:	4b32      	ldr	r3, [pc, #200]	@ (80115cc <tcp_parseopt+0xd8>)
 8011504:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011508:	4931      	ldr	r1, [pc, #196]	@ (80115d0 <tcp_parseopt+0xdc>)
 801150a:	4832      	ldr	r0, [pc, #200]	@ (80115d4 <tcp_parseopt+0xe0>)
 801150c:	f7ef fdfe 	bl	800110c <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011510:	4b31      	ldr	r3, [pc, #196]	@ (80115d8 <tcp_parseopt+0xe4>)
 8011512:	881b      	ldrh	r3, [r3, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d056      	beq.n	80115c6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011518:	4b30      	ldr	r3, [pc, #192]	@ (80115dc <tcp_parseopt+0xe8>)
 801151a:	2200      	movs	r2, #0
 801151c:	801a      	strh	r2, [r3, #0]
 801151e:	e046      	b.n	80115ae <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011520:	f7ff ffb2 	bl	8011488 <tcp_get_next_optbyte>
 8011524:	4603      	mov	r3, r0
 8011526:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	2b02      	cmp	r3, #2
 801152c:	d006      	beq.n	801153c <tcp_parseopt+0x48>
 801152e:	2b02      	cmp	r3, #2
 8011530:	dc2a      	bgt.n	8011588 <tcp_parseopt+0x94>
 8011532:	2b00      	cmp	r3, #0
 8011534:	d042      	beq.n	80115bc <tcp_parseopt+0xc8>
 8011536:	2b01      	cmp	r3, #1
 8011538:	d038      	beq.n	80115ac <tcp_parseopt+0xb8>
 801153a:	e025      	b.n	8011588 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801153c:	f7ff ffa4 	bl	8011488 <tcp_get_next_optbyte>
 8011540:	4603      	mov	r3, r0
 8011542:	2b04      	cmp	r3, #4
 8011544:	d13c      	bne.n	80115c0 <tcp_parseopt+0xcc>
 8011546:	4b25      	ldr	r3, [pc, #148]	@ (80115dc <tcp_parseopt+0xe8>)
 8011548:	881b      	ldrh	r3, [r3, #0]
 801154a:	3301      	adds	r3, #1
 801154c:	4a22      	ldr	r2, [pc, #136]	@ (80115d8 <tcp_parseopt+0xe4>)
 801154e:	8812      	ldrh	r2, [r2, #0]
 8011550:	4293      	cmp	r3, r2
 8011552:	da35      	bge.n	80115c0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011554:	f7ff ff98 	bl	8011488 <tcp_get_next_optbyte>
 8011558:	4603      	mov	r3, r0
 801155a:	021b      	lsls	r3, r3, #8
 801155c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801155e:	f7ff ff93 	bl	8011488 <tcp_get_next_optbyte>
 8011562:	4603      	mov	r3, r0
 8011564:	461a      	mov	r2, r3
 8011566:	89bb      	ldrh	r3, [r7, #12]
 8011568:	4313      	orrs	r3, r2
 801156a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801156c:	89bb      	ldrh	r3, [r7, #12]
 801156e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011572:	d804      	bhi.n	801157e <tcp_parseopt+0x8a>
 8011574:	89bb      	ldrh	r3, [r7, #12]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d001      	beq.n	801157e <tcp_parseopt+0x8a>
 801157a:	89ba      	ldrh	r2, [r7, #12]
 801157c:	e001      	b.n	8011582 <tcp_parseopt+0x8e>
 801157e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011586:	e012      	b.n	80115ae <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011588:	f7ff ff7e 	bl	8011488 <tcp_get_next_optbyte>
 801158c:	4603      	mov	r3, r0
 801158e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011590:	7afb      	ldrb	r3, [r7, #11]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d916      	bls.n	80115c4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011596:	7afb      	ldrb	r3, [r7, #11]
 8011598:	b29a      	uxth	r2, r3
 801159a:	4b10      	ldr	r3, [pc, #64]	@ (80115dc <tcp_parseopt+0xe8>)
 801159c:	881b      	ldrh	r3, [r3, #0]
 801159e:	4413      	add	r3, r2
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	3b02      	subs	r3, #2
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	4b0d      	ldr	r3, [pc, #52]	@ (80115dc <tcp_parseopt+0xe8>)
 80115a8:	801a      	strh	r2, [r3, #0]
 80115aa:	e000      	b.n	80115ae <tcp_parseopt+0xba>
          break;
 80115ac:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80115ae:	4b0b      	ldr	r3, [pc, #44]	@ (80115dc <tcp_parseopt+0xe8>)
 80115b0:	881a      	ldrh	r2, [r3, #0]
 80115b2:	4b09      	ldr	r3, [pc, #36]	@ (80115d8 <tcp_parseopt+0xe4>)
 80115b4:	881b      	ldrh	r3, [r3, #0]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d3b2      	bcc.n	8011520 <tcp_parseopt+0x2c>
 80115ba:	e004      	b.n	80115c6 <tcp_parseopt+0xd2>
          return;
 80115bc:	bf00      	nop
 80115be:	e002      	b.n	80115c6 <tcp_parseopt+0xd2>
            return;
 80115c0:	bf00      	nop
 80115c2:	e000      	b.n	80115c6 <tcp_parseopt+0xd2>
            return;
 80115c4:	bf00      	nop
      }
    }
  }
}
 80115c6:	3710      	adds	r7, #16
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	080195ec 	.word	0x080195ec
 80115d0:	08019a50 	.word	0x08019a50
 80115d4:	08019638 	.word	0x08019638
 80115d8:	2000c5d0 	.word	0x2000c5d0
 80115dc:	2000c5d8 	.word	0x2000c5d8

080115e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80115e0:	b480      	push	{r7}
 80115e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80115e4:	4b05      	ldr	r3, [pc, #20]	@ (80115fc <tcp_trigger_input_pcb_close+0x1c>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	f043 0310 	orr.w	r3, r3, #16
 80115ec:	b2da      	uxtb	r2, r3
 80115ee:	4b03      	ldr	r3, [pc, #12]	@ (80115fc <tcp_trigger_input_pcb_close+0x1c>)
 80115f0:	701a      	strb	r2, [r3, #0]
}
 80115f2:	bf00      	nop
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr
 80115fc:	2000c5e9 	.word	0x2000c5e9

08011600 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d00a      	beq.n	8011628 <tcp_route+0x28>
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	7a1b      	ldrb	r3, [r3, #8]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d006      	beq.n	8011628 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	7a1b      	ldrb	r3, [r3, #8]
 801161e:	4618      	mov	r0, r3
 8011620:	f7fb f89a 	bl	800c758 <netif_get_by_index>
 8011624:	4603      	mov	r3, r0
 8011626:	e003      	b.n	8011630 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f003 fcb7 	bl	8014f9c <ip4_route>
 801162e:	4603      	mov	r3, r0
  }
}
 8011630:	4618      	mov	r0, r3
 8011632:	3710      	adds	r7, #16
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011638:	b590      	push	{r4, r7, lr}
 801163a:	b087      	sub	sp, #28
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	603b      	str	r3, [r7, #0]
 8011644:	4613      	mov	r3, r2
 8011646:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d105      	bne.n	801165a <tcp_create_segment+0x22>
 801164e:	4b43      	ldr	r3, [pc, #268]	@ (801175c <tcp_create_segment+0x124>)
 8011650:	22a3      	movs	r2, #163	@ 0xa3
 8011652:	4943      	ldr	r1, [pc, #268]	@ (8011760 <tcp_create_segment+0x128>)
 8011654:	4843      	ldr	r0, [pc, #268]	@ (8011764 <tcp_create_segment+0x12c>)
 8011656:	f7ef fd59 	bl	800110c <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d105      	bne.n	801166c <tcp_create_segment+0x34>
 8011660:	4b3e      	ldr	r3, [pc, #248]	@ (801175c <tcp_create_segment+0x124>)
 8011662:	22a4      	movs	r2, #164	@ 0xa4
 8011664:	4940      	ldr	r1, [pc, #256]	@ (8011768 <tcp_create_segment+0x130>)
 8011666:	483f      	ldr	r0, [pc, #252]	@ (8011764 <tcp_create_segment+0x12c>)
 8011668:	f7ef fd50 	bl	800110c <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801166c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011670:	009b      	lsls	r3, r3, #2
 8011672:	b2db      	uxtb	r3, r3
 8011674:	f003 0304 	and.w	r3, r3, #4
 8011678:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801167a:	2003      	movs	r0, #3
 801167c:	f7fa fce0 	bl	800c040 <memp_malloc>
 8011680:	6138      	str	r0, [r7, #16]
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d104      	bne.n	8011692 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011688:	68b8      	ldr	r0, [r7, #8]
 801168a:	f7fb fbf3 	bl	800ce74 <pbuf_free>
    return NULL;
 801168e:	2300      	movs	r3, #0
 8011690:	e060      	b.n	8011754 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011698:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	2200      	movs	r2, #0
 801169e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	68ba      	ldr	r2, [r7, #8]
 80116a4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	891a      	ldrh	r2, [r3, #8]
 80116aa:	7dfb      	ldrb	r3, [r7, #23]
 80116ac:	b29b      	uxth	r3, r3
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d205      	bcs.n	80116be <tcp_create_segment+0x86>
 80116b2:	4b2a      	ldr	r3, [pc, #168]	@ (801175c <tcp_create_segment+0x124>)
 80116b4:	22b0      	movs	r2, #176	@ 0xb0
 80116b6:	492d      	ldr	r1, [pc, #180]	@ (801176c <tcp_create_segment+0x134>)
 80116b8:	482a      	ldr	r0, [pc, #168]	@ (8011764 <tcp_create_segment+0x12c>)
 80116ba:	f7ef fd27 	bl	800110c <printf>
  seg->len = p->tot_len - optlen;
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	891a      	ldrh	r2, [r3, #8]
 80116c2:	7dfb      	ldrb	r3, [r7, #23]
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80116ce:	2114      	movs	r1, #20
 80116d0:	68b8      	ldr	r0, [r7, #8]
 80116d2:	f7fb fb39 	bl	800cd48 <pbuf_add_header>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d004      	beq.n	80116e6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80116dc:	6938      	ldr	r0, [r7, #16]
 80116de:	f7fd f804 	bl	800e6ea <tcp_seg_free>
    return NULL;
 80116e2:	2300      	movs	r3, #0
 80116e4:	e036      	b.n	8011754 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	685a      	ldr	r2, [r3, #4]
 80116ec:	693b      	ldr	r3, [r7, #16]
 80116ee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	8ada      	ldrh	r2, [r3, #22]
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	68dc      	ldr	r4, [r3, #12]
 80116f8:	4610      	mov	r0, r2
 80116fa:	f7f9 ffc9 	bl	800b690 <lwip_htons>
 80116fe:	4603      	mov	r3, r0
 8011700:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	8b1a      	ldrh	r2, [r3, #24]
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	68dc      	ldr	r4, [r3, #12]
 801170a:	4610      	mov	r0, r2
 801170c:	f7f9 ffc0 	bl	800b690 <lwip_htons>
 8011710:	4603      	mov	r3, r0
 8011712:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	68dc      	ldr	r4, [r3, #12]
 8011718:	6838      	ldr	r0, [r7, #0]
 801171a:	f7f9 ffcf 	bl	800b6bc <lwip_htonl>
 801171e:	4603      	mov	r3, r0
 8011720:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011722:	7dfb      	ldrb	r3, [r7, #23]
 8011724:	089b      	lsrs	r3, r3, #2
 8011726:	b2db      	uxtb	r3, r3
 8011728:	3305      	adds	r3, #5
 801172a:	b29b      	uxth	r3, r3
 801172c:	031b      	lsls	r3, r3, #12
 801172e:	b29a      	uxth	r2, r3
 8011730:	79fb      	ldrb	r3, [r7, #7]
 8011732:	b29b      	uxth	r3, r3
 8011734:	4313      	orrs	r3, r2
 8011736:	b29a      	uxth	r2, r3
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	68dc      	ldr	r4, [r3, #12]
 801173c:	4610      	mov	r0, r2
 801173e:	f7f9 ffa7 	bl	800b690 <lwip_htons>
 8011742:	4603      	mov	r3, r0
 8011744:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	2200      	movs	r2, #0
 801174c:	749a      	strb	r2, [r3, #18]
 801174e:	2200      	movs	r2, #0
 8011750:	74da      	strb	r2, [r3, #19]
  return seg;
 8011752:	693b      	ldr	r3, [r7, #16]
}
 8011754:	4618      	mov	r0, r3
 8011756:	371c      	adds	r7, #28
 8011758:	46bd      	mov	sp, r7
 801175a:	bd90      	pop	{r4, r7, pc}
 801175c:	08019a6c 	.word	0x08019a6c
 8011760:	08019aa0 	.word	0x08019aa0
 8011764:	08019ac0 	.word	0x08019ac0
 8011768:	08019ae8 	.word	0x08019ae8
 801176c:	08019b0c 	.word	0x08019b0c

08011770 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b086      	sub	sp, #24
 8011774:	af00      	add	r7, sp, #0
 8011776:	607b      	str	r3, [r7, #4]
 8011778:	4603      	mov	r3, r0
 801177a:	73fb      	strb	r3, [r7, #15]
 801177c:	460b      	mov	r3, r1
 801177e:	81bb      	strh	r3, [r7, #12]
 8011780:	4613      	mov	r3, r2
 8011782:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011784:	89bb      	ldrh	r3, [r7, #12]
 8011786:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d105      	bne.n	801179a <tcp_pbuf_prealloc+0x2a>
 801178e:	4b30      	ldr	r3, [pc, #192]	@ (8011850 <tcp_pbuf_prealloc+0xe0>)
 8011790:	22e8      	movs	r2, #232	@ 0xe8
 8011792:	4930      	ldr	r1, [pc, #192]	@ (8011854 <tcp_pbuf_prealloc+0xe4>)
 8011794:	4830      	ldr	r0, [pc, #192]	@ (8011858 <tcp_pbuf_prealloc+0xe8>)
 8011796:	f7ef fcb9 	bl	800110c <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801179a:	6a3b      	ldr	r3, [r7, #32]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d105      	bne.n	80117ac <tcp_pbuf_prealloc+0x3c>
 80117a0:	4b2b      	ldr	r3, [pc, #172]	@ (8011850 <tcp_pbuf_prealloc+0xe0>)
 80117a2:	22e9      	movs	r2, #233	@ 0xe9
 80117a4:	492d      	ldr	r1, [pc, #180]	@ (801185c <tcp_pbuf_prealloc+0xec>)
 80117a6:	482c      	ldr	r0, [pc, #176]	@ (8011858 <tcp_pbuf_prealloc+0xe8>)
 80117a8:	f7ef fcb0 	bl	800110c <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80117ac:	89ba      	ldrh	r2, [r7, #12]
 80117ae:	897b      	ldrh	r3, [r7, #10]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d221      	bcs.n	80117f8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80117b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80117b8:	f003 0302 	and.w	r3, r3, #2
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d111      	bne.n	80117e4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80117c0:	6a3b      	ldr	r3, [r7, #32]
 80117c2:	8b5b      	ldrh	r3, [r3, #26]
 80117c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d115      	bne.n	80117f8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80117cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d007      	beq.n	80117e4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80117d4:	6a3b      	ldr	r3, [r7, #32]
 80117d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d103      	bne.n	80117e4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d009      	beq.n	80117f8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80117e4:	89bb      	ldrh	r3, [r7, #12]
 80117e6:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80117ea:	f023 0203 	bic.w	r2, r3, #3
 80117ee:	897b      	ldrh	r3, [r7, #10]
 80117f0:	4293      	cmp	r3, r2
 80117f2:	bf28      	it	cs
 80117f4:	4613      	movcs	r3, r2
 80117f6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80117f8:	8af9      	ldrh	r1, [r7, #22]
 80117fa:	7bfb      	ldrb	r3, [r7, #15]
 80117fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011800:	4618      	mov	r0, r3
 8011802:	f7fb f853 	bl	800c8ac <pbuf_alloc>
 8011806:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d101      	bne.n	8011812 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801180e:	2300      	movs	r3, #0
 8011810:	e019      	b.n	8011846 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d006      	beq.n	8011828 <tcp_pbuf_prealloc+0xb8>
 801181a:	4b0d      	ldr	r3, [pc, #52]	@ (8011850 <tcp_pbuf_prealloc+0xe0>)
 801181c:	f240 120b 	movw	r2, #267	@ 0x10b
 8011820:	490f      	ldr	r1, [pc, #60]	@ (8011860 <tcp_pbuf_prealloc+0xf0>)
 8011822:	480d      	ldr	r0, [pc, #52]	@ (8011858 <tcp_pbuf_prealloc+0xe8>)
 8011824:	f7ef fc72 	bl	800110c <printf>
  *oversize = p->len - length;
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	895a      	ldrh	r2, [r3, #10]
 801182c:	89bb      	ldrh	r3, [r7, #12]
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	b29a      	uxth	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	89ba      	ldrh	r2, [r7, #12]
 801183a:	811a      	strh	r2, [r3, #8]
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	891a      	ldrh	r2, [r3, #8]
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	815a      	strh	r2, [r3, #10]
  return p;
 8011844:	693b      	ldr	r3, [r7, #16]
}
 8011846:	4618      	mov	r0, r3
 8011848:	3718      	adds	r7, #24
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	08019a6c 	.word	0x08019a6c
 8011854:	08019b24 	.word	0x08019b24
 8011858:	08019ac0 	.word	0x08019ac0
 801185c:	08019b48 	.word	0x08019b48
 8011860:	08019b68 	.word	0x08019b68

08011864 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	460b      	mov	r3, r1
 801186e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d106      	bne.n	8011884 <tcp_write_checks+0x20>
 8011876:	4b33      	ldr	r3, [pc, #204]	@ (8011944 <tcp_write_checks+0xe0>)
 8011878:	f240 1233 	movw	r2, #307	@ 0x133
 801187c:	4932      	ldr	r1, [pc, #200]	@ (8011948 <tcp_write_checks+0xe4>)
 801187e:	4833      	ldr	r0, [pc, #204]	@ (801194c <tcp_write_checks+0xe8>)
 8011880:	f7ef fc44 	bl	800110c <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	7d1b      	ldrb	r3, [r3, #20]
 8011888:	2b04      	cmp	r3, #4
 801188a:	d00e      	beq.n	80118aa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011890:	2b07      	cmp	r3, #7
 8011892:	d00a      	beq.n	80118aa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011898:	2b02      	cmp	r3, #2
 801189a:	d006      	beq.n	80118aa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80118a0:	2b03      	cmp	r3, #3
 80118a2:	d002      	beq.n	80118aa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80118a4:	f06f 030a 	mvn.w	r3, #10
 80118a8:	e048      	b.n	801193c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80118aa:	887b      	ldrh	r3, [r7, #2]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d101      	bne.n	80118b4 <tcp_write_checks+0x50>
    return ERR_OK;
 80118b0:	2300      	movs	r3, #0
 80118b2:	e043      	b.n	801193c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80118ba:	887a      	ldrh	r2, [r7, #2]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d909      	bls.n	80118d4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	8b5b      	ldrh	r3, [r3, #26]
 80118c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80118ce:	f04f 33ff 	mov.w	r3, #4294967295
 80118d2:	e033      	b.n	801193c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80118da:	2b08      	cmp	r3, #8
 80118dc:	d909      	bls.n	80118f2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	8b5b      	ldrh	r3, [r3, #26]
 80118e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80118ec:	f04f 33ff 	mov.w	r3, #4294967295
 80118f0:	e024      	b.n	801193c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d00f      	beq.n	801191c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011900:	2b00      	cmp	r3, #0
 8011902:	d11a      	bne.n	801193a <tcp_write_checks+0xd6>
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011908:	2b00      	cmp	r3, #0
 801190a:	d116      	bne.n	801193a <tcp_write_checks+0xd6>
 801190c:	4b0d      	ldr	r3, [pc, #52]	@ (8011944 <tcp_write_checks+0xe0>)
 801190e:	f240 1255 	movw	r2, #341	@ 0x155
 8011912:	490f      	ldr	r1, [pc, #60]	@ (8011950 <tcp_write_checks+0xec>)
 8011914:	480d      	ldr	r0, [pc, #52]	@ (801194c <tcp_write_checks+0xe8>)
 8011916:	f7ef fbf9 	bl	800110c <printf>
 801191a:	e00e      	b.n	801193a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011920:	2b00      	cmp	r3, #0
 8011922:	d103      	bne.n	801192c <tcp_write_checks+0xc8>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011928:	2b00      	cmp	r3, #0
 801192a:	d006      	beq.n	801193a <tcp_write_checks+0xd6>
 801192c:	4b05      	ldr	r3, [pc, #20]	@ (8011944 <tcp_write_checks+0xe0>)
 801192e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011932:	4908      	ldr	r1, [pc, #32]	@ (8011954 <tcp_write_checks+0xf0>)
 8011934:	4805      	ldr	r0, [pc, #20]	@ (801194c <tcp_write_checks+0xe8>)
 8011936:	f7ef fbe9 	bl	800110c <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}
 8011944:	08019a6c 	.word	0x08019a6c
 8011948:	08019b7c 	.word	0x08019b7c
 801194c:	08019ac0 	.word	0x08019ac0
 8011950:	08019b9c 	.word	0x08019b9c
 8011954:	08019bd8 	.word	0x08019bd8

08011958 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011958:	b590      	push	{r4, r7, lr}
 801195a:	b09b      	sub	sp, #108	@ 0x6c
 801195c:	af04      	add	r7, sp, #16
 801195e:	60f8      	str	r0, [r7, #12]
 8011960:	60b9      	str	r1, [r7, #8]
 8011962:	4611      	mov	r1, r2
 8011964:	461a      	mov	r2, r3
 8011966:	460b      	mov	r3, r1
 8011968:	80fb      	strh	r3, [r7, #6]
 801196a:	4613      	mov	r3, r2
 801196c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801196e:	2300      	movs	r3, #0
 8011970:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011972:	2300      	movs	r3, #0
 8011974:	653b      	str	r3, [r7, #80]	@ 0x50
 8011976:	2300      	movs	r3, #0
 8011978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801197a:	2300      	movs	r3, #0
 801197c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801197e:	2300      	movs	r3, #0
 8011980:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011982:	2300      	movs	r3, #0
 8011984:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011988:	2300      	movs	r3, #0
 801198a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801198e:	2300      	movs	r3, #0
 8011990:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011992:	2300      	movs	r3, #0
 8011994:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011996:	2300      	movs	r3, #0
 8011998:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d109      	bne.n	80119b4 <tcp_write+0x5c>
 80119a0:	4ba4      	ldr	r3, [pc, #656]	@ (8011c34 <tcp_write+0x2dc>)
 80119a2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80119a6:	49a4      	ldr	r1, [pc, #656]	@ (8011c38 <tcp_write+0x2e0>)
 80119a8:	48a4      	ldr	r0, [pc, #656]	@ (8011c3c <tcp_write+0x2e4>)
 80119aa:	f7ef fbaf 	bl	800110c <printf>
 80119ae:	f06f 030f 	mvn.w	r3, #15
 80119b2:	e32a      	b.n	801200a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80119ba:	085b      	lsrs	r3, r3, #1
 80119bc:	b29a      	uxth	r2, r3
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80119c2:	4293      	cmp	r3, r2
 80119c4:	bf28      	it	cs
 80119c6:	4613      	movcs	r3, r2
 80119c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80119ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d102      	bne.n	80119d6 <tcp_write+0x7e>
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80119d4:	e000      	b.n	80119d8 <tcp_write+0x80>
 80119d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80119d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d109      	bne.n	80119f4 <tcp_write+0x9c>
 80119e0:	4b94      	ldr	r3, [pc, #592]	@ (8011c34 <tcp_write+0x2dc>)
 80119e2:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80119e6:	4996      	ldr	r1, [pc, #600]	@ (8011c40 <tcp_write+0x2e8>)
 80119e8:	4894      	ldr	r0, [pc, #592]	@ (8011c3c <tcp_write+0x2e4>)
 80119ea:	f7ef fb8f 	bl	800110c <printf>
 80119ee:	f06f 030f 	mvn.w	r3, #15
 80119f2:	e30a      	b.n	801200a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80119f4:	88fb      	ldrh	r3, [r7, #6]
 80119f6:	4619      	mov	r1, r3
 80119f8:	68f8      	ldr	r0, [r7, #12]
 80119fa:	f7ff ff33 	bl	8011864 <tcp_write_checks>
 80119fe:	4603      	mov	r3, r0
 8011a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011a04:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d002      	beq.n	8011a12 <tcp_write+0xba>
    return err;
 8011a0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011a10:	e2fb      	b.n	801200a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011a18:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	f000 80f6 	beq.w	8011c18 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a30:	653b      	str	r3, [r7, #80]	@ 0x50
 8011a32:	e002      	b.n	8011a3a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d1f8      	bne.n	8011a34 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a44:	7a9b      	ldrb	r3, [r3, #10]
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	f003 0304 	and.w	r3, r3, #4
 8011a4e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011a50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a54:	891b      	ldrh	r3, [r3, #8]
 8011a56:	4619      	mov	r1, r3
 8011a58:	8c3b      	ldrh	r3, [r7, #32]
 8011a5a:	440b      	add	r3, r1
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	da06      	bge.n	8011a6e <tcp_write+0x116>
 8011a60:	4b74      	ldr	r3, [pc, #464]	@ (8011c34 <tcp_write+0x2dc>)
 8011a62:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011a66:	4977      	ldr	r1, [pc, #476]	@ (8011c44 <tcp_write+0x2ec>)
 8011a68:	4874      	ldr	r0, [pc, #464]	@ (8011c3c <tcp_write+0x2e4>)
 8011a6a:	f7ef fb4f 	bl	800110c <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a70:	891a      	ldrh	r2, [r3, #8]
 8011a72:	8c3b      	ldrh	r3, [r7, #32]
 8011a74:	4413      	add	r3, r2
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011a84:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011a86:	8a7b      	ldrh	r3, [r7, #18]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d026      	beq.n	8011ada <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011a8c:	8a7b      	ldrh	r3, [r7, #18]
 8011a8e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d206      	bcs.n	8011aa2 <tcp_write+0x14a>
 8011a94:	4b67      	ldr	r3, [pc, #412]	@ (8011c34 <tcp_write+0x2dc>)
 8011a96:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8011a9a:	496b      	ldr	r1, [pc, #428]	@ (8011c48 <tcp_write+0x2f0>)
 8011a9c:	4867      	ldr	r0, [pc, #412]	@ (8011c3c <tcp_write+0x2e4>)
 8011a9e:	f7ef fb35 	bl	800110c <printf>
      seg = last_unsent;
 8011aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011aa6:	8a7b      	ldrh	r3, [r7, #18]
 8011aa8:	88fa      	ldrh	r2, [r7, #6]
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	bf28      	it	cs
 8011aae:	4613      	movcs	r3, r2
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	bf28      	it	cs
 8011ab8:	4613      	movcs	r3, r2
 8011aba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011abc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ac0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ac2:	4413      	add	r3, r2
 8011ac4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8011ac8:	8a7a      	ldrh	r2, [r7, #18]
 8011aca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011acc:	1ad3      	subs	r3, r2, r3
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011ad2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011ad4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011ada:	8a7b      	ldrh	r3, [r7, #18]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d00b      	beq.n	8011af8 <tcp_write+0x1a0>
 8011ae0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ae4:	88fb      	ldrh	r3, [r7, #6]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d006      	beq.n	8011af8 <tcp_write+0x1a0>
 8011aea:	4b52      	ldr	r3, [pc, #328]	@ (8011c34 <tcp_write+0x2dc>)
 8011aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011af0:	4956      	ldr	r1, [pc, #344]	@ (8011c4c <tcp_write+0x2f4>)
 8011af2:	4852      	ldr	r0, [pc, #328]	@ (8011c3c <tcp_write+0x2e4>)
 8011af4:	f7ef fb0a 	bl	800110c <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011af8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011afc:	88fb      	ldrh	r3, [r7, #6]
 8011afe:	429a      	cmp	r2, r3
 8011b00:	f080 8167 	bcs.w	8011dd2 <tcp_write+0x47a>
 8011b04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f000 8163 	beq.w	8011dd2 <tcp_write+0x47a>
 8011b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b0e:	891b      	ldrh	r3, [r3, #8]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	f000 815e 	beq.w	8011dd2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011b16:	88fa      	ldrh	r2, [r7, #6]
 8011b18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b1c:	1ad2      	subs	r2, r2, r3
 8011b1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011b20:	4293      	cmp	r3, r2
 8011b22:	bfa8      	it	ge
 8011b24:	4613      	movge	r3, r2
 8011b26:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011b2c:	797b      	ldrb	r3, [r7, #5]
 8011b2e:	f003 0301 	and.w	r3, r3, #1
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d027      	beq.n	8011b86 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011b36:	f107 0012 	add.w	r0, r7, #18
 8011b3a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011b3c:	8bf9      	ldrh	r1, [r7, #30]
 8011b3e:	2301      	movs	r3, #1
 8011b40:	9302      	str	r3, [sp, #8]
 8011b42:	797b      	ldrb	r3, [r7, #5]
 8011b44:	9301      	str	r3, [sp, #4]
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	9300      	str	r3, [sp, #0]
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2000      	movs	r0, #0
 8011b4e:	f7ff fe0f 	bl	8011770 <tcp_pbuf_prealloc>
 8011b52:	6578      	str	r0, [r7, #84]	@ 0x54
 8011b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f000 8225 	beq.w	8011fa6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b5e:	6858      	ldr	r0, [r3, #4]
 8011b60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	4413      	add	r3, r2
 8011b68:	8bfa      	ldrh	r2, [r7, #30]
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	f005 f80b 	bl	8016b86 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011b70:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011b72:	f7fb fa0d 	bl	800cf90 <pbuf_clen>
 8011b76:	4603      	mov	r3, r0
 8011b78:	461a      	mov	r2, r3
 8011b7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011b7e:	4413      	add	r3, r2
 8011b80:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011b84:	e041      	b.n	8011c0a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011b86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b8c:	e002      	b.n	8011b94 <tcp_write+0x23c>
 8011b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1f8      	bne.n	8011b8e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b9e:	7b1b      	ldrb	r3, [r3, #12]
 8011ba0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d115      	bne.n	8011bd4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011bae:	8952      	ldrh	r2, [r2, #10]
 8011bb0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011bb2:	68ba      	ldr	r2, [r7, #8]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d10d      	bne.n	8011bd4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011bb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d006      	beq.n	8011bce <tcp_write+0x276>
 8011bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8011c34 <tcp_write+0x2dc>)
 8011bc2:	f240 2231 	movw	r2, #561	@ 0x231
 8011bc6:	4922      	ldr	r1, [pc, #136]	@ (8011c50 <tcp_write+0x2f8>)
 8011bc8:	481c      	ldr	r0, [pc, #112]	@ (8011c3c <tcp_write+0x2e4>)
 8011bca:	f7ef fa9f 	bl	800110c <printf>
          extendlen = seglen;
 8011bce:	8bfb      	ldrh	r3, [r7, #30]
 8011bd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011bd2:	e01a      	b.n	8011c0a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011bd4:	8bfb      	ldrh	r3, [r7, #30]
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	4619      	mov	r1, r3
 8011bda:	2000      	movs	r0, #0
 8011bdc:	f7fa fe66 	bl	800c8ac <pbuf_alloc>
 8011be0:	6578      	str	r0, [r7, #84]	@ 0x54
 8011be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	f000 81e0 	beq.w	8011faa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011bea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	441a      	add	r2, r3
 8011bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bf4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011bf6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011bf8:	f7fb f9ca 	bl	800cf90 <pbuf_clen>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	461a      	mov	r2, r3
 8011c00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011c04:	4413      	add	r3, r2
 8011c06:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011c0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011c0e:	8bfb      	ldrh	r3, [r7, #30]
 8011c10:	4413      	add	r3, r2
 8011c12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8011c16:	e0dc      	b.n	8011dd2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	f000 80d7 	beq.w	8011dd2 <tcp_write+0x47a>
 8011c24:	4b03      	ldr	r3, [pc, #12]	@ (8011c34 <tcp_write+0x2dc>)
 8011c26:	f240 224a 	movw	r2, #586	@ 0x24a
 8011c2a:	490a      	ldr	r1, [pc, #40]	@ (8011c54 <tcp_write+0x2fc>)
 8011c2c:	4803      	ldr	r0, [pc, #12]	@ (8011c3c <tcp_write+0x2e4>)
 8011c2e:	f7ef fa6d 	bl	800110c <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011c32:	e0ce      	b.n	8011dd2 <tcp_write+0x47a>
 8011c34:	08019a6c 	.word	0x08019a6c
 8011c38:	08019c0c 	.word	0x08019c0c
 8011c3c:	08019ac0 	.word	0x08019ac0
 8011c40:	08019c24 	.word	0x08019c24
 8011c44:	08019c58 	.word	0x08019c58
 8011c48:	08019c70 	.word	0x08019c70
 8011c4c:	08019c90 	.word	0x08019c90
 8011c50:	08019cb0 	.word	0x08019cb0
 8011c54:	08019cdc 	.word	0x08019cdc
    struct pbuf *p;
    u16_t left = len - pos;
 8011c58:	88fa      	ldrh	r2, [r7, #6]
 8011c5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011c5e:	1ad3      	subs	r3, r2, r3
 8011c60:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011c62:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011c6a:	1ad3      	subs	r3, r2, r3
 8011c6c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011c6e:	8b7a      	ldrh	r2, [r7, #26]
 8011c70:	8bbb      	ldrh	r3, [r7, #28]
 8011c72:	4293      	cmp	r3, r2
 8011c74:	bf28      	it	cs
 8011c76:	4613      	movcs	r3, r2
 8011c78:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011c7a:	797b      	ldrb	r3, [r7, #5]
 8011c7c:	f003 0301 	and.w	r3, r3, #1
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d036      	beq.n	8011cf2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011c84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	8b3b      	ldrh	r3, [r7, #24]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	b299      	uxth	r1, r3
 8011c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	bf0c      	ite	eq
 8011c96:	2301      	moveq	r3, #1
 8011c98:	2300      	movne	r3, #0
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	f107 0012 	add.w	r0, r7, #18
 8011ca0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011ca2:	9302      	str	r3, [sp, #8]
 8011ca4:	797b      	ldrb	r3, [r7, #5]
 8011ca6:	9301      	str	r3, [sp, #4]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	4603      	mov	r3, r0
 8011cae:	2036      	movs	r0, #54	@ 0x36
 8011cb0:	f7ff fd5e 	bl	8011770 <tcp_pbuf_prealloc>
 8011cb4:	6338      	str	r0, [r7, #48]	@ 0x30
 8011cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	f000 8178 	beq.w	8011fae <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cc0:	895b      	ldrh	r3, [r3, #10]
 8011cc2:	8b3a      	ldrh	r2, [r7, #24]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d906      	bls.n	8011cd6 <tcp_write+0x37e>
 8011cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8011efc <tcp_write+0x5a4>)
 8011cca:	f240 2266 	movw	r2, #614	@ 0x266
 8011cce:	498c      	ldr	r1, [pc, #560]	@ (8011f00 <tcp_write+0x5a8>)
 8011cd0:	488c      	ldr	r0, [pc, #560]	@ (8011f04 <tcp_write+0x5ac>)
 8011cd2:	f7ef fa1b 	bl	800110c <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cd8:	685a      	ldr	r2, [r3, #4]
 8011cda:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011cde:	18d0      	adds	r0, r2, r3
 8011ce0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011ce4:	68ba      	ldr	r2, [r7, #8]
 8011ce6:	4413      	add	r3, r2
 8011ce8:	8b3a      	ldrh	r2, [r7, #24]
 8011cea:	4619      	mov	r1, r3
 8011cec:	f004 ff4b 	bl	8016b86 <memcpy>
 8011cf0:	e02f      	b.n	8011d52 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011cf2:	8a7b      	ldrh	r3, [r7, #18]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d006      	beq.n	8011d06 <tcp_write+0x3ae>
 8011cf8:	4b80      	ldr	r3, [pc, #512]	@ (8011efc <tcp_write+0x5a4>)
 8011cfa:	f240 2271 	movw	r2, #625	@ 0x271
 8011cfe:	4982      	ldr	r1, [pc, #520]	@ (8011f08 <tcp_write+0x5b0>)
 8011d00:	4880      	ldr	r0, [pc, #512]	@ (8011f04 <tcp_write+0x5ac>)
 8011d02:	f7ef fa03 	bl	800110c <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011d06:	8b3b      	ldrh	r3, [r7, #24]
 8011d08:	2201      	movs	r2, #1
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	2036      	movs	r0, #54	@ 0x36
 8011d0e:	f7fa fdcd 	bl	800c8ac <pbuf_alloc>
 8011d12:	6178      	str	r0, [r7, #20]
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	f000 814b 	beq.w	8011fb2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011d1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011d20:	68ba      	ldr	r2, [r7, #8]
 8011d22:	441a      	add	r2, r3
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d28:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d32:	4619      	mov	r1, r3
 8011d34:	2036      	movs	r0, #54	@ 0x36
 8011d36:	f7fa fdb9 	bl	800c8ac <pbuf_alloc>
 8011d3a:	6338      	str	r0, [r7, #48]	@ 0x30
 8011d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d103      	bne.n	8011d4a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011d42:	6978      	ldr	r0, [r7, #20]
 8011d44:	f7fb f896 	bl	800ce74 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011d48:	e136      	b.n	8011fb8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011d4a:	6979      	ldr	r1, [r7, #20]
 8011d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d4e:	f7fb f95f 	bl	800d010 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011d52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d54:	f7fb f91c 	bl	800cf90 <pbuf_clen>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011d60:	4413      	add	r3, r2
 8011d62:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011d6a:	2b09      	cmp	r3, #9
 8011d6c:	d903      	bls.n	8011d76 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011d6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d70:	f7fb f880 	bl	800ce74 <pbuf_free>
      goto memerr;
 8011d74:	e120      	b.n	8011fb8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011d7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011d7e:	441a      	add	r2, r3
 8011d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	4613      	mov	r3, r2
 8011d88:	2200      	movs	r2, #0
 8011d8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f7ff fc53 	bl	8011638 <tcp_create_segment>
 8011d92:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	f000 810d 	beq.w	8011fb6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d102      	bne.n	8011da8 <tcp_write+0x450>
      queue = seg;
 8011da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011da6:	e00c      	b.n	8011dc2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d106      	bne.n	8011dbc <tcp_write+0x464>
 8011dae:	4b53      	ldr	r3, [pc, #332]	@ (8011efc <tcp_write+0x5a4>)
 8011db0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011db4:	4955      	ldr	r1, [pc, #340]	@ (8011f0c <tcp_write+0x5b4>)
 8011db6:	4853      	ldr	r0, [pc, #332]	@ (8011f04 <tcp_write+0x5ac>)
 8011db8:	f7ef f9a8 	bl	800110c <printf>
      prev_seg->next = seg;
 8011dbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011dbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011dc0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dc4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011dc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011dca:	8b3b      	ldrh	r3, [r7, #24]
 8011dcc:	4413      	add	r3, r2
 8011dce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011dd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011dd6:	88fb      	ldrh	r3, [r7, #6]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	f4ff af3d 	bcc.w	8011c58 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011dde:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d02c      	beq.n	8011e3e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011dea:	e01e      	b.n	8011e2a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dee:	891a      	ldrh	r2, [r3, #8]
 8011df0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011df2:	4413      	add	r3, r2
 8011df4:	b29a      	uxth	r2, r3
 8011df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011df8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d110      	bne.n	8011e24 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e08:	8952      	ldrh	r2, [r2, #10]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011e0e:	68b9      	ldr	r1, [r7, #8]
 8011e10:	4618      	mov	r0, r3
 8011e12:	f004 feb8 	bl	8016b86 <memcpy>
        p->len += oversize_used;
 8011e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e18:	895a      	ldrh	r2, [r3, #10]
 8011e1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011e1c:	4413      	add	r3, r2
 8011e1e:	b29a      	uxth	r2, r3
 8011e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e22:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d1dd      	bne.n	8011dec <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e32:	891a      	ldrh	r2, [r3, #8]
 8011e34:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011e36:	4413      	add	r3, r2
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e3c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011e3e:	8a7a      	ldrh	r2, [r7, #18]
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d018      	beq.n	8011e7e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d106      	bne.n	8011e60 <tcp_write+0x508>
 8011e52:	4b2a      	ldr	r3, [pc, #168]	@ (8011efc <tcp_write+0x5a4>)
 8011e54:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8011e58:	492d      	ldr	r1, [pc, #180]	@ (8011f10 <tcp_write+0x5b8>)
 8011e5a:	482a      	ldr	r0, [pc, #168]	@ (8011f04 <tcp_write+0x5ac>)
 8011e5c:	f7ef f956 	bl	800110c <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fb f8d2 	bl	800d010 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e6e:	891a      	ldrh	r2, [r3, #8]
 8011e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e72:	891b      	ldrh	r3, [r3, #8]
 8011e74:	4413      	add	r3, r2
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e7a:	811a      	strh	r2, [r3, #8]
 8011e7c:	e037      	b.n	8011eee <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011e7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d034      	beq.n	8011eee <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011e84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d003      	beq.n	8011e92 <tcp_write+0x53a>
 8011e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d106      	bne.n	8011ea0 <tcp_write+0x548>
 8011e92:	4b1a      	ldr	r3, [pc, #104]	@ (8011efc <tcp_write+0x5a4>)
 8011e94:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8011e98:	491e      	ldr	r1, [pc, #120]	@ (8011f14 <tcp_write+0x5bc>)
 8011e9a:	481a      	ldr	r0, [pc, #104]	@ (8011f04 <tcp_write+0x5ac>)
 8011e9c:	f7ef f936 	bl	800110c <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ea6:	e009      	b.n	8011ebc <tcp_write+0x564>
      p->tot_len += extendlen;
 8011ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eaa:	891a      	ldrh	r2, [r3, #8]
 8011eac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011eae:	4413      	add	r3, r2
 8011eb0:	b29a      	uxth	r2, r3
 8011eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d1f1      	bne.n	8011ea8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec6:	891a      	ldrh	r2, [r3, #8]
 8011ec8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011eca:	4413      	add	r3, r2
 8011ecc:	b29a      	uxth	r2, r3
 8011ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed4:	895a      	ldrh	r2, [r3, #10]
 8011ed6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ed8:	4413      	add	r3, r2
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ede:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ee2:	891a      	ldrh	r2, [r3, #8]
 8011ee4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ee6:	4413      	add	r3, r2
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eec:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d111      	bne.n	8011f18 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ef8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011efa:	e010      	b.n	8011f1e <tcp_write+0x5c6>
 8011efc:	08019a6c 	.word	0x08019a6c
 8011f00:	08019d0c 	.word	0x08019d0c
 8011f04:	08019ac0 	.word	0x08019ac0
 8011f08:	08019d4c 	.word	0x08019d4c
 8011f0c:	08019d5c 	.word	0x08019d5c
 8011f10:	08019d70 	.word	0x08019d70
 8011f14:	08019da8 	.word	0x08019da8
  } else {
    last_unsent->next = queue;
 8011f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f1c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011f22:	88fb      	ldrh	r3, [r7, #6]
 8011f24:	441a      	add	r2, r3
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011f30:	88fb      	ldrh	r3, [r7, #6]
 8011f32:	1ad3      	subs	r3, r2, r3
 8011f34:	b29a      	uxth	r2, r3
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011f42:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d00e      	beq.n	8011f6e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d10a      	bne.n	8011f6e <tcp_write+0x616>
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d106      	bne.n	8011f6e <tcp_write+0x616>
 8011f60:	4b2c      	ldr	r3, [pc, #176]	@ (8012014 <tcp_write+0x6bc>)
 8011f62:	f240 3212 	movw	r2, #786	@ 0x312
 8011f66:	492c      	ldr	r1, [pc, #176]	@ (8012018 <tcp_write+0x6c0>)
 8011f68:	482c      	ldr	r0, [pc, #176]	@ (801201c <tcp_write+0x6c4>)
 8011f6a:	f7ef f8cf 	bl	800110c <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d016      	beq.n	8011fa2 <tcp_write+0x64a>
 8011f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f76:	68db      	ldr	r3, [r3, #12]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d012      	beq.n	8011fa2 <tcp_write+0x64a>
 8011f7c:	797b      	ldrb	r3, [r7, #5]
 8011f7e:	f003 0302 	and.w	r3, r3, #2
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d10d      	bne.n	8011fa2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f88:	68db      	ldr	r3, [r3, #12]
 8011f8a:	899b      	ldrh	r3, [r3, #12]
 8011f8c:	b29c      	uxth	r4, r3
 8011f8e:	2008      	movs	r0, #8
 8011f90:	f7f9 fb7e 	bl	800b690 <lwip_htons>
 8011f94:	4603      	mov	r3, r0
 8011f96:	461a      	mov	r2, r3
 8011f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	4322      	orrs	r2, r4
 8011f9e:	b292      	uxth	r2, r2
 8011fa0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	e031      	b.n	801200a <tcp_write+0x6b2>
          goto memerr;
 8011fa6:	bf00      	nop
 8011fa8:	e006      	b.n	8011fb8 <tcp_write+0x660>
            goto memerr;
 8011faa:	bf00      	nop
 8011fac:	e004      	b.n	8011fb8 <tcp_write+0x660>
        goto memerr;
 8011fae:	bf00      	nop
 8011fb0:	e002      	b.n	8011fb8 <tcp_write+0x660>
        goto memerr;
 8011fb2:	bf00      	nop
 8011fb4:	e000      	b.n	8011fb8 <tcp_write+0x660>
      goto memerr;
 8011fb6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	8b5b      	ldrh	r3, [r3, #26]
 8011fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fc0:	b29a      	uxth	r2, r3
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d002      	beq.n	8011fd2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011fcc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011fce:	f7fa ff51 	bl	800ce74 <pbuf_free>
  }
  if (queue != NULL) {
 8011fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d002      	beq.n	8011fde <tcp_write+0x686>
    tcp_segs_free(queue);
 8011fd8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011fda:	f7fc fb71 	bl	800e6c0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d00e      	beq.n	8012006 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d10a      	bne.n	8012006 <tcp_write+0x6ae>
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d106      	bne.n	8012006 <tcp_write+0x6ae>
 8011ff8:	4b06      	ldr	r3, [pc, #24]	@ (8012014 <tcp_write+0x6bc>)
 8011ffa:	f240 3227 	movw	r2, #807	@ 0x327
 8011ffe:	4906      	ldr	r1, [pc, #24]	@ (8012018 <tcp_write+0x6c0>)
 8012000:	4806      	ldr	r0, [pc, #24]	@ (801201c <tcp_write+0x6c4>)
 8012002:	f7ef f883 	bl	800110c <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012006:	f04f 33ff 	mov.w	r3, #4294967295
}
 801200a:	4618      	mov	r0, r3
 801200c:	375c      	adds	r7, #92	@ 0x5c
 801200e:	46bd      	mov	sp, r7
 8012010:	bd90      	pop	{r4, r7, pc}
 8012012:	bf00      	nop
 8012014:	08019a6c 	.word	0x08019a6c
 8012018:	08019de0 	.word	0x08019de0
 801201c:	08019ac0 	.word	0x08019ac0

08012020 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012020:	b590      	push	{r4, r7, lr}
 8012022:	b08b      	sub	sp, #44	@ 0x2c
 8012024:	af02      	add	r7, sp, #8
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	460b      	mov	r3, r1
 801202a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801202c:	2300      	movs	r3, #0
 801202e:	61fb      	str	r3, [r7, #28]
 8012030:	2300      	movs	r3, #0
 8012032:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012034:	2300      	movs	r3, #0
 8012036:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d106      	bne.n	801204c <tcp_split_unsent_seg+0x2c>
 801203e:	4b95      	ldr	r3, [pc, #596]	@ (8012294 <tcp_split_unsent_seg+0x274>)
 8012040:	f240 324b 	movw	r2, #843	@ 0x34b
 8012044:	4994      	ldr	r1, [pc, #592]	@ (8012298 <tcp_split_unsent_seg+0x278>)
 8012046:	4895      	ldr	r0, [pc, #596]	@ (801229c <tcp_split_unsent_seg+0x27c>)
 8012048:	f7ef f860 	bl	800110c <printf>

  useg = pcb->unsent;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012050:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d102      	bne.n	801205e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012058:	f04f 33ff 	mov.w	r3, #4294967295
 801205c:	e116      	b.n	801228c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801205e:	887b      	ldrh	r3, [r7, #2]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d109      	bne.n	8012078 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012064:	4b8b      	ldr	r3, [pc, #556]	@ (8012294 <tcp_split_unsent_seg+0x274>)
 8012066:	f240 3253 	movw	r2, #851	@ 0x353
 801206a:	498d      	ldr	r1, [pc, #564]	@ (80122a0 <tcp_split_unsent_seg+0x280>)
 801206c:	488b      	ldr	r0, [pc, #556]	@ (801229c <tcp_split_unsent_seg+0x27c>)
 801206e:	f7ef f84d 	bl	800110c <printf>
    return ERR_VAL;
 8012072:	f06f 0305 	mvn.w	r3, #5
 8012076:	e109      	b.n	801228c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	891b      	ldrh	r3, [r3, #8]
 801207c:	887a      	ldrh	r2, [r7, #2]
 801207e:	429a      	cmp	r2, r3
 8012080:	d301      	bcc.n	8012086 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012082:	2300      	movs	r3, #0
 8012084:	e102      	b.n	801228c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801208a:	887a      	ldrh	r2, [r7, #2]
 801208c:	429a      	cmp	r2, r3
 801208e:	d906      	bls.n	801209e <tcp_split_unsent_seg+0x7e>
 8012090:	4b80      	ldr	r3, [pc, #512]	@ (8012294 <tcp_split_unsent_seg+0x274>)
 8012092:	f240 325b 	movw	r2, #859	@ 0x35b
 8012096:	4983      	ldr	r1, [pc, #524]	@ (80122a4 <tcp_split_unsent_seg+0x284>)
 8012098:	4880      	ldr	r0, [pc, #512]	@ (801229c <tcp_split_unsent_seg+0x27c>)
 801209a:	f7ef f837 	bl	800110c <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	891b      	ldrh	r3, [r3, #8]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d106      	bne.n	80120b4 <tcp_split_unsent_seg+0x94>
 80120a6:	4b7b      	ldr	r3, [pc, #492]	@ (8012294 <tcp_split_unsent_seg+0x274>)
 80120a8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80120ac:	497e      	ldr	r1, [pc, #504]	@ (80122a8 <tcp_split_unsent_seg+0x288>)
 80120ae:	487b      	ldr	r0, [pc, #492]	@ (801229c <tcp_split_unsent_seg+0x27c>)
 80120b0:	f7ef f82c 	bl	800110c <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	7a9b      	ldrb	r3, [r3, #10]
 80120b8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80120ba:	7bfb      	ldrb	r3, [r7, #15]
 80120bc:	009b      	lsls	r3, r3, #2
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	f003 0304 	and.w	r3, r3, #4
 80120c4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	891a      	ldrh	r2, [r3, #8]
 80120ca:	887b      	ldrh	r3, [r7, #2]
 80120cc:	1ad3      	subs	r3, r2, r3
 80120ce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80120d0:	7bbb      	ldrb	r3, [r7, #14]
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	89bb      	ldrh	r3, [r7, #12]
 80120d6:	4413      	add	r3, r2
 80120d8:	b29b      	uxth	r3, r3
 80120da:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80120de:	4619      	mov	r1, r3
 80120e0:	2036      	movs	r0, #54	@ 0x36
 80120e2:	f7fa fbe3 	bl	800c8ac <pbuf_alloc>
 80120e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	f000 80b7 	beq.w	801225e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	891a      	ldrh	r2, [r3, #8]
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	891b      	ldrh	r3, [r3, #8]
 80120fa:	1ad3      	subs	r3, r2, r3
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	887b      	ldrh	r3, [r7, #2]
 8012100:	4413      	add	r3, r2
 8012102:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	6858      	ldr	r0, [r3, #4]
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	685a      	ldr	r2, [r3, #4]
 801210c:	7bbb      	ldrb	r3, [r7, #14]
 801210e:	18d1      	adds	r1, r2, r3
 8012110:	897b      	ldrh	r3, [r7, #10]
 8012112:	89ba      	ldrh	r2, [r7, #12]
 8012114:	f7fb f8a4 	bl	800d260 <pbuf_copy_partial>
 8012118:	4603      	mov	r3, r0
 801211a:	461a      	mov	r2, r3
 801211c:	89bb      	ldrh	r3, [r7, #12]
 801211e:	4293      	cmp	r3, r2
 8012120:	f040 809f 	bne.w	8012262 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	899b      	ldrh	r3, [r3, #12]
 801212a:	b29b      	uxth	r3, r3
 801212c:	4618      	mov	r0, r3
 801212e:	f7f9 faaf 	bl	800b690 <lwip_htons>
 8012132:	4603      	mov	r3, r0
 8012134:	b2db      	uxtb	r3, r3
 8012136:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801213a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801213c:	2300      	movs	r3, #0
 801213e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012140:	7efb      	ldrb	r3, [r7, #27]
 8012142:	f003 0308 	and.w	r3, r3, #8
 8012146:	2b00      	cmp	r3, #0
 8012148:	d007      	beq.n	801215a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801214a:	7efb      	ldrb	r3, [r7, #27]
 801214c:	f023 0308 	bic.w	r3, r3, #8
 8012150:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012152:	7ebb      	ldrb	r3, [r7, #26]
 8012154:	f043 0308 	orr.w	r3, r3, #8
 8012158:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801215a:	7efb      	ldrb	r3, [r7, #27]
 801215c:	f003 0301 	and.w	r3, r3, #1
 8012160:	2b00      	cmp	r3, #0
 8012162:	d007      	beq.n	8012174 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012164:	7efb      	ldrb	r3, [r7, #27]
 8012166:	f023 0301 	bic.w	r3, r3, #1
 801216a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801216c:	7ebb      	ldrb	r3, [r7, #26]
 801216e:	f043 0301 	orr.w	r3, r3, #1
 8012172:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	68db      	ldr	r3, [r3, #12]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	4618      	mov	r0, r3
 801217c:	f7f9 fa9e 	bl	800b6bc <lwip_htonl>
 8012180:	4602      	mov	r2, r0
 8012182:	887b      	ldrh	r3, [r7, #2]
 8012184:	18d1      	adds	r1, r2, r3
 8012186:	7eba      	ldrb	r2, [r7, #26]
 8012188:	7bfb      	ldrb	r3, [r7, #15]
 801218a:	9300      	str	r3, [sp, #0]
 801218c:	460b      	mov	r3, r1
 801218e:	6939      	ldr	r1, [r7, #16]
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f7ff fa51 	bl	8011638 <tcp_create_segment>
 8012196:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d063      	beq.n	8012266 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7fa fef4 	bl	800cf90 <pbuf_clen>
 80121a8:	4603      	mov	r3, r0
 80121aa:	461a      	mov	r2, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80121b2:	1a9b      	subs	r3, r3, r2
 80121b4:	b29a      	uxth	r2, r3
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	6858      	ldr	r0, [r3, #4]
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	891a      	ldrh	r2, [r3, #8]
 80121c6:	89bb      	ldrh	r3, [r7, #12]
 80121c8:	1ad3      	subs	r3, r2, r3
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	4619      	mov	r1, r3
 80121ce:	f7fa fccb 	bl	800cb68 <pbuf_realloc>
  useg->len -= remainder;
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	891a      	ldrh	r2, [r3, #8]
 80121d6:	89bb      	ldrh	r3, [r7, #12]
 80121d8:	1ad3      	subs	r3, r2, r3
 80121da:	b29a      	uxth	r2, r3
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	68db      	ldr	r3, [r3, #12]
 80121e4:	899b      	ldrh	r3, [r3, #12]
 80121e6:	b29c      	uxth	r4, r3
 80121e8:	7efb      	ldrb	r3, [r7, #27]
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7f9 fa4f 	bl	800b690 <lwip_htons>
 80121f2:	4603      	mov	r3, r0
 80121f4:	461a      	mov	r2, r3
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	4322      	orrs	r2, r4
 80121fc:	b292      	uxth	r2, r2
 80121fe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	4618      	mov	r0, r3
 8012206:	f7fa fec3 	bl	800cf90 <pbuf_clen>
 801220a:	4603      	mov	r3, r0
 801220c:	461a      	mov	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012214:	4413      	add	r3, r2
 8012216:	b29a      	uxth	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	4618      	mov	r0, r3
 8012224:	f7fa feb4 	bl	800cf90 <pbuf_clen>
 8012228:	4603      	mov	r3, r0
 801222a:	461a      	mov	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012232:	4413      	add	r3, r2
 8012234:	b29a      	uxth	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	681a      	ldr	r2, [r3, #0]
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	69fa      	ldr	r2, [r7, #28]
 8012248:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d103      	bne.n	801225a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2200      	movs	r2, #0
 8012256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801225a:	2300      	movs	r3, #0
 801225c:	e016      	b.n	801228c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801225e:	bf00      	nop
 8012260:	e002      	b.n	8012268 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012262:	bf00      	nop
 8012264:	e000      	b.n	8012268 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012266:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d006      	beq.n	801227c <tcp_split_unsent_seg+0x25c>
 801226e:	4b09      	ldr	r3, [pc, #36]	@ (8012294 <tcp_split_unsent_seg+0x274>)
 8012270:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012274:	490d      	ldr	r1, [pc, #52]	@ (80122ac <tcp_split_unsent_seg+0x28c>)
 8012276:	4809      	ldr	r0, [pc, #36]	@ (801229c <tcp_split_unsent_seg+0x27c>)
 8012278:	f7ee ff48 	bl	800110c <printf>
  if (p != NULL) {
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d002      	beq.n	8012288 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012282:	6938      	ldr	r0, [r7, #16]
 8012284:	f7fa fdf6 	bl	800ce74 <pbuf_free>
  }

  return ERR_MEM;
 8012288:	f04f 33ff 	mov.w	r3, #4294967295
}
 801228c:	4618      	mov	r0, r3
 801228e:	3724      	adds	r7, #36	@ 0x24
 8012290:	46bd      	mov	sp, r7
 8012292:	bd90      	pop	{r4, r7, pc}
 8012294:	08019a6c 	.word	0x08019a6c
 8012298:	08019e00 	.word	0x08019e00
 801229c:	08019ac0 	.word	0x08019ac0
 80122a0:	08019e24 	.word	0x08019e24
 80122a4:	08019e48 	.word	0x08019e48
 80122a8:	08019e58 	.word	0x08019e58
 80122ac:	08019e68 	.word	0x08019e68

080122b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80122b0:	b590      	push	{r4, r7, lr}
 80122b2:	b085      	sub	sp, #20
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d106      	bne.n	80122cc <tcp_send_fin+0x1c>
 80122be:	4b21      	ldr	r3, [pc, #132]	@ (8012344 <tcp_send_fin+0x94>)
 80122c0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80122c4:	4920      	ldr	r1, [pc, #128]	@ (8012348 <tcp_send_fin+0x98>)
 80122c6:	4821      	ldr	r0, [pc, #132]	@ (801234c <tcp_send_fin+0x9c>)
 80122c8:	f7ee ff20 	bl	800110c <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d02e      	beq.n	8012332 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122d8:	60fb      	str	r3, [r7, #12]
 80122da:	e002      	b.n	80122e2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d1f8      	bne.n	80122dc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	68db      	ldr	r3, [r3, #12]
 80122ee:	899b      	ldrh	r3, [r3, #12]
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7f9 f9cc 	bl	800b690 <lwip_htons>
 80122f8:	4603      	mov	r3, r0
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	f003 0307 	and.w	r3, r3, #7
 8012300:	2b00      	cmp	r3, #0
 8012302:	d116      	bne.n	8012332 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	68db      	ldr	r3, [r3, #12]
 8012308:	899b      	ldrh	r3, [r3, #12]
 801230a:	b29c      	uxth	r4, r3
 801230c:	2001      	movs	r0, #1
 801230e:	f7f9 f9bf 	bl	800b690 <lwip_htons>
 8012312:	4603      	mov	r3, r0
 8012314:	461a      	mov	r2, r3
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	68db      	ldr	r3, [r3, #12]
 801231a:	4322      	orrs	r2, r4
 801231c:	b292      	uxth	r2, r2
 801231e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	8b5b      	ldrh	r3, [r3, #26]
 8012324:	f043 0320 	orr.w	r3, r3, #32
 8012328:	b29a      	uxth	r2, r3
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801232e:	2300      	movs	r3, #0
 8012330:	e004      	b.n	801233c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012332:	2101      	movs	r1, #1
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 f80b 	bl	8012350 <tcp_enqueue_flags>
 801233a:	4603      	mov	r3, r0
}
 801233c:	4618      	mov	r0, r3
 801233e:	3714      	adds	r7, #20
 8012340:	46bd      	mov	sp, r7
 8012342:	bd90      	pop	{r4, r7, pc}
 8012344:	08019a6c 	.word	0x08019a6c
 8012348:	08019e74 	.word	0x08019e74
 801234c:	08019ac0 	.word	0x08019ac0

08012350 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b08a      	sub	sp, #40	@ 0x28
 8012354:	af02      	add	r7, sp, #8
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	460b      	mov	r3, r1
 801235a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801235c:	2300      	movs	r3, #0
 801235e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012360:	2300      	movs	r3, #0
 8012362:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012364:	78fb      	ldrb	r3, [r7, #3]
 8012366:	f003 0303 	and.w	r3, r3, #3
 801236a:	2b00      	cmp	r3, #0
 801236c:	d106      	bne.n	801237c <tcp_enqueue_flags+0x2c>
 801236e:	4b67      	ldr	r3, [pc, #412]	@ (801250c <tcp_enqueue_flags+0x1bc>)
 8012370:	f240 4211 	movw	r2, #1041	@ 0x411
 8012374:	4966      	ldr	r1, [pc, #408]	@ (8012510 <tcp_enqueue_flags+0x1c0>)
 8012376:	4867      	ldr	r0, [pc, #412]	@ (8012514 <tcp_enqueue_flags+0x1c4>)
 8012378:	f7ee fec8 	bl	800110c <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d106      	bne.n	8012390 <tcp_enqueue_flags+0x40>
 8012382:	4b62      	ldr	r3, [pc, #392]	@ (801250c <tcp_enqueue_flags+0x1bc>)
 8012384:	f240 4213 	movw	r2, #1043	@ 0x413
 8012388:	4963      	ldr	r1, [pc, #396]	@ (8012518 <tcp_enqueue_flags+0x1c8>)
 801238a:	4862      	ldr	r0, [pc, #392]	@ (8012514 <tcp_enqueue_flags+0x1c4>)
 801238c:	f7ee febe 	bl	800110c <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012390:	78fb      	ldrb	r3, [r7, #3]
 8012392:	f003 0302 	and.w	r3, r3, #2
 8012396:	2b00      	cmp	r3, #0
 8012398:	d001      	beq.n	801239e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801239a:	2301      	movs	r3, #1
 801239c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801239e:	7ffb      	ldrb	r3, [r7, #31]
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	b2db      	uxtb	r3, r3
 80123a4:	f003 0304 	and.w	r3, r3, #4
 80123a8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80123aa:	7dfb      	ldrb	r3, [r7, #23]
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80123b2:	4619      	mov	r1, r3
 80123b4:	2036      	movs	r0, #54	@ 0x36
 80123b6:	f7fa fa79 	bl	800c8ac <pbuf_alloc>
 80123ba:	6138      	str	r0, [r7, #16]
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d109      	bne.n	80123d6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	8b5b      	ldrh	r3, [r3, #26]
 80123c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80123d0:	f04f 33ff 	mov.w	r3, #4294967295
 80123d4:	e095      	b.n	8012502 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80123d6:	693b      	ldr	r3, [r7, #16]
 80123d8:	895a      	ldrh	r2, [r3, #10]
 80123da:	7dfb      	ldrb	r3, [r7, #23]
 80123dc:	b29b      	uxth	r3, r3
 80123de:	429a      	cmp	r2, r3
 80123e0:	d206      	bcs.n	80123f0 <tcp_enqueue_flags+0xa0>
 80123e2:	4b4a      	ldr	r3, [pc, #296]	@ (801250c <tcp_enqueue_flags+0x1bc>)
 80123e4:	f240 4239 	movw	r2, #1081	@ 0x439
 80123e8:	494c      	ldr	r1, [pc, #304]	@ (801251c <tcp_enqueue_flags+0x1cc>)
 80123ea:	484a      	ldr	r0, [pc, #296]	@ (8012514 <tcp_enqueue_flags+0x1c4>)
 80123ec:	f7ee fe8e 	bl	800110c <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80123f4:	78fa      	ldrb	r2, [r7, #3]
 80123f6:	7ffb      	ldrb	r3, [r7, #31]
 80123f8:	9300      	str	r3, [sp, #0]
 80123fa:	460b      	mov	r3, r1
 80123fc:	6939      	ldr	r1, [r7, #16]
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f7ff f91a 	bl	8011638 <tcp_create_segment>
 8012404:	60f8      	str	r0, [r7, #12]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d109      	bne.n	8012420 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	8b5b      	ldrh	r3, [r3, #26]
 8012410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012414:	b29a      	uxth	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801241a:	f04f 33ff 	mov.w	r3, #4294967295
 801241e:	e070      	b.n	8012502 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	f003 0303 	and.w	r3, r3, #3
 8012428:	2b00      	cmp	r3, #0
 801242a:	d006      	beq.n	801243a <tcp_enqueue_flags+0xea>
 801242c:	4b37      	ldr	r3, [pc, #220]	@ (801250c <tcp_enqueue_flags+0x1bc>)
 801242e:	f240 4242 	movw	r2, #1090	@ 0x442
 8012432:	493b      	ldr	r1, [pc, #236]	@ (8012520 <tcp_enqueue_flags+0x1d0>)
 8012434:	4837      	ldr	r0, [pc, #220]	@ (8012514 <tcp_enqueue_flags+0x1c4>)
 8012436:	f7ee fe69 	bl	800110c <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	891b      	ldrh	r3, [r3, #8]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d006      	beq.n	8012450 <tcp_enqueue_flags+0x100>
 8012442:	4b32      	ldr	r3, [pc, #200]	@ (801250c <tcp_enqueue_flags+0x1bc>)
 8012444:	f240 4243 	movw	r2, #1091	@ 0x443
 8012448:	4936      	ldr	r1, [pc, #216]	@ (8012524 <tcp_enqueue_flags+0x1d4>)
 801244a:	4832      	ldr	r0, [pc, #200]	@ (8012514 <tcp_enqueue_flags+0x1c4>)
 801244c:	f7ee fe5e 	bl	800110c <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012454:	2b00      	cmp	r3, #0
 8012456:	d103      	bne.n	8012460 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	68fa      	ldr	r2, [r7, #12]
 801245c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801245e:	e00d      	b.n	801247c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012464:	61bb      	str	r3, [r7, #24]
 8012466:	e002      	b.n	801246e <tcp_enqueue_flags+0x11e>
 8012468:	69bb      	ldr	r3, [r7, #24]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	61bb      	str	r3, [r7, #24]
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d1f8      	bne.n	8012468 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	68fa      	ldr	r2, [r7, #12]
 801247a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012484:	78fb      	ldrb	r3, [r7, #3]
 8012486:	f003 0302 	and.w	r3, r3, #2
 801248a:	2b00      	cmp	r3, #0
 801248c:	d104      	bne.n	8012498 <tcp_enqueue_flags+0x148>
 801248e:	78fb      	ldrb	r3, [r7, #3]
 8012490:	f003 0301 	and.w	r3, r3, #1
 8012494:	2b00      	cmp	r3, #0
 8012496:	d004      	beq.n	80124a2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801249c:	1c5a      	adds	r2, r3, #1
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80124a2:	78fb      	ldrb	r3, [r7, #3]
 80124a4:	f003 0301 	and.w	r3, r3, #1
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d006      	beq.n	80124ba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	8b5b      	ldrh	r3, [r3, #26]
 80124b0:	f043 0320 	orr.w	r3, r3, #32
 80124b4:	b29a      	uxth	r2, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	4618      	mov	r0, r3
 80124c0:	f7fa fd66 	bl	800cf90 <pbuf_clen>
 80124c4:	4603      	mov	r3, r0
 80124c6:	461a      	mov	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80124ce:	4413      	add	r3, r2
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d00e      	beq.n	8012500 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d10a      	bne.n	8012500 <tcp_enqueue_flags+0x1b0>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d106      	bne.n	8012500 <tcp_enqueue_flags+0x1b0>
 80124f2:	4b06      	ldr	r3, [pc, #24]	@ (801250c <tcp_enqueue_flags+0x1bc>)
 80124f4:	f240 4265 	movw	r2, #1125	@ 0x465
 80124f8:	490b      	ldr	r1, [pc, #44]	@ (8012528 <tcp_enqueue_flags+0x1d8>)
 80124fa:	4806      	ldr	r0, [pc, #24]	@ (8012514 <tcp_enqueue_flags+0x1c4>)
 80124fc:	f7ee fe06 	bl	800110c <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012500:	2300      	movs	r3, #0
}
 8012502:	4618      	mov	r0, r3
 8012504:	3720      	adds	r7, #32
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	08019a6c 	.word	0x08019a6c
 8012510:	08019e90 	.word	0x08019e90
 8012514:	08019ac0 	.word	0x08019ac0
 8012518:	08019ee8 	.word	0x08019ee8
 801251c:	08019f08 	.word	0x08019f08
 8012520:	08019f44 	.word	0x08019f44
 8012524:	08019f5c 	.word	0x08019f5c
 8012528:	08019f88 	.word	0x08019f88

0801252c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801252c:	b5b0      	push	{r4, r5, r7, lr}
 801252e:	b08a      	sub	sp, #40	@ 0x28
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d106      	bne.n	8012548 <tcp_output+0x1c>
 801253a:	4b8a      	ldr	r3, [pc, #552]	@ (8012764 <tcp_output+0x238>)
 801253c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012540:	4989      	ldr	r1, [pc, #548]	@ (8012768 <tcp_output+0x23c>)
 8012542:	488a      	ldr	r0, [pc, #552]	@ (801276c <tcp_output+0x240>)
 8012544:	f7ee fde2 	bl	800110c <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	7d1b      	ldrb	r3, [r3, #20]
 801254c:	2b01      	cmp	r3, #1
 801254e:	d106      	bne.n	801255e <tcp_output+0x32>
 8012550:	4b84      	ldr	r3, [pc, #528]	@ (8012764 <tcp_output+0x238>)
 8012552:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012556:	4986      	ldr	r1, [pc, #536]	@ (8012770 <tcp_output+0x244>)
 8012558:	4884      	ldr	r0, [pc, #528]	@ (801276c <tcp_output+0x240>)
 801255a:	f7ee fdd7 	bl	800110c <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801255e:	4b85      	ldr	r3, [pc, #532]	@ (8012774 <tcp_output+0x248>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	687a      	ldr	r2, [r7, #4]
 8012564:	429a      	cmp	r2, r3
 8012566:	d101      	bne.n	801256c <tcp_output+0x40>
    return ERR_OK;
 8012568:	2300      	movs	r3, #0
 801256a:	e1ce      	b.n	801290a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012578:	4293      	cmp	r3, r2
 801257a:	bf28      	it	cs
 801257c:	4613      	movcs	r3, r2
 801257e:	b29b      	uxth	r3, r3
 8012580:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012586:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801258a:	2b00      	cmp	r3, #0
 801258c:	d10b      	bne.n	80125a6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	8b5b      	ldrh	r3, [r3, #26]
 8012592:	f003 0302 	and.w	r3, r3, #2
 8012596:	2b00      	cmp	r3, #0
 8012598:	f000 81aa 	beq.w	80128f0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 fdcb 	bl	8013138 <tcp_send_empty_ack>
 80125a2:	4603      	mov	r3, r0
 80125a4:	e1b1      	b.n	801290a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80125a6:	6879      	ldr	r1, [r7, #4]
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	3304      	adds	r3, #4
 80125ac:	461a      	mov	r2, r3
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7ff f826 	bl	8011600 <tcp_route>
 80125b4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d102      	bne.n	80125c2 <tcp_output+0x96>
    return ERR_RTE;
 80125bc:	f06f 0303 	mvn.w	r3, #3
 80125c0:	e1a3      	b.n	801290a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d003      	beq.n	80125d0 <tcp_output+0xa4>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d111      	bne.n	80125f4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d002      	beq.n	80125dc <tcp_output+0xb0>
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	3304      	adds	r3, #4
 80125da:	e000      	b.n	80125de <tcp_output+0xb2>
 80125dc:	2300      	movs	r3, #0
 80125de:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80125e0:	693b      	ldr	r3, [r7, #16]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d102      	bne.n	80125ec <tcp_output+0xc0>
      return ERR_RTE;
 80125e6:	f06f 0303 	mvn.w	r3, #3
 80125ea:	e18e      	b.n	801290a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80125f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125f6:	68db      	ldr	r3, [r3, #12]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7f9 f85e 	bl	800b6bc <lwip_htonl>
 8012600:	4602      	mov	r2, r0
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012606:	1ad3      	subs	r3, r2, r3
 8012608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801260a:	8912      	ldrh	r2, [r2, #8]
 801260c:	4413      	add	r3, r2
 801260e:	69ba      	ldr	r2, [r7, #24]
 8012610:	429a      	cmp	r2, r3
 8012612:	d227      	bcs.n	8012664 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801261a:	461a      	mov	r2, r3
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	4293      	cmp	r3, r2
 8012620:	d114      	bne.n	801264c <tcp_output+0x120>
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012626:	2b00      	cmp	r3, #0
 8012628:	d110      	bne.n	801264c <tcp_output+0x120>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012630:	2b00      	cmp	r3, #0
 8012632:	d10b      	bne.n	801264c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2200      	movs	r2, #0
 8012638:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2201      	movs	r2, #1
 8012640:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2200      	movs	r2, #0
 8012648:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	8b5b      	ldrh	r3, [r3, #26]
 8012650:	f003 0302 	and.w	r3, r3, #2
 8012654:	2b00      	cmp	r3, #0
 8012656:	f000 814d 	beq.w	80128f4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 fd6c 	bl	8013138 <tcp_send_empty_ack>
 8012660:	4603      	mov	r3, r0
 8012662:	e152      	b.n	801290a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012670:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012672:	6a3b      	ldr	r3, [r7, #32]
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 811c 	beq.w	80128b2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801267a:	e002      	b.n	8012682 <tcp_output+0x156>
 801267c:	6a3b      	ldr	r3, [r7, #32]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	623b      	str	r3, [r7, #32]
 8012682:	6a3b      	ldr	r3, [r7, #32]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d1f8      	bne.n	801267c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801268a:	e112      	b.n	80128b2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	899b      	ldrh	r3, [r3, #12]
 8012692:	b29b      	uxth	r3, r3
 8012694:	4618      	mov	r0, r3
 8012696:	f7f8 fffb 	bl	800b690 <lwip_htons>
 801269a:	4603      	mov	r3, r0
 801269c:	b2db      	uxtb	r3, r3
 801269e:	f003 0304 	and.w	r3, r3, #4
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d006      	beq.n	80126b4 <tcp_output+0x188>
 80126a6:	4b2f      	ldr	r3, [pc, #188]	@ (8012764 <tcp_output+0x238>)
 80126a8:	f240 5236 	movw	r2, #1334	@ 0x536
 80126ac:	4932      	ldr	r1, [pc, #200]	@ (8012778 <tcp_output+0x24c>)
 80126ae:	482f      	ldr	r0, [pc, #188]	@ (801276c <tcp_output+0x240>)
 80126b0:	f7ee fd2c 	bl	800110c <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d01f      	beq.n	80126fc <tcp_output+0x1d0>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	8b5b      	ldrh	r3, [r3, #26]
 80126c0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d119      	bne.n	80126fc <tcp_output+0x1d0>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d00b      	beq.n	80126e8 <tcp_output+0x1bc>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d110      	bne.n	80126fc <tcp_output+0x1d0>
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126de:	891a      	ldrh	r2, [r3, #8]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d209      	bcs.n	80126fc <tcp_output+0x1d0>
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d004      	beq.n	80126fc <tcp_output+0x1d0>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80126f8:	2b08      	cmp	r3, #8
 80126fa:	d901      	bls.n	8012700 <tcp_output+0x1d4>
 80126fc:	2301      	movs	r3, #1
 80126fe:	e000      	b.n	8012702 <tcp_output+0x1d6>
 8012700:	2300      	movs	r3, #0
 8012702:	2b00      	cmp	r3, #0
 8012704:	d106      	bne.n	8012714 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	8b5b      	ldrh	r3, [r3, #26]
 801270a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801270e:	2b00      	cmp	r3, #0
 8012710:	f000 80e4 	beq.w	80128dc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	7d1b      	ldrb	r3, [r3, #20]
 8012718:	2b02      	cmp	r3, #2
 801271a:	d00d      	beq.n	8012738 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	899b      	ldrh	r3, [r3, #12]
 8012722:	b29c      	uxth	r4, r3
 8012724:	2010      	movs	r0, #16
 8012726:	f7f8 ffb3 	bl	800b690 <lwip_htons>
 801272a:	4603      	mov	r3, r0
 801272c:	461a      	mov	r2, r3
 801272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	4322      	orrs	r2, r4
 8012734:	b292      	uxth	r2, r2
 8012736:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012738:	697a      	ldr	r2, [r7, #20]
 801273a:	6879      	ldr	r1, [r7, #4]
 801273c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801273e:	f000 f909 	bl	8012954 <tcp_output_segment>
 8012742:	4603      	mov	r3, r0
 8012744:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d016      	beq.n	801277c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	8b5b      	ldrh	r3, [r3, #26]
 8012752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012756:	b29a      	uxth	r2, r3
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	835a      	strh	r2, [r3, #26]
      return err;
 801275c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012760:	e0d3      	b.n	801290a <tcp_output+0x3de>
 8012762:	bf00      	nop
 8012764:	08019a6c 	.word	0x08019a6c
 8012768:	08019fb0 	.word	0x08019fb0
 801276c:	08019ac0 	.word	0x08019ac0
 8012770:	08019fc8 	.word	0x08019fc8
 8012774:	2000c5f0 	.word	0x2000c5f0
 8012778:	08019ff0 	.word	0x08019ff0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	7d1b      	ldrb	r3, [r3, #20]
 8012788:	2b02      	cmp	r3, #2
 801278a:	d006      	beq.n	801279a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	8b5b      	ldrh	r3, [r3, #26]
 8012790:	f023 0303 	bic.w	r3, r3, #3
 8012794:	b29a      	uxth	r2, r3
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801279c:	68db      	ldr	r3, [r3, #12]
 801279e:	685b      	ldr	r3, [r3, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7f8 ff8b 	bl	800b6bc <lwip_htonl>
 80127a6:	4604      	mov	r4, r0
 80127a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127aa:	891b      	ldrh	r3, [r3, #8]
 80127ac:	461d      	mov	r5, r3
 80127ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b0:	68db      	ldr	r3, [r3, #12]
 80127b2:	899b      	ldrh	r3, [r3, #12]
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7f8 ff6a 	bl	800b690 <lwip_htons>
 80127bc:	4603      	mov	r3, r0
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	f003 0303 	and.w	r3, r3, #3
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d001      	beq.n	80127cc <tcp_output+0x2a0>
 80127c8:	2301      	movs	r3, #1
 80127ca:	e000      	b.n	80127ce <tcp_output+0x2a2>
 80127cc:	2300      	movs	r3, #0
 80127ce:	442b      	add	r3, r5
 80127d0:	4423      	add	r3, r4
 80127d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	1ad3      	subs	r3, r2, r3
 80127dc:	2b00      	cmp	r3, #0
 80127de:	da02      	bge.n	80127e6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	68ba      	ldr	r2, [r7, #8]
 80127e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80127e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127e8:	891b      	ldrh	r3, [r3, #8]
 80127ea:	461c      	mov	r4, r3
 80127ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	899b      	ldrh	r3, [r3, #12]
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7f8 ff4b 	bl	800b690 <lwip_htons>
 80127fa:	4603      	mov	r3, r0
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	f003 0303 	and.w	r3, r3, #3
 8012802:	2b00      	cmp	r3, #0
 8012804:	d001      	beq.n	801280a <tcp_output+0x2de>
 8012806:	2301      	movs	r3, #1
 8012808:	e000      	b.n	801280c <tcp_output+0x2e0>
 801280a:	2300      	movs	r3, #0
 801280c:	4423      	add	r3, r4
 801280e:	2b00      	cmp	r3, #0
 8012810:	d049      	beq.n	80128a6 <tcp_output+0x37a>
      seg->next = NULL;
 8012812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012814:	2200      	movs	r2, #0
 8012816:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801281c:	2b00      	cmp	r3, #0
 801281e:	d105      	bne.n	801282c <tcp_output+0x300>
        pcb->unacked = seg;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012824:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012828:	623b      	str	r3, [r7, #32]
 801282a:	e03f      	b.n	80128ac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801282e:	68db      	ldr	r3, [r3, #12]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4618      	mov	r0, r3
 8012834:	f7f8 ff42 	bl	800b6bc <lwip_htonl>
 8012838:	4604      	mov	r4, r0
 801283a:	6a3b      	ldr	r3, [r7, #32]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	685b      	ldr	r3, [r3, #4]
 8012840:	4618      	mov	r0, r3
 8012842:	f7f8 ff3b 	bl	800b6bc <lwip_htonl>
 8012846:	4603      	mov	r3, r0
 8012848:	1ae3      	subs	r3, r4, r3
 801284a:	2b00      	cmp	r3, #0
 801284c:	da24      	bge.n	8012898 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	3370      	adds	r3, #112	@ 0x70
 8012852:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012854:	e002      	b.n	801285c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012856:	69fb      	ldr	r3, [r7, #28]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d011      	beq.n	8012888 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012864:	69fb      	ldr	r3, [r7, #28]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	685b      	ldr	r3, [r3, #4]
 801286c:	4618      	mov	r0, r3
 801286e:	f7f8 ff25 	bl	800b6bc <lwip_htonl>
 8012872:	4604      	mov	r4, r0
 8012874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	4618      	mov	r0, r3
 801287c:	f7f8 ff1e 	bl	800b6bc <lwip_htonl>
 8012880:	4603      	mov	r3, r0
 8012882:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012884:	2b00      	cmp	r3, #0
 8012886:	dbe6      	blt.n	8012856 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801288e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012890:	69fb      	ldr	r3, [r7, #28]
 8012892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012894:	601a      	str	r2, [r3, #0]
 8012896:	e009      	b.n	80128ac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012898:	6a3b      	ldr	r3, [r7, #32]
 801289a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801289c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801289e:	6a3b      	ldr	r3, [r7, #32]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	623b      	str	r3, [r7, #32]
 80128a4:	e002      	b.n	80128ac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80128a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80128a8:	f7fb ff1f 	bl	800e6ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128b0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80128b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d012      	beq.n	80128de <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80128b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	4618      	mov	r0, r3
 80128c0:	f7f8 fefc 	bl	800b6bc <lwip_htonl>
 80128c4:	4602      	mov	r2, r0
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128ca:	1ad3      	subs	r3, r2, r3
 80128cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128ce:	8912      	ldrh	r2, [r2, #8]
 80128d0:	4413      	add	r3, r2
  while (seg != NULL &&
 80128d2:	69ba      	ldr	r2, [r7, #24]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	f4bf aed9 	bcs.w	801268c <tcp_output+0x160>
 80128da:	e000      	b.n	80128de <tcp_output+0x3b2>
      break;
 80128dc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d108      	bne.n	80128f8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2200      	movs	r2, #0
 80128ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80128ee:	e004      	b.n	80128fa <tcp_output+0x3ce>
    goto output_done;
 80128f0:	bf00      	nop
 80128f2:	e002      	b.n	80128fa <tcp_output+0x3ce>
    goto output_done;
 80128f4:	bf00      	nop
 80128f6:	e000      	b.n	80128fa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80128f8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	8b5b      	ldrh	r3, [r3, #26]
 80128fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012902:	b29a      	uxth	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012908:	2300      	movs	r3, #0
}
 801290a:	4618      	mov	r0, r3
 801290c:	3728      	adds	r7, #40	@ 0x28
 801290e:	46bd      	mov	sp, r7
 8012910:	bdb0      	pop	{r4, r5, r7, pc}
 8012912:	bf00      	nop

08012914 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d106      	bne.n	8012930 <tcp_output_segment_busy+0x1c>
 8012922:	4b09      	ldr	r3, [pc, #36]	@ (8012948 <tcp_output_segment_busy+0x34>)
 8012924:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012928:	4908      	ldr	r1, [pc, #32]	@ (801294c <tcp_output_segment_busy+0x38>)
 801292a:	4809      	ldr	r0, [pc, #36]	@ (8012950 <tcp_output_segment_busy+0x3c>)
 801292c:	f7ee fbee 	bl	800110c <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	7b9b      	ldrb	r3, [r3, #14]
 8012936:	2b01      	cmp	r3, #1
 8012938:	d001      	beq.n	801293e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801293a:	2301      	movs	r3, #1
 801293c:	e000      	b.n	8012940 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801293e:	2300      	movs	r3, #0
}
 8012940:	4618      	mov	r0, r3
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}
 8012948:	08019a6c 	.word	0x08019a6c
 801294c:	0801a008 	.word	0x0801a008
 8012950:	08019ac0 	.word	0x08019ac0

08012954 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012954:	b5b0      	push	{r4, r5, r7, lr}
 8012956:	b08c      	sub	sp, #48	@ 0x30
 8012958:	af04      	add	r7, sp, #16
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d106      	bne.n	8012974 <tcp_output_segment+0x20>
 8012966:	4b64      	ldr	r3, [pc, #400]	@ (8012af8 <tcp_output_segment+0x1a4>)
 8012968:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801296c:	4963      	ldr	r1, [pc, #396]	@ (8012afc <tcp_output_segment+0x1a8>)
 801296e:	4864      	ldr	r0, [pc, #400]	@ (8012b00 <tcp_output_segment+0x1ac>)
 8012970:	f7ee fbcc 	bl	800110c <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d106      	bne.n	8012988 <tcp_output_segment+0x34>
 801297a:	4b5f      	ldr	r3, [pc, #380]	@ (8012af8 <tcp_output_segment+0x1a4>)
 801297c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012980:	4960      	ldr	r1, [pc, #384]	@ (8012b04 <tcp_output_segment+0x1b0>)
 8012982:	485f      	ldr	r0, [pc, #380]	@ (8012b00 <tcp_output_segment+0x1ac>)
 8012984:	f7ee fbc2 	bl	800110c <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d106      	bne.n	801299c <tcp_output_segment+0x48>
 801298e:	4b5a      	ldr	r3, [pc, #360]	@ (8012af8 <tcp_output_segment+0x1a4>)
 8012990:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012994:	495c      	ldr	r1, [pc, #368]	@ (8012b08 <tcp_output_segment+0x1b4>)
 8012996:	485a      	ldr	r0, [pc, #360]	@ (8012b00 <tcp_output_segment+0x1ac>)
 8012998:	f7ee fbb8 	bl	800110c <printf>

  if (tcp_output_segment_busy(seg)) {
 801299c:	68f8      	ldr	r0, [r7, #12]
 801299e:	f7ff ffb9 	bl	8012914 <tcp_output_segment_busy>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d001      	beq.n	80129ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80129a8:	2300      	movs	r3, #0
 80129aa:	e0a1      	b.n	8012af0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	68dc      	ldr	r4, [r3, #12]
 80129b4:	4610      	mov	r0, r2
 80129b6:	f7f8 fe81 	bl	800b6bc <lwip_htonl>
 80129ba:	4603      	mov	r3, r0
 80129bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	68dc      	ldr	r4, [r3, #12]
 80129c6:	4610      	mov	r0, r2
 80129c8:	f7f8 fe62 	bl	800b690 <lwip_htons>
 80129cc:	4603      	mov	r3, r0
 80129ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129d4:	68ba      	ldr	r2, [r7, #8]
 80129d6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80129d8:	441a      	add	r2, r3
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	68db      	ldr	r3, [r3, #12]
 80129e2:	3314      	adds	r3, #20
 80129e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	7a9b      	ldrb	r3, [r3, #10]
 80129ea:	f003 0301 	and.w	r3, r3, #1
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d015      	beq.n	8012a1e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	3304      	adds	r3, #4
 80129f6:	461a      	mov	r2, r3
 80129f8:	6879      	ldr	r1, [r7, #4]
 80129fa:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80129fe:	f7fc fa39 	bl	800ee74 <tcp_eff_send_mss_netif>
 8012a02:	4603      	mov	r3, r0
 8012a04:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012a06:	8b7b      	ldrh	r3, [r7, #26]
 8012a08:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7f8 fe55 	bl	800b6bc <lwip_htonl>
 8012a12:	4602      	mov	r2, r0
 8012a14:	69fb      	ldr	r3, [r7, #28]
 8012a16:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	da02      	bge.n	8012a2e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d10c      	bne.n	8012a50 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012a36:	4b35      	ldr	r3, [pc, #212]	@ (8012b0c <tcp_output_segment+0x1b8>)
 8012a38:	681a      	ldr	r2, [r3, #0]
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	68db      	ldr	r3, [r3, #12]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7f8 fe39 	bl	800b6bc <lwip_htonl>
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	68da      	ldr	r2, [r3, #12]
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	685b      	ldr	r3, [r3, #4]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	1ad3      	subs	r3, r2, r3
 8012a5c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	8959      	ldrh	r1, [r3, #10]
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	8b3a      	ldrh	r2, [r7, #24]
 8012a6a:	1a8a      	subs	r2, r1, r2
 8012a6c:	b292      	uxth	r2, r2
 8012a6e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	8919      	ldrh	r1, [r3, #8]
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	685b      	ldr	r3, [r3, #4]
 8012a7a:	8b3a      	ldrh	r2, [r7, #24]
 8012a7c:	1a8a      	subs	r2, r1, r2
 8012a7e:	b292      	uxth	r2, r2
 8012a80:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	68fa      	ldr	r2, [r7, #12]
 8012a88:	68d2      	ldr	r2, [r2, #12]
 8012a8a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	2200      	movs	r2, #0
 8012a92:	741a      	strb	r2, [r3, #16]
 8012a94:	2200      	movs	r2, #0
 8012a96:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	68da      	ldr	r2, [r3, #12]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	7a9b      	ldrb	r3, [r3, #10]
 8012aa0:	f003 0301 	and.w	r3, r3, #1
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d001      	beq.n	8012aac <tcp_output_segment+0x158>
 8012aa8:	2318      	movs	r3, #24
 8012aaa:	e000      	b.n	8012aae <tcp_output_segment+0x15a>
 8012aac:	2314      	movs	r3, #20
 8012aae:	4413      	add	r3, r2
 8012ab0:	69fa      	ldr	r2, [r7, #28]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d006      	beq.n	8012ac4 <tcp_output_segment+0x170>
 8012ab6:	4b10      	ldr	r3, [pc, #64]	@ (8012af8 <tcp_output_segment+0x1a4>)
 8012ab8:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012abc:	4914      	ldr	r1, [pc, #80]	@ (8012b10 <tcp_output_segment+0x1bc>)
 8012abe:	4810      	ldr	r0, [pc, #64]	@ (8012b00 <tcp_output_segment+0x1ac>)
 8012ac0:	f7ee fb24 	bl	800110c <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	6858      	ldr	r0, [r3, #4]
 8012ac8:	68b9      	ldr	r1, [r7, #8]
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	1d1c      	adds	r4, r3, #4
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	7add      	ldrb	r5, [r3, #11]
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	7a9b      	ldrb	r3, [r3, #10]
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	9202      	str	r2, [sp, #8]
 8012ada:	2206      	movs	r2, #6
 8012adc:	9201      	str	r2, [sp, #4]
 8012ade:	9300      	str	r3, [sp, #0]
 8012ae0:	462b      	mov	r3, r5
 8012ae2:	4622      	mov	r2, r4
 8012ae4:	f002 fc18 	bl	8015318 <ip4_output_if>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3720      	adds	r7, #32
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bdb0      	pop	{r4, r5, r7, pc}
 8012af8:	08019a6c 	.word	0x08019a6c
 8012afc:	0801a030 	.word	0x0801a030
 8012b00:	08019ac0 	.word	0x08019ac0
 8012b04:	0801a050 	.word	0x0801a050
 8012b08:	0801a070 	.word	0x0801a070
 8012b0c:	2000c5a4 	.word	0x2000c5a4
 8012b10:	0801a094 	.word	0x0801a094

08012b14 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012b14:	b5b0      	push	{r4, r5, r7, lr}
 8012b16:	b084      	sub	sp, #16
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d106      	bne.n	8012b30 <tcp_rexmit_rto_prepare+0x1c>
 8012b22:	4b31      	ldr	r3, [pc, #196]	@ (8012be8 <tcp_rexmit_rto_prepare+0xd4>)
 8012b24:	f240 6263 	movw	r2, #1635	@ 0x663
 8012b28:	4930      	ldr	r1, [pc, #192]	@ (8012bec <tcp_rexmit_rto_prepare+0xd8>)
 8012b2a:	4831      	ldr	r0, [pc, #196]	@ (8012bf0 <tcp_rexmit_rto_prepare+0xdc>)
 8012b2c:	f7ee faee 	bl	800110c <printf>

  if (pcb->unacked == NULL) {
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d102      	bne.n	8012b3e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012b38:	f06f 0305 	mvn.w	r3, #5
 8012b3c:	e050      	b.n	8012be0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b42:	60fb      	str	r3, [r7, #12]
 8012b44:	e00b      	b.n	8012b5e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012b46:	68f8      	ldr	r0, [r7, #12]
 8012b48:	f7ff fee4 	bl	8012914 <tcp_output_segment_busy>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d002      	beq.n	8012b58 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012b52:	f06f 0305 	mvn.w	r3, #5
 8012b56:	e043      	b.n	8012be0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	60fb      	str	r3, [r7, #12]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d1ef      	bne.n	8012b46 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012b66:	68f8      	ldr	r0, [r7, #12]
 8012b68:	f7ff fed4 	bl	8012914 <tcp_output_segment_busy>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d002      	beq.n	8012b78 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012b72:	f06f 0305 	mvn.w	r3, #5
 8012b76:	e033      	b.n	8012be0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	8b5b      	ldrh	r3, [r3, #26]
 8012b92:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7f8 fd8a 	bl	800b6bc <lwip_htonl>
 8012ba8:	4604      	mov	r4, r0
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	891b      	ldrh	r3, [r3, #8]
 8012bae:	461d      	mov	r5, r3
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	68db      	ldr	r3, [r3, #12]
 8012bb4:	899b      	ldrh	r3, [r3, #12]
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7f8 fd69 	bl	800b690 <lwip_htons>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	f003 0303 	and.w	r3, r3, #3
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d001      	beq.n	8012bce <tcp_rexmit_rto_prepare+0xba>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	e000      	b.n	8012bd0 <tcp_rexmit_rto_prepare+0xbc>
 8012bce:	2300      	movs	r3, #0
 8012bd0:	442b      	add	r3, r5
 8012bd2:	18e2      	adds	r2, r4, r3
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012bde:	2300      	movs	r3, #0
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	3710      	adds	r7, #16
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bdb0      	pop	{r4, r5, r7, pc}
 8012be8:	08019a6c 	.word	0x08019a6c
 8012bec:	0801a0a8 	.word	0x0801a0a8
 8012bf0:	08019ac0 	.word	0x08019ac0

08012bf4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d106      	bne.n	8012c10 <tcp_rexmit_rto_commit+0x1c>
 8012c02:	4b0d      	ldr	r3, [pc, #52]	@ (8012c38 <tcp_rexmit_rto_commit+0x44>)
 8012c04:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012c08:	490c      	ldr	r1, [pc, #48]	@ (8012c3c <tcp_rexmit_rto_commit+0x48>)
 8012c0a:	480d      	ldr	r0, [pc, #52]	@ (8012c40 <tcp_rexmit_rto_commit+0x4c>)
 8012c0c:	f7ee fa7e 	bl	800110c <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012c16:	2bff      	cmp	r3, #255	@ 0xff
 8012c18:	d007      	beq.n	8012c2a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012c20:	3301      	adds	r3, #1
 8012c22:	b2da      	uxtb	r2, r3
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f7ff fc7e 	bl	801252c <tcp_output>
}
 8012c30:	bf00      	nop
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	08019a6c 	.word	0x08019a6c
 8012c3c:	0801a0cc 	.word	0x0801a0cc
 8012c40:	08019ac0 	.word	0x08019ac0

08012c44 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d106      	bne.n	8012c60 <tcp_rexmit_rto+0x1c>
 8012c52:	4b0a      	ldr	r3, [pc, #40]	@ (8012c7c <tcp_rexmit_rto+0x38>)
 8012c54:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012c58:	4909      	ldr	r1, [pc, #36]	@ (8012c80 <tcp_rexmit_rto+0x3c>)
 8012c5a:	480a      	ldr	r0, [pc, #40]	@ (8012c84 <tcp_rexmit_rto+0x40>)
 8012c5c:	f7ee fa56 	bl	800110c <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f7ff ff57 	bl	8012b14 <tcp_rexmit_rto_prepare>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d102      	bne.n	8012c72 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f7ff ffc1 	bl	8012bf4 <tcp_rexmit_rto_commit>
  }
}
 8012c72:	bf00      	nop
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	08019a6c 	.word	0x08019a6c
 8012c80:	0801a0f0 	.word	0x0801a0f0
 8012c84:	08019ac0 	.word	0x08019ac0

08012c88 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012c88:	b590      	push	{r4, r7, lr}
 8012c8a:	b085      	sub	sp, #20
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d106      	bne.n	8012ca4 <tcp_rexmit+0x1c>
 8012c96:	4b2f      	ldr	r3, [pc, #188]	@ (8012d54 <tcp_rexmit+0xcc>)
 8012c98:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012c9c:	492e      	ldr	r1, [pc, #184]	@ (8012d58 <tcp_rexmit+0xd0>)
 8012c9e:	482f      	ldr	r0, [pc, #188]	@ (8012d5c <tcp_rexmit+0xd4>)
 8012ca0:	f7ee fa34 	bl	800110c <printf>

  if (pcb->unacked == NULL) {
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d102      	bne.n	8012cb2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012cac:	f06f 0305 	mvn.w	r3, #5
 8012cb0:	e04c      	b.n	8012d4c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cb6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012cb8:	68b8      	ldr	r0, [r7, #8]
 8012cba:	f7ff fe2b 	bl	8012914 <tcp_output_segment_busy>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d002      	beq.n	8012cca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012cc4:	f06f 0305 	mvn.w	r3, #5
 8012cc8:	e040      	b.n	8012d4c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	681a      	ldr	r2, [r3, #0]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	336c      	adds	r3, #108	@ 0x6c
 8012cd6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012cd8:	e002      	b.n	8012ce0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d011      	beq.n	8012d0c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	68db      	ldr	r3, [r3, #12]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7f8 fce3 	bl	800b6bc <lwip_htonl>
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7f8 fcdc 	bl	800b6bc <lwip_htonl>
 8012d04:	4603      	mov	r3, r0
 8012d06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	dbe6      	blt.n	8012cda <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	68ba      	ldr	r2, [r7, #8]
 8012d18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d103      	bne.n	8012d2a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2200      	movs	r2, #0
 8012d26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d30:	2bff      	cmp	r3, #255	@ 0xff
 8012d32:	d007      	beq.n	8012d44 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	b2da      	uxtb	r2, r3
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2200      	movs	r2, #0
 8012d48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012d4a:	2300      	movs	r3, #0
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3714      	adds	r7, #20
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd90      	pop	{r4, r7, pc}
 8012d54:	08019a6c 	.word	0x08019a6c
 8012d58:	0801a10c 	.word	0x0801a10c
 8012d5c:	08019ac0 	.word	0x08019ac0

08012d60 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d106      	bne.n	8012d7c <tcp_rexmit_fast+0x1c>
 8012d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8012e18 <tcp_rexmit_fast+0xb8>)
 8012d70:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012d74:	4929      	ldr	r1, [pc, #164]	@ (8012e1c <tcp_rexmit_fast+0xbc>)
 8012d76:	482a      	ldr	r0, [pc, #168]	@ (8012e20 <tcp_rexmit_fast+0xc0>)
 8012d78:	f7ee f9c8 	bl	800110c <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d045      	beq.n	8012e10 <tcp_rexmit_fast+0xb0>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	8b5b      	ldrh	r3, [r3, #26]
 8012d88:	f003 0304 	and.w	r3, r3, #4
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d13f      	bne.n	8012e10 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f7ff ff79 	bl	8012c88 <tcp_rexmit>
 8012d96:	4603      	mov	r3, r0
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d139      	bne.n	8012e10 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012da8:	4293      	cmp	r3, r2
 8012daa:	bf28      	it	cs
 8012dac:	4613      	movcs	r3, r2
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	da00      	bge.n	8012db6 <tcp_rexmit_fast+0x56>
 8012db4:	3301      	adds	r3, #1
 8012db6:	105b      	asrs	r3, r3, #1
 8012db8:	b29a      	uxth	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012dcc:	005b      	lsls	r3, r3, #1
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d206      	bcs.n	8012de0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012dd6:	005b      	lsls	r3, r3, #1
 8012dd8:	b29a      	uxth	r2, r3
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012dea:	4619      	mov	r1, r3
 8012dec:	0049      	lsls	r1, r1, #1
 8012dee:	440b      	add	r3, r1
 8012df0:	b29b      	uxth	r3, r3
 8012df2:	4413      	add	r3, r2
 8012df4:	b29a      	uxth	r2, r3
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	8b5b      	ldrh	r3, [r3, #26]
 8012e00:	f043 0304 	orr.w	r3, r3, #4
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012e10:	bf00      	nop
 8012e12:	3708      	adds	r7, #8
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}
 8012e18:	08019a6c 	.word	0x08019a6c
 8012e1c:	0801a124 	.word	0x0801a124
 8012e20:	08019ac0 	.word	0x08019ac0

08012e24 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b086      	sub	sp, #24
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	607b      	str	r3, [r7, #4]
 8012e2e:	460b      	mov	r3, r1
 8012e30:	817b      	strh	r3, [r7, #10]
 8012e32:	4613      	mov	r3, r2
 8012e34:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012e36:	897a      	ldrh	r2, [r7, #10]
 8012e38:	893b      	ldrh	r3, [r7, #8]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	b29b      	uxth	r3, r3
 8012e3e:	3314      	adds	r3, #20
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012e46:	4619      	mov	r1, r3
 8012e48:	2022      	movs	r0, #34	@ 0x22
 8012e4a:	f7f9 fd2f 	bl	800c8ac <pbuf_alloc>
 8012e4e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d04d      	beq.n	8012ef2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012e56:	897b      	ldrh	r3, [r7, #10]
 8012e58:	3313      	adds	r3, #19
 8012e5a:	697a      	ldr	r2, [r7, #20]
 8012e5c:	8952      	ldrh	r2, [r2, #10]
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	db06      	blt.n	8012e70 <tcp_output_alloc_header_common+0x4c>
 8012e62:	4b26      	ldr	r3, [pc, #152]	@ (8012efc <tcp_output_alloc_header_common+0xd8>)
 8012e64:	f240 7223 	movw	r2, #1827	@ 0x723
 8012e68:	4925      	ldr	r1, [pc, #148]	@ (8012f00 <tcp_output_alloc_header_common+0xdc>)
 8012e6a:	4826      	ldr	r0, [pc, #152]	@ (8012f04 <tcp_output_alloc_header_common+0xe0>)
 8012e6c:	f7ee f94e 	bl	800110c <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012e76:	8c3b      	ldrh	r3, [r7, #32]
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f7f8 fc09 	bl	800b690 <lwip_htons>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	461a      	mov	r2, r3
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012e86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7f8 fc01 	bl	800b690 <lwip_htons>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	461a      	mov	r2, r3
 8012e92:	693b      	ldr	r3, [r7, #16]
 8012e94:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	687a      	ldr	r2, [r7, #4]
 8012e9a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	f7f8 fc0d 	bl	800b6bc <lwip_htonl>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012ea8:	897b      	ldrh	r3, [r7, #10]
 8012eaa:	089b      	lsrs	r3, r3, #2
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	3305      	adds	r3, #5
 8012eb0:	b29b      	uxth	r3, r3
 8012eb2:	031b      	lsls	r3, r3, #12
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	4313      	orrs	r3, r2
 8012ebe:	b29b      	uxth	r3, r3
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7f8 fbe5 	bl	800b690 <lwip_htons>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	461a      	mov	r2, r3
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012ece:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7f8 fbdd 	bl	800b690 <lwip_htons>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	461a      	mov	r2, r3
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	741a      	strb	r2, [r3, #16]
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	2200      	movs	r2, #0
 8012eec:	749a      	strb	r2, [r3, #18]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012ef2:	697b      	ldr	r3, [r7, #20]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3718      	adds	r7, #24
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	08019a6c 	.word	0x08019a6c
 8012f00:	0801a144 	.word	0x0801a144
 8012f04:	08019ac0 	.word	0x08019ac0

08012f08 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012f08:	b5b0      	push	{r4, r5, r7, lr}
 8012f0a:	b08a      	sub	sp, #40	@ 0x28
 8012f0c:	af04      	add	r7, sp, #16
 8012f0e:	60f8      	str	r0, [r7, #12]
 8012f10:	607b      	str	r3, [r7, #4]
 8012f12:	460b      	mov	r3, r1
 8012f14:	817b      	strh	r3, [r7, #10]
 8012f16:	4613      	mov	r3, r2
 8012f18:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d106      	bne.n	8012f2e <tcp_output_alloc_header+0x26>
 8012f20:	4b15      	ldr	r3, [pc, #84]	@ (8012f78 <tcp_output_alloc_header+0x70>)
 8012f22:	f240 7242 	movw	r2, #1858	@ 0x742
 8012f26:	4915      	ldr	r1, [pc, #84]	@ (8012f7c <tcp_output_alloc_header+0x74>)
 8012f28:	4815      	ldr	r0, [pc, #84]	@ (8012f80 <tcp_output_alloc_header+0x78>)
 8012f2a:	f7ee f8ef 	bl	800110c <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	8adb      	ldrh	r3, [r3, #22]
 8012f36:	68fa      	ldr	r2, [r7, #12]
 8012f38:	8b12      	ldrh	r2, [r2, #24]
 8012f3a:	68f9      	ldr	r1, [r7, #12]
 8012f3c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012f3e:	893d      	ldrh	r5, [r7, #8]
 8012f40:	897c      	ldrh	r4, [r7, #10]
 8012f42:	9103      	str	r1, [sp, #12]
 8012f44:	2110      	movs	r1, #16
 8012f46:	9102      	str	r1, [sp, #8]
 8012f48:	9201      	str	r2, [sp, #4]
 8012f4a:	9300      	str	r3, [sp, #0]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	462a      	mov	r2, r5
 8012f50:	4621      	mov	r1, r4
 8012f52:	f7ff ff67 	bl	8012e24 <tcp_output_alloc_header_common>
 8012f56:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d006      	beq.n	8012f6c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f62:	68fa      	ldr	r2, [r7, #12]
 8012f64:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012f66:	441a      	add	r2, r3
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012f6c:	697b      	ldr	r3, [r7, #20]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3718      	adds	r7, #24
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bdb0      	pop	{r4, r5, r7, pc}
 8012f76:	bf00      	nop
 8012f78:	08019a6c 	.word	0x08019a6c
 8012f7c:	0801a174 	.word	0x0801a174
 8012f80:	08019ac0 	.word	0x08019ac0

08012f84 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b088      	sub	sp, #32
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	60f8      	str	r0, [r7, #12]
 8012f8c:	60b9      	str	r1, [r7, #8]
 8012f8e:	4611      	mov	r1, r2
 8012f90:	461a      	mov	r2, r3
 8012f92:	460b      	mov	r3, r1
 8012f94:	71fb      	strb	r3, [r7, #7]
 8012f96:	4613      	mov	r3, r2
 8012f98:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d106      	bne.n	8012fb2 <tcp_output_fill_options+0x2e>
 8012fa4:	4b12      	ldr	r3, [pc, #72]	@ (8012ff0 <tcp_output_fill_options+0x6c>)
 8012fa6:	f240 7256 	movw	r2, #1878	@ 0x756
 8012faa:	4912      	ldr	r1, [pc, #72]	@ (8012ff4 <tcp_output_fill_options+0x70>)
 8012fac:	4812      	ldr	r0, [pc, #72]	@ (8012ff8 <tcp_output_fill_options+0x74>)
 8012fae:	f7ee f8ad 	bl	800110c <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012fb8:	69bb      	ldr	r3, [r7, #24]
 8012fba:	3314      	adds	r3, #20
 8012fbc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012fbe:	8bfb      	ldrh	r3, [r7, #30]
 8012fc0:	009b      	lsls	r3, r3, #2
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	79fb      	ldrb	r3, [r7, #7]
 8012fc6:	009b      	lsls	r3, r3, #2
 8012fc8:	f003 0304 	and.w	r3, r3, #4
 8012fcc:	4413      	add	r3, r2
 8012fce:	3314      	adds	r3, #20
 8012fd0:	69ba      	ldr	r2, [r7, #24]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	697a      	ldr	r2, [r7, #20]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d006      	beq.n	8012fe8 <tcp_output_fill_options+0x64>
 8012fda:	4b05      	ldr	r3, [pc, #20]	@ (8012ff0 <tcp_output_fill_options+0x6c>)
 8012fdc:	f240 7275 	movw	r2, #1909	@ 0x775
 8012fe0:	4906      	ldr	r1, [pc, #24]	@ (8012ffc <tcp_output_fill_options+0x78>)
 8012fe2:	4805      	ldr	r0, [pc, #20]	@ (8012ff8 <tcp_output_fill_options+0x74>)
 8012fe4:	f7ee f892 	bl	800110c <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012fe8:	bf00      	nop
 8012fea:	3720      	adds	r7, #32
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	08019a6c 	.word	0x08019a6c
 8012ff4:	0801a19c 	.word	0x0801a19c
 8012ff8:	08019ac0 	.word	0x08019ac0
 8012ffc:	0801a094 	.word	0x0801a094

08013000 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b08a      	sub	sp, #40	@ 0x28
 8013004:	af04      	add	r7, sp, #16
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d106      	bne.n	8013022 <tcp_output_control_segment+0x22>
 8013014:	4b1c      	ldr	r3, [pc, #112]	@ (8013088 <tcp_output_control_segment+0x88>)
 8013016:	f240 7287 	movw	r2, #1927	@ 0x787
 801301a:	491c      	ldr	r1, [pc, #112]	@ (801308c <tcp_output_control_segment+0x8c>)
 801301c:	481c      	ldr	r0, [pc, #112]	@ (8013090 <tcp_output_control_segment+0x90>)
 801301e:	f7ee f875 	bl	800110c <printf>

  netif = tcp_route(pcb, src, dst);
 8013022:	683a      	ldr	r2, [r7, #0]
 8013024:	6879      	ldr	r1, [r7, #4]
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	f7fe faea 	bl	8011600 <tcp_route>
 801302c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d102      	bne.n	801303a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013034:	23fc      	movs	r3, #252	@ 0xfc
 8013036:	75fb      	strb	r3, [r7, #23]
 8013038:	e01c      	b.n	8013074 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d006      	beq.n	801304e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	7adb      	ldrb	r3, [r3, #11]
 8013044:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	7a9b      	ldrb	r3, [r3, #10]
 801304a:	757b      	strb	r3, [r7, #21]
 801304c:	e003      	b.n	8013056 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801304e:	23ff      	movs	r3, #255	@ 0xff
 8013050:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013052:	2300      	movs	r3, #0
 8013054:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013056:	7dba      	ldrb	r2, [r7, #22]
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	9302      	str	r3, [sp, #8]
 801305c:	2306      	movs	r3, #6
 801305e:	9301      	str	r3, [sp, #4]
 8013060:	7d7b      	ldrb	r3, [r7, #21]
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	4613      	mov	r3, r2
 8013066:	683a      	ldr	r2, [r7, #0]
 8013068:	6879      	ldr	r1, [r7, #4]
 801306a:	68b8      	ldr	r0, [r7, #8]
 801306c:	f002 f954 	bl	8015318 <ip4_output_if>
 8013070:	4603      	mov	r3, r0
 8013072:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013074:	68b8      	ldr	r0, [r7, #8]
 8013076:	f7f9 fefd 	bl	800ce74 <pbuf_free>
  return err;
 801307a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801307e:	4618      	mov	r0, r3
 8013080:	3718      	adds	r7, #24
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	08019a6c 	.word	0x08019a6c
 801308c:	0801a1c4 	.word	0x0801a1c4
 8013090:	08019ac0 	.word	0x08019ac0

08013094 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013094:	b590      	push	{r4, r7, lr}
 8013096:	b08b      	sub	sp, #44	@ 0x2c
 8013098:	af04      	add	r7, sp, #16
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	607a      	str	r2, [r7, #4]
 80130a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d106      	bne.n	80130b6 <tcp_rst+0x22>
 80130a8:	4b1f      	ldr	r3, [pc, #124]	@ (8013128 <tcp_rst+0x94>)
 80130aa:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80130ae:	491f      	ldr	r1, [pc, #124]	@ (801312c <tcp_rst+0x98>)
 80130b0:	481f      	ldr	r0, [pc, #124]	@ (8013130 <tcp_rst+0x9c>)
 80130b2:	f7ee f82b 	bl	800110c <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80130b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d106      	bne.n	80130ca <tcp_rst+0x36>
 80130bc:	4b1a      	ldr	r3, [pc, #104]	@ (8013128 <tcp_rst+0x94>)
 80130be:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80130c2:	491c      	ldr	r1, [pc, #112]	@ (8013134 <tcp_rst+0xa0>)
 80130c4:	481a      	ldr	r0, [pc, #104]	@ (8013130 <tcp_rst+0x9c>)
 80130c6:	f7ee f821 	bl	800110c <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80130ca:	2300      	movs	r3, #0
 80130cc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80130ce:	f246 0308 	movw	r3, #24584	@ 0x6008
 80130d2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80130d4:	7dfb      	ldrb	r3, [r7, #23]
 80130d6:	b29c      	uxth	r4, r3
 80130d8:	68b8      	ldr	r0, [r7, #8]
 80130da:	f7f8 faef 	bl	800b6bc <lwip_htonl>
 80130de:	4602      	mov	r2, r0
 80130e0:	8abb      	ldrh	r3, [r7, #20]
 80130e2:	9303      	str	r3, [sp, #12]
 80130e4:	2314      	movs	r3, #20
 80130e6:	9302      	str	r3, [sp, #8]
 80130e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80130ea:	9301      	str	r3, [sp, #4]
 80130ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80130ee:	9300      	str	r3, [sp, #0]
 80130f0:	4613      	mov	r3, r2
 80130f2:	2200      	movs	r2, #0
 80130f4:	4621      	mov	r1, r4
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f7ff fe94 	bl	8012e24 <tcp_output_alloc_header_common>
 80130fc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d00c      	beq.n	801311e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013104:	7dfb      	ldrb	r3, [r7, #23]
 8013106:	2200      	movs	r2, #0
 8013108:	6939      	ldr	r1, [r7, #16]
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	f7ff ff3a 	bl	8012f84 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013112:	683a      	ldr	r2, [r7, #0]
 8013114:	6939      	ldr	r1, [r7, #16]
 8013116:	68f8      	ldr	r0, [r7, #12]
 8013118:	f7ff ff72 	bl	8013000 <tcp_output_control_segment>
 801311c:	e000      	b.n	8013120 <tcp_rst+0x8c>
    return;
 801311e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013120:	371c      	adds	r7, #28
 8013122:	46bd      	mov	sp, r7
 8013124:	bd90      	pop	{r4, r7, pc}
 8013126:	bf00      	nop
 8013128:	08019a6c 	.word	0x08019a6c
 801312c:	0801a1f0 	.word	0x0801a1f0
 8013130:	08019ac0 	.word	0x08019ac0
 8013134:	0801a20c 	.word	0x0801a20c

08013138 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013138:	b590      	push	{r4, r7, lr}
 801313a:	b087      	sub	sp, #28
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013140:	2300      	movs	r3, #0
 8013142:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013144:	2300      	movs	r3, #0
 8013146:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d106      	bne.n	801315c <tcp_send_empty_ack+0x24>
 801314e:	4b28      	ldr	r3, [pc, #160]	@ (80131f0 <tcp_send_empty_ack+0xb8>)
 8013150:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013154:	4927      	ldr	r1, [pc, #156]	@ (80131f4 <tcp_send_empty_ack+0xbc>)
 8013156:	4828      	ldr	r0, [pc, #160]	@ (80131f8 <tcp_send_empty_ack+0xc0>)
 8013158:	f7ed ffd8 	bl	800110c <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801315c:	7dfb      	ldrb	r3, [r7, #23]
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	b2db      	uxtb	r3, r3
 8013162:	f003 0304 	and.w	r3, r3, #4
 8013166:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013168:	7d7b      	ldrb	r3, [r7, #21]
 801316a:	b29c      	uxth	r4, r3
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013170:	4618      	mov	r0, r3
 8013172:	f7f8 faa3 	bl	800b6bc <lwip_htonl>
 8013176:	4603      	mov	r3, r0
 8013178:	2200      	movs	r2, #0
 801317a:	4621      	mov	r1, r4
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f7ff fec3 	bl	8012f08 <tcp_output_alloc_header>
 8013182:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d109      	bne.n	801319e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	8b5b      	ldrh	r3, [r3, #26]
 801318e:	f043 0303 	orr.w	r3, r3, #3
 8013192:	b29a      	uxth	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013198:	f06f 0301 	mvn.w	r3, #1
 801319c:	e023      	b.n	80131e6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801319e:	7dbb      	ldrb	r3, [r7, #22]
 80131a0:	7dfa      	ldrb	r2, [r7, #23]
 80131a2:	6939      	ldr	r1, [r7, #16]
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7ff feed 	bl	8012f84 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	3304      	adds	r3, #4
 80131b0:	6939      	ldr	r1, [r7, #16]
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f7ff ff24 	bl	8013000 <tcp_output_control_segment>
 80131b8:	4603      	mov	r3, r0
 80131ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80131bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d007      	beq.n	80131d4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	8b5b      	ldrh	r3, [r3, #26]
 80131c8:	f043 0303 	orr.w	r3, r3, #3
 80131cc:	b29a      	uxth	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	835a      	strh	r2, [r3, #26]
 80131d2:	e006      	b.n	80131e2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	8b5b      	ldrh	r3, [r3, #26]
 80131d8:	f023 0303 	bic.w	r3, r3, #3
 80131dc:	b29a      	uxth	r2, r3
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80131e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	371c      	adds	r7, #28
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd90      	pop	{r4, r7, pc}
 80131ee:	bf00      	nop
 80131f0:	08019a6c 	.word	0x08019a6c
 80131f4:	0801a228 	.word	0x0801a228
 80131f8:	08019ac0 	.word	0x08019ac0

080131fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80131fc:	b590      	push	{r4, r7, lr}
 80131fe:	b087      	sub	sp, #28
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013204:	2300      	movs	r3, #0
 8013206:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d106      	bne.n	801321c <tcp_keepalive+0x20>
 801320e:	4b18      	ldr	r3, [pc, #96]	@ (8013270 <tcp_keepalive+0x74>)
 8013210:	f640 0224 	movw	r2, #2084	@ 0x824
 8013214:	4917      	ldr	r1, [pc, #92]	@ (8013274 <tcp_keepalive+0x78>)
 8013216:	4818      	ldr	r0, [pc, #96]	@ (8013278 <tcp_keepalive+0x7c>)
 8013218:	f7ed ff78 	bl	800110c <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801321c:	7dfb      	ldrb	r3, [r7, #23]
 801321e:	b29c      	uxth	r4, r3
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013224:	3b01      	subs	r3, #1
 8013226:	4618      	mov	r0, r3
 8013228:	f7f8 fa48 	bl	800b6bc <lwip_htonl>
 801322c:	4603      	mov	r3, r0
 801322e:	2200      	movs	r2, #0
 8013230:	4621      	mov	r1, r4
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f7ff fe68 	bl	8012f08 <tcp_output_alloc_header>
 8013238:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d102      	bne.n	8013246 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013240:	f04f 33ff 	mov.w	r3, #4294967295
 8013244:	e010      	b.n	8013268 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013246:	7dfb      	ldrb	r3, [r7, #23]
 8013248:	2200      	movs	r2, #0
 801324a:	6939      	ldr	r1, [r7, #16]
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f7ff fe99 	bl	8012f84 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013252:	687a      	ldr	r2, [r7, #4]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	3304      	adds	r3, #4
 8013258:	6939      	ldr	r1, [r7, #16]
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7ff fed0 	bl	8013000 <tcp_output_control_segment>
 8013260:	4603      	mov	r3, r0
 8013262:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013268:	4618      	mov	r0, r3
 801326a:	371c      	adds	r7, #28
 801326c:	46bd      	mov	sp, r7
 801326e:	bd90      	pop	{r4, r7, pc}
 8013270:	08019a6c 	.word	0x08019a6c
 8013274:	0801a248 	.word	0x0801a248
 8013278:	08019ac0 	.word	0x08019ac0

0801327c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801327c:	b590      	push	{r4, r7, lr}
 801327e:	b08b      	sub	sp, #44	@ 0x2c
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013284:	2300      	movs	r3, #0
 8013286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d106      	bne.n	801329e <tcp_zero_window_probe+0x22>
 8013290:	4b4c      	ldr	r3, [pc, #304]	@ (80133c4 <tcp_zero_window_probe+0x148>)
 8013292:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013296:	494c      	ldr	r1, [pc, #304]	@ (80133c8 <tcp_zero_window_probe+0x14c>)
 8013298:	484c      	ldr	r0, [pc, #304]	@ (80133cc <tcp_zero_window_probe+0x150>)
 801329a:	f7ed ff37 	bl	800110c <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80132a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80132a4:	6a3b      	ldr	r3, [r7, #32]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d101      	bne.n	80132ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80132aa:	2300      	movs	r3, #0
 80132ac:	e086      	b.n	80133bc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80132b4:	2bff      	cmp	r3, #255	@ 0xff
 80132b6:	d007      	beq.n	80132c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80132be:	3301      	adds	r3, #1
 80132c0:	b2da      	uxtb	r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80132c8:	6a3b      	ldr	r3, [r7, #32]
 80132ca:	68db      	ldr	r3, [r3, #12]
 80132cc:	899b      	ldrh	r3, [r3, #12]
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7f8 f9dd 	bl	800b690 <lwip_htons>
 80132d6:	4603      	mov	r3, r0
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d005      	beq.n	80132ee <tcp_zero_window_probe+0x72>
 80132e2:	6a3b      	ldr	r3, [r7, #32]
 80132e4:	891b      	ldrh	r3, [r3, #8]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d101      	bne.n	80132ee <tcp_zero_window_probe+0x72>
 80132ea:	2301      	movs	r3, #1
 80132ec:	e000      	b.n	80132f0 <tcp_zero_window_probe+0x74>
 80132ee:	2300      	movs	r3, #0
 80132f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80132f2:	7ffb      	ldrb	r3, [r7, #31]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	bf0c      	ite	eq
 80132f8:	2301      	moveq	r3, #1
 80132fa:	2300      	movne	r3, #0
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013304:	b299      	uxth	r1, r3
 8013306:	6a3b      	ldr	r3, [r7, #32]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	8bba      	ldrh	r2, [r7, #28]
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f7ff fdfa 	bl	8012f08 <tcp_output_alloc_header>
 8013314:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d102      	bne.n	8013322 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801331c:	f04f 33ff 	mov.w	r3, #4294967295
 8013320:	e04c      	b.n	80133bc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013328:	7ffb      	ldrb	r3, [r7, #31]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d011      	beq.n	8013352 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	899b      	ldrh	r3, [r3, #12]
 8013332:	b29b      	uxth	r3, r3
 8013334:	b21b      	sxth	r3, r3
 8013336:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801333a:	b21c      	sxth	r4, r3
 801333c:	2011      	movs	r0, #17
 801333e:	f7f8 f9a7 	bl	800b690 <lwip_htons>
 8013342:	4603      	mov	r3, r0
 8013344:	b21b      	sxth	r3, r3
 8013346:	4323      	orrs	r3, r4
 8013348:	b21b      	sxth	r3, r3
 801334a:	b29a      	uxth	r2, r3
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	819a      	strh	r2, [r3, #12]
 8013350:	e010      	b.n	8013374 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013352:	69bb      	ldr	r3, [r7, #24]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	3314      	adds	r3, #20
 8013358:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801335a:	6a3b      	ldr	r3, [r7, #32]
 801335c:	6858      	ldr	r0, [r3, #4]
 801335e:	6a3b      	ldr	r3, [r7, #32]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	891a      	ldrh	r2, [r3, #8]
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	891b      	ldrh	r3, [r3, #8]
 8013368:	1ad3      	subs	r3, r2, r3
 801336a:	b29b      	uxth	r3, r3
 801336c:	2201      	movs	r2, #1
 801336e:	6939      	ldr	r1, [r7, #16]
 8013370:	f7f9 ff76 	bl	800d260 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013374:	6a3b      	ldr	r3, [r7, #32]
 8013376:	68db      	ldr	r3, [r3, #12]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	4618      	mov	r0, r3
 801337c:	f7f8 f99e 	bl	800b6bc <lwip_htonl>
 8013380:	4603      	mov	r3, r0
 8013382:	3301      	adds	r3, #1
 8013384:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	1ad3      	subs	r3, r2, r3
 801338e:	2b00      	cmp	r3, #0
 8013390:	da02      	bge.n	8013398 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	68fa      	ldr	r2, [r7, #12]
 8013396:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801339c:	2200      	movs	r2, #0
 801339e:	69b9      	ldr	r1, [r7, #24]
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f7ff fdef 	bl	8012f84 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	3304      	adds	r3, #4
 80133ac:	69b9      	ldr	r1, [r7, #24]
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7ff fe26 	bl	8013000 <tcp_output_control_segment>
 80133b4:	4603      	mov	r3, r0
 80133b6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80133b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	372c      	adds	r7, #44	@ 0x2c
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd90      	pop	{r4, r7, pc}
 80133c4:	08019a6c 	.word	0x08019a6c
 80133c8:	0801a264 	.word	0x0801a264
 80133cc:	08019ac0 	.word	0x08019ac0

080133d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80133d8:	f7fa f830 	bl	800d43c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80133dc:	4b0a      	ldr	r3, [pc, #40]	@ (8013408 <tcpip_tcp_timer+0x38>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d103      	bne.n	80133ec <tcpip_tcp_timer+0x1c>
 80133e4:	4b09      	ldr	r3, [pc, #36]	@ (801340c <tcpip_tcp_timer+0x3c>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d005      	beq.n	80133f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80133ec:	2200      	movs	r2, #0
 80133ee:	4908      	ldr	r1, [pc, #32]	@ (8013410 <tcpip_tcp_timer+0x40>)
 80133f0:	20fa      	movs	r0, #250	@ 0xfa
 80133f2:	f000 f8f3 	bl	80135dc <sys_timeout>
 80133f6:	e003      	b.n	8013400 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80133f8:	4b06      	ldr	r3, [pc, #24]	@ (8013414 <tcpip_tcp_timer+0x44>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	601a      	str	r2, [r3, #0]
  }
}
 80133fe:	bf00      	nop
 8013400:	bf00      	nop
 8013402:	3708      	adds	r7, #8
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}
 8013408:	2000c5b0 	.word	0x2000c5b0
 801340c:	2000c5b4 	.word	0x2000c5b4
 8013410:	080133d1 	.word	0x080133d1
 8013414:	2000c5fc 	.word	0x2000c5fc

08013418 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801341c:	4b0a      	ldr	r3, [pc, #40]	@ (8013448 <tcp_timer_needed+0x30>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d10f      	bne.n	8013444 <tcp_timer_needed+0x2c>
 8013424:	4b09      	ldr	r3, [pc, #36]	@ (801344c <tcp_timer_needed+0x34>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d103      	bne.n	8013434 <tcp_timer_needed+0x1c>
 801342c:	4b08      	ldr	r3, [pc, #32]	@ (8013450 <tcp_timer_needed+0x38>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d007      	beq.n	8013444 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013434:	4b04      	ldr	r3, [pc, #16]	@ (8013448 <tcp_timer_needed+0x30>)
 8013436:	2201      	movs	r2, #1
 8013438:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801343a:	2200      	movs	r2, #0
 801343c:	4905      	ldr	r1, [pc, #20]	@ (8013454 <tcp_timer_needed+0x3c>)
 801343e:	20fa      	movs	r0, #250	@ 0xfa
 8013440:	f000 f8cc 	bl	80135dc <sys_timeout>
  }
}
 8013444:	bf00      	nop
 8013446:	bd80      	pop	{r7, pc}
 8013448:	2000c5fc 	.word	0x2000c5fc
 801344c:	2000c5b0 	.word	0x2000c5b0
 8013450:	2000c5b4 	.word	0x2000c5b4
 8013454:	080133d1 	.word	0x080133d1

08013458 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b086      	sub	sp, #24
 801345c:	af00      	add	r7, sp, #0
 801345e:	60f8      	str	r0, [r7, #12]
 8013460:	60b9      	str	r1, [r7, #8]
 8013462:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013464:	200a      	movs	r0, #10
 8013466:	f7f8 fdeb 	bl	800c040 <memp_malloc>
 801346a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d109      	bne.n	8013486 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d151      	bne.n	801351c <sys_timeout_abs+0xc4>
 8013478:	4b2a      	ldr	r3, [pc, #168]	@ (8013524 <sys_timeout_abs+0xcc>)
 801347a:	22be      	movs	r2, #190	@ 0xbe
 801347c:	492a      	ldr	r1, [pc, #168]	@ (8013528 <sys_timeout_abs+0xd0>)
 801347e:	482b      	ldr	r0, [pc, #172]	@ (801352c <sys_timeout_abs+0xd4>)
 8013480:	f7ed fe44 	bl	800110c <printf>
    return;
 8013484:	e04a      	b.n	801351c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	2200      	movs	r2, #0
 801348a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	68fa      	ldr	r2, [r7, #12]
 801349c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801349e:	4b24      	ldr	r3, [pc, #144]	@ (8013530 <sys_timeout_abs+0xd8>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d103      	bne.n	80134ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80134a6:	4a22      	ldr	r2, [pc, #136]	@ (8013530 <sys_timeout_abs+0xd8>)
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	6013      	str	r3, [r2, #0]
    return;
 80134ac:	e037      	b.n	801351e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	685a      	ldr	r2, [r3, #4]
 80134b2:	4b1f      	ldr	r3, [pc, #124]	@ (8013530 <sys_timeout_abs+0xd8>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	685b      	ldr	r3, [r3, #4]
 80134b8:	1ad3      	subs	r3, r2, r3
 80134ba:	0fdb      	lsrs	r3, r3, #31
 80134bc:	f003 0301 	and.w	r3, r3, #1
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d007      	beq.n	80134d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80134c6:	4b1a      	ldr	r3, [pc, #104]	@ (8013530 <sys_timeout_abs+0xd8>)
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80134ce:	4a18      	ldr	r2, [pc, #96]	@ (8013530 <sys_timeout_abs+0xd8>)
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	6013      	str	r3, [r2, #0]
 80134d4:	e023      	b.n	801351e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80134d6:	4b16      	ldr	r3, [pc, #88]	@ (8013530 <sys_timeout_abs+0xd8>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	617b      	str	r3, [r7, #20]
 80134dc:	e01a      	b.n	8013514 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d00b      	beq.n	80134fe <sys_timeout_abs+0xa6>
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	685a      	ldr	r2, [r3, #4]
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	685b      	ldr	r3, [r3, #4]
 80134f0:	1ad3      	subs	r3, r2, r3
 80134f2:	0fdb      	lsrs	r3, r3, #31
 80134f4:	f003 0301 	and.w	r3, r3, #1
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d007      	beq.n	801350e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	681a      	ldr	r2, [r3, #0]
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	693a      	ldr	r2, [r7, #16]
 801350a:	601a      	str	r2, [r3, #0]
        break;
 801350c:	e007      	b.n	801351e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	617b      	str	r3, [r7, #20]
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d1e1      	bne.n	80134de <sys_timeout_abs+0x86>
 801351a:	e000      	b.n	801351e <sys_timeout_abs+0xc6>
    return;
 801351c:	bf00      	nop
      }
    }
  }
}
 801351e:	3718      	adds	r7, #24
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	0801a288 	.word	0x0801a288
 8013528:	0801a2bc 	.word	0x0801a2bc
 801352c:	0801a2fc 	.word	0x0801a2fc
 8013530:	2000c5f4 	.word	0x2000c5f4

08013534 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b086      	sub	sp, #24
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	4798      	blx	r3

  now = sys_now();
 8013546:	f7f2 fd81 	bl	800604c <sys_now>
 801354a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	4b0f      	ldr	r3, [pc, #60]	@ (8013590 <lwip_cyclic_timer+0x5c>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	4413      	add	r3, r2
 8013556:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013558:	68fa      	ldr	r2, [r7, #12]
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	1ad3      	subs	r3, r2, r3
 801355e:	0fdb      	lsrs	r3, r3, #31
 8013560:	f003 0301 	and.w	r3, r3, #1
 8013564:	b2db      	uxtb	r3, r3
 8013566:	2b00      	cmp	r3, #0
 8013568:	d009      	beq.n	801357e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	4413      	add	r3, r2
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	4907      	ldr	r1, [pc, #28]	@ (8013594 <lwip_cyclic_timer+0x60>)
 8013576:	4618      	mov	r0, r3
 8013578:	f7ff ff6e 	bl	8013458 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801357c:	e004      	b.n	8013588 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	4904      	ldr	r1, [pc, #16]	@ (8013594 <lwip_cyclic_timer+0x60>)
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	f7ff ff68 	bl	8013458 <sys_timeout_abs>
}
 8013588:	bf00      	nop
 801358a:	3718      	adds	r7, #24
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	2000c5f8 	.word	0x2000c5f8
 8013594:	08013535 	.word	0x08013535

08013598 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801359e:	2301      	movs	r3, #1
 80135a0:	607b      	str	r3, [r7, #4]
 80135a2:	e00e      	b.n	80135c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80135a4:	4a0b      	ldr	r2, [pc, #44]	@ (80135d4 <sys_timeouts_init+0x3c>)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	00db      	lsls	r3, r3, #3
 80135b0:	4a08      	ldr	r2, [pc, #32]	@ (80135d4 <sys_timeouts_init+0x3c>)
 80135b2:	4413      	add	r3, r2
 80135b4:	461a      	mov	r2, r3
 80135b6:	4908      	ldr	r1, [pc, #32]	@ (80135d8 <sys_timeouts_init+0x40>)
 80135b8:	f000 f810 	bl	80135dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	3301      	adds	r3, #1
 80135c0:	607b      	str	r3, [r7, #4]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2b02      	cmp	r3, #2
 80135c6:	d9ed      	bls.n	80135a4 <sys_timeouts_init+0xc>
  }
}
 80135c8:	bf00      	nop
 80135ca:	bf00      	nop
 80135cc:	3708      	adds	r7, #8
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	0801aeb8 	.word	0x0801aeb8
 80135d8:	08013535 	.word	0x08013535

080135dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135ee:	d306      	bcc.n	80135fe <sys_timeout+0x22>
 80135f0:	4b0a      	ldr	r3, [pc, #40]	@ (801361c <sys_timeout+0x40>)
 80135f2:	f240 1229 	movw	r2, #297	@ 0x129
 80135f6:	490a      	ldr	r1, [pc, #40]	@ (8013620 <sys_timeout+0x44>)
 80135f8:	480a      	ldr	r0, [pc, #40]	@ (8013624 <sys_timeout+0x48>)
 80135fa:	f7ed fd87 	bl	800110c <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80135fe:	f7f2 fd25 	bl	800604c <sys_now>
 8013602:	4602      	mov	r2, r0
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	4413      	add	r3, r2
 8013608:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	68b9      	ldr	r1, [r7, #8]
 801360e:	6978      	ldr	r0, [r7, #20]
 8013610:	f7ff ff22 	bl	8013458 <sys_timeout_abs>
#endif
}
 8013614:	bf00      	nop
 8013616:	3718      	adds	r7, #24
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	0801a288 	.word	0x0801a288
 8013620:	0801a324 	.word	0x0801a324
 8013624:	0801a2fc 	.word	0x0801a2fc

08013628 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801362e:	f7f2 fd0d 	bl	800604c <sys_now>
 8013632:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013634:	4b17      	ldr	r3, [pc, #92]	@ (8013694 <sys_check_timeouts+0x6c>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d022      	beq.n	8013686 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	685b      	ldr	r3, [r3, #4]
 8013644:	68fa      	ldr	r2, [r7, #12]
 8013646:	1ad3      	subs	r3, r2, r3
 8013648:	0fdb      	lsrs	r3, r3, #31
 801364a:	f003 0301 	and.w	r3, r3, #1
 801364e:	b2db      	uxtb	r3, r3
 8013650:	2b00      	cmp	r3, #0
 8013652:	d11a      	bne.n	801368a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	4a0e      	ldr	r2, [pc, #56]	@ (8013694 <sys_check_timeouts+0x6c>)
 801365a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	689b      	ldr	r3, [r3, #8]
 8013660:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	68db      	ldr	r3, [r3, #12]
 8013666:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	685b      	ldr	r3, [r3, #4]
 801366c:	4a0a      	ldr	r2, [pc, #40]	@ (8013698 <sys_check_timeouts+0x70>)
 801366e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013670:	68b9      	ldr	r1, [r7, #8]
 8013672:	200a      	movs	r0, #10
 8013674:	f7f8 fd5a 	bl	800c12c <memp_free>
    if (handler != NULL) {
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d0da      	beq.n	8013634 <sys_check_timeouts+0xc>
      handler(arg);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6838      	ldr	r0, [r7, #0]
 8013682:	4798      	blx	r3
  do {
 8013684:	e7d6      	b.n	8013634 <sys_check_timeouts+0xc>
      return;
 8013686:	bf00      	nop
 8013688:	e000      	b.n	801368c <sys_check_timeouts+0x64>
      return;
 801368a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801368c:	3710      	adds	r7, #16
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	2000c5f4 	.word	0x2000c5f4
 8013698:	2000c5f8 	.word	0x2000c5f8

0801369c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80136a2:	4b16      	ldr	r3, [pc, #88]	@ (80136fc <sys_timeouts_sleeptime+0x60>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d102      	bne.n	80136b0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80136aa:	f04f 33ff 	mov.w	r3, #4294967295
 80136ae:	e020      	b.n	80136f2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80136b0:	f7f2 fccc 	bl	800604c <sys_now>
 80136b4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80136b6:	4b11      	ldr	r3, [pc, #68]	@ (80136fc <sys_timeouts_sleeptime+0x60>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	685a      	ldr	r2, [r3, #4]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	1ad3      	subs	r3, r2, r3
 80136c0:	0fdb      	lsrs	r3, r3, #31
 80136c2:	f003 0301 	and.w	r3, r3, #1
 80136c6:	b2db      	uxtb	r3, r3
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d001      	beq.n	80136d0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80136cc:	2300      	movs	r3, #0
 80136ce:	e010      	b.n	80136f2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80136d0:	4b0a      	ldr	r3, [pc, #40]	@ (80136fc <sys_timeouts_sleeptime+0x60>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	685a      	ldr	r2, [r3, #4]
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	1ad3      	subs	r3, r2, r3
 80136da:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	da06      	bge.n	80136f0 <sys_timeouts_sleeptime+0x54>
 80136e2:	4b07      	ldr	r3, [pc, #28]	@ (8013700 <sys_timeouts_sleeptime+0x64>)
 80136e4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80136e8:	4906      	ldr	r1, [pc, #24]	@ (8013704 <sys_timeouts_sleeptime+0x68>)
 80136ea:	4807      	ldr	r0, [pc, #28]	@ (8013708 <sys_timeouts_sleeptime+0x6c>)
 80136ec:	f7ed fd0e 	bl	800110c <printf>
    return ret;
 80136f0:	683b      	ldr	r3, [r7, #0]
  }
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3708      	adds	r7, #8
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	2000c5f4 	.word	0x2000c5f4
 8013700:	0801a288 	.word	0x0801a288
 8013704:	0801a35c 	.word	0x0801a35c
 8013708:	0801a2fc 	.word	0x0801a2fc

0801370c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013710:	f003 f812 	bl	8016738 <rand>
 8013714:	4603      	mov	r3, r0
 8013716:	b29b      	uxth	r3, r3
 8013718:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801371c:	b29b      	uxth	r3, r3
 801371e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013722:	b29a      	uxth	r2, r3
 8013724:	4b01      	ldr	r3, [pc, #4]	@ (801372c <udp_init+0x20>)
 8013726:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013728:	bf00      	nop
 801372a:	bd80      	pop	{r7, pc}
 801372c:	2000002c 	.word	0x2000002c

08013730 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013730:	b480      	push	{r7}
 8013732:	b083      	sub	sp, #12
 8013734:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013736:	2300      	movs	r3, #0
 8013738:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801373a:	4b17      	ldr	r3, [pc, #92]	@ (8013798 <udp_new_port+0x68>)
 801373c:	881b      	ldrh	r3, [r3, #0]
 801373e:	1c5a      	adds	r2, r3, #1
 8013740:	b291      	uxth	r1, r2
 8013742:	4a15      	ldr	r2, [pc, #84]	@ (8013798 <udp_new_port+0x68>)
 8013744:	8011      	strh	r1, [r2, #0]
 8013746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801374a:	4293      	cmp	r3, r2
 801374c:	d103      	bne.n	8013756 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801374e:	4b12      	ldr	r3, [pc, #72]	@ (8013798 <udp_new_port+0x68>)
 8013750:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013754:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013756:	4b11      	ldr	r3, [pc, #68]	@ (801379c <udp_new_port+0x6c>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	603b      	str	r3, [r7, #0]
 801375c:	e011      	b.n	8013782 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	8a5a      	ldrh	r2, [r3, #18]
 8013762:	4b0d      	ldr	r3, [pc, #52]	@ (8013798 <udp_new_port+0x68>)
 8013764:	881b      	ldrh	r3, [r3, #0]
 8013766:	429a      	cmp	r2, r3
 8013768:	d108      	bne.n	801377c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801376a:	88fb      	ldrh	r3, [r7, #6]
 801376c:	3301      	adds	r3, #1
 801376e:	80fb      	strh	r3, [r7, #6]
 8013770:	88fb      	ldrh	r3, [r7, #6]
 8013772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013776:	d3e0      	bcc.n	801373a <udp_new_port+0xa>
        return 0;
 8013778:	2300      	movs	r3, #0
 801377a:	e007      	b.n	801378c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	603b      	str	r3, [r7, #0]
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d1ea      	bne.n	801375e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013788:	4b03      	ldr	r3, [pc, #12]	@ (8013798 <udp_new_port+0x68>)
 801378a:	881b      	ldrh	r3, [r3, #0]
}
 801378c:	4618      	mov	r0, r3
 801378e:	370c      	adds	r7, #12
 8013790:	46bd      	mov	sp, r7
 8013792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013796:	4770      	bx	lr
 8013798:	2000002c 	.word	0x2000002c
 801379c:	2000c600 	.word	0x2000c600

080137a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b084      	sub	sp, #16
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	60f8      	str	r0, [r7, #12]
 80137a8:	60b9      	str	r1, [r7, #8]
 80137aa:	4613      	mov	r3, r2
 80137ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d105      	bne.n	80137c0 <udp_input_local_match+0x20>
 80137b4:	4b27      	ldr	r3, [pc, #156]	@ (8013854 <udp_input_local_match+0xb4>)
 80137b6:	2287      	movs	r2, #135	@ 0x87
 80137b8:	4927      	ldr	r1, [pc, #156]	@ (8013858 <udp_input_local_match+0xb8>)
 80137ba:	4828      	ldr	r0, [pc, #160]	@ (801385c <udp_input_local_match+0xbc>)
 80137bc:	f7ed fca6 	bl	800110c <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d105      	bne.n	80137d2 <udp_input_local_match+0x32>
 80137c6:	4b23      	ldr	r3, [pc, #140]	@ (8013854 <udp_input_local_match+0xb4>)
 80137c8:	2288      	movs	r2, #136	@ 0x88
 80137ca:	4925      	ldr	r1, [pc, #148]	@ (8013860 <udp_input_local_match+0xc0>)
 80137cc:	4823      	ldr	r0, [pc, #140]	@ (801385c <udp_input_local_match+0xbc>)
 80137ce:	f7ed fc9d 	bl	800110c <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	7a1b      	ldrb	r3, [r3, #8]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d00b      	beq.n	80137f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	7a1a      	ldrb	r2, [r3, #8]
 80137de:	4b21      	ldr	r3, [pc, #132]	@ (8013864 <udp_input_local_match+0xc4>)
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80137e6:	3301      	adds	r3, #1
 80137e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d001      	beq.n	80137f2 <udp_input_local_match+0x52>
    return 0;
 80137ee:	2300      	movs	r3, #0
 80137f0:	e02b      	b.n	801384a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80137f2:	79fb      	ldrb	r3, [r7, #7]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d018      	beq.n	801382a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d013      	beq.n	8013826 <udp_input_local_match+0x86>
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d00f      	beq.n	8013826 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013806:	4b17      	ldr	r3, [pc, #92]	@ (8013864 <udp_input_local_match+0xc4>)
 8013808:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801380e:	d00a      	beq.n	8013826 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681a      	ldr	r2, [r3, #0]
 8013814:	4b13      	ldr	r3, [pc, #76]	@ (8013864 <udp_input_local_match+0xc4>)
 8013816:	695b      	ldr	r3, [r3, #20]
 8013818:	405a      	eors	r2, r3
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	3308      	adds	r3, #8
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013822:	2b00      	cmp	r3, #0
 8013824:	d110      	bne.n	8013848 <udp_input_local_match+0xa8>
          return 1;
 8013826:	2301      	movs	r3, #1
 8013828:	e00f      	b.n	801384a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d009      	beq.n	8013844 <udp_input_local_match+0xa4>
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d005      	beq.n	8013844 <udp_input_local_match+0xa4>
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	681a      	ldr	r2, [r3, #0]
 801383c:	4b09      	ldr	r3, [pc, #36]	@ (8013864 <udp_input_local_match+0xc4>)
 801383e:	695b      	ldr	r3, [r3, #20]
 8013840:	429a      	cmp	r2, r3
 8013842:	d101      	bne.n	8013848 <udp_input_local_match+0xa8>
        return 1;
 8013844:	2301      	movs	r3, #1
 8013846:	e000      	b.n	801384a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013848:	2300      	movs	r3, #0
}
 801384a:	4618      	mov	r0, r3
 801384c:	3710      	adds	r7, #16
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	0801a370 	.word	0x0801a370
 8013858:	0801a3a0 	.word	0x0801a3a0
 801385c:	0801a3c4 	.word	0x0801a3c4
 8013860:	0801a3ec 	.word	0x0801a3ec
 8013864:	20008e50 	.word	0x20008e50

08013868 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013868:	b590      	push	{r4, r7, lr}
 801386a:	b08d      	sub	sp, #52	@ 0x34
 801386c:	af02      	add	r7, sp, #8
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013872:	2300      	movs	r3, #0
 8013874:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d105      	bne.n	8013888 <udp_input+0x20>
 801387c:	4b7c      	ldr	r3, [pc, #496]	@ (8013a70 <udp_input+0x208>)
 801387e:	22cf      	movs	r2, #207	@ 0xcf
 8013880:	497c      	ldr	r1, [pc, #496]	@ (8013a74 <udp_input+0x20c>)
 8013882:	487d      	ldr	r0, [pc, #500]	@ (8013a78 <udp_input+0x210>)
 8013884:	f7ed fc42 	bl	800110c <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d105      	bne.n	801389a <udp_input+0x32>
 801388e:	4b78      	ldr	r3, [pc, #480]	@ (8013a70 <udp_input+0x208>)
 8013890:	22d0      	movs	r2, #208	@ 0xd0
 8013892:	497a      	ldr	r1, [pc, #488]	@ (8013a7c <udp_input+0x214>)
 8013894:	4878      	ldr	r0, [pc, #480]	@ (8013a78 <udp_input+0x210>)
 8013896:	f7ed fc39 	bl	800110c <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	895b      	ldrh	r3, [r3, #10]
 801389e:	2b07      	cmp	r3, #7
 80138a0:	d803      	bhi.n	80138aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	f7f9 fae6 	bl	800ce74 <pbuf_free>
    goto end;
 80138a8:	e0de      	b.n	8013a68 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80138b0:	4b73      	ldr	r3, [pc, #460]	@ (8013a80 <udp_input+0x218>)
 80138b2:	695b      	ldr	r3, [r3, #20]
 80138b4:	4a72      	ldr	r2, [pc, #456]	@ (8013a80 <udp_input+0x218>)
 80138b6:	6812      	ldr	r2, [r2, #0]
 80138b8:	4611      	mov	r1, r2
 80138ba:	4618      	mov	r0, r3
 80138bc:	f001 fe04 	bl	80154c8 <ip4_addr_isbroadcast_u32>
 80138c0:	4603      	mov	r3, r0
 80138c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	881b      	ldrh	r3, [r3, #0]
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7f7 fee0 	bl	800b690 <lwip_htons>
 80138d0:	4603      	mov	r3, r0
 80138d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	885b      	ldrh	r3, [r3, #2]
 80138d8:	b29b      	uxth	r3, r3
 80138da:	4618      	mov	r0, r3
 80138dc:	f7f7 fed8 	bl	800b690 <lwip_htons>
 80138e0:	4603      	mov	r3, r0
 80138e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80138e4:	2300      	movs	r3, #0
 80138e6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80138e8:	2300      	movs	r3, #0
 80138ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80138ec:	2300      	movs	r3, #0
 80138ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80138f0:	4b64      	ldr	r3, [pc, #400]	@ (8013a84 <udp_input+0x21c>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80138f6:	e054      	b.n	80139a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80138f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138fa:	8a5b      	ldrh	r3, [r3, #18]
 80138fc:	89fa      	ldrh	r2, [r7, #14]
 80138fe:	429a      	cmp	r2, r3
 8013900:	d14a      	bne.n	8013998 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013902:	7cfb      	ldrb	r3, [r7, #19]
 8013904:	461a      	mov	r2, r3
 8013906:	6839      	ldr	r1, [r7, #0]
 8013908:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801390a:	f7ff ff49 	bl	80137a0 <udp_input_local_match>
 801390e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013910:	2b00      	cmp	r3, #0
 8013912:	d041      	beq.n	8013998 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013916:	7c1b      	ldrb	r3, [r3, #16]
 8013918:	f003 0304 	and.w	r3, r3, #4
 801391c:	2b00      	cmp	r3, #0
 801391e:	d11d      	bne.n	801395c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d102      	bne.n	801392c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013928:	61fb      	str	r3, [r7, #28]
 801392a:	e017      	b.n	801395c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801392c:	7cfb      	ldrb	r3, [r7, #19]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d014      	beq.n	801395c <udp_input+0xf4>
 8013932:	4b53      	ldr	r3, [pc, #332]	@ (8013a80 <udp_input+0x218>)
 8013934:	695b      	ldr	r3, [r3, #20]
 8013936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801393a:	d10f      	bne.n	801395c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	3304      	adds	r3, #4
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	429a      	cmp	r2, r3
 8013948:	d008      	beq.n	801395c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801394c:	681a      	ldr	r2, [r3, #0]
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	3304      	adds	r3, #4
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	429a      	cmp	r2, r3
 8013956:	d101      	bne.n	801395c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801395a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801395e:	8a9b      	ldrh	r3, [r3, #20]
 8013960:	8a3a      	ldrh	r2, [r7, #16]
 8013962:	429a      	cmp	r2, r3
 8013964:	d118      	bne.n	8013998 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013968:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801396a:	2b00      	cmp	r3, #0
 801396c:	d005      	beq.n	801397a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013970:	685a      	ldr	r2, [r3, #4]
 8013972:	4b43      	ldr	r3, [pc, #268]	@ (8013a80 <udp_input+0x218>)
 8013974:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013976:	429a      	cmp	r2, r3
 8013978:	d10e      	bne.n	8013998 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801397a:	6a3b      	ldr	r3, [r7, #32]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d014      	beq.n	80139aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013982:	68da      	ldr	r2, [r3, #12]
 8013984:	6a3b      	ldr	r3, [r7, #32]
 8013986:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013988:	4b3e      	ldr	r3, [pc, #248]	@ (8013a84 <udp_input+0x21c>)
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801398e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013990:	4a3c      	ldr	r2, [pc, #240]	@ (8013a84 <udp_input+0x21c>)
 8013992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013994:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013996:	e008      	b.n	80139aa <udp_input+0x142>
      }
    }

    prev = pcb;
 8013998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801399a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801399e:	68db      	ldr	r3, [r3, #12]
 80139a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80139a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d1a7      	bne.n	80138f8 <udp_input+0x90>
 80139a8:	e000      	b.n	80139ac <udp_input+0x144>
        break;
 80139aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80139ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d101      	bne.n	80139b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80139b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d002      	beq.n	80139c2 <udp_input+0x15a>
    for_us = 1;
 80139bc:	2301      	movs	r3, #1
 80139be:	76fb      	strb	r3, [r7, #27]
 80139c0:	e00a      	b.n	80139d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	3304      	adds	r3, #4
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	4b2d      	ldr	r3, [pc, #180]	@ (8013a80 <udp_input+0x218>)
 80139ca:	695b      	ldr	r3, [r3, #20]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	bf0c      	ite	eq
 80139d0:	2301      	moveq	r3, #1
 80139d2:	2300      	movne	r3, #0
 80139d4:	b2db      	uxtb	r3, r3
 80139d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80139d8:	7efb      	ldrb	r3, [r7, #27]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d041      	beq.n	8013a62 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80139de:	2108      	movs	r1, #8
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f7f9 f9c1 	bl	800cd68 <pbuf_remove_header>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d00a      	beq.n	8013a02 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80139ec:	4b20      	ldr	r3, [pc, #128]	@ (8013a70 <udp_input+0x208>)
 80139ee:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80139f2:	4925      	ldr	r1, [pc, #148]	@ (8013a88 <udp_input+0x220>)
 80139f4:	4820      	ldr	r0, [pc, #128]	@ (8013a78 <udp_input+0x210>)
 80139f6:	f7ed fb89 	bl	800110c <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f7f9 fa3a 	bl	800ce74 <pbuf_free>
      goto end;
 8013a00:	e032      	b.n	8013a68 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d012      	beq.n	8013a2e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a0a:	699b      	ldr	r3, [r3, #24]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d00a      	beq.n	8013a26 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a12:	699c      	ldr	r4, [r3, #24]
 8013a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a16:	69d8      	ldr	r0, [r3, #28]
 8013a18:	8a3b      	ldrh	r3, [r7, #16]
 8013a1a:	9300      	str	r3, [sp, #0]
 8013a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8013a8c <udp_input+0x224>)
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013a22:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013a24:	e021      	b.n	8013a6a <udp_input+0x202>
        pbuf_free(p);
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f7f9 fa24 	bl	800ce74 <pbuf_free>
        goto end;
 8013a2c:	e01c      	b.n	8013a68 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013a2e:	7cfb      	ldrb	r3, [r7, #19]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d112      	bne.n	8013a5a <udp_input+0x1f2>
 8013a34:	4b12      	ldr	r3, [pc, #72]	@ (8013a80 <udp_input+0x218>)
 8013a36:	695b      	ldr	r3, [r3, #20]
 8013a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013a3c:	2be0      	cmp	r3, #224	@ 0xe0
 8013a3e:	d00c      	beq.n	8013a5a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013a40:	4b0f      	ldr	r3, [pc, #60]	@ (8013a80 <udp_input+0x218>)
 8013a42:	899b      	ldrh	r3, [r3, #12]
 8013a44:	3308      	adds	r3, #8
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	b21b      	sxth	r3, r3
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f7f9 f9fe 	bl	800ce4e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013a52:	2103      	movs	r1, #3
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f001 fa17 	bl	8014e88 <icmp_dest_unreach>
      pbuf_free(p);
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f7f9 fa0a 	bl	800ce74 <pbuf_free>
  return;
 8013a60:	e003      	b.n	8013a6a <udp_input+0x202>
    pbuf_free(p);
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f7f9 fa06 	bl	800ce74 <pbuf_free>
  return;
 8013a68:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013a6a:	372c      	adds	r7, #44	@ 0x2c
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd90      	pop	{r4, r7, pc}
 8013a70:	0801a370 	.word	0x0801a370
 8013a74:	0801a414 	.word	0x0801a414
 8013a78:	0801a3c4 	.word	0x0801a3c4
 8013a7c:	0801a42c 	.word	0x0801a42c
 8013a80:	20008e50 	.word	0x20008e50
 8013a84:	2000c600 	.word	0x2000c600
 8013a88:	0801a448 	.word	0x0801a448
 8013a8c:	20008e60 	.word	0x20008e60

08013a90 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b086      	sub	sp, #24
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	60f8      	str	r0, [r7, #12]
 8013a98:	60b9      	str	r1, [r7, #8]
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d101      	bne.n	8013aa8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013aa4:	4b39      	ldr	r3, [pc, #228]	@ (8013b8c <udp_bind+0xfc>)
 8013aa6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d109      	bne.n	8013ac2 <udp_bind+0x32>
 8013aae:	4b38      	ldr	r3, [pc, #224]	@ (8013b90 <udp_bind+0x100>)
 8013ab0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013ab4:	4937      	ldr	r1, [pc, #220]	@ (8013b94 <udp_bind+0x104>)
 8013ab6:	4838      	ldr	r0, [pc, #224]	@ (8013b98 <udp_bind+0x108>)
 8013ab8:	f7ed fb28 	bl	800110c <printf>
 8013abc:	f06f 030f 	mvn.w	r3, #15
 8013ac0:	e060      	b.n	8013b84 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ac6:	4b35      	ldr	r3, [pc, #212]	@ (8013b9c <udp_bind+0x10c>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	617b      	str	r3, [r7, #20]
 8013acc:	e009      	b.n	8013ae2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013ace:	68fa      	ldr	r2, [r7, #12]
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d102      	bne.n	8013adc <udp_bind+0x4c>
      rebind = 1;
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	74fb      	strb	r3, [r7, #19]
      break;
 8013ada:	e005      	b.n	8013ae8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	68db      	ldr	r3, [r3, #12]
 8013ae0:	617b      	str	r3, [r7, #20]
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d1f2      	bne.n	8013ace <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013ae8:	88fb      	ldrh	r3, [r7, #6]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d109      	bne.n	8013b02 <udp_bind+0x72>
    port = udp_new_port();
 8013aee:	f7ff fe1f 	bl	8013730 <udp_new_port>
 8013af2:	4603      	mov	r3, r0
 8013af4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013af6:	88fb      	ldrh	r3, [r7, #6]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d12c      	bne.n	8013b56 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013afc:	f06f 0307 	mvn.w	r3, #7
 8013b00:	e040      	b.n	8013b84 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b02:	4b26      	ldr	r3, [pc, #152]	@ (8013b9c <udp_bind+0x10c>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	617b      	str	r3, [r7, #20]
 8013b08:	e022      	b.n	8013b50 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013b0a:	68fa      	ldr	r2, [r7, #12]
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d01b      	beq.n	8013b4a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	8a5b      	ldrh	r3, [r3, #18]
 8013b16:	88fa      	ldrh	r2, [r7, #6]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d116      	bne.n	8013b4a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	681a      	ldr	r2, [r3, #0]
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d00d      	beq.n	8013b44 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d00a      	beq.n	8013b44 <udp_bind+0xb4>
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d006      	beq.n	8013b44 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013b36:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d003      	beq.n	8013b44 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d102      	bne.n	8013b4a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013b44:	f06f 0307 	mvn.w	r3, #7
 8013b48:	e01c      	b.n	8013b84 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	68db      	ldr	r3, [r3, #12]
 8013b4e:	617b      	str	r3, [r7, #20]
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1d9      	bne.n	8013b0a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d002      	beq.n	8013b62 <udp_bind+0xd2>
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	e000      	b.n	8013b64 <udp_bind+0xd4>
 8013b62:	2300      	movs	r3, #0
 8013b64:	68fa      	ldr	r2, [r7, #12]
 8013b66:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	88fa      	ldrh	r2, [r7, #6]
 8013b6c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013b6e:	7cfb      	ldrb	r3, [r7, #19]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d106      	bne.n	8013b82 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013b74:	4b09      	ldr	r3, [pc, #36]	@ (8013b9c <udp_bind+0x10c>)
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013b7c:	4a07      	ldr	r2, [pc, #28]	@ (8013b9c <udp_bind+0x10c>)
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013b82:	2300      	movs	r3, #0
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3718      	adds	r7, #24
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	0801aed0 	.word	0x0801aed0
 8013b90:	0801a370 	.word	0x0801a370
 8013b94:	0801a638 	.word	0x0801a638
 8013b98:	0801a3c4 	.word	0x0801a3c4
 8013b9c:	2000c600 	.word	0x2000c600

08013ba0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b086      	sub	sp, #24
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	60f8      	str	r0, [r7, #12]
 8013ba8:	60b9      	str	r1, [r7, #8]
 8013baa:	4613      	mov	r3, r2
 8013bac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d109      	bne.n	8013bc8 <udp_connect+0x28>
 8013bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8013c68 <udp_connect+0xc8>)
 8013bb6:	f240 4235 	movw	r2, #1077	@ 0x435
 8013bba:	492c      	ldr	r1, [pc, #176]	@ (8013c6c <udp_connect+0xcc>)
 8013bbc:	482c      	ldr	r0, [pc, #176]	@ (8013c70 <udp_connect+0xd0>)
 8013bbe:	f7ed faa5 	bl	800110c <printf>
 8013bc2:	f06f 030f 	mvn.w	r3, #15
 8013bc6:	e04b      	b.n	8013c60 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d109      	bne.n	8013be2 <udp_connect+0x42>
 8013bce:	4b26      	ldr	r3, [pc, #152]	@ (8013c68 <udp_connect+0xc8>)
 8013bd0:	f240 4236 	movw	r2, #1078	@ 0x436
 8013bd4:	4927      	ldr	r1, [pc, #156]	@ (8013c74 <udp_connect+0xd4>)
 8013bd6:	4826      	ldr	r0, [pc, #152]	@ (8013c70 <udp_connect+0xd0>)
 8013bd8:	f7ed fa98 	bl	800110c <printf>
 8013bdc:	f06f 030f 	mvn.w	r3, #15
 8013be0:	e03e      	b.n	8013c60 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	8a5b      	ldrh	r3, [r3, #18]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d10f      	bne.n	8013c0a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013bea:	68f9      	ldr	r1, [r7, #12]
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	8a5b      	ldrh	r3, [r3, #18]
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	68f8      	ldr	r0, [r7, #12]
 8013bf4:	f7ff ff4c 	bl	8013a90 <udp_bind>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013bfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d002      	beq.n	8013c0a <udp_connect+0x6a>
      return err;
 8013c04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c08:	e02a      	b.n	8013c60 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d002      	beq.n	8013c16 <udp_connect+0x76>
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	e000      	b.n	8013c18 <udp_connect+0x78>
 8013c16:	2300      	movs	r3, #0
 8013c18:	68fa      	ldr	r2, [r7, #12]
 8013c1a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	88fa      	ldrh	r2, [r7, #6]
 8013c20:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	7c1b      	ldrb	r3, [r3, #16]
 8013c26:	f043 0304 	orr.w	r3, r3, #4
 8013c2a:	b2da      	uxtb	r2, r3
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c30:	4b11      	ldr	r3, [pc, #68]	@ (8013c78 <udp_connect+0xd8>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	617b      	str	r3, [r7, #20]
 8013c36:	e008      	b.n	8013c4a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013c38:	68fa      	ldr	r2, [r7, #12]
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d101      	bne.n	8013c44 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013c40:	2300      	movs	r3, #0
 8013c42:	e00d      	b.n	8013c60 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	617b      	str	r3, [r7, #20]
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d1f3      	bne.n	8013c38 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013c50:	4b09      	ldr	r3, [pc, #36]	@ (8013c78 <udp_connect+0xd8>)
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013c58:	4a07      	ldr	r2, [pc, #28]	@ (8013c78 <udp_connect+0xd8>)
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013c5e:	2300      	movs	r3, #0
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3718      	adds	r7, #24
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	0801a370 	.word	0x0801a370
 8013c6c:	0801a650 	.word	0x0801a650
 8013c70:	0801a3c4 	.word	0x0801a3c4
 8013c74:	0801a66c 	.word	0x0801a66c
 8013c78:	2000c600 	.word	0x2000c600

08013c7c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b084      	sub	sp, #16
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d107      	bne.n	8013c9e <udp_recv+0x22>
 8013c8e:	4b08      	ldr	r3, [pc, #32]	@ (8013cb0 <udp_recv+0x34>)
 8013c90:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013c94:	4907      	ldr	r1, [pc, #28]	@ (8013cb4 <udp_recv+0x38>)
 8013c96:	4808      	ldr	r0, [pc, #32]	@ (8013cb8 <udp_recv+0x3c>)
 8013c98:	f7ed fa38 	bl	800110c <printf>
 8013c9c:	e005      	b.n	8013caa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	68ba      	ldr	r2, [r7, #8]
 8013ca2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	687a      	ldr	r2, [r7, #4]
 8013ca8:	61da      	str	r2, [r3, #28]
}
 8013caa:	3710      	adds	r7, #16
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}
 8013cb0:	0801a370 	.word	0x0801a370
 8013cb4:	0801a6a4 	.word	0x0801a6a4
 8013cb8:	0801a3c4 	.word	0x0801a3c4

08013cbc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b084      	sub	sp, #16
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d107      	bne.n	8013cda <udp_remove+0x1e>
 8013cca:	4b19      	ldr	r3, [pc, #100]	@ (8013d30 <udp_remove+0x74>)
 8013ccc:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013cd0:	4918      	ldr	r1, [pc, #96]	@ (8013d34 <udp_remove+0x78>)
 8013cd2:	4819      	ldr	r0, [pc, #100]	@ (8013d38 <udp_remove+0x7c>)
 8013cd4:	f7ed fa1a 	bl	800110c <printf>
 8013cd8:	e026      	b.n	8013d28 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013cda:	4b18      	ldr	r3, [pc, #96]	@ (8013d3c <udp_remove+0x80>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	687a      	ldr	r2, [r7, #4]
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d105      	bne.n	8013cf0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013ce4:	4b15      	ldr	r3, [pc, #84]	@ (8013d3c <udp_remove+0x80>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	68db      	ldr	r3, [r3, #12]
 8013cea:	4a14      	ldr	r2, [pc, #80]	@ (8013d3c <udp_remove+0x80>)
 8013cec:	6013      	str	r3, [r2, #0]
 8013cee:	e017      	b.n	8013d20 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013cf0:	4b12      	ldr	r3, [pc, #72]	@ (8013d3c <udp_remove+0x80>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	60fb      	str	r3, [r7, #12]
 8013cf6:	e010      	b.n	8013d1a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d009      	beq.n	8013d14 <udp_remove+0x58>
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	68db      	ldr	r3, [r3, #12]
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d104      	bne.n	8013d14 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	68da      	ldr	r2, [r3, #12]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	60da      	str	r2, [r3, #12]
        break;
 8013d12:	e005      	b.n	8013d20 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	60fb      	str	r3, [r7, #12]
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d1eb      	bne.n	8013cf8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013d20:	6879      	ldr	r1, [r7, #4]
 8013d22:	2000      	movs	r0, #0
 8013d24:	f7f8 fa02 	bl	800c12c <memp_free>
}
 8013d28:	3710      	adds	r7, #16
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
 8013d2e:	bf00      	nop
 8013d30:	0801a370 	.word	0x0801a370
 8013d34:	0801a6bc 	.word	0x0801a6bc
 8013d38:	0801a3c4 	.word	0x0801a3c4
 8013d3c:	2000c600 	.word	0x2000c600

08013d40 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013d46:	2000      	movs	r0, #0
 8013d48:	f7f8 f97a 	bl	800c040 <memp_malloc>
 8013d4c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d007      	beq.n	8013d64 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013d54:	2220      	movs	r2, #32
 8013d56:	2100      	movs	r1, #0
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f002 fe40 	bl	80169de <memset>
    pcb->ttl = UDP_TTL;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	22ff      	movs	r2, #255	@ 0xff
 8013d62:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013d64:	687b      	ldr	r3, [r7, #4]
}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3708      	adds	r7, #8
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}

08013d6e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013d6e:	b580      	push	{r7, lr}
 8013d70:	b084      	sub	sp, #16
 8013d72:	af00      	add	r7, sp, #0
 8013d74:	4603      	mov	r3, r0
 8013d76:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013d78:	f7ff ffe2 	bl	8013d40 <udp_new>
 8013d7c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3710      	adds	r7, #16
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b085      	sub	sp, #20
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d01e      	beq.n	8013dd6 <udp_netif_ip_addr_changed+0x4e>
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d01a      	beq.n	8013dd6 <udp_netif_ip_addr_changed+0x4e>
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d017      	beq.n	8013dd6 <udp_netif_ip_addr_changed+0x4e>
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d013      	beq.n	8013dd6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013dae:	4b0d      	ldr	r3, [pc, #52]	@ (8013de4 <udp_netif_ip_addr_changed+0x5c>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	60fb      	str	r3, [r7, #12]
 8013db4:	e00c      	b.n	8013dd0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	681a      	ldr	r2, [r3, #0]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d103      	bne.n	8013dca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	68db      	ldr	r3, [r3, #12]
 8013dce:	60fb      	str	r3, [r7, #12]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d1ef      	bne.n	8013db6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013dd6:	bf00      	nop
 8013dd8:	3714      	adds	r7, #20
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr
 8013de2:	bf00      	nop
 8013de4:	2000c600 	.word	0x2000c600

08013de8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013df0:	4915      	ldr	r1, [pc, #84]	@ (8013e48 <etharp_free_entry+0x60>)
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	4613      	mov	r3, r2
 8013df6:	005b      	lsls	r3, r3, #1
 8013df8:	4413      	add	r3, r2
 8013dfa:	00db      	lsls	r3, r3, #3
 8013dfc:	440b      	add	r3, r1
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d013      	beq.n	8013e2c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013e04:	4910      	ldr	r1, [pc, #64]	@ (8013e48 <etharp_free_entry+0x60>)
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	4613      	mov	r3, r2
 8013e0a:	005b      	lsls	r3, r3, #1
 8013e0c:	4413      	add	r3, r2
 8013e0e:	00db      	lsls	r3, r3, #3
 8013e10:	440b      	add	r3, r1
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7f9 f82d 	bl	800ce74 <pbuf_free>
    arp_table[i].q = NULL;
 8013e1a:	490b      	ldr	r1, [pc, #44]	@ (8013e48 <etharp_free_entry+0x60>)
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	4613      	mov	r3, r2
 8013e20:	005b      	lsls	r3, r3, #1
 8013e22:	4413      	add	r3, r2
 8013e24:	00db      	lsls	r3, r3, #3
 8013e26:	440b      	add	r3, r1
 8013e28:	2200      	movs	r2, #0
 8013e2a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013e2c:	4906      	ldr	r1, [pc, #24]	@ (8013e48 <etharp_free_entry+0x60>)
 8013e2e:	687a      	ldr	r2, [r7, #4]
 8013e30:	4613      	mov	r3, r2
 8013e32:	005b      	lsls	r3, r3, #1
 8013e34:	4413      	add	r3, r2
 8013e36:	00db      	lsls	r3, r3, #3
 8013e38:	440b      	add	r3, r1
 8013e3a:	3314      	adds	r3, #20
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013e40:	bf00      	nop
 8013e42:	3708      	adds	r7, #8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	2000c604 	.word	0x2000c604

08013e4c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e52:	2300      	movs	r3, #0
 8013e54:	607b      	str	r3, [r7, #4]
 8013e56:	e096      	b.n	8013f86 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013e58:	494f      	ldr	r1, [pc, #316]	@ (8013f98 <etharp_tmr+0x14c>)
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	4613      	mov	r3, r2
 8013e5e:	005b      	lsls	r3, r3, #1
 8013e60:	4413      	add	r3, r2
 8013e62:	00db      	lsls	r3, r3, #3
 8013e64:	440b      	add	r3, r1
 8013e66:	3314      	adds	r3, #20
 8013e68:	781b      	ldrb	r3, [r3, #0]
 8013e6a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013e6c:	78fb      	ldrb	r3, [r7, #3]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	f000 8086 	beq.w	8013f80 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013e74:	4948      	ldr	r1, [pc, #288]	@ (8013f98 <etharp_tmr+0x14c>)
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	4613      	mov	r3, r2
 8013e7a:	005b      	lsls	r3, r3, #1
 8013e7c:	4413      	add	r3, r2
 8013e7e:	00db      	lsls	r3, r3, #3
 8013e80:	440b      	add	r3, r1
 8013e82:	3312      	adds	r3, #18
 8013e84:	881b      	ldrh	r3, [r3, #0]
 8013e86:	3301      	adds	r3, #1
 8013e88:	b298      	uxth	r0, r3
 8013e8a:	4943      	ldr	r1, [pc, #268]	@ (8013f98 <etharp_tmr+0x14c>)
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	4613      	mov	r3, r2
 8013e90:	005b      	lsls	r3, r3, #1
 8013e92:	4413      	add	r3, r2
 8013e94:	00db      	lsls	r3, r3, #3
 8013e96:	440b      	add	r3, r1
 8013e98:	3312      	adds	r3, #18
 8013e9a:	4602      	mov	r2, r0
 8013e9c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013e9e:	493e      	ldr	r1, [pc, #248]	@ (8013f98 <etharp_tmr+0x14c>)
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	005b      	lsls	r3, r3, #1
 8013ea6:	4413      	add	r3, r2
 8013ea8:	00db      	lsls	r3, r3, #3
 8013eaa:	440b      	add	r3, r1
 8013eac:	3312      	adds	r3, #18
 8013eae:	881b      	ldrh	r3, [r3, #0]
 8013eb0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013eb4:	d215      	bcs.n	8013ee2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013eb6:	4938      	ldr	r1, [pc, #224]	@ (8013f98 <etharp_tmr+0x14c>)
 8013eb8:	687a      	ldr	r2, [r7, #4]
 8013eba:	4613      	mov	r3, r2
 8013ebc:	005b      	lsls	r3, r3, #1
 8013ebe:	4413      	add	r3, r2
 8013ec0:	00db      	lsls	r3, r3, #3
 8013ec2:	440b      	add	r3, r1
 8013ec4:	3314      	adds	r3, #20
 8013ec6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013ec8:	2b01      	cmp	r3, #1
 8013eca:	d10e      	bne.n	8013eea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013ecc:	4932      	ldr	r1, [pc, #200]	@ (8013f98 <etharp_tmr+0x14c>)
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	4613      	mov	r3, r2
 8013ed2:	005b      	lsls	r3, r3, #1
 8013ed4:	4413      	add	r3, r2
 8013ed6:	00db      	lsls	r3, r3, #3
 8013ed8:	440b      	add	r3, r1
 8013eda:	3312      	adds	r3, #18
 8013edc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013ede:	2b04      	cmp	r3, #4
 8013ee0:	d903      	bls.n	8013eea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f7ff ff80 	bl	8013de8 <etharp_free_entry>
 8013ee8:	e04a      	b.n	8013f80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013eea:	492b      	ldr	r1, [pc, #172]	@ (8013f98 <etharp_tmr+0x14c>)
 8013eec:	687a      	ldr	r2, [r7, #4]
 8013eee:	4613      	mov	r3, r2
 8013ef0:	005b      	lsls	r3, r3, #1
 8013ef2:	4413      	add	r3, r2
 8013ef4:	00db      	lsls	r3, r3, #3
 8013ef6:	440b      	add	r3, r1
 8013ef8:	3314      	adds	r3, #20
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	2b03      	cmp	r3, #3
 8013efe:	d10a      	bne.n	8013f16 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013f00:	4925      	ldr	r1, [pc, #148]	@ (8013f98 <etharp_tmr+0x14c>)
 8013f02:	687a      	ldr	r2, [r7, #4]
 8013f04:	4613      	mov	r3, r2
 8013f06:	005b      	lsls	r3, r3, #1
 8013f08:	4413      	add	r3, r2
 8013f0a:	00db      	lsls	r3, r3, #3
 8013f0c:	440b      	add	r3, r1
 8013f0e:	3314      	adds	r3, #20
 8013f10:	2204      	movs	r2, #4
 8013f12:	701a      	strb	r2, [r3, #0]
 8013f14:	e034      	b.n	8013f80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013f16:	4920      	ldr	r1, [pc, #128]	@ (8013f98 <etharp_tmr+0x14c>)
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	005b      	lsls	r3, r3, #1
 8013f1e:	4413      	add	r3, r2
 8013f20:	00db      	lsls	r3, r3, #3
 8013f22:	440b      	add	r3, r1
 8013f24:	3314      	adds	r3, #20
 8013f26:	781b      	ldrb	r3, [r3, #0]
 8013f28:	2b04      	cmp	r3, #4
 8013f2a:	d10a      	bne.n	8013f42 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013f2c:	491a      	ldr	r1, [pc, #104]	@ (8013f98 <etharp_tmr+0x14c>)
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	4613      	mov	r3, r2
 8013f32:	005b      	lsls	r3, r3, #1
 8013f34:	4413      	add	r3, r2
 8013f36:	00db      	lsls	r3, r3, #3
 8013f38:	440b      	add	r3, r1
 8013f3a:	3314      	adds	r3, #20
 8013f3c:	2202      	movs	r2, #2
 8013f3e:	701a      	strb	r2, [r3, #0]
 8013f40:	e01e      	b.n	8013f80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013f42:	4915      	ldr	r1, [pc, #84]	@ (8013f98 <etharp_tmr+0x14c>)
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	4613      	mov	r3, r2
 8013f48:	005b      	lsls	r3, r3, #1
 8013f4a:	4413      	add	r3, r2
 8013f4c:	00db      	lsls	r3, r3, #3
 8013f4e:	440b      	add	r3, r1
 8013f50:	3314      	adds	r3, #20
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	2b01      	cmp	r3, #1
 8013f56:	d113      	bne.n	8013f80 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013f58:	490f      	ldr	r1, [pc, #60]	@ (8013f98 <etharp_tmr+0x14c>)
 8013f5a:	687a      	ldr	r2, [r7, #4]
 8013f5c:	4613      	mov	r3, r2
 8013f5e:	005b      	lsls	r3, r3, #1
 8013f60:	4413      	add	r3, r2
 8013f62:	00db      	lsls	r3, r3, #3
 8013f64:	440b      	add	r3, r1
 8013f66:	3308      	adds	r3, #8
 8013f68:	6818      	ldr	r0, [r3, #0]
 8013f6a:	687a      	ldr	r2, [r7, #4]
 8013f6c:	4613      	mov	r3, r2
 8013f6e:	005b      	lsls	r3, r3, #1
 8013f70:	4413      	add	r3, r2
 8013f72:	00db      	lsls	r3, r3, #3
 8013f74:	4a08      	ldr	r2, [pc, #32]	@ (8013f98 <etharp_tmr+0x14c>)
 8013f76:	4413      	add	r3, r2
 8013f78:	3304      	adds	r3, #4
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	f000 fe6e 	bl	8014c5c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	3301      	adds	r3, #1
 8013f84:	607b      	str	r3, [r7, #4]
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2b09      	cmp	r3, #9
 8013f8a:	f77f af65 	ble.w	8013e58 <etharp_tmr+0xc>
      }
    }
  }
}
 8013f8e:	bf00      	nop
 8013f90:	bf00      	nop
 8013f92:	3708      	adds	r7, #8
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	2000c604 	.word	0x2000c604

08013f9c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b08a      	sub	sp, #40	@ 0x28
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	60f8      	str	r0, [r7, #12]
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	607a      	str	r2, [r7, #4]
 8013fa8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013faa:	230a      	movs	r3, #10
 8013fac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013fae:	230a      	movs	r3, #10
 8013fb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013fb2:	230a      	movs	r3, #10
 8013fb4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013fba:	230a      	movs	r3, #10
 8013fbc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	83bb      	strh	r3, [r7, #28]
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	837b      	strh	r3, [r7, #26]
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fca:	2300      	movs	r3, #0
 8013fcc:	843b      	strh	r3, [r7, #32]
 8013fce:	e0ae      	b.n	801412e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013fd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fd4:	49a6      	ldr	r1, [pc, #664]	@ (8014270 <etharp_find_entry+0x2d4>)
 8013fd6:	4613      	mov	r3, r2
 8013fd8:	005b      	lsls	r3, r3, #1
 8013fda:	4413      	add	r3, r2
 8013fdc:	00db      	lsls	r3, r3, #3
 8013fde:	440b      	add	r3, r1
 8013fe0:	3314      	adds	r3, #20
 8013fe2:	781b      	ldrb	r3, [r3, #0]
 8013fe4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013fe6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013fea:	2b0a      	cmp	r3, #10
 8013fec:	d105      	bne.n	8013ffa <etharp_find_entry+0x5e>
 8013fee:	7dfb      	ldrb	r3, [r7, #23]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d102      	bne.n	8013ffa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013ff4:	8c3b      	ldrh	r3, [r7, #32]
 8013ff6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013ff8:	e095      	b.n	8014126 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013ffa:	7dfb      	ldrb	r3, [r7, #23]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	f000 8092 	beq.w	8014126 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014002:	7dfb      	ldrb	r3, [r7, #23]
 8014004:	2b01      	cmp	r3, #1
 8014006:	d009      	beq.n	801401c <etharp_find_entry+0x80>
 8014008:	7dfb      	ldrb	r3, [r7, #23]
 801400a:	2b01      	cmp	r3, #1
 801400c:	d806      	bhi.n	801401c <etharp_find_entry+0x80>
 801400e:	4b99      	ldr	r3, [pc, #612]	@ (8014274 <etharp_find_entry+0x2d8>)
 8014010:	f240 1223 	movw	r2, #291	@ 0x123
 8014014:	4998      	ldr	r1, [pc, #608]	@ (8014278 <etharp_find_entry+0x2dc>)
 8014016:	4899      	ldr	r0, [pc, #612]	@ (801427c <etharp_find_entry+0x2e0>)
 8014018:	f7ed f878 	bl	800110c <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d020      	beq.n	8014064 <etharp_find_entry+0xc8>
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	6819      	ldr	r1, [r3, #0]
 8014026:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801402a:	4891      	ldr	r0, [pc, #580]	@ (8014270 <etharp_find_entry+0x2d4>)
 801402c:	4613      	mov	r3, r2
 801402e:	005b      	lsls	r3, r3, #1
 8014030:	4413      	add	r3, r2
 8014032:	00db      	lsls	r3, r3, #3
 8014034:	4403      	add	r3, r0
 8014036:	3304      	adds	r3, #4
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	4299      	cmp	r1, r3
 801403c:	d112      	bne.n	8014064 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d00c      	beq.n	801405e <etharp_find_entry+0xc2>
 8014044:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014048:	4989      	ldr	r1, [pc, #548]	@ (8014270 <etharp_find_entry+0x2d4>)
 801404a:	4613      	mov	r3, r2
 801404c:	005b      	lsls	r3, r3, #1
 801404e:	4413      	add	r3, r2
 8014050:	00db      	lsls	r3, r3, #3
 8014052:	440b      	add	r3, r1
 8014054:	3308      	adds	r3, #8
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	687a      	ldr	r2, [r7, #4]
 801405a:	429a      	cmp	r2, r3
 801405c:	d102      	bne.n	8014064 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801405e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014062:	e100      	b.n	8014266 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014064:	7dfb      	ldrb	r3, [r7, #23]
 8014066:	2b01      	cmp	r3, #1
 8014068:	d140      	bne.n	80140ec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801406a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801406e:	4980      	ldr	r1, [pc, #512]	@ (8014270 <etharp_find_entry+0x2d4>)
 8014070:	4613      	mov	r3, r2
 8014072:	005b      	lsls	r3, r3, #1
 8014074:	4413      	add	r3, r2
 8014076:	00db      	lsls	r3, r3, #3
 8014078:	440b      	add	r3, r1
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d01a      	beq.n	80140b6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014080:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014084:	497a      	ldr	r1, [pc, #488]	@ (8014270 <etharp_find_entry+0x2d4>)
 8014086:	4613      	mov	r3, r2
 8014088:	005b      	lsls	r3, r3, #1
 801408a:	4413      	add	r3, r2
 801408c:	00db      	lsls	r3, r3, #3
 801408e:	440b      	add	r3, r1
 8014090:	3312      	adds	r3, #18
 8014092:	881b      	ldrh	r3, [r3, #0]
 8014094:	8bba      	ldrh	r2, [r7, #28]
 8014096:	429a      	cmp	r2, r3
 8014098:	d845      	bhi.n	8014126 <etharp_find_entry+0x18a>
            old_queue = i;
 801409a:	8c3b      	ldrh	r3, [r7, #32]
 801409c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801409e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140a2:	4973      	ldr	r1, [pc, #460]	@ (8014270 <etharp_find_entry+0x2d4>)
 80140a4:	4613      	mov	r3, r2
 80140a6:	005b      	lsls	r3, r3, #1
 80140a8:	4413      	add	r3, r2
 80140aa:	00db      	lsls	r3, r3, #3
 80140ac:	440b      	add	r3, r1
 80140ae:	3312      	adds	r3, #18
 80140b0:	881b      	ldrh	r3, [r3, #0]
 80140b2:	83bb      	strh	r3, [r7, #28]
 80140b4:	e037      	b.n	8014126 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80140b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140ba:	496d      	ldr	r1, [pc, #436]	@ (8014270 <etharp_find_entry+0x2d4>)
 80140bc:	4613      	mov	r3, r2
 80140be:	005b      	lsls	r3, r3, #1
 80140c0:	4413      	add	r3, r2
 80140c2:	00db      	lsls	r3, r3, #3
 80140c4:	440b      	add	r3, r1
 80140c6:	3312      	adds	r3, #18
 80140c8:	881b      	ldrh	r3, [r3, #0]
 80140ca:	8b7a      	ldrh	r2, [r7, #26]
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d82a      	bhi.n	8014126 <etharp_find_entry+0x18a>
            old_pending = i;
 80140d0:	8c3b      	ldrh	r3, [r7, #32]
 80140d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80140d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140d8:	4965      	ldr	r1, [pc, #404]	@ (8014270 <etharp_find_entry+0x2d4>)
 80140da:	4613      	mov	r3, r2
 80140dc:	005b      	lsls	r3, r3, #1
 80140de:	4413      	add	r3, r2
 80140e0:	00db      	lsls	r3, r3, #3
 80140e2:	440b      	add	r3, r1
 80140e4:	3312      	adds	r3, #18
 80140e6:	881b      	ldrh	r3, [r3, #0]
 80140e8:	837b      	strh	r3, [r7, #26]
 80140ea:	e01c      	b.n	8014126 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80140ec:	7dfb      	ldrb	r3, [r7, #23]
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d919      	bls.n	8014126 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80140f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140f6:	495e      	ldr	r1, [pc, #376]	@ (8014270 <etharp_find_entry+0x2d4>)
 80140f8:	4613      	mov	r3, r2
 80140fa:	005b      	lsls	r3, r3, #1
 80140fc:	4413      	add	r3, r2
 80140fe:	00db      	lsls	r3, r3, #3
 8014100:	440b      	add	r3, r1
 8014102:	3312      	adds	r3, #18
 8014104:	881b      	ldrh	r3, [r3, #0]
 8014106:	8b3a      	ldrh	r2, [r7, #24]
 8014108:	429a      	cmp	r2, r3
 801410a:	d80c      	bhi.n	8014126 <etharp_find_entry+0x18a>
            old_stable = i;
 801410c:	8c3b      	ldrh	r3, [r7, #32]
 801410e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014110:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014114:	4956      	ldr	r1, [pc, #344]	@ (8014270 <etharp_find_entry+0x2d4>)
 8014116:	4613      	mov	r3, r2
 8014118:	005b      	lsls	r3, r3, #1
 801411a:	4413      	add	r3, r2
 801411c:	00db      	lsls	r3, r3, #3
 801411e:	440b      	add	r3, r1
 8014120:	3312      	adds	r3, #18
 8014122:	881b      	ldrh	r3, [r3, #0]
 8014124:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014126:	8c3b      	ldrh	r3, [r7, #32]
 8014128:	3301      	adds	r3, #1
 801412a:	b29b      	uxth	r3, r3
 801412c:	843b      	strh	r3, [r7, #32]
 801412e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014132:	2b09      	cmp	r3, #9
 8014134:	f77f af4c 	ble.w	8013fd0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014138:	7afb      	ldrb	r3, [r7, #11]
 801413a:	f003 0302 	and.w	r3, r3, #2
 801413e:	2b00      	cmp	r3, #0
 8014140:	d108      	bne.n	8014154 <etharp_find_entry+0x1b8>
 8014142:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014146:	2b0a      	cmp	r3, #10
 8014148:	d107      	bne.n	801415a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801414a:	7afb      	ldrb	r3, [r7, #11]
 801414c:	f003 0301 	and.w	r3, r3, #1
 8014150:	2b00      	cmp	r3, #0
 8014152:	d102      	bne.n	801415a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014154:	f04f 33ff 	mov.w	r3, #4294967295
 8014158:	e085      	b.n	8014266 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801415a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801415e:	2b09      	cmp	r3, #9
 8014160:	dc02      	bgt.n	8014168 <etharp_find_entry+0x1cc>
    i = empty;
 8014162:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014164:	843b      	strh	r3, [r7, #32]
 8014166:	e039      	b.n	80141dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014168:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801416c:	2b09      	cmp	r3, #9
 801416e:	dc14      	bgt.n	801419a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014172:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014178:	493d      	ldr	r1, [pc, #244]	@ (8014270 <etharp_find_entry+0x2d4>)
 801417a:	4613      	mov	r3, r2
 801417c:	005b      	lsls	r3, r3, #1
 801417e:	4413      	add	r3, r2
 8014180:	00db      	lsls	r3, r3, #3
 8014182:	440b      	add	r3, r1
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d018      	beq.n	80141bc <etharp_find_entry+0x220>
 801418a:	4b3a      	ldr	r3, [pc, #232]	@ (8014274 <etharp_find_entry+0x2d8>)
 801418c:	f240 126d 	movw	r2, #365	@ 0x16d
 8014190:	493b      	ldr	r1, [pc, #236]	@ (8014280 <etharp_find_entry+0x2e4>)
 8014192:	483a      	ldr	r0, [pc, #232]	@ (801427c <etharp_find_entry+0x2e0>)
 8014194:	f7ec ffba 	bl	800110c <printf>
 8014198:	e010      	b.n	80141bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801419a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801419e:	2b09      	cmp	r3, #9
 80141a0:	dc02      	bgt.n	80141a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80141a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80141a4:	843b      	strh	r3, [r7, #32]
 80141a6:	e009      	b.n	80141bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80141a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80141ac:	2b09      	cmp	r3, #9
 80141ae:	dc02      	bgt.n	80141b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80141b0:	8bfb      	ldrh	r3, [r7, #30]
 80141b2:	843b      	strh	r3, [r7, #32]
 80141b4:	e002      	b.n	80141bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80141b6:	f04f 33ff 	mov.w	r3, #4294967295
 80141ba:	e054      	b.n	8014266 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80141bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141c0:	2b09      	cmp	r3, #9
 80141c2:	dd06      	ble.n	80141d2 <etharp_find_entry+0x236>
 80141c4:	4b2b      	ldr	r3, [pc, #172]	@ (8014274 <etharp_find_entry+0x2d8>)
 80141c6:	f240 127f 	movw	r2, #383	@ 0x17f
 80141ca:	492e      	ldr	r1, [pc, #184]	@ (8014284 <etharp_find_entry+0x2e8>)
 80141cc:	482b      	ldr	r0, [pc, #172]	@ (801427c <etharp_find_entry+0x2e0>)
 80141ce:	f7ec ff9d 	bl	800110c <printf>
    etharp_free_entry(i);
 80141d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7ff fe06 	bl	8013de8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80141dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141e0:	2b09      	cmp	r3, #9
 80141e2:	dd06      	ble.n	80141f2 <etharp_find_entry+0x256>
 80141e4:	4b23      	ldr	r3, [pc, #140]	@ (8014274 <etharp_find_entry+0x2d8>)
 80141e6:	f240 1283 	movw	r2, #387	@ 0x183
 80141ea:	4926      	ldr	r1, [pc, #152]	@ (8014284 <etharp_find_entry+0x2e8>)
 80141ec:	4823      	ldr	r0, [pc, #140]	@ (801427c <etharp_find_entry+0x2e0>)
 80141ee:	f7ec ff8d 	bl	800110c <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80141f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141f6:	491e      	ldr	r1, [pc, #120]	@ (8014270 <etharp_find_entry+0x2d4>)
 80141f8:	4613      	mov	r3, r2
 80141fa:	005b      	lsls	r3, r3, #1
 80141fc:	4413      	add	r3, r2
 80141fe:	00db      	lsls	r3, r3, #3
 8014200:	440b      	add	r3, r1
 8014202:	3314      	adds	r3, #20
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d006      	beq.n	8014218 <etharp_find_entry+0x27c>
 801420a:	4b1a      	ldr	r3, [pc, #104]	@ (8014274 <etharp_find_entry+0x2d8>)
 801420c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014210:	491d      	ldr	r1, [pc, #116]	@ (8014288 <etharp_find_entry+0x2ec>)
 8014212:	481a      	ldr	r0, [pc, #104]	@ (801427c <etharp_find_entry+0x2e0>)
 8014214:	f7ec ff7a 	bl	800110c <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d00b      	beq.n	8014236 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801421e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	6819      	ldr	r1, [r3, #0]
 8014226:	4812      	ldr	r0, [pc, #72]	@ (8014270 <etharp_find_entry+0x2d4>)
 8014228:	4613      	mov	r3, r2
 801422a:	005b      	lsls	r3, r3, #1
 801422c:	4413      	add	r3, r2
 801422e:	00db      	lsls	r3, r3, #3
 8014230:	4403      	add	r3, r0
 8014232:	3304      	adds	r3, #4
 8014234:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014236:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801423a:	490d      	ldr	r1, [pc, #52]	@ (8014270 <etharp_find_entry+0x2d4>)
 801423c:	4613      	mov	r3, r2
 801423e:	005b      	lsls	r3, r3, #1
 8014240:	4413      	add	r3, r2
 8014242:	00db      	lsls	r3, r3, #3
 8014244:	440b      	add	r3, r1
 8014246:	3312      	adds	r3, #18
 8014248:	2200      	movs	r2, #0
 801424a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801424c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014250:	4907      	ldr	r1, [pc, #28]	@ (8014270 <etharp_find_entry+0x2d4>)
 8014252:	4613      	mov	r3, r2
 8014254:	005b      	lsls	r3, r3, #1
 8014256:	4413      	add	r3, r2
 8014258:	00db      	lsls	r3, r3, #3
 801425a:	440b      	add	r3, r1
 801425c:	3308      	adds	r3, #8
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014262:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014266:	4618      	mov	r0, r3
 8014268:	3728      	adds	r7, #40	@ 0x28
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	bf00      	nop
 8014270:	2000c604 	.word	0x2000c604
 8014274:	0801a6d4 	.word	0x0801a6d4
 8014278:	0801a70c 	.word	0x0801a70c
 801427c:	0801a74c 	.word	0x0801a74c
 8014280:	0801a774 	.word	0x0801a774
 8014284:	0801a78c 	.word	0x0801a78c
 8014288:	0801a7a0 	.word	0x0801a7a0

0801428c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b088      	sub	sp, #32
 8014290:	af02      	add	r7, sp, #8
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	60b9      	str	r1, [r7, #8]
 8014296:	607a      	str	r2, [r7, #4]
 8014298:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80142a0:	2b06      	cmp	r3, #6
 80142a2:	d006      	beq.n	80142b2 <etharp_update_arp_entry+0x26>
 80142a4:	4b48      	ldr	r3, [pc, #288]	@ (80143c8 <etharp_update_arp_entry+0x13c>)
 80142a6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80142aa:	4948      	ldr	r1, [pc, #288]	@ (80143cc <etharp_update_arp_entry+0x140>)
 80142ac:	4848      	ldr	r0, [pc, #288]	@ (80143d0 <etharp_update_arp_entry+0x144>)
 80142ae:	f7ec ff2d 	bl	800110c <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d012      	beq.n	80142de <etharp_update_arp_entry+0x52>
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d00e      	beq.n	80142de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	68f9      	ldr	r1, [r7, #12]
 80142c6:	4618      	mov	r0, r3
 80142c8:	f001 f8fe 	bl	80154c8 <ip4_addr_isbroadcast_u32>
 80142cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d105      	bne.n	80142de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80142da:	2be0      	cmp	r3, #224	@ 0xe0
 80142dc:	d102      	bne.n	80142e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80142de:	f06f 030f 	mvn.w	r3, #15
 80142e2:	e06c      	b.n	80143be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80142e4:	78fb      	ldrb	r3, [r7, #3]
 80142e6:	68fa      	ldr	r2, [r7, #12]
 80142e8:	4619      	mov	r1, r3
 80142ea:	68b8      	ldr	r0, [r7, #8]
 80142ec:	f7ff fe56 	bl	8013f9c <etharp_find_entry>
 80142f0:	4603      	mov	r3, r0
 80142f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80142f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	da02      	bge.n	8014302 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80142fc:	8afb      	ldrh	r3, [r7, #22]
 80142fe:	b25b      	sxtb	r3, r3
 8014300:	e05d      	b.n	80143be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014302:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014306:	4933      	ldr	r1, [pc, #204]	@ (80143d4 <etharp_update_arp_entry+0x148>)
 8014308:	4613      	mov	r3, r2
 801430a:	005b      	lsls	r3, r3, #1
 801430c:	4413      	add	r3, r2
 801430e:	00db      	lsls	r3, r3, #3
 8014310:	440b      	add	r3, r1
 8014312:	3314      	adds	r3, #20
 8014314:	2202      	movs	r2, #2
 8014316:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014318:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801431c:	492d      	ldr	r1, [pc, #180]	@ (80143d4 <etharp_update_arp_entry+0x148>)
 801431e:	4613      	mov	r3, r2
 8014320:	005b      	lsls	r3, r3, #1
 8014322:	4413      	add	r3, r2
 8014324:	00db      	lsls	r3, r3, #3
 8014326:	440b      	add	r3, r1
 8014328:	3308      	adds	r3, #8
 801432a:	68fa      	ldr	r2, [r7, #12]
 801432c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801432e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014332:	4613      	mov	r3, r2
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	4413      	add	r3, r2
 8014338:	00db      	lsls	r3, r3, #3
 801433a:	3308      	adds	r3, #8
 801433c:	4a25      	ldr	r2, [pc, #148]	@ (80143d4 <etharp_update_arp_entry+0x148>)
 801433e:	4413      	add	r3, r2
 8014340:	3304      	adds	r3, #4
 8014342:	2206      	movs	r2, #6
 8014344:	6879      	ldr	r1, [r7, #4]
 8014346:	4618      	mov	r0, r3
 8014348:	f002 fc1d 	bl	8016b86 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801434c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014350:	4920      	ldr	r1, [pc, #128]	@ (80143d4 <etharp_update_arp_entry+0x148>)
 8014352:	4613      	mov	r3, r2
 8014354:	005b      	lsls	r3, r3, #1
 8014356:	4413      	add	r3, r2
 8014358:	00db      	lsls	r3, r3, #3
 801435a:	440b      	add	r3, r1
 801435c:	3312      	adds	r3, #18
 801435e:	2200      	movs	r2, #0
 8014360:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014362:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014366:	491b      	ldr	r1, [pc, #108]	@ (80143d4 <etharp_update_arp_entry+0x148>)
 8014368:	4613      	mov	r3, r2
 801436a:	005b      	lsls	r3, r3, #1
 801436c:	4413      	add	r3, r2
 801436e:	00db      	lsls	r3, r3, #3
 8014370:	440b      	add	r3, r1
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d021      	beq.n	80143bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014378:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801437c:	4915      	ldr	r1, [pc, #84]	@ (80143d4 <etharp_update_arp_entry+0x148>)
 801437e:	4613      	mov	r3, r2
 8014380:	005b      	lsls	r3, r3, #1
 8014382:	4413      	add	r3, r2
 8014384:	00db      	lsls	r3, r3, #3
 8014386:	440b      	add	r3, r1
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801438c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014390:	4910      	ldr	r1, [pc, #64]	@ (80143d4 <etharp_update_arp_entry+0x148>)
 8014392:	4613      	mov	r3, r2
 8014394:	005b      	lsls	r3, r3, #1
 8014396:	4413      	add	r3, r2
 8014398:	00db      	lsls	r3, r3, #3
 801439a:	440b      	add	r3, r1
 801439c:	2200      	movs	r2, #0
 801439e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80143a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80143aa:	9300      	str	r3, [sp, #0]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6939      	ldr	r1, [r7, #16]
 80143b0:	68f8      	ldr	r0, [r7, #12]
 80143b2:	f001 ff97 	bl	80162e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80143b6:	6938      	ldr	r0, [r7, #16]
 80143b8:	f7f8 fd5c 	bl	800ce74 <pbuf_free>
  }
  return ERR_OK;
 80143bc:	2300      	movs	r3, #0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3718      	adds	r7, #24
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	0801a6d4 	.word	0x0801a6d4
 80143cc:	0801a7cc 	.word	0x0801a7cc
 80143d0:	0801a74c 	.word	0x0801a74c
 80143d4:	2000c604 	.word	0x2000c604

080143d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143e0:	2300      	movs	r3, #0
 80143e2:	60fb      	str	r3, [r7, #12]
 80143e4:	e01e      	b.n	8014424 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80143e6:	4913      	ldr	r1, [pc, #76]	@ (8014434 <etharp_cleanup_netif+0x5c>)
 80143e8:	68fa      	ldr	r2, [r7, #12]
 80143ea:	4613      	mov	r3, r2
 80143ec:	005b      	lsls	r3, r3, #1
 80143ee:	4413      	add	r3, r2
 80143f0:	00db      	lsls	r3, r3, #3
 80143f2:	440b      	add	r3, r1
 80143f4:	3314      	adds	r3, #20
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80143fa:	7afb      	ldrb	r3, [r7, #11]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d00e      	beq.n	801441e <etharp_cleanup_netif+0x46>
 8014400:	490c      	ldr	r1, [pc, #48]	@ (8014434 <etharp_cleanup_netif+0x5c>)
 8014402:	68fa      	ldr	r2, [r7, #12]
 8014404:	4613      	mov	r3, r2
 8014406:	005b      	lsls	r3, r3, #1
 8014408:	4413      	add	r3, r2
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	440b      	add	r3, r1
 801440e:	3308      	adds	r3, #8
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	429a      	cmp	r2, r3
 8014416:	d102      	bne.n	801441e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014418:	68f8      	ldr	r0, [r7, #12]
 801441a:	f7ff fce5 	bl	8013de8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	3301      	adds	r3, #1
 8014422:	60fb      	str	r3, [r7, #12]
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2b09      	cmp	r3, #9
 8014428:	dddd      	ble.n	80143e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801442a:	bf00      	nop
 801442c:	bf00      	nop
 801442e:	3710      	adds	r7, #16
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	2000c604 	.word	0x2000c604

08014438 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014438:	b5b0      	push	{r4, r5, r7, lr}
 801443a:	b08a      	sub	sp, #40	@ 0x28
 801443c:	af04      	add	r7, sp, #16
 801443e:	6078      	str	r0, [r7, #4]
 8014440:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d107      	bne.n	8014458 <etharp_input+0x20>
 8014448:	4b3d      	ldr	r3, [pc, #244]	@ (8014540 <etharp_input+0x108>)
 801444a:	f240 228a 	movw	r2, #650	@ 0x28a
 801444e:	493d      	ldr	r1, [pc, #244]	@ (8014544 <etharp_input+0x10c>)
 8014450:	483d      	ldr	r0, [pc, #244]	@ (8014548 <etharp_input+0x110>)
 8014452:	f7ec fe5b 	bl	800110c <printf>
 8014456:	e06f      	b.n	8014538 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	881b      	ldrh	r3, [r3, #0]
 8014462:	b29b      	uxth	r3, r3
 8014464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014468:	d10c      	bne.n	8014484 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801446e:	2b06      	cmp	r3, #6
 8014470:	d108      	bne.n	8014484 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014476:	2b04      	cmp	r3, #4
 8014478:	d104      	bne.n	8014484 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	885b      	ldrh	r3, [r3, #2]
 801447e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014480:	2b08      	cmp	r3, #8
 8014482:	d003      	beq.n	801448c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7f8 fcf5 	bl	800ce74 <pbuf_free>
    return;
 801448a:	e055      	b.n	8014538 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	330e      	adds	r3, #14
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	3318      	adds	r3, #24
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	3304      	adds	r3, #4
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d102      	bne.n	80144ac <etharp_input+0x74>
    for_us = 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	75fb      	strb	r3, [r7, #23]
 80144aa:	e009      	b.n	80144c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80144ac:	68ba      	ldr	r2, [r7, #8]
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	3304      	adds	r3, #4
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	bf0c      	ite	eq
 80144b8:	2301      	moveq	r3, #1
 80144ba:	2300      	movne	r3, #0
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	f103 0208 	add.w	r2, r3, #8
 80144c6:	7dfb      	ldrb	r3, [r7, #23]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d001      	beq.n	80144d0 <etharp_input+0x98>
 80144cc:	2301      	movs	r3, #1
 80144ce:	e000      	b.n	80144d2 <etharp_input+0x9a>
 80144d0:	2302      	movs	r3, #2
 80144d2:	f107 010c 	add.w	r1, r7, #12
 80144d6:	6838      	ldr	r0, [r7, #0]
 80144d8:	f7ff fed8 	bl	801428c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80144dc:	693b      	ldr	r3, [r7, #16]
 80144de:	88db      	ldrh	r3, [r3, #6]
 80144e0:	b29b      	uxth	r3, r3
 80144e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144e6:	d003      	beq.n	80144f0 <etharp_input+0xb8>
 80144e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144ec:	d01e      	beq.n	801452c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80144ee:	e020      	b.n	8014532 <etharp_input+0xfa>
      if (for_us) {
 80144f0:	7dfb      	ldrb	r3, [r7, #23]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d01c      	beq.n	8014530 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80144f6:	683b      	ldr	r3, [r7, #0]
 80144f8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801450c:	693a      	ldr	r2, [r7, #16]
 801450e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014510:	2102      	movs	r1, #2
 8014512:	9103      	str	r1, [sp, #12]
 8014514:	f107 010c 	add.w	r1, r7, #12
 8014518:	9102      	str	r1, [sp, #8]
 801451a:	9201      	str	r2, [sp, #4]
 801451c:	9300      	str	r3, [sp, #0]
 801451e:	462b      	mov	r3, r5
 8014520:	4622      	mov	r2, r4
 8014522:	4601      	mov	r1, r0
 8014524:	6838      	ldr	r0, [r7, #0]
 8014526:	f000 faeb 	bl	8014b00 <etharp_raw>
      break;
 801452a:	e001      	b.n	8014530 <etharp_input+0xf8>
      break;
 801452c:	bf00      	nop
 801452e:	e000      	b.n	8014532 <etharp_input+0xfa>
      break;
 8014530:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7f8 fc9e 	bl	800ce74 <pbuf_free>
}
 8014538:	3718      	adds	r7, #24
 801453a:	46bd      	mov	sp, r7
 801453c:	bdb0      	pop	{r4, r5, r7, pc}
 801453e:	bf00      	nop
 8014540:	0801a6d4 	.word	0x0801a6d4
 8014544:	0801a824 	.word	0x0801a824
 8014548:	0801a74c 	.word	0x0801a74c

0801454c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b086      	sub	sp, #24
 8014550:	af02      	add	r7, sp, #8
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	4613      	mov	r3, r2
 8014558:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801455a:	79fa      	ldrb	r2, [r7, #7]
 801455c:	4944      	ldr	r1, [pc, #272]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 801455e:	4613      	mov	r3, r2
 8014560:	005b      	lsls	r3, r3, #1
 8014562:	4413      	add	r3, r2
 8014564:	00db      	lsls	r3, r3, #3
 8014566:	440b      	add	r3, r1
 8014568:	3314      	adds	r3, #20
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	2b01      	cmp	r3, #1
 801456e:	d806      	bhi.n	801457e <etharp_output_to_arp_index+0x32>
 8014570:	4b40      	ldr	r3, [pc, #256]	@ (8014674 <etharp_output_to_arp_index+0x128>)
 8014572:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014576:	4940      	ldr	r1, [pc, #256]	@ (8014678 <etharp_output_to_arp_index+0x12c>)
 8014578:	4840      	ldr	r0, [pc, #256]	@ (801467c <etharp_output_to_arp_index+0x130>)
 801457a:	f7ec fdc7 	bl	800110c <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801457e:	79fa      	ldrb	r2, [r7, #7]
 8014580:	493b      	ldr	r1, [pc, #236]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 8014582:	4613      	mov	r3, r2
 8014584:	005b      	lsls	r3, r3, #1
 8014586:	4413      	add	r3, r2
 8014588:	00db      	lsls	r3, r3, #3
 801458a:	440b      	add	r3, r1
 801458c:	3314      	adds	r3, #20
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	2b02      	cmp	r3, #2
 8014592:	d153      	bne.n	801463c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014594:	79fa      	ldrb	r2, [r7, #7]
 8014596:	4936      	ldr	r1, [pc, #216]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 8014598:	4613      	mov	r3, r2
 801459a:	005b      	lsls	r3, r3, #1
 801459c:	4413      	add	r3, r2
 801459e:	00db      	lsls	r3, r3, #3
 80145a0:	440b      	add	r3, r1
 80145a2:	3312      	adds	r3, #18
 80145a4:	881b      	ldrh	r3, [r3, #0]
 80145a6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80145aa:	d919      	bls.n	80145e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80145ac:	79fa      	ldrb	r2, [r7, #7]
 80145ae:	4613      	mov	r3, r2
 80145b0:	005b      	lsls	r3, r3, #1
 80145b2:	4413      	add	r3, r2
 80145b4:	00db      	lsls	r3, r3, #3
 80145b6:	4a2e      	ldr	r2, [pc, #184]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 80145b8:	4413      	add	r3, r2
 80145ba:	3304      	adds	r3, #4
 80145bc:	4619      	mov	r1, r3
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f000 fb4c 	bl	8014c5c <etharp_request>
 80145c4:	4603      	mov	r3, r0
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d138      	bne.n	801463c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80145ca:	79fa      	ldrb	r2, [r7, #7]
 80145cc:	4928      	ldr	r1, [pc, #160]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 80145ce:	4613      	mov	r3, r2
 80145d0:	005b      	lsls	r3, r3, #1
 80145d2:	4413      	add	r3, r2
 80145d4:	00db      	lsls	r3, r3, #3
 80145d6:	440b      	add	r3, r1
 80145d8:	3314      	adds	r3, #20
 80145da:	2203      	movs	r2, #3
 80145dc:	701a      	strb	r2, [r3, #0]
 80145de:	e02d      	b.n	801463c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80145e0:	79fa      	ldrb	r2, [r7, #7]
 80145e2:	4923      	ldr	r1, [pc, #140]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 80145e4:	4613      	mov	r3, r2
 80145e6:	005b      	lsls	r3, r3, #1
 80145e8:	4413      	add	r3, r2
 80145ea:	00db      	lsls	r3, r3, #3
 80145ec:	440b      	add	r3, r1
 80145ee:	3312      	adds	r3, #18
 80145f0:	881b      	ldrh	r3, [r3, #0]
 80145f2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80145f6:	d321      	bcc.n	801463c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80145f8:	79fa      	ldrb	r2, [r7, #7]
 80145fa:	4613      	mov	r3, r2
 80145fc:	005b      	lsls	r3, r3, #1
 80145fe:	4413      	add	r3, r2
 8014600:	00db      	lsls	r3, r3, #3
 8014602:	4a1b      	ldr	r2, [pc, #108]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 8014604:	4413      	add	r3, r2
 8014606:	1d19      	adds	r1, r3, #4
 8014608:	79fa      	ldrb	r2, [r7, #7]
 801460a:	4613      	mov	r3, r2
 801460c:	005b      	lsls	r3, r3, #1
 801460e:	4413      	add	r3, r2
 8014610:	00db      	lsls	r3, r3, #3
 8014612:	3308      	adds	r3, #8
 8014614:	4a16      	ldr	r2, [pc, #88]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 8014616:	4413      	add	r3, r2
 8014618:	3304      	adds	r3, #4
 801461a:	461a      	mov	r2, r3
 801461c:	68f8      	ldr	r0, [r7, #12]
 801461e:	f000 fafb 	bl	8014c18 <etharp_request_dst>
 8014622:	4603      	mov	r3, r0
 8014624:	2b00      	cmp	r3, #0
 8014626:	d109      	bne.n	801463c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014628:	79fa      	ldrb	r2, [r7, #7]
 801462a:	4911      	ldr	r1, [pc, #68]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 801462c:	4613      	mov	r3, r2
 801462e:	005b      	lsls	r3, r3, #1
 8014630:	4413      	add	r3, r2
 8014632:	00db      	lsls	r3, r3, #3
 8014634:	440b      	add	r3, r1
 8014636:	3314      	adds	r3, #20
 8014638:	2203      	movs	r2, #3
 801463a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014642:	79fa      	ldrb	r2, [r7, #7]
 8014644:	4613      	mov	r3, r2
 8014646:	005b      	lsls	r3, r3, #1
 8014648:	4413      	add	r3, r2
 801464a:	00db      	lsls	r3, r3, #3
 801464c:	3308      	adds	r3, #8
 801464e:	4a08      	ldr	r2, [pc, #32]	@ (8014670 <etharp_output_to_arp_index+0x124>)
 8014650:	4413      	add	r3, r2
 8014652:	3304      	adds	r3, #4
 8014654:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014658:	9200      	str	r2, [sp, #0]
 801465a:	460a      	mov	r2, r1
 801465c:	68b9      	ldr	r1, [r7, #8]
 801465e:	68f8      	ldr	r0, [r7, #12]
 8014660:	f001 fe40 	bl	80162e4 <ethernet_output>
 8014664:	4603      	mov	r3, r0
}
 8014666:	4618      	mov	r0, r3
 8014668:	3710      	adds	r7, #16
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	2000c604 	.word	0x2000c604
 8014674:	0801a6d4 	.word	0x0801a6d4
 8014678:	0801a844 	.word	0x0801a844
 801467c:	0801a74c 	.word	0x0801a74c

08014680 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b08a      	sub	sp, #40	@ 0x28
 8014684:	af02      	add	r7, sp, #8
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d106      	bne.n	80146a4 <etharp_output+0x24>
 8014696:	4b73      	ldr	r3, [pc, #460]	@ (8014864 <etharp_output+0x1e4>)
 8014698:	f240 321e 	movw	r2, #798	@ 0x31e
 801469c:	4972      	ldr	r1, [pc, #456]	@ (8014868 <etharp_output+0x1e8>)
 801469e:	4873      	ldr	r0, [pc, #460]	@ (801486c <etharp_output+0x1ec>)
 80146a0:	f7ec fd34 	bl	800110c <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d106      	bne.n	80146b8 <etharp_output+0x38>
 80146aa:	4b6e      	ldr	r3, [pc, #440]	@ (8014864 <etharp_output+0x1e4>)
 80146ac:	f240 321f 	movw	r2, #799	@ 0x31f
 80146b0:	496f      	ldr	r1, [pc, #444]	@ (8014870 <etharp_output+0x1f0>)
 80146b2:	486e      	ldr	r0, [pc, #440]	@ (801486c <etharp_output+0x1ec>)
 80146b4:	f7ec fd2a 	bl	800110c <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d106      	bne.n	80146cc <etharp_output+0x4c>
 80146be:	4b69      	ldr	r3, [pc, #420]	@ (8014864 <etharp_output+0x1e4>)
 80146c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80146c4:	496b      	ldr	r1, [pc, #428]	@ (8014874 <etharp_output+0x1f4>)
 80146c6:	4869      	ldr	r0, [pc, #420]	@ (801486c <etharp_output+0x1ec>)
 80146c8:	f7ec fd20 	bl	800110c <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	68f9      	ldr	r1, [r7, #12]
 80146d2:	4618      	mov	r0, r3
 80146d4:	f000 fef8 	bl	80154c8 <ip4_addr_isbroadcast_u32>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d002      	beq.n	80146e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80146de:	4b66      	ldr	r3, [pc, #408]	@ (8014878 <etharp_output+0x1f8>)
 80146e0:	61fb      	str	r3, [r7, #28]
 80146e2:	e0af      	b.n	8014844 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80146ec:	2be0      	cmp	r3, #224	@ 0xe0
 80146ee:	d118      	bne.n	8014722 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80146f0:	2301      	movs	r3, #1
 80146f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80146f4:	2300      	movs	r3, #0
 80146f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80146f8:	235e      	movs	r3, #94	@ 0x5e
 80146fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	3301      	adds	r3, #1
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014706:	b2db      	uxtb	r3, r3
 8014708:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	3302      	adds	r3, #2
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	3303      	adds	r3, #3
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801471a:	f107 0310 	add.w	r3, r7, #16
 801471e:	61fb      	str	r3, [r7, #28]
 8014720:	e090      	b.n	8014844 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	3304      	adds	r3, #4
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	405a      	eors	r2, r3
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	3308      	adds	r3, #8
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	4013      	ands	r3, r2
 8014736:	2b00      	cmp	r3, #0
 8014738:	d012      	beq.n	8014760 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014740:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014744:	4293      	cmp	r3, r2
 8014746:	d00b      	beq.n	8014760 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	330c      	adds	r3, #12
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d003      	beq.n	801475a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	330c      	adds	r3, #12
 8014756:	61bb      	str	r3, [r7, #24]
 8014758:	e002      	b.n	8014760 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801475a:	f06f 0303 	mvn.w	r3, #3
 801475e:	e07d      	b.n	801485c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014760:	4b46      	ldr	r3, [pc, #280]	@ (801487c <etharp_output+0x1fc>)
 8014762:	781b      	ldrb	r3, [r3, #0]
 8014764:	4619      	mov	r1, r3
 8014766:	4a46      	ldr	r2, [pc, #280]	@ (8014880 <etharp_output+0x200>)
 8014768:	460b      	mov	r3, r1
 801476a:	005b      	lsls	r3, r3, #1
 801476c:	440b      	add	r3, r1
 801476e:	00db      	lsls	r3, r3, #3
 8014770:	4413      	add	r3, r2
 8014772:	3314      	adds	r3, #20
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	2b01      	cmp	r3, #1
 8014778:	d925      	bls.n	80147c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801477a:	4b40      	ldr	r3, [pc, #256]	@ (801487c <etharp_output+0x1fc>)
 801477c:	781b      	ldrb	r3, [r3, #0]
 801477e:	4619      	mov	r1, r3
 8014780:	4a3f      	ldr	r2, [pc, #252]	@ (8014880 <etharp_output+0x200>)
 8014782:	460b      	mov	r3, r1
 8014784:	005b      	lsls	r3, r3, #1
 8014786:	440b      	add	r3, r1
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	4413      	add	r3, r2
 801478c:	3308      	adds	r3, #8
 801478e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014790:	68fa      	ldr	r2, [r7, #12]
 8014792:	429a      	cmp	r2, r3
 8014794:	d117      	bne.n	80147c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014796:	69bb      	ldr	r3, [r7, #24]
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	4b38      	ldr	r3, [pc, #224]	@ (801487c <etharp_output+0x1fc>)
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	4618      	mov	r0, r3
 80147a0:	4937      	ldr	r1, [pc, #220]	@ (8014880 <etharp_output+0x200>)
 80147a2:	4603      	mov	r3, r0
 80147a4:	005b      	lsls	r3, r3, #1
 80147a6:	4403      	add	r3, r0
 80147a8:	00db      	lsls	r3, r3, #3
 80147aa:	440b      	add	r3, r1
 80147ac:	3304      	adds	r3, #4
 80147ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d108      	bne.n	80147c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80147b4:	4b31      	ldr	r3, [pc, #196]	@ (801487c <etharp_output+0x1fc>)
 80147b6:	781b      	ldrb	r3, [r3, #0]
 80147b8:	461a      	mov	r2, r3
 80147ba:	68b9      	ldr	r1, [r7, #8]
 80147bc:	68f8      	ldr	r0, [r7, #12]
 80147be:	f7ff fec5 	bl	801454c <etharp_output_to_arp_index>
 80147c2:	4603      	mov	r3, r0
 80147c4:	e04a      	b.n	801485c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80147c6:	2300      	movs	r3, #0
 80147c8:	75fb      	strb	r3, [r7, #23]
 80147ca:	e031      	b.n	8014830 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80147cc:	7dfa      	ldrb	r2, [r7, #23]
 80147ce:	492c      	ldr	r1, [pc, #176]	@ (8014880 <etharp_output+0x200>)
 80147d0:	4613      	mov	r3, r2
 80147d2:	005b      	lsls	r3, r3, #1
 80147d4:	4413      	add	r3, r2
 80147d6:	00db      	lsls	r3, r3, #3
 80147d8:	440b      	add	r3, r1
 80147da:	3314      	adds	r3, #20
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	2b01      	cmp	r3, #1
 80147e0:	d923      	bls.n	801482a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80147e2:	7dfa      	ldrb	r2, [r7, #23]
 80147e4:	4926      	ldr	r1, [pc, #152]	@ (8014880 <etharp_output+0x200>)
 80147e6:	4613      	mov	r3, r2
 80147e8:	005b      	lsls	r3, r3, #1
 80147ea:	4413      	add	r3, r2
 80147ec:	00db      	lsls	r3, r3, #3
 80147ee:	440b      	add	r3, r1
 80147f0:	3308      	adds	r3, #8
 80147f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80147f4:	68fa      	ldr	r2, [r7, #12]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d117      	bne.n	801482a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	6819      	ldr	r1, [r3, #0]
 80147fe:	7dfa      	ldrb	r2, [r7, #23]
 8014800:	481f      	ldr	r0, [pc, #124]	@ (8014880 <etharp_output+0x200>)
 8014802:	4613      	mov	r3, r2
 8014804:	005b      	lsls	r3, r3, #1
 8014806:	4413      	add	r3, r2
 8014808:	00db      	lsls	r3, r3, #3
 801480a:	4403      	add	r3, r0
 801480c:	3304      	adds	r3, #4
 801480e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014810:	4299      	cmp	r1, r3
 8014812:	d10a      	bne.n	801482a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014814:	4a19      	ldr	r2, [pc, #100]	@ (801487c <etharp_output+0x1fc>)
 8014816:	7dfb      	ldrb	r3, [r7, #23]
 8014818:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801481a:	7dfb      	ldrb	r3, [r7, #23]
 801481c:	461a      	mov	r2, r3
 801481e:	68b9      	ldr	r1, [r7, #8]
 8014820:	68f8      	ldr	r0, [r7, #12]
 8014822:	f7ff fe93 	bl	801454c <etharp_output_to_arp_index>
 8014826:	4603      	mov	r3, r0
 8014828:	e018      	b.n	801485c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801482a:	7dfb      	ldrb	r3, [r7, #23]
 801482c:	3301      	adds	r3, #1
 801482e:	75fb      	strb	r3, [r7, #23]
 8014830:	7dfb      	ldrb	r3, [r7, #23]
 8014832:	2b09      	cmp	r3, #9
 8014834:	d9ca      	bls.n	80147cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014836:	68ba      	ldr	r2, [r7, #8]
 8014838:	69b9      	ldr	r1, [r7, #24]
 801483a:	68f8      	ldr	r0, [r7, #12]
 801483c:	f000 f822 	bl	8014884 <etharp_query>
 8014840:	4603      	mov	r3, r0
 8014842:	e00b      	b.n	801485c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801484a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	69fb      	ldr	r3, [r7, #28]
 8014852:	68b9      	ldr	r1, [r7, #8]
 8014854:	68f8      	ldr	r0, [r7, #12]
 8014856:	f001 fd45 	bl	80162e4 <ethernet_output>
 801485a:	4603      	mov	r3, r0
}
 801485c:	4618      	mov	r0, r3
 801485e:	3720      	adds	r7, #32
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}
 8014864:	0801a6d4 	.word	0x0801a6d4
 8014868:	0801a824 	.word	0x0801a824
 801486c:	0801a74c 	.word	0x0801a74c
 8014870:	0801a874 	.word	0x0801a874
 8014874:	0801a814 	.word	0x0801a814
 8014878:	0801aed4 	.word	0x0801aed4
 801487c:	2000c6f4 	.word	0x2000c6f4
 8014880:	2000c604 	.word	0x2000c604

08014884 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b08c      	sub	sp, #48	@ 0x30
 8014888:	af02      	add	r7, sp, #8
 801488a:	60f8      	str	r0, [r7, #12]
 801488c:	60b9      	str	r1, [r7, #8]
 801488e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	3326      	adds	r3, #38	@ 0x26
 8014894:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014896:	23ff      	movs	r3, #255	@ 0xff
 8014898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801489c:	2300      	movs	r3, #0
 801489e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	68f9      	ldr	r1, [r7, #12]
 80148a6:	4618      	mov	r0, r3
 80148a8:	f000 fe0e 	bl	80154c8 <ip4_addr_isbroadcast_u32>
 80148ac:	4603      	mov	r3, r0
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d10c      	bne.n	80148cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80148ba:	2be0      	cmp	r3, #224	@ 0xe0
 80148bc:	d006      	beq.n	80148cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d003      	beq.n	80148cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d102      	bne.n	80148d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80148cc:	f06f 030f 	mvn.w	r3, #15
 80148d0:	e101      	b.n	8014ad6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80148d2:	68fa      	ldr	r2, [r7, #12]
 80148d4:	2101      	movs	r1, #1
 80148d6:	68b8      	ldr	r0, [r7, #8]
 80148d8:	f7ff fb60 	bl	8013f9c <etharp_find_entry>
 80148dc:	4603      	mov	r3, r0
 80148de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80148e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	da02      	bge.n	80148ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80148e8:	8a7b      	ldrh	r3, [r7, #18]
 80148ea:	b25b      	sxtb	r3, r3
 80148ec:	e0f3      	b.n	8014ad6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80148ee:	8a7b      	ldrh	r3, [r7, #18]
 80148f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80148f2:	d906      	bls.n	8014902 <etharp_query+0x7e>
 80148f4:	4b7a      	ldr	r3, [pc, #488]	@ (8014ae0 <etharp_query+0x25c>)
 80148f6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80148fa:	497a      	ldr	r1, [pc, #488]	@ (8014ae4 <etharp_query+0x260>)
 80148fc:	487a      	ldr	r0, [pc, #488]	@ (8014ae8 <etharp_query+0x264>)
 80148fe:	f7ec fc05 	bl	800110c <printf>
  i = (netif_addr_idx_t)i_err;
 8014902:	8a7b      	ldrh	r3, [r7, #18]
 8014904:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014906:	7c7a      	ldrb	r2, [r7, #17]
 8014908:	4978      	ldr	r1, [pc, #480]	@ (8014aec <etharp_query+0x268>)
 801490a:	4613      	mov	r3, r2
 801490c:	005b      	lsls	r3, r3, #1
 801490e:	4413      	add	r3, r2
 8014910:	00db      	lsls	r3, r3, #3
 8014912:	440b      	add	r3, r1
 8014914:	3314      	adds	r3, #20
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d115      	bne.n	8014948 <etharp_query+0xc4>
    is_new_entry = 1;
 801491c:	2301      	movs	r3, #1
 801491e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014920:	7c7a      	ldrb	r2, [r7, #17]
 8014922:	4972      	ldr	r1, [pc, #456]	@ (8014aec <etharp_query+0x268>)
 8014924:	4613      	mov	r3, r2
 8014926:	005b      	lsls	r3, r3, #1
 8014928:	4413      	add	r3, r2
 801492a:	00db      	lsls	r3, r3, #3
 801492c:	440b      	add	r3, r1
 801492e:	3314      	adds	r3, #20
 8014930:	2201      	movs	r2, #1
 8014932:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014934:	7c7a      	ldrb	r2, [r7, #17]
 8014936:	496d      	ldr	r1, [pc, #436]	@ (8014aec <etharp_query+0x268>)
 8014938:	4613      	mov	r3, r2
 801493a:	005b      	lsls	r3, r3, #1
 801493c:	4413      	add	r3, r2
 801493e:	00db      	lsls	r3, r3, #3
 8014940:	440b      	add	r3, r1
 8014942:	3308      	adds	r3, #8
 8014944:	68fa      	ldr	r2, [r7, #12]
 8014946:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014948:	7c7a      	ldrb	r2, [r7, #17]
 801494a:	4968      	ldr	r1, [pc, #416]	@ (8014aec <etharp_query+0x268>)
 801494c:	4613      	mov	r3, r2
 801494e:	005b      	lsls	r3, r3, #1
 8014950:	4413      	add	r3, r2
 8014952:	00db      	lsls	r3, r3, #3
 8014954:	440b      	add	r3, r1
 8014956:	3314      	adds	r3, #20
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	2b01      	cmp	r3, #1
 801495c:	d011      	beq.n	8014982 <etharp_query+0xfe>
 801495e:	7c7a      	ldrb	r2, [r7, #17]
 8014960:	4962      	ldr	r1, [pc, #392]	@ (8014aec <etharp_query+0x268>)
 8014962:	4613      	mov	r3, r2
 8014964:	005b      	lsls	r3, r3, #1
 8014966:	4413      	add	r3, r2
 8014968:	00db      	lsls	r3, r3, #3
 801496a:	440b      	add	r3, r1
 801496c:	3314      	adds	r3, #20
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	2b01      	cmp	r3, #1
 8014972:	d806      	bhi.n	8014982 <etharp_query+0xfe>
 8014974:	4b5a      	ldr	r3, [pc, #360]	@ (8014ae0 <etharp_query+0x25c>)
 8014976:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801497a:	495d      	ldr	r1, [pc, #372]	@ (8014af0 <etharp_query+0x26c>)
 801497c:	485a      	ldr	r0, [pc, #360]	@ (8014ae8 <etharp_query+0x264>)
 801497e:	f7ec fbc5 	bl	800110c <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014982:	6a3b      	ldr	r3, [r7, #32]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d102      	bne.n	801498e <etharp_query+0x10a>
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d10c      	bne.n	80149a8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801498e:	68b9      	ldr	r1, [r7, #8]
 8014990:	68f8      	ldr	r0, [r7, #12]
 8014992:	f000 f963 	bl	8014c5c <etharp_request>
 8014996:	4603      	mov	r3, r0
 8014998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d102      	bne.n	80149a8 <etharp_query+0x124>
      return result;
 80149a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80149a6:	e096      	b.n	8014ad6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d106      	bne.n	80149bc <etharp_query+0x138>
 80149ae:	4b4c      	ldr	r3, [pc, #304]	@ (8014ae0 <etharp_query+0x25c>)
 80149b0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80149b4:	494f      	ldr	r1, [pc, #316]	@ (8014af4 <etharp_query+0x270>)
 80149b6:	484c      	ldr	r0, [pc, #304]	@ (8014ae8 <etharp_query+0x264>)
 80149b8:	f7ec fba8 	bl	800110c <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80149bc:	7c7a      	ldrb	r2, [r7, #17]
 80149be:	494b      	ldr	r1, [pc, #300]	@ (8014aec <etharp_query+0x268>)
 80149c0:	4613      	mov	r3, r2
 80149c2:	005b      	lsls	r3, r3, #1
 80149c4:	4413      	add	r3, r2
 80149c6:	00db      	lsls	r3, r3, #3
 80149c8:	440b      	add	r3, r1
 80149ca:	3314      	adds	r3, #20
 80149cc:	781b      	ldrb	r3, [r3, #0]
 80149ce:	2b01      	cmp	r3, #1
 80149d0:	d917      	bls.n	8014a02 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80149d2:	4a49      	ldr	r2, [pc, #292]	@ (8014af8 <etharp_query+0x274>)
 80149d4:	7c7b      	ldrb	r3, [r7, #17]
 80149d6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80149d8:	7c7a      	ldrb	r2, [r7, #17]
 80149da:	4613      	mov	r3, r2
 80149dc:	005b      	lsls	r3, r3, #1
 80149de:	4413      	add	r3, r2
 80149e0:	00db      	lsls	r3, r3, #3
 80149e2:	3308      	adds	r3, #8
 80149e4:	4a41      	ldr	r2, [pc, #260]	@ (8014aec <etharp_query+0x268>)
 80149e6:	4413      	add	r3, r2
 80149e8:	3304      	adds	r3, #4
 80149ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80149ee:	9200      	str	r2, [sp, #0]
 80149f0:	697a      	ldr	r2, [r7, #20]
 80149f2:	6879      	ldr	r1, [r7, #4]
 80149f4:	68f8      	ldr	r0, [r7, #12]
 80149f6:	f001 fc75 	bl	80162e4 <ethernet_output>
 80149fa:	4603      	mov	r3, r0
 80149fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014a00:	e067      	b.n	8014ad2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014a02:	7c7a      	ldrb	r2, [r7, #17]
 8014a04:	4939      	ldr	r1, [pc, #228]	@ (8014aec <etharp_query+0x268>)
 8014a06:	4613      	mov	r3, r2
 8014a08:	005b      	lsls	r3, r3, #1
 8014a0a:	4413      	add	r3, r2
 8014a0c:	00db      	lsls	r3, r3, #3
 8014a0e:	440b      	add	r3, r1
 8014a10:	3314      	adds	r3, #20
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	d15c      	bne.n	8014ad2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014a20:	e01c      	b.n	8014a5c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014a22:	69fb      	ldr	r3, [r7, #28]
 8014a24:	895a      	ldrh	r2, [r3, #10]
 8014a26:	69fb      	ldr	r3, [r7, #28]
 8014a28:	891b      	ldrh	r3, [r3, #8]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d10a      	bne.n	8014a44 <etharp_query+0x1c0>
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d006      	beq.n	8014a44 <etharp_query+0x1c0>
 8014a36:	4b2a      	ldr	r3, [pc, #168]	@ (8014ae0 <etharp_query+0x25c>)
 8014a38:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014a3c:	492f      	ldr	r1, [pc, #188]	@ (8014afc <etharp_query+0x278>)
 8014a3e:	482a      	ldr	r0, [pc, #168]	@ (8014ae8 <etharp_query+0x264>)
 8014a40:	f7ec fb64 	bl	800110c <printf>
      if (PBUF_NEEDS_COPY(p)) {
 8014a44:	69fb      	ldr	r3, [r7, #28]
 8014a46:	7b1b      	ldrb	r3, [r3, #12]
 8014a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d002      	beq.n	8014a56 <etharp_query+0x1d2>
        copy_needed = 1;
 8014a50:	2301      	movs	r3, #1
 8014a52:	61bb      	str	r3, [r7, #24]
        break;
 8014a54:	e005      	b.n	8014a62 <etharp_query+0x1de>
      }
      p = p->next;
 8014a56:	69fb      	ldr	r3, [r7, #28]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014a5c:	69fb      	ldr	r3, [r7, #28]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d1df      	bne.n	8014a22 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014a62:	69bb      	ldr	r3, [r7, #24]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d007      	beq.n	8014a78 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014a68:	687a      	ldr	r2, [r7, #4]
 8014a6a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014a6e:	200e      	movs	r0, #14
 8014a70:	f7f8 fc68 	bl	800d344 <pbuf_clone>
 8014a74:	61f8      	str	r0, [r7, #28]
 8014a76:	e004      	b.n	8014a82 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014a7c:	69f8      	ldr	r0, [r7, #28]
 8014a7e:	f7f8 fa9f 	bl	800cfc0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014a82:	69fb      	ldr	r3, [r7, #28]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d021      	beq.n	8014acc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014a88:	7c7a      	ldrb	r2, [r7, #17]
 8014a8a:	4918      	ldr	r1, [pc, #96]	@ (8014aec <etharp_query+0x268>)
 8014a8c:	4613      	mov	r3, r2
 8014a8e:	005b      	lsls	r3, r3, #1
 8014a90:	4413      	add	r3, r2
 8014a92:	00db      	lsls	r3, r3, #3
 8014a94:	440b      	add	r3, r1
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00a      	beq.n	8014ab2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014a9c:	7c7a      	ldrb	r2, [r7, #17]
 8014a9e:	4913      	ldr	r1, [pc, #76]	@ (8014aec <etharp_query+0x268>)
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	005b      	lsls	r3, r3, #1
 8014aa4:	4413      	add	r3, r2
 8014aa6:	00db      	lsls	r3, r3, #3
 8014aa8:	440b      	add	r3, r1
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7f8 f9e1 	bl	800ce74 <pbuf_free>
      }
      arp_table[i].q = p;
 8014ab2:	7c7a      	ldrb	r2, [r7, #17]
 8014ab4:	490d      	ldr	r1, [pc, #52]	@ (8014aec <etharp_query+0x268>)
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	005b      	lsls	r3, r3, #1
 8014aba:	4413      	add	r3, r2
 8014abc:	00db      	lsls	r3, r3, #3
 8014abe:	440b      	add	r3, r1
 8014ac0:	69fa      	ldr	r2, [r7, #28]
 8014ac2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014aca:	e002      	b.n	8014ad2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014acc:	23ff      	movs	r3, #255	@ 0xff
 8014ace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014ad2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	3728      	adds	r7, #40	@ 0x28
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	0801a6d4 	.word	0x0801a6d4
 8014ae4:	0801a880 	.word	0x0801a880
 8014ae8:	0801a74c 	.word	0x0801a74c
 8014aec:	2000c604 	.word	0x2000c604
 8014af0:	0801a890 	.word	0x0801a890
 8014af4:	0801a874 	.word	0x0801a874
 8014af8:	2000c6f4 	.word	0x2000c6f4
 8014afc:	0801a8b8 	.word	0x0801a8b8

08014b00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b08a      	sub	sp, #40	@ 0x28
 8014b04:	af02      	add	r7, sp, #8
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
 8014b0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d106      	bne.n	8014b26 <etharp_raw+0x26>
 8014b18:	4b3a      	ldr	r3, [pc, #232]	@ (8014c04 <etharp_raw+0x104>)
 8014b1a:	f240 4257 	movw	r2, #1111	@ 0x457
 8014b1e:	493a      	ldr	r1, [pc, #232]	@ (8014c08 <etharp_raw+0x108>)
 8014b20:	483a      	ldr	r0, [pc, #232]	@ (8014c0c <etharp_raw+0x10c>)
 8014b22:	f7ec faf3 	bl	800110c <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014b26:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014b2a:	211c      	movs	r1, #28
 8014b2c:	200e      	movs	r0, #14
 8014b2e:	f7f7 febd 	bl	800c8ac <pbuf_alloc>
 8014b32:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014b34:	69bb      	ldr	r3, [r7, #24]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d102      	bne.n	8014b40 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b3e:	e05d      	b.n	8014bfc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	895b      	ldrh	r3, [r3, #10]
 8014b44:	2b1b      	cmp	r3, #27
 8014b46:	d806      	bhi.n	8014b56 <etharp_raw+0x56>
 8014b48:	4b2e      	ldr	r3, [pc, #184]	@ (8014c04 <etharp_raw+0x104>)
 8014b4a:	f240 4262 	movw	r2, #1122	@ 0x462
 8014b4e:	4930      	ldr	r1, [pc, #192]	@ (8014c10 <etharp_raw+0x110>)
 8014b50:	482e      	ldr	r0, [pc, #184]	@ (8014c0c <etharp_raw+0x10c>)
 8014b52:	f7ec fadb 	bl	800110c <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014b56:	69bb      	ldr	r3, [r7, #24]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014b5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f7f6 fd96 	bl	800b690 <lwip_htons>
 8014b64:	4603      	mov	r3, r0
 8014b66:	461a      	mov	r2, r3
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014b72:	2b06      	cmp	r3, #6
 8014b74:	d006      	beq.n	8014b84 <etharp_raw+0x84>
 8014b76:	4b23      	ldr	r3, [pc, #140]	@ (8014c04 <etharp_raw+0x104>)
 8014b78:	f240 4269 	movw	r2, #1129	@ 0x469
 8014b7c:	4925      	ldr	r1, [pc, #148]	@ (8014c14 <etharp_raw+0x114>)
 8014b7e:	4823      	ldr	r0, [pc, #140]	@ (8014c0c <etharp_raw+0x10c>)
 8014b80:	f7ec fac4 	bl	800110c <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	3308      	adds	r3, #8
 8014b88:	2206      	movs	r2, #6
 8014b8a:	6839      	ldr	r1, [r7, #0]
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f001 fffa 	bl	8016b86 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	3312      	adds	r3, #18
 8014b96:	2206      	movs	r2, #6
 8014b98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f001 fff3 	bl	8016b86 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	330e      	adds	r3, #14
 8014ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ba6:	6812      	ldr	r2, [r2, #0]
 8014ba8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	3318      	adds	r3, #24
 8014bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014bb0:	6812      	ldr	r2, [r2, #0]
 8014bb2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	701a      	strb	r2, [r3, #0]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f042 0201 	orr.w	r2, r2, #1
 8014bc0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014bc2:	697b      	ldr	r3, [r7, #20]
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	f042 0208 	orr.w	r2, r2, #8
 8014bca:	709a      	strb	r2, [r3, #2]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	2206      	movs	r2, #6
 8014bd4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	2204      	movs	r2, #4
 8014bda:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014bdc:	f640 0306 	movw	r3, #2054	@ 0x806
 8014be0:	9300      	str	r3, [sp, #0]
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	68ba      	ldr	r2, [r7, #8]
 8014be6:	69b9      	ldr	r1, [r7, #24]
 8014be8:	68f8      	ldr	r0, [r7, #12]
 8014bea:	f001 fb7b 	bl	80162e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014bee:	69b8      	ldr	r0, [r7, #24]
 8014bf0:	f7f8 f940 	bl	800ce74 <pbuf_free>
  p = NULL;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014bf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	3720      	adds	r7, #32
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}
 8014c04:	0801a6d4 	.word	0x0801a6d4
 8014c08:	0801a824 	.word	0x0801a824
 8014c0c:	0801a74c 	.word	0x0801a74c
 8014c10:	0801a8d4 	.word	0x0801a8d4
 8014c14:	0801a908 	.word	0x0801a908

08014c18 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b088      	sub	sp, #32
 8014c1c:	af04      	add	r7, sp, #16
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	60b9      	str	r1, [r7, #8]
 8014c22:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c34:	2201      	movs	r2, #1
 8014c36:	9203      	str	r2, [sp, #12]
 8014c38:	68ba      	ldr	r2, [r7, #8]
 8014c3a:	9202      	str	r2, [sp, #8]
 8014c3c:	4a06      	ldr	r2, [pc, #24]	@ (8014c58 <etharp_request_dst+0x40>)
 8014c3e:	9201      	str	r2, [sp, #4]
 8014c40:	9300      	str	r3, [sp, #0]
 8014c42:	4603      	mov	r3, r0
 8014c44:	687a      	ldr	r2, [r7, #4]
 8014c46:	68f8      	ldr	r0, [r7, #12]
 8014c48:	f7ff ff5a 	bl	8014b00 <etharp_raw>
 8014c4c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3710      	adds	r7, #16
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	0801aedc 	.word	0x0801aedc

08014c5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b082      	sub	sp, #8
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014c66:	4a05      	ldr	r2, [pc, #20]	@ (8014c7c <etharp_request+0x20>)
 8014c68:	6839      	ldr	r1, [r7, #0]
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7ff ffd4 	bl	8014c18 <etharp_request_dst>
 8014c70:	4603      	mov	r3, r0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3708      	adds	r7, #8
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	0801aed4 	.word	0x0801aed4

08014c80 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b08e      	sub	sp, #56	@ 0x38
 8014c84:	af04      	add	r7, sp, #16
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014c8a:	4b79      	ldr	r3, [pc, #484]	@ (8014e70 <icmp_input+0x1f0>)
 8014c8c:	689b      	ldr	r3, [r3, #8]
 8014c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c92:	781b      	ldrb	r3, [r3, #0]
 8014c94:	f003 030f 	and.w	r3, r3, #15
 8014c98:	b2db      	uxtb	r3, r3
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014ca0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ca2:	2b13      	cmp	r3, #19
 8014ca4:	f240 80cd 	bls.w	8014e42 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	895b      	ldrh	r3, [r3, #10]
 8014cac:	2b03      	cmp	r3, #3
 8014cae:	f240 80ca 	bls.w	8014e46 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	781b      	ldrb	r3, [r3, #0]
 8014cb8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014cbc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	f000 80b7 	beq.w	8014e34 <icmp_input+0x1b4>
 8014cc6:	2b08      	cmp	r3, #8
 8014cc8:	f040 80b7 	bne.w	8014e3a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014ccc:	4b69      	ldr	r3, [pc, #420]	@ (8014e74 <icmp_input+0x1f4>)
 8014cce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014cd0:	4b67      	ldr	r3, [pc, #412]	@ (8014e70 <icmp_input+0x1f0>)
 8014cd2:	695b      	ldr	r3, [r3, #20]
 8014cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014cd8:	2be0      	cmp	r3, #224	@ 0xe0
 8014cda:	f000 80bb 	beq.w	8014e54 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014cde:	4b64      	ldr	r3, [pc, #400]	@ (8014e70 <icmp_input+0x1f0>)
 8014ce0:	695b      	ldr	r3, [r3, #20]
 8014ce2:	4a63      	ldr	r2, [pc, #396]	@ (8014e70 <icmp_input+0x1f0>)
 8014ce4:	6812      	ldr	r2, [r2, #0]
 8014ce6:	4611      	mov	r1, r2
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f000 fbed 	bl	80154c8 <ip4_addr_isbroadcast_u32>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	f040 80b1 	bne.w	8014e58 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	891b      	ldrh	r3, [r3, #8]
 8014cfa:	2b07      	cmp	r3, #7
 8014cfc:	f240 80a5 	bls.w	8014e4a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014d00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d02:	330e      	adds	r3, #14
 8014d04:	4619      	mov	r1, r3
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f7f8 f81e 	bl	800cd48 <pbuf_add_header>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d04b      	beq.n	8014daa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	891a      	ldrh	r2, [r3, #8]
 8014d16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d18:	4413      	add	r3, r2
 8014d1a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	891b      	ldrh	r3, [r3, #8]
 8014d20:	8b7a      	ldrh	r2, [r7, #26]
 8014d22:	429a      	cmp	r2, r3
 8014d24:	f0c0 809a 	bcc.w	8014e5c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014d28:	8b7b      	ldrh	r3, [r7, #26]
 8014d2a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014d2e:	4619      	mov	r1, r3
 8014d30:	200e      	movs	r0, #14
 8014d32:	f7f7 fdbb 	bl	800c8ac <pbuf_alloc>
 8014d36:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	f000 8090 	beq.w	8014e60 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	895b      	ldrh	r3, [r3, #10]
 8014d44:	461a      	mov	r2, r3
 8014d46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d48:	3308      	adds	r3, #8
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d203      	bcs.n	8014d56 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014d4e:	6978      	ldr	r0, [r7, #20]
 8014d50:	f7f8 f890 	bl	800ce74 <pbuf_free>
          goto icmperr;
 8014d54:	e085      	b.n	8014e62 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	685b      	ldr	r3, [r3, #4]
 8014d5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014d5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f001 ff11 	bl	8016b86 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014d64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d66:	4619      	mov	r1, r3
 8014d68:	6978      	ldr	r0, [r7, #20]
 8014d6a:	f7f7 fffd 	bl	800cd68 <pbuf_remove_header>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d009      	beq.n	8014d88 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014d74:	4b40      	ldr	r3, [pc, #256]	@ (8014e78 <icmp_input+0x1f8>)
 8014d76:	22b6      	movs	r2, #182	@ 0xb6
 8014d78:	4940      	ldr	r1, [pc, #256]	@ (8014e7c <icmp_input+0x1fc>)
 8014d7a:	4841      	ldr	r0, [pc, #260]	@ (8014e80 <icmp_input+0x200>)
 8014d7c:	f7ec f9c6 	bl	800110c <printf>
          pbuf_free(r);
 8014d80:	6978      	ldr	r0, [r7, #20]
 8014d82:	f7f8 f877 	bl	800ce74 <pbuf_free>
          goto icmperr;
 8014d86:	e06c      	b.n	8014e62 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014d88:	6879      	ldr	r1, [r7, #4]
 8014d8a:	6978      	ldr	r0, [r7, #20]
 8014d8c:	f7f8 f996 	bl	800d0bc <pbuf_copy>
 8014d90:	4603      	mov	r3, r0
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d003      	beq.n	8014d9e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014d96:	6978      	ldr	r0, [r7, #20]
 8014d98:	f7f8 f86c 	bl	800ce74 <pbuf_free>
          goto icmperr;
 8014d9c:	e061      	b.n	8014e62 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f7f8 f868 	bl	800ce74 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	607b      	str	r3, [r7, #4]
 8014da8:	e00f      	b.n	8014dca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014daa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014dac:	330e      	adds	r3, #14
 8014dae:	4619      	mov	r1, r3
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f7f7 ffd9 	bl	800cd68 <pbuf_remove_header>
 8014db6:	4603      	mov	r3, r0
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d006      	beq.n	8014dca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8014e78 <icmp_input+0x1f8>)
 8014dbe:	22c7      	movs	r2, #199	@ 0xc7
 8014dc0:	4930      	ldr	r1, [pc, #192]	@ (8014e84 <icmp_input+0x204>)
 8014dc2:	482f      	ldr	r0, [pc, #188]	@ (8014e80 <icmp_input+0x200>)
 8014dc4:	f7ec f9a2 	bl	800110c <printf>
          goto icmperr;
 8014dc8:	e04b      	b.n	8014e62 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014dd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014dd2:	4619      	mov	r1, r3
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f7f7 ffb7 	bl	800cd48 <pbuf_add_header>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d12b      	bne.n	8014e38 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	685b      	ldr	r3, [r3, #4]
 8014de4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014de6:	69fb      	ldr	r3, [r7, #28]
 8014de8:	681a      	ldr	r2, [r3, #0]
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014dee:	4b20      	ldr	r3, [pc, #128]	@ (8014e70 <icmp_input+0x1f0>)
 8014df0:	691a      	ldr	r2, [r3, #16]
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	709a      	strb	r2, [r3, #2]
 8014e02:	2200      	movs	r2, #0
 8014e04:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	22ff      	movs	r2, #255	@ 0xff
 8014e0a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	729a      	strb	r2, [r3, #10]
 8014e12:	2200      	movs	r2, #0
 8014e14:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014e16:	683b      	ldr	r3, [r7, #0]
 8014e18:	9302      	str	r3, [sp, #8]
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	9301      	str	r3, [sp, #4]
 8014e1e:	2300      	movs	r3, #0
 8014e20:	9300      	str	r3, [sp, #0]
 8014e22:	23ff      	movs	r3, #255	@ 0xff
 8014e24:	2200      	movs	r2, #0
 8014e26:	69f9      	ldr	r1, [r7, #28]
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f000 fa75 	bl	8015318 <ip4_output_if>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014e32:	e001      	b.n	8014e38 <icmp_input+0x1b8>
      break;
 8014e34:	bf00      	nop
 8014e36:	e000      	b.n	8014e3a <icmp_input+0x1ba>
      break;
 8014e38:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f7f8 f81a 	bl	800ce74 <pbuf_free>
  return;
 8014e40:	e013      	b.n	8014e6a <icmp_input+0x1ea>
    goto lenerr;
 8014e42:	bf00      	nop
 8014e44:	e002      	b.n	8014e4c <icmp_input+0x1cc>
    goto lenerr;
 8014e46:	bf00      	nop
 8014e48:	e000      	b.n	8014e4c <icmp_input+0x1cc>
        goto lenerr;
 8014e4a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f7f8 f811 	bl	800ce74 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014e52:	e00a      	b.n	8014e6a <icmp_input+0x1ea>
        goto icmperr;
 8014e54:	bf00      	nop
 8014e56:	e004      	b.n	8014e62 <icmp_input+0x1e2>
        goto icmperr;
 8014e58:	bf00      	nop
 8014e5a:	e002      	b.n	8014e62 <icmp_input+0x1e2>
          goto icmperr;
 8014e5c:	bf00      	nop
 8014e5e:	e000      	b.n	8014e62 <icmp_input+0x1e2>
          goto icmperr;
 8014e60:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f7f8 f806 	bl	800ce74 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014e68:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014e6a:	3728      	adds	r7, #40	@ 0x28
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	20008e50 	.word	0x20008e50
 8014e74:	20008e64 	.word	0x20008e64
 8014e78:	0801a94c 	.word	0x0801a94c
 8014e7c:	0801a984 	.word	0x0801a984
 8014e80:	0801a9bc 	.word	0x0801a9bc
 8014e84:	0801a9e4 	.word	0x0801a9e4

08014e88 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b082      	sub	sp, #8
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	460b      	mov	r3, r1
 8014e92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014e94:	78fb      	ldrb	r3, [r7, #3]
 8014e96:	461a      	mov	r2, r3
 8014e98:	2103      	movs	r1, #3
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f000 f814 	bl	8014ec8 <icmp_send_response>
}
 8014ea0:	bf00      	nop
 8014ea2:	3708      	adds	r7, #8
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b082      	sub	sp, #8
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	460b      	mov	r3, r1
 8014eb2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014eb4:	78fb      	ldrb	r3, [r7, #3]
 8014eb6:	461a      	mov	r2, r3
 8014eb8:	210b      	movs	r1, #11
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 f804 	bl	8014ec8 <icmp_send_response>
}
 8014ec0:	bf00      	nop
 8014ec2:	3708      	adds	r7, #8
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}

08014ec8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b08c      	sub	sp, #48	@ 0x30
 8014ecc:	af04      	add	r7, sp, #16
 8014ece:	6078      	str	r0, [r7, #4]
 8014ed0:	460b      	mov	r3, r1
 8014ed2:	70fb      	strb	r3, [r7, #3]
 8014ed4:	4613      	mov	r3, r2
 8014ed6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014ed8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014edc:	2124      	movs	r1, #36	@ 0x24
 8014ede:	2022      	movs	r0, #34	@ 0x22
 8014ee0:	f7f7 fce4 	bl	800c8ac <pbuf_alloc>
 8014ee4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014ee6:	69fb      	ldr	r3, [r7, #28]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d04c      	beq.n	8014f86 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014eec:	69fb      	ldr	r3, [r7, #28]
 8014eee:	895b      	ldrh	r3, [r3, #10]
 8014ef0:	2b23      	cmp	r3, #35	@ 0x23
 8014ef2:	d806      	bhi.n	8014f02 <icmp_send_response+0x3a>
 8014ef4:	4b26      	ldr	r3, [pc, #152]	@ (8014f90 <icmp_send_response+0xc8>)
 8014ef6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014efa:	4926      	ldr	r1, [pc, #152]	@ (8014f94 <icmp_send_response+0xcc>)
 8014efc:	4826      	ldr	r0, [pc, #152]	@ (8014f98 <icmp_send_response+0xd0>)
 8014efe:	f7ec f905 	bl	800110c <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014f08:	69fb      	ldr	r3, [r7, #28]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	78fa      	ldrb	r2, [r7, #3]
 8014f12:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014f14:	697b      	ldr	r3, [r7, #20]
 8014f16:	78ba      	ldrb	r2, [r7, #2]
 8014f18:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	711a      	strb	r2, [r3, #4]
 8014f20:	2200      	movs	r2, #0
 8014f22:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	2200      	movs	r2, #0
 8014f28:	719a      	strb	r2, [r3, #6]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014f2e:	69fb      	ldr	r3, [r7, #28]
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	f103 0008 	add.w	r0, r3, #8
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	221c      	movs	r2, #28
 8014f3c:	4619      	mov	r1, r3
 8014f3e:	f001 fe22 	bl	8016b86 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014f42:	69bb      	ldr	r3, [r7, #24]
 8014f44:	68db      	ldr	r3, [r3, #12]
 8014f46:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014f48:	f107 030c 	add.w	r3, r7, #12
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f000 f825 	bl	8014f9c <ip4_route>
 8014f52:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014f54:	693b      	ldr	r3, [r7, #16]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d011      	beq.n	8014f7e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	709a      	strb	r2, [r3, #2]
 8014f60:	2200      	movs	r2, #0
 8014f62:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014f64:	f107 020c 	add.w	r2, r7, #12
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	9302      	str	r3, [sp, #8]
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	9301      	str	r3, [sp, #4]
 8014f70:	2300      	movs	r3, #0
 8014f72:	9300      	str	r3, [sp, #0]
 8014f74:	23ff      	movs	r3, #255	@ 0xff
 8014f76:	2100      	movs	r1, #0
 8014f78:	69f8      	ldr	r0, [r7, #28]
 8014f7a:	f000 f9cd 	bl	8015318 <ip4_output_if>
  }
  pbuf_free(q);
 8014f7e:	69f8      	ldr	r0, [r7, #28]
 8014f80:	f7f7 ff78 	bl	800ce74 <pbuf_free>
 8014f84:	e000      	b.n	8014f88 <icmp_send_response+0xc0>
    return;
 8014f86:	bf00      	nop
}
 8014f88:	3720      	adds	r7, #32
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	0801a94c 	.word	0x0801a94c
 8014f94:	0801aa18 	.word	0x0801aa18
 8014f98:	0801a9bc 	.word	0x0801a9bc

08014f9c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014f9c:	b480      	push	{r7}
 8014f9e:	b085      	sub	sp, #20
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014fa4:	4b33      	ldr	r3, [pc, #204]	@ (8015074 <ip4_route+0xd8>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	60fb      	str	r3, [r7, #12]
 8014faa:	e036      	b.n	801501a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014fb2:	f003 0301 	and.w	r3, r3, #1
 8014fb6:	b2db      	uxtb	r3, r3
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d02b      	beq.n	8015014 <ip4_route+0x78>
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014fc2:	089b      	lsrs	r3, r3, #2
 8014fc4:	f003 0301 	and.w	r3, r3, #1
 8014fc8:	b2db      	uxtb	r3, r3
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d022      	beq.n	8015014 <ip4_route+0x78>
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	3304      	adds	r3, #4
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d01d      	beq.n	8015014 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	3304      	adds	r3, #4
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	405a      	eors	r2, r3
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	3308      	adds	r3, #8
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	4013      	ands	r3, r2
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d101      	bne.n	8014ff4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	e038      	b.n	8015066 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014ffa:	f003 0302 	and.w	r3, r3, #2
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d108      	bne.n	8015014 <ip4_route+0x78>
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681a      	ldr	r2, [r3, #0]
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	330c      	adds	r3, #12
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	429a      	cmp	r2, r3
 801500e:	d101      	bne.n	8015014 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	e028      	b.n	8015066 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	60fb      	str	r3, [r7, #12]
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d1c5      	bne.n	8014fac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015020:	4b15      	ldr	r3, [pc, #84]	@ (8015078 <ip4_route+0xdc>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d01a      	beq.n	801505e <ip4_route+0xc2>
 8015028:	4b13      	ldr	r3, [pc, #76]	@ (8015078 <ip4_route+0xdc>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015030:	f003 0301 	and.w	r3, r3, #1
 8015034:	2b00      	cmp	r3, #0
 8015036:	d012      	beq.n	801505e <ip4_route+0xc2>
 8015038:	4b0f      	ldr	r3, [pc, #60]	@ (8015078 <ip4_route+0xdc>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015040:	f003 0304 	and.w	r3, r3, #4
 8015044:	2b00      	cmp	r3, #0
 8015046:	d00a      	beq.n	801505e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015048:	4b0b      	ldr	r3, [pc, #44]	@ (8015078 <ip4_route+0xdc>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	3304      	adds	r3, #4
 801504e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015050:	2b00      	cmp	r3, #0
 8015052:	d004      	beq.n	801505e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	b2db      	uxtb	r3, r3
 801505a:	2b7f      	cmp	r3, #127	@ 0x7f
 801505c:	d101      	bne.n	8015062 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801505e:	2300      	movs	r3, #0
 8015060:	e001      	b.n	8015066 <ip4_route+0xca>
  }

  return netif_default;
 8015062:	4b05      	ldr	r3, [pc, #20]	@ (8015078 <ip4_route+0xdc>)
 8015064:	681b      	ldr	r3, [r3, #0]
}
 8015066:	4618      	mov	r0, r3
 8015068:	3714      	adds	r7, #20
 801506a:	46bd      	mov	sp, r7
 801506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015070:	4770      	bx	lr
 8015072:	bf00      	nop
 8015074:	2000c598 	.word	0x2000c598
 8015078:	2000c59c 	.word	0x2000c59c

0801507c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801508a:	f003 0301 	and.w	r3, r3, #1
 801508e:	b2db      	uxtb	r3, r3
 8015090:	2b00      	cmp	r3, #0
 8015092:	d016      	beq.n	80150c2 <ip4_input_accept+0x46>
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	3304      	adds	r3, #4
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d011      	beq.n	80150c2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801509e:	4b0b      	ldr	r3, [pc, #44]	@ (80150cc <ip4_input_accept+0x50>)
 80150a0:	695a      	ldr	r2, [r3, #20]
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	3304      	adds	r3, #4
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d008      	beq.n	80150be <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80150ac:	4b07      	ldr	r3, [pc, #28]	@ (80150cc <ip4_input_accept+0x50>)
 80150ae:	695b      	ldr	r3, [r3, #20]
 80150b0:	6879      	ldr	r1, [r7, #4]
 80150b2:	4618      	mov	r0, r3
 80150b4:	f000 fa08 	bl	80154c8 <ip4_addr_isbroadcast_u32>
 80150b8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d001      	beq.n	80150c2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80150be:	2301      	movs	r3, #1
 80150c0:	e000      	b.n	80150c4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80150c2:	2300      	movs	r3, #0
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3708      	adds	r7, #8
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	20008e50 	.word	0x20008e50

080150d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b086      	sub	sp, #24
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	685b      	ldr	r3, [r3, #4]
 80150de:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	781b      	ldrb	r3, [r3, #0]
 80150e4:	091b      	lsrs	r3, r3, #4
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	2b04      	cmp	r3, #4
 80150ea:	d004      	beq.n	80150f6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f7f7 fec1 	bl	800ce74 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80150f2:	2300      	movs	r3, #0
 80150f4:	e107      	b.n	8015306 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80150f6:	697b      	ldr	r3, [r7, #20]
 80150f8:	781b      	ldrb	r3, [r3, #0]
 80150fa:	f003 030f 	and.w	r3, r3, #15
 80150fe:	b2db      	uxtb	r3, r3
 8015100:	009b      	lsls	r3, r3, #2
 8015102:	b2db      	uxtb	r3, r3
 8015104:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	885b      	ldrh	r3, [r3, #2]
 801510a:	b29b      	uxth	r3, r3
 801510c:	4618      	mov	r0, r3
 801510e:	f7f6 fabf 	bl	800b690 <lwip_htons>
 8015112:	4603      	mov	r3, r0
 8015114:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	891b      	ldrh	r3, [r3, #8]
 801511a:	89ba      	ldrh	r2, [r7, #12]
 801511c:	429a      	cmp	r2, r3
 801511e:	d204      	bcs.n	801512a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015120:	89bb      	ldrh	r3, [r7, #12]
 8015122:	4619      	mov	r1, r3
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f7f7 fd1f 	bl	800cb68 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	895b      	ldrh	r3, [r3, #10]
 801512e:	89fa      	ldrh	r2, [r7, #14]
 8015130:	429a      	cmp	r2, r3
 8015132:	d807      	bhi.n	8015144 <ip4_input+0x74>
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	891b      	ldrh	r3, [r3, #8]
 8015138:	89ba      	ldrh	r2, [r7, #12]
 801513a:	429a      	cmp	r2, r3
 801513c:	d802      	bhi.n	8015144 <ip4_input+0x74>
 801513e:	89fb      	ldrh	r3, [r7, #14]
 8015140:	2b13      	cmp	r3, #19
 8015142:	d804      	bhi.n	801514e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7f7 fe95 	bl	800ce74 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801514a:	2300      	movs	r3, #0
 801514c:	e0db      	b.n	8015306 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	691b      	ldr	r3, [r3, #16]
 8015152:	4a6f      	ldr	r2, [pc, #444]	@ (8015310 <ip4_input+0x240>)
 8015154:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	4a6d      	ldr	r2, [pc, #436]	@ (8015310 <ip4_input+0x240>)
 801515c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801515e:	4b6c      	ldr	r3, [pc, #432]	@ (8015310 <ip4_input+0x240>)
 8015160:	695b      	ldr	r3, [r3, #20]
 8015162:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015166:	2be0      	cmp	r3, #224	@ 0xe0
 8015168:	d112      	bne.n	8015190 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015170:	f003 0301 	and.w	r3, r3, #1
 8015174:	b2db      	uxtb	r3, r3
 8015176:	2b00      	cmp	r3, #0
 8015178:	d007      	beq.n	801518a <ip4_input+0xba>
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	3304      	adds	r3, #4
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d002      	beq.n	801518a <ip4_input+0xba>
      netif = inp;
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	613b      	str	r3, [r7, #16]
 8015188:	e02a      	b.n	80151e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801518a:	2300      	movs	r3, #0
 801518c:	613b      	str	r3, [r7, #16]
 801518e:	e027      	b.n	80151e0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015190:	6838      	ldr	r0, [r7, #0]
 8015192:	f7ff ff73 	bl	801507c <ip4_input_accept>
 8015196:	4603      	mov	r3, r0
 8015198:	2b00      	cmp	r3, #0
 801519a:	d002      	beq.n	80151a2 <ip4_input+0xd2>
      netif = inp;
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	613b      	str	r3, [r7, #16]
 80151a0:	e01e      	b.n	80151e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80151a6:	4b5a      	ldr	r3, [pc, #360]	@ (8015310 <ip4_input+0x240>)
 80151a8:	695b      	ldr	r3, [r3, #20]
 80151aa:	b2db      	uxtb	r3, r3
 80151ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80151ae:	d017      	beq.n	80151e0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80151b0:	4b58      	ldr	r3, [pc, #352]	@ (8015314 <ip4_input+0x244>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	613b      	str	r3, [r7, #16]
 80151b6:	e00e      	b.n	80151d6 <ip4_input+0x106>
          if (netif == inp) {
 80151b8:	693a      	ldr	r2, [r7, #16]
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d006      	beq.n	80151ce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80151c0:	6938      	ldr	r0, [r7, #16]
 80151c2:	f7ff ff5b 	bl	801507c <ip4_input_accept>
 80151c6:	4603      	mov	r3, r0
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d108      	bne.n	80151de <ip4_input+0x10e>
 80151cc:	e000      	b.n	80151d0 <ip4_input+0x100>
            continue;
 80151ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	613b      	str	r3, [r7, #16]
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d1ed      	bne.n	80151b8 <ip4_input+0xe8>
 80151dc:	e000      	b.n	80151e0 <ip4_input+0x110>
            break;
 80151de:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80151e0:	4b4b      	ldr	r3, [pc, #300]	@ (8015310 <ip4_input+0x240>)
 80151e2:	691b      	ldr	r3, [r3, #16]
 80151e4:	6839      	ldr	r1, [r7, #0]
 80151e6:	4618      	mov	r0, r3
 80151e8:	f000 f96e 	bl	80154c8 <ip4_addr_isbroadcast_u32>
 80151ec:	4603      	mov	r3, r0
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d105      	bne.n	80151fe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80151f2:	4b47      	ldr	r3, [pc, #284]	@ (8015310 <ip4_input+0x240>)
 80151f4:	691b      	ldr	r3, [r3, #16]
 80151f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80151fa:	2be0      	cmp	r3, #224	@ 0xe0
 80151fc:	d104      	bne.n	8015208 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80151fe:	6878      	ldr	r0, [r7, #4]
 8015200:	f7f7 fe38 	bl	800ce74 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015204:	2300      	movs	r3, #0
 8015206:	e07e      	b.n	8015306 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d104      	bne.n	8015218 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f7f7 fe30 	bl	800ce74 <pbuf_free>
    return ERR_OK;
 8015214:	2300      	movs	r3, #0
 8015216:	e076      	b.n	8015306 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	88db      	ldrh	r3, [r3, #6]
 801521c:	b29b      	uxth	r3, r3
 801521e:	461a      	mov	r2, r3
 8015220:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015224:	4013      	ands	r3, r2
 8015226:	2b00      	cmp	r3, #0
 8015228:	d00b      	beq.n	8015242 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801522a:	6878      	ldr	r0, [r7, #4]
 801522c:	f000 fc92 	bl	8015b54 <ip4_reass>
 8015230:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d101      	bne.n	801523c <ip4_input+0x16c>
      return ERR_OK;
 8015238:	2300      	movs	r3, #0
 801523a:	e064      	b.n	8015306 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	685b      	ldr	r3, [r3, #4]
 8015240:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015242:	4a33      	ldr	r2, [pc, #204]	@ (8015310 <ip4_input+0x240>)
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015248:	4a31      	ldr	r2, [pc, #196]	@ (8015310 <ip4_input+0x240>)
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801524e:	4a30      	ldr	r2, [pc, #192]	@ (8015310 <ip4_input+0x240>)
 8015250:	697b      	ldr	r3, [r7, #20]
 8015252:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015254:	697b      	ldr	r3, [r7, #20]
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	f003 030f 	and.w	r3, r3, #15
 801525c:	b2db      	uxtb	r3, r3
 801525e:	009b      	lsls	r3, r3, #2
 8015260:	b2db      	uxtb	r3, r3
 8015262:	461a      	mov	r2, r3
 8015264:	4b2a      	ldr	r3, [pc, #168]	@ (8015310 <ip4_input+0x240>)
 8015266:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015268:	89fb      	ldrh	r3, [r7, #14]
 801526a:	4619      	mov	r1, r3
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f7f7 fd7b 	bl	800cd68 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	7a5b      	ldrb	r3, [r3, #9]
 8015276:	2b11      	cmp	r3, #17
 8015278:	d006      	beq.n	8015288 <ip4_input+0x1b8>
 801527a:	2b11      	cmp	r3, #17
 801527c:	dc13      	bgt.n	80152a6 <ip4_input+0x1d6>
 801527e:	2b01      	cmp	r3, #1
 8015280:	d00c      	beq.n	801529c <ip4_input+0x1cc>
 8015282:	2b06      	cmp	r3, #6
 8015284:	d005      	beq.n	8015292 <ip4_input+0x1c2>
 8015286:	e00e      	b.n	80152a6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015288:	6839      	ldr	r1, [r7, #0]
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f7fe faec 	bl	8013868 <udp_input>
        break;
 8015290:	e026      	b.n	80152e0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015292:	6839      	ldr	r1, [r7, #0]
 8015294:	6878      	ldr	r0, [r7, #4]
 8015296:	f7f9 feab 	bl	800eff0 <tcp_input>
        break;
 801529a:	e021      	b.n	80152e0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801529c:	6839      	ldr	r1, [r7, #0]
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7ff fcee 	bl	8014c80 <icmp_input>
        break;
 80152a4:	e01c      	b.n	80152e0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80152a6:	4b1a      	ldr	r3, [pc, #104]	@ (8015310 <ip4_input+0x240>)
 80152a8:	695b      	ldr	r3, [r3, #20]
 80152aa:	6939      	ldr	r1, [r7, #16]
 80152ac:	4618      	mov	r0, r3
 80152ae:	f000 f90b 	bl	80154c8 <ip4_addr_isbroadcast_u32>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d10f      	bne.n	80152d8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80152b8:	4b15      	ldr	r3, [pc, #84]	@ (8015310 <ip4_input+0x240>)
 80152ba:	695b      	ldr	r3, [r3, #20]
 80152bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80152c0:	2be0      	cmp	r3, #224	@ 0xe0
 80152c2:	d009      	beq.n	80152d8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80152c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80152c8:	4619      	mov	r1, r3
 80152ca:	6878      	ldr	r0, [r7, #4]
 80152cc:	f7f7 fdbf 	bl	800ce4e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80152d0:	2102      	movs	r1, #2
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f7ff fdd8 	bl	8014e88 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80152d8:	6878      	ldr	r0, [r7, #4]
 80152da:	f7f7 fdcb 	bl	800ce74 <pbuf_free>
        break;
 80152de:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80152e0:	4b0b      	ldr	r3, [pc, #44]	@ (8015310 <ip4_input+0x240>)
 80152e2:	2200      	movs	r2, #0
 80152e4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80152e6:	4b0a      	ldr	r3, [pc, #40]	@ (8015310 <ip4_input+0x240>)
 80152e8:	2200      	movs	r2, #0
 80152ea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80152ec:	4b08      	ldr	r3, [pc, #32]	@ (8015310 <ip4_input+0x240>)
 80152ee:	2200      	movs	r2, #0
 80152f0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80152f2:	4b07      	ldr	r3, [pc, #28]	@ (8015310 <ip4_input+0x240>)
 80152f4:	2200      	movs	r2, #0
 80152f6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80152f8:	4b05      	ldr	r3, [pc, #20]	@ (8015310 <ip4_input+0x240>)
 80152fa:	2200      	movs	r2, #0
 80152fc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80152fe:	4b04      	ldr	r3, [pc, #16]	@ (8015310 <ip4_input+0x240>)
 8015300:	2200      	movs	r2, #0
 8015302:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015304:	2300      	movs	r3, #0
}
 8015306:	4618      	mov	r0, r3
 8015308:	3718      	adds	r7, #24
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}
 801530e:	bf00      	nop
 8015310:	20008e50 	.word	0x20008e50
 8015314:	2000c598 	.word	0x2000c598

08015318 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b08a      	sub	sp, #40	@ 0x28
 801531c:	af04      	add	r7, sp, #16
 801531e:	60f8      	str	r0, [r7, #12]
 8015320:	60b9      	str	r1, [r7, #8]
 8015322:	607a      	str	r2, [r7, #4]
 8015324:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d009      	beq.n	8015344 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d003      	beq.n	801533e <ip4_output_if+0x26>
 8015336:	68bb      	ldr	r3, [r7, #8]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d102      	bne.n	8015344 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015340:	3304      	adds	r3, #4
 8015342:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015344:	78fa      	ldrb	r2, [r7, #3]
 8015346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015348:	9302      	str	r3, [sp, #8]
 801534a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801534e:	9301      	str	r3, [sp, #4]
 8015350:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015354:	9300      	str	r3, [sp, #0]
 8015356:	4613      	mov	r3, r2
 8015358:	687a      	ldr	r2, [r7, #4]
 801535a:	6979      	ldr	r1, [r7, #20]
 801535c:	68f8      	ldr	r0, [r7, #12]
 801535e:	f000 f805 	bl	801536c <ip4_output_if_src>
 8015362:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015364:	4618      	mov	r0, r3
 8015366:	3718      	adds	r7, #24
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b088      	sub	sp, #32
 8015370:	af00      	add	r7, sp, #0
 8015372:	60f8      	str	r0, [r7, #12]
 8015374:	60b9      	str	r1, [r7, #8]
 8015376:	607a      	str	r2, [r7, #4]
 8015378:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	7b9b      	ldrb	r3, [r3, #14]
 801537e:	2b01      	cmp	r3, #1
 8015380:	d006      	beq.n	8015390 <ip4_output_if_src+0x24>
 8015382:	4b4b      	ldr	r3, [pc, #300]	@ (80154b0 <ip4_output_if_src+0x144>)
 8015384:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015388:	494a      	ldr	r1, [pc, #296]	@ (80154b4 <ip4_output_if_src+0x148>)
 801538a:	484b      	ldr	r0, [pc, #300]	@ (80154b8 <ip4_output_if_src+0x14c>)
 801538c:	f7eb febe 	bl	800110c <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d060      	beq.n	8015458 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015396:	2314      	movs	r3, #20
 8015398:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801539a:	2114      	movs	r1, #20
 801539c:	68f8      	ldr	r0, [r7, #12]
 801539e:	f7f7 fcd3 	bl	800cd48 <pbuf_add_header>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d002      	beq.n	80153ae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80153a8:	f06f 0301 	mvn.w	r3, #1
 80153ac:	e07c      	b.n	80154a8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	895b      	ldrh	r3, [r3, #10]
 80153b8:	2b13      	cmp	r3, #19
 80153ba:	d806      	bhi.n	80153ca <ip4_output_if_src+0x5e>
 80153bc:	4b3c      	ldr	r3, [pc, #240]	@ (80154b0 <ip4_output_if_src+0x144>)
 80153be:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80153c2:	493e      	ldr	r1, [pc, #248]	@ (80154bc <ip4_output_if_src+0x150>)
 80153c4:	483c      	ldr	r0, [pc, #240]	@ (80154b8 <ip4_output_if_src+0x14c>)
 80153c6:	f7eb fea1 	bl	800110c <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80153ca:	69fb      	ldr	r3, [r7, #28]
 80153cc:	78fa      	ldrb	r2, [r7, #3]
 80153ce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80153d6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681a      	ldr	r2, [r3, #0]
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80153e0:	8b7b      	ldrh	r3, [r7, #26]
 80153e2:	089b      	lsrs	r3, r3, #2
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	b2db      	uxtb	r3, r3
 80153e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80153ec:	b2da      	uxtb	r2, r3
 80153ee:	69fb      	ldr	r3, [r7, #28]
 80153f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80153f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	891b      	ldrh	r3, [r3, #8]
 80153fe:	4618      	mov	r0, r3
 8015400:	f7f6 f946 	bl	800b690 <lwip_htons>
 8015404:	4603      	mov	r3, r0
 8015406:	461a      	mov	r2, r3
 8015408:	69fb      	ldr	r3, [r7, #28]
 801540a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801540c:	69fb      	ldr	r3, [r7, #28]
 801540e:	2200      	movs	r2, #0
 8015410:	719a      	strb	r2, [r3, #6]
 8015412:	2200      	movs	r2, #0
 8015414:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015416:	4b2a      	ldr	r3, [pc, #168]	@ (80154c0 <ip4_output_if_src+0x154>)
 8015418:	881b      	ldrh	r3, [r3, #0]
 801541a:	4618      	mov	r0, r3
 801541c:	f7f6 f938 	bl	800b690 <lwip_htons>
 8015420:	4603      	mov	r3, r0
 8015422:	461a      	mov	r2, r3
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015428:	4b25      	ldr	r3, [pc, #148]	@ (80154c0 <ip4_output_if_src+0x154>)
 801542a:	881b      	ldrh	r3, [r3, #0]
 801542c:	3301      	adds	r3, #1
 801542e:	b29a      	uxth	r2, r3
 8015430:	4b23      	ldr	r3, [pc, #140]	@ (80154c0 <ip4_output_if_src+0x154>)
 8015432:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d104      	bne.n	8015444 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801543a:	4b22      	ldr	r3, [pc, #136]	@ (80154c4 <ip4_output_if_src+0x158>)
 801543c:	681a      	ldr	r2, [r3, #0]
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	60da      	str	r2, [r3, #12]
 8015442:	e003      	b.n	801544c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015444:	68bb      	ldr	r3, [r7, #8]
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	2200      	movs	r2, #0
 8015450:	729a      	strb	r2, [r3, #10]
 8015452:	2200      	movs	r2, #0
 8015454:	72da      	strb	r2, [r3, #11]
 8015456:	e00f      	b.n	8015478 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	895b      	ldrh	r3, [r3, #10]
 801545c:	2b13      	cmp	r3, #19
 801545e:	d802      	bhi.n	8015466 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015460:	f06f 0301 	mvn.w	r3, #1
 8015464:	e020      	b.n	80154a8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801546c:	69fb      	ldr	r3, [r7, #28]
 801546e:	691b      	ldr	r3, [r3, #16]
 8015470:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015472:	f107 0314 	add.w	r3, r7, #20
 8015476:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801547a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801547c:	2b00      	cmp	r3, #0
 801547e:	d00c      	beq.n	801549a <ip4_output_if_src+0x12e>
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	891a      	ldrh	r2, [r3, #8]
 8015484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015486:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015488:	429a      	cmp	r2, r3
 801548a:	d906      	bls.n	801549a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801548c:	687a      	ldr	r2, [r7, #4]
 801548e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015490:	68f8      	ldr	r0, [r7, #12]
 8015492:	f000 fd53 	bl	8015f3c <ip4_frag>
 8015496:	4603      	mov	r3, r0
 8015498:	e006      	b.n	80154a8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549c:	695b      	ldr	r3, [r3, #20]
 801549e:	687a      	ldr	r2, [r7, #4]
 80154a0:	68f9      	ldr	r1, [r7, #12]
 80154a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80154a4:	4798      	blx	r3
 80154a6:	4603      	mov	r3, r0
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3720      	adds	r7, #32
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	0801aa44 	.word	0x0801aa44
 80154b4:	0801aa78 	.word	0x0801aa78
 80154b8:	0801aa84 	.word	0x0801aa84
 80154bc:	0801aaac 	.word	0x0801aaac
 80154c0:	2000c6f6 	.word	0x2000c6f6
 80154c4:	0801aed0 	.word	0x0801aed0

080154c8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80154c8:	b480      	push	{r7}
 80154ca:	b085      	sub	sp, #20
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154dc:	d002      	beq.n	80154e4 <ip4_addr_isbroadcast_u32+0x1c>
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d101      	bne.n	80154e8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80154e4:	2301      	movs	r3, #1
 80154e6:	e02a      	b.n	801553e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80154ee:	f003 0302 	and.w	r3, r3, #2
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d101      	bne.n	80154fa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80154f6:	2300      	movs	r3, #0
 80154f8:	e021      	b.n	801553e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	3304      	adds	r3, #4
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	687a      	ldr	r2, [r7, #4]
 8015502:	429a      	cmp	r2, r3
 8015504:	d101      	bne.n	801550a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015506:	2300      	movs	r3, #0
 8015508:	e019      	b.n	801553e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801550a:	68fa      	ldr	r2, [r7, #12]
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	3304      	adds	r3, #4
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	405a      	eors	r2, r3
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	3308      	adds	r3, #8
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	4013      	ands	r3, r2
 801551c:	2b00      	cmp	r3, #0
 801551e:	d10d      	bne.n	801553c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	3308      	adds	r3, #8
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	43da      	mvns	r2, r3
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	3308      	adds	r3, #8
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015534:	429a      	cmp	r2, r3
 8015536:	d101      	bne.n	801553c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015538:	2301      	movs	r3, #1
 801553a:	e000      	b.n	801553e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801553c:	2300      	movs	r3, #0
  }
}
 801553e:	4618      	mov	r0, r3
 8015540:	3714      	adds	r7, #20
 8015542:	46bd      	mov	sp, r7
 8015544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015548:	4770      	bx	lr
	...

0801554c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b084      	sub	sp, #16
 8015550:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015552:	2300      	movs	r3, #0
 8015554:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015556:	4b12      	ldr	r3, [pc, #72]	@ (80155a0 <ip_reass_tmr+0x54>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801555c:	e018      	b.n	8015590 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	7fdb      	ldrb	r3, [r3, #31]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d00b      	beq.n	801557e <ip_reass_tmr+0x32>
      r->timer--;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	7fdb      	ldrb	r3, [r3, #31]
 801556a:	3b01      	subs	r3, #1
 801556c:	b2da      	uxtb	r2, r3
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	60fb      	str	r3, [r7, #12]
 801557c:	e008      	b.n	8015590 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015588:	68b9      	ldr	r1, [r7, #8]
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f000 f80a 	bl	80155a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d1e3      	bne.n	801555e <ip_reass_tmr+0x12>
    }
  }
}
 8015596:	bf00      	nop
 8015598:	bf00      	nop
 801559a:	3710      	adds	r7, #16
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	2000c6f8 	.word	0x2000c6f8

080155a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b088      	sub	sp, #32
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
 80155ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80155ae:	2300      	movs	r3, #0
 80155b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80155b2:	683a      	ldr	r2, [r7, #0]
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d105      	bne.n	80155c6 <ip_reass_free_complete_datagram+0x22>
 80155ba:	4b45      	ldr	r3, [pc, #276]	@ (80156d0 <ip_reass_free_complete_datagram+0x12c>)
 80155bc:	22ab      	movs	r2, #171	@ 0xab
 80155be:	4945      	ldr	r1, [pc, #276]	@ (80156d4 <ip_reass_free_complete_datagram+0x130>)
 80155c0:	4845      	ldr	r0, [pc, #276]	@ (80156d8 <ip_reass_free_complete_datagram+0x134>)
 80155c2:	f7eb fda3 	bl	800110c <printf>
  if (prev != NULL) {
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d00a      	beq.n	80155e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	687a      	ldr	r2, [r7, #4]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d005      	beq.n	80155e2 <ip_reass_free_complete_datagram+0x3e>
 80155d6:	4b3e      	ldr	r3, [pc, #248]	@ (80156d0 <ip_reass_free_complete_datagram+0x12c>)
 80155d8:	22ad      	movs	r2, #173	@ 0xad
 80155da:	4940      	ldr	r1, [pc, #256]	@ (80156dc <ip_reass_free_complete_datagram+0x138>)
 80155dc:	483e      	ldr	r0, [pc, #248]	@ (80156d8 <ip_reass_free_complete_datagram+0x134>)
 80155de:	f7eb fd95 	bl	800110c <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	889b      	ldrh	r3, [r3, #4]
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d12a      	bne.n	801564a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	685b      	ldr	r3, [r3, #4]
 80155f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	681a      	ldr	r2, [r3, #0]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015602:	69bb      	ldr	r3, [r7, #24]
 8015604:	6858      	ldr	r0, [r3, #4]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	3308      	adds	r3, #8
 801560a:	2214      	movs	r2, #20
 801560c:	4619      	mov	r1, r3
 801560e:	f001 faba 	bl	8016b86 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015612:	2101      	movs	r1, #1
 8015614:	69b8      	ldr	r0, [r7, #24]
 8015616:	f7ff fc47 	bl	8014ea8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801561a:	69b8      	ldr	r0, [r7, #24]
 801561c:	f7f7 fcb8 	bl	800cf90 <pbuf_clen>
 8015620:	4603      	mov	r3, r0
 8015622:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015624:	8bfa      	ldrh	r2, [r7, #30]
 8015626:	8a7b      	ldrh	r3, [r7, #18]
 8015628:	4413      	add	r3, r2
 801562a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801562e:	db05      	blt.n	801563c <ip_reass_free_complete_datagram+0x98>
 8015630:	4b27      	ldr	r3, [pc, #156]	@ (80156d0 <ip_reass_free_complete_datagram+0x12c>)
 8015632:	22bc      	movs	r2, #188	@ 0xbc
 8015634:	492a      	ldr	r1, [pc, #168]	@ (80156e0 <ip_reass_free_complete_datagram+0x13c>)
 8015636:	4828      	ldr	r0, [pc, #160]	@ (80156d8 <ip_reass_free_complete_datagram+0x134>)
 8015638:	f7eb fd68 	bl	800110c <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801563c:	8bfa      	ldrh	r2, [r7, #30]
 801563e:	8a7b      	ldrh	r3, [r7, #18]
 8015640:	4413      	add	r3, r2
 8015642:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015644:	69b8      	ldr	r0, [r7, #24]
 8015646:	f7f7 fc15 	bl	800ce74 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	685b      	ldr	r3, [r3, #4]
 801564e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015650:	e01f      	b.n	8015692 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015652:	69bb      	ldr	r3, [r7, #24]
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015662:	68f8      	ldr	r0, [r7, #12]
 8015664:	f7f7 fc94 	bl	800cf90 <pbuf_clen>
 8015668:	4603      	mov	r3, r0
 801566a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801566c:	8bfa      	ldrh	r2, [r7, #30]
 801566e:	8a7b      	ldrh	r3, [r7, #18]
 8015670:	4413      	add	r3, r2
 8015672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015676:	db05      	blt.n	8015684 <ip_reass_free_complete_datagram+0xe0>
 8015678:	4b15      	ldr	r3, [pc, #84]	@ (80156d0 <ip_reass_free_complete_datagram+0x12c>)
 801567a:	22cc      	movs	r2, #204	@ 0xcc
 801567c:	4918      	ldr	r1, [pc, #96]	@ (80156e0 <ip_reass_free_complete_datagram+0x13c>)
 801567e:	4816      	ldr	r0, [pc, #88]	@ (80156d8 <ip_reass_free_complete_datagram+0x134>)
 8015680:	f7eb fd44 	bl	800110c <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015684:	8bfa      	ldrh	r2, [r7, #30]
 8015686:	8a7b      	ldrh	r3, [r7, #18]
 8015688:	4413      	add	r3, r2
 801568a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f7f7 fbf1 	bl	800ce74 <pbuf_free>
  while (p != NULL) {
 8015692:	69bb      	ldr	r3, [r7, #24]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d1dc      	bne.n	8015652 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015698:	6839      	ldr	r1, [r7, #0]
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 f8c2 	bl	8015824 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80156a0:	4b10      	ldr	r3, [pc, #64]	@ (80156e4 <ip_reass_free_complete_datagram+0x140>)
 80156a2:	881b      	ldrh	r3, [r3, #0]
 80156a4:	8bfa      	ldrh	r2, [r7, #30]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d905      	bls.n	80156b6 <ip_reass_free_complete_datagram+0x112>
 80156aa:	4b09      	ldr	r3, [pc, #36]	@ (80156d0 <ip_reass_free_complete_datagram+0x12c>)
 80156ac:	22d2      	movs	r2, #210	@ 0xd2
 80156ae:	490e      	ldr	r1, [pc, #56]	@ (80156e8 <ip_reass_free_complete_datagram+0x144>)
 80156b0:	4809      	ldr	r0, [pc, #36]	@ (80156d8 <ip_reass_free_complete_datagram+0x134>)
 80156b2:	f7eb fd2b 	bl	800110c <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80156b6:	4b0b      	ldr	r3, [pc, #44]	@ (80156e4 <ip_reass_free_complete_datagram+0x140>)
 80156b8:	881a      	ldrh	r2, [r3, #0]
 80156ba:	8bfb      	ldrh	r3, [r7, #30]
 80156bc:	1ad3      	subs	r3, r2, r3
 80156be:	b29a      	uxth	r2, r3
 80156c0:	4b08      	ldr	r3, [pc, #32]	@ (80156e4 <ip_reass_free_complete_datagram+0x140>)
 80156c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80156c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3720      	adds	r7, #32
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	0801aadc 	.word	0x0801aadc
 80156d4:	0801ab18 	.word	0x0801ab18
 80156d8:	0801ab24 	.word	0x0801ab24
 80156dc:	0801ab4c 	.word	0x0801ab4c
 80156e0:	0801ab60 	.word	0x0801ab60
 80156e4:	2000c6fc 	.word	0x2000c6fc
 80156e8:	0801ab80 	.word	0x0801ab80

080156ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b08a      	sub	sp, #40	@ 0x28
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
 80156f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80156f6:	2300      	movs	r3, #0
 80156f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80156fa:	2300      	movs	r3, #0
 80156fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80156fe:	2300      	movs	r3, #0
 8015700:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015702:	2300      	movs	r3, #0
 8015704:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015706:	2300      	movs	r3, #0
 8015708:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801570a:	4b28      	ldr	r3, [pc, #160]	@ (80157ac <ip_reass_remove_oldest_datagram+0xc0>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015710:	e030      	b.n	8015774 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015714:	695a      	ldr	r2, [r3, #20]
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	68db      	ldr	r3, [r3, #12]
 801571a:	429a      	cmp	r2, r3
 801571c:	d10c      	bne.n	8015738 <ip_reass_remove_oldest_datagram+0x4c>
 801571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015720:	699a      	ldr	r2, [r3, #24]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	691b      	ldr	r3, [r3, #16]
 8015726:	429a      	cmp	r2, r3
 8015728:	d106      	bne.n	8015738 <ip_reass_remove_oldest_datagram+0x4c>
 801572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801572c:	899a      	ldrh	r2, [r3, #12]
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	889b      	ldrh	r3, [r3, #4]
 8015732:	b29b      	uxth	r3, r3
 8015734:	429a      	cmp	r2, r3
 8015736:	d014      	beq.n	8015762 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	3301      	adds	r3, #1
 801573c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801573e:	6a3b      	ldr	r3, [r7, #32]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d104      	bne.n	801574e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015746:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015748:	69fb      	ldr	r3, [r7, #28]
 801574a:	61bb      	str	r3, [r7, #24]
 801574c:	e009      	b.n	8015762 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015750:	7fda      	ldrb	r2, [r3, #31]
 8015752:	6a3b      	ldr	r3, [r7, #32]
 8015754:	7fdb      	ldrb	r3, [r3, #31]
 8015756:	429a      	cmp	r2, r3
 8015758:	d803      	bhi.n	8015762 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801575c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801575e:	69fb      	ldr	r3, [r7, #28]
 8015760:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d001      	beq.n	801576e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801576c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015776:	2b00      	cmp	r3, #0
 8015778:	d1cb      	bne.n	8015712 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801577a:	6a3b      	ldr	r3, [r7, #32]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d008      	beq.n	8015792 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015780:	69b9      	ldr	r1, [r7, #24]
 8015782:	6a38      	ldr	r0, [r7, #32]
 8015784:	f7ff ff0e 	bl	80155a4 <ip_reass_free_complete_datagram>
 8015788:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801578a:	697a      	ldr	r2, [r7, #20]
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	4413      	add	r3, r2
 8015790:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015792:	697a      	ldr	r2, [r7, #20]
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	429a      	cmp	r2, r3
 8015798:	da02      	bge.n	80157a0 <ip_reass_remove_oldest_datagram+0xb4>
 801579a:	693b      	ldr	r3, [r7, #16]
 801579c:	2b01      	cmp	r3, #1
 801579e:	dcac      	bgt.n	80156fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80157a0:	697b      	ldr	r3, [r7, #20]
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3728      	adds	r7, #40	@ 0x28
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}
 80157aa:	bf00      	nop
 80157ac:	2000c6f8 	.word	0x2000c6f8

080157b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b084      	sub	sp, #16
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80157ba:	2004      	movs	r0, #4
 80157bc:	f7f6 fc40 	bl	800c040 <memp_malloc>
 80157c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d110      	bne.n	80157ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80157c8:	6839      	ldr	r1, [r7, #0]
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f7ff ff8e 	bl	80156ec <ip_reass_remove_oldest_datagram>
 80157d0:	4602      	mov	r2, r0
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	4293      	cmp	r3, r2
 80157d6:	dc03      	bgt.n	80157e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80157d8:	2004      	movs	r0, #4
 80157da:	f7f6 fc31 	bl	800c040 <memp_malloc>
 80157de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d101      	bne.n	80157ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80157e6:	2300      	movs	r3, #0
 80157e8:	e016      	b.n	8015818 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80157ea:	2220      	movs	r2, #32
 80157ec:	2100      	movs	r1, #0
 80157ee:	68f8      	ldr	r0, [r7, #12]
 80157f0:	f001 f8f5 	bl	80169de <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	220f      	movs	r2, #15
 80157f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80157fa:	4b09      	ldr	r3, [pc, #36]	@ (8015820 <ip_reass_enqueue_new_datagram+0x70>)
 80157fc:	681a      	ldr	r2, [r3, #0]
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015802:	4a07      	ldr	r2, [pc, #28]	@ (8015820 <ip_reass_enqueue_new_datagram+0x70>)
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	3308      	adds	r3, #8
 801580c:	2214      	movs	r2, #20
 801580e:	6879      	ldr	r1, [r7, #4]
 8015810:	4618      	mov	r0, r3
 8015812:	f001 f9b8 	bl	8016b86 <memcpy>
  return ipr;
 8015816:	68fb      	ldr	r3, [r7, #12]
}
 8015818:	4618      	mov	r0, r3
 801581a:	3710      	adds	r7, #16
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	2000c6f8 	.word	0x2000c6f8

08015824 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801582e:	4b10      	ldr	r3, [pc, #64]	@ (8015870 <ip_reass_dequeue_datagram+0x4c>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	429a      	cmp	r2, r3
 8015836:	d104      	bne.n	8015842 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	4a0c      	ldr	r2, [pc, #48]	@ (8015870 <ip_reass_dequeue_datagram+0x4c>)
 801583e:	6013      	str	r3, [r2, #0]
 8015840:	e00d      	b.n	801585e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d106      	bne.n	8015856 <ip_reass_dequeue_datagram+0x32>
 8015848:	4b0a      	ldr	r3, [pc, #40]	@ (8015874 <ip_reass_dequeue_datagram+0x50>)
 801584a:	f240 1245 	movw	r2, #325	@ 0x145
 801584e:	490a      	ldr	r1, [pc, #40]	@ (8015878 <ip_reass_dequeue_datagram+0x54>)
 8015850:	480a      	ldr	r0, [pc, #40]	@ (801587c <ip_reass_dequeue_datagram+0x58>)
 8015852:	f7eb fc5b 	bl	800110c <printf>
    prev->next = ipr->next;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801585e:	6879      	ldr	r1, [r7, #4]
 8015860:	2004      	movs	r0, #4
 8015862:	f7f6 fc63 	bl	800c12c <memp_free>
}
 8015866:	bf00      	nop
 8015868:	3708      	adds	r7, #8
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}
 801586e:	bf00      	nop
 8015870:	2000c6f8 	.word	0x2000c6f8
 8015874:	0801aadc 	.word	0x0801aadc
 8015878:	0801aba4 	.word	0x0801aba4
 801587c:	0801ab24 	.word	0x0801ab24

08015880 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b08c      	sub	sp, #48	@ 0x30
 8015884:	af00      	add	r7, sp, #0
 8015886:	60f8      	str	r0, [r7, #12]
 8015888:	60b9      	str	r1, [r7, #8]
 801588a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801588c:	2300      	movs	r3, #0
 801588e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015890:	2301      	movs	r3, #1
 8015892:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	685b      	ldr	r3, [r3, #4]
 8015898:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801589a:	69fb      	ldr	r3, [r7, #28]
 801589c:	885b      	ldrh	r3, [r3, #2]
 801589e:	b29b      	uxth	r3, r3
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7f5 fef5 	bl	800b690 <lwip_htons>
 80158a6:	4603      	mov	r3, r0
 80158a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80158aa:	69fb      	ldr	r3, [r7, #28]
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	f003 030f 	and.w	r3, r3, #15
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	009b      	lsls	r3, r3, #2
 80158b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80158b8:	7e7b      	ldrb	r3, [r7, #25]
 80158ba:	b29b      	uxth	r3, r3
 80158bc:	8b7a      	ldrh	r2, [r7, #26]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d202      	bcs.n	80158c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158c2:	f04f 33ff 	mov.w	r3, #4294967295
 80158c6:	e135      	b.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80158c8:	7e7b      	ldrb	r3, [r7, #25]
 80158ca:	b29b      	uxth	r3, r3
 80158cc:	8b7a      	ldrh	r2, [r7, #26]
 80158ce:	1ad3      	subs	r3, r2, r3
 80158d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80158d2:	69fb      	ldr	r3, [r7, #28]
 80158d4:	88db      	ldrh	r3, [r3, #6]
 80158d6:	b29b      	uxth	r3, r3
 80158d8:	4618      	mov	r0, r3
 80158da:	f7f5 fed9 	bl	800b690 <lwip_htons>
 80158de:	4603      	mov	r3, r0
 80158e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80158e4:	b29b      	uxth	r3, r3
 80158e6:	00db      	lsls	r3, r3, #3
 80158e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80158ea:	68bb      	ldr	r3, [r7, #8]
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80158f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158f2:	2200      	movs	r2, #0
 80158f4:	701a      	strb	r2, [r3, #0]
 80158f6:	2200      	movs	r2, #0
 80158f8:	705a      	strb	r2, [r3, #1]
 80158fa:	2200      	movs	r2, #0
 80158fc:	709a      	strb	r2, [r3, #2]
 80158fe:	2200      	movs	r2, #0
 8015900:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015904:	8afa      	ldrh	r2, [r7, #22]
 8015906:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015908:	8afa      	ldrh	r2, [r7, #22]
 801590a:	8b7b      	ldrh	r3, [r7, #26]
 801590c:	4413      	add	r3, r2
 801590e:	b29a      	uxth	r2, r3
 8015910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015912:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015916:	88db      	ldrh	r3, [r3, #6]
 8015918:	b29b      	uxth	r3, r3
 801591a:	8afa      	ldrh	r2, [r7, #22]
 801591c:	429a      	cmp	r2, r3
 801591e:	d902      	bls.n	8015926 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015920:	f04f 33ff 	mov.w	r3, #4294967295
 8015924:	e106      	b.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	685b      	ldr	r3, [r3, #4]
 801592a:	627b      	str	r3, [r7, #36]	@ 0x24
 801592c:	e068      	b.n	8015a00 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015936:	889b      	ldrh	r3, [r3, #4]
 8015938:	b29a      	uxth	r2, r3
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	889b      	ldrh	r3, [r3, #4]
 801593e:	b29b      	uxth	r3, r3
 8015940:	429a      	cmp	r2, r3
 8015942:	d235      	bcs.n	80159b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015948:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801594c:	2b00      	cmp	r3, #0
 801594e:	d020      	beq.n	8015992 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015952:	889b      	ldrh	r3, [r3, #4]
 8015954:	b29a      	uxth	r2, r3
 8015956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015958:	88db      	ldrh	r3, [r3, #6]
 801595a:	b29b      	uxth	r3, r3
 801595c:	429a      	cmp	r2, r3
 801595e:	d307      	bcc.n	8015970 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015962:	88db      	ldrh	r3, [r3, #6]
 8015964:	b29a      	uxth	r2, r3
 8015966:	693b      	ldr	r3, [r7, #16]
 8015968:	889b      	ldrh	r3, [r3, #4]
 801596a:	b29b      	uxth	r3, r3
 801596c:	429a      	cmp	r2, r3
 801596e:	d902      	bls.n	8015976 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015970:	f04f 33ff 	mov.w	r3, #4294967295
 8015974:	e0de      	b.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015978:	68ba      	ldr	r2, [r7, #8]
 801597a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801597e:	88db      	ldrh	r3, [r3, #6]
 8015980:	b29a      	uxth	r2, r3
 8015982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015984:	889b      	ldrh	r3, [r3, #4]
 8015986:	b29b      	uxth	r3, r3
 8015988:	429a      	cmp	r2, r3
 801598a:	d03d      	beq.n	8015a08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801598c:	2300      	movs	r3, #0
 801598e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015990:	e03a      	b.n	8015a08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015994:	88db      	ldrh	r3, [r3, #6]
 8015996:	b29a      	uxth	r2, r3
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	889b      	ldrh	r3, [r3, #4]
 801599c:	b29b      	uxth	r3, r3
 801599e:	429a      	cmp	r2, r3
 80159a0:	d902      	bls.n	80159a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159a2:	f04f 33ff 	mov.w	r3, #4294967295
 80159a6:	e0c5      	b.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	68ba      	ldr	r2, [r7, #8]
 80159ac:	605a      	str	r2, [r3, #4]
      break;
 80159ae:	e02b      	b.n	8015a08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80159b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159b2:	889b      	ldrh	r3, [r3, #4]
 80159b4:	b29a      	uxth	r2, r3
 80159b6:	693b      	ldr	r3, [r7, #16]
 80159b8:	889b      	ldrh	r3, [r3, #4]
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	429a      	cmp	r2, r3
 80159be:	d102      	bne.n	80159c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159c0:	f04f 33ff 	mov.w	r3, #4294967295
 80159c4:	e0b6      	b.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80159c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159c8:	889b      	ldrh	r3, [r3, #4]
 80159ca:	b29a      	uxth	r2, r3
 80159cc:	693b      	ldr	r3, [r7, #16]
 80159ce:	88db      	ldrh	r3, [r3, #6]
 80159d0:	b29b      	uxth	r3, r3
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d202      	bcs.n	80159dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159d6:	f04f 33ff 	mov.w	r3, #4294967295
 80159da:	e0ab      	b.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80159dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d009      	beq.n	80159f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80159e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e4:	88db      	ldrh	r3, [r3, #6]
 80159e6:	b29a      	uxth	r2, r3
 80159e8:	693b      	ldr	r3, [r7, #16]
 80159ea:	889b      	ldrh	r3, [r3, #4]
 80159ec:	b29b      	uxth	r3, r3
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d001      	beq.n	80159f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80159f2:	2300      	movs	r3, #0
 80159f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d193      	bne.n	801592e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015a06:	e000      	b.n	8015a0a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015a08:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d12d      	bne.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d01c      	beq.n	8015a50 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a18:	88db      	ldrh	r3, [r3, #6]
 8015a1a:	b29a      	uxth	r2, r3
 8015a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a1e:	889b      	ldrh	r3, [r3, #4]
 8015a20:	b29b      	uxth	r3, r3
 8015a22:	429a      	cmp	r2, r3
 8015a24:	d906      	bls.n	8015a34 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015a26:	4b45      	ldr	r3, [pc, #276]	@ (8015b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a28:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015a2c:	4944      	ldr	r1, [pc, #272]	@ (8015b40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015a2e:	4845      	ldr	r0, [pc, #276]	@ (8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a30:	f7eb fb6c 	bl	800110c <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a36:	68ba      	ldr	r2, [r7, #8]
 8015a38:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a3c:	88db      	ldrh	r3, [r3, #6]
 8015a3e:	b29a      	uxth	r2, r3
 8015a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a42:	889b      	ldrh	r3, [r3, #4]
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d010      	beq.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	623b      	str	r3, [r7, #32]
 8015a4e:	e00d      	b.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d006      	beq.n	8015a66 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015a58:	4b38      	ldr	r3, [pc, #224]	@ (8015b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a5a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015a5e:	493a      	ldr	r1, [pc, #232]	@ (8015b48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015a60:	4838      	ldr	r0, [pc, #224]	@ (8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a62:	f7eb fb53 	bl	800110c <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	68ba      	ldr	r2, [r7, #8]
 8015a6a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d105      	bne.n	8015a7e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	7f9b      	ldrb	r3, [r3, #30]
 8015a76:	f003 0301 	and.w	r3, r3, #1
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d059      	beq.n	8015b32 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015a7e:	6a3b      	ldr	r3, [r7, #32]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d04f      	beq.n	8015b24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d006      	beq.n	8015a9a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	685b      	ldr	r3, [r3, #4]
 8015a92:	889b      	ldrh	r3, [r3, #4]
 8015a94:	b29b      	uxth	r3, r3
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d002      	beq.n	8015aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	623b      	str	r3, [r7, #32]
 8015a9e:	e041      	b.n	8015b24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015aaa:	e012      	b.n	8015ad2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ab4:	88db      	ldrh	r3, [r3, #6]
 8015ab6:	b29a      	uxth	r2, r3
 8015ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aba:	889b      	ldrh	r3, [r3, #4]
 8015abc:	b29b      	uxth	r3, r3
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	d002      	beq.n	8015ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	623b      	str	r3, [r7, #32]
            break;
 8015ac6:	e007      	b.n	8015ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aca:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d1e9      	bne.n	8015aac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015ad8:	6a3b      	ldr	r3, [r7, #32]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d022      	beq.n	8015b24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	685b      	ldr	r3, [r3, #4]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d106      	bne.n	8015af4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015ae6:	4b15      	ldr	r3, [pc, #84]	@ (8015b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ae8:	f240 12df 	movw	r2, #479	@ 0x1df
 8015aec:	4917      	ldr	r1, [pc, #92]	@ (8015b4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015aee:	4815      	ldr	r0, [pc, #84]	@ (8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015af0:	f7eb fb0c 	bl	800110c <printf>
          LWIP_ASSERT("sanity check",
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	685b      	ldr	r3, [r3, #4]
 8015afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d106      	bne.n	8015b0e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015b00:	4b0e      	ldr	r3, [pc, #56]	@ (8015b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b02:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015b06:	4911      	ldr	r1, [pc, #68]	@ (8015b4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015b08:	480e      	ldr	r0, [pc, #56]	@ (8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b0a:	f7eb faff 	bl	800110c <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d006      	beq.n	8015b24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015b16:	4b09      	ldr	r3, [pc, #36]	@ (8015b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b18:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015b1c:	490c      	ldr	r1, [pc, #48]	@ (8015b50 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015b1e:	4809      	ldr	r0, [pc, #36]	@ (8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b20:	f7eb faf4 	bl	800110c <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015b24:	6a3b      	ldr	r3, [r7, #32]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	bf14      	ite	ne
 8015b2a:	2301      	movne	r3, #1
 8015b2c:	2300      	moveq	r3, #0
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	e000      	b.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015b32:	2300      	movs	r3, #0
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	3730      	adds	r7, #48	@ 0x30
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}
 8015b3c:	0801aadc 	.word	0x0801aadc
 8015b40:	0801abc0 	.word	0x0801abc0
 8015b44:	0801ab24 	.word	0x0801ab24
 8015b48:	0801abe0 	.word	0x0801abe0
 8015b4c:	0801ac18 	.word	0x0801ac18
 8015b50:	0801ac28 	.word	0x0801ac28

08015b54 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b08e      	sub	sp, #56	@ 0x38
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	f003 030f 	and.w	r3, r3, #15
 8015b6a:	b2db      	uxtb	r3, r3
 8015b6c:	009b      	lsls	r3, r3, #2
 8015b6e:	b2db      	uxtb	r3, r3
 8015b70:	2b14      	cmp	r3, #20
 8015b72:	f040 8171 	bne.w	8015e58 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b78:	88db      	ldrh	r3, [r3, #6]
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f7f5 fd87 	bl	800b690 <lwip_htons>
 8015b82:	4603      	mov	r3, r0
 8015b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b88:	b29b      	uxth	r3, r3
 8015b8a:	00db      	lsls	r3, r3, #3
 8015b8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b90:	885b      	ldrh	r3, [r3, #2]
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	4618      	mov	r0, r3
 8015b96:	f7f5 fd7b 	bl	800b690 <lwip_htons>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	f003 030f 	and.w	r3, r3, #15
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	009b      	lsls	r3, r3, #2
 8015baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015bae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	f0c0 8150 	bcc.w	8015e5c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015bc4:	1ad3      	subs	r3, r2, r3
 8015bc6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f7f7 f9e1 	bl	800cf90 <pbuf_clen>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015bd2:	4b8c      	ldr	r3, [pc, #560]	@ (8015e04 <ip4_reass+0x2b0>)
 8015bd4:	881b      	ldrh	r3, [r3, #0]
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	8c3b      	ldrh	r3, [r7, #32]
 8015bda:	4413      	add	r3, r2
 8015bdc:	2b0a      	cmp	r3, #10
 8015bde:	dd10      	ble.n	8015c02 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015be0:	8c3b      	ldrh	r3, [r7, #32]
 8015be2:	4619      	mov	r1, r3
 8015be4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015be6:	f7ff fd81 	bl	80156ec <ip_reass_remove_oldest_datagram>
 8015bea:	4603      	mov	r3, r0
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	f000 8137 	beq.w	8015e60 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015bf2:	4b84      	ldr	r3, [pc, #528]	@ (8015e04 <ip4_reass+0x2b0>)
 8015bf4:	881b      	ldrh	r3, [r3, #0]
 8015bf6:	461a      	mov	r2, r3
 8015bf8:	8c3b      	ldrh	r3, [r7, #32]
 8015bfa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015bfc:	2b0a      	cmp	r3, #10
 8015bfe:	f300 812f 	bgt.w	8015e60 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015c02:	4b81      	ldr	r3, [pc, #516]	@ (8015e08 <ip4_reass+0x2b4>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	633b      	str	r3, [r7, #48]	@ 0x30
 8015c08:	e015      	b.n	8015c36 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c0c:	695a      	ldr	r2, [r3, #20]
 8015c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c10:	68db      	ldr	r3, [r3, #12]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d10c      	bne.n	8015c30 <ip4_reass+0xdc>
 8015c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c18:	699a      	ldr	r2, [r3, #24]
 8015c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c1c:	691b      	ldr	r3, [r3, #16]
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	d106      	bne.n	8015c30 <ip4_reass+0xdc>
 8015c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c24:	899a      	ldrh	r2, [r3, #12]
 8015c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c28:	889b      	ldrh	r3, [r3, #4]
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	d006      	beq.n	8015c3e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	633b      	str	r3, [r7, #48]	@ 0x30
 8015c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d1e6      	bne.n	8015c0a <ip4_reass+0xb6>
 8015c3c:	e000      	b.n	8015c40 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015c3e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d109      	bne.n	8015c5a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015c46:	8c3b      	ldrh	r3, [r7, #32]
 8015c48:	4619      	mov	r1, r3
 8015c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015c4c:	f7ff fdb0 	bl	80157b0 <ip_reass_enqueue_new_datagram>
 8015c50:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d11c      	bne.n	8015c92 <ip4_reass+0x13e>
      goto nullreturn;
 8015c58:	e105      	b.n	8015e66 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c5c:	88db      	ldrh	r3, [r3, #6]
 8015c5e:	b29b      	uxth	r3, r3
 8015c60:	4618      	mov	r0, r3
 8015c62:	f7f5 fd15 	bl	800b690 <lwip_htons>
 8015c66:	4603      	mov	r3, r0
 8015c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d110      	bne.n	8015c92 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c72:	89db      	ldrh	r3, [r3, #14]
 8015c74:	4618      	mov	r0, r3
 8015c76:	f7f5 fd0b 	bl	800b690 <lwip_htons>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d006      	beq.n	8015c92 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c86:	3308      	adds	r3, #8
 8015c88:	2214      	movs	r2, #20
 8015c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f000 ff7a 	bl	8016b86 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c94:	88db      	ldrh	r3, [r3, #6]
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	f003 0320 	and.w	r3, r3, #32
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	bf0c      	ite	eq
 8015ca0:	2301      	moveq	r3, #1
 8015ca2:	2300      	movne	r3, #0
 8015ca4:	b2db      	uxtb	r3, r3
 8015ca6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d00e      	beq.n	8015ccc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015cae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015cb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015cb2:	4413      	add	r3, r2
 8015cb4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015cb6:	8b7a      	ldrh	r2, [r7, #26]
 8015cb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	f0c0 80a0 	bcc.w	8015e00 <ip4_reass+0x2ac>
 8015cc0:	8b7b      	ldrh	r3, [r7, #26]
 8015cc2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015cc6:	4293      	cmp	r3, r2
 8015cc8:	f200 809a 	bhi.w	8015e00 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015ccc:	69fa      	ldr	r2, [r7, #28]
 8015cce:	6879      	ldr	r1, [r7, #4]
 8015cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015cd2:	f7ff fdd5 	bl	8015880 <ip_reass_chain_frag_into_datagram_and_validate>
 8015cd6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015cd8:	697b      	ldr	r3, [r7, #20]
 8015cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cde:	f000 809b 	beq.w	8015e18 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015ce2:	4b48      	ldr	r3, [pc, #288]	@ (8015e04 <ip4_reass+0x2b0>)
 8015ce4:	881a      	ldrh	r2, [r3, #0]
 8015ce6:	8c3b      	ldrh	r3, [r7, #32]
 8015ce8:	4413      	add	r3, r2
 8015cea:	b29a      	uxth	r2, r3
 8015cec:	4b45      	ldr	r3, [pc, #276]	@ (8015e04 <ip4_reass+0x2b0>)
 8015cee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015cf0:	69fb      	ldr	r3, [r7, #28]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d00d      	beq.n	8015d12 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015cf6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015cf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015cfa:	4413      	add	r3, r2
 8015cfc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d00:	8a7a      	ldrh	r2, [r7, #18]
 8015d02:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d06:	7f9b      	ldrb	r3, [r3, #30]
 8015d08:	f043 0301 	orr.w	r3, r3, #1
 8015d0c:	b2da      	uxtb	r2, r3
 8015d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d10:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	2b01      	cmp	r3, #1
 8015d16:	d171      	bne.n	8015dfc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d1a:	8b9b      	ldrh	r3, [r3, #28]
 8015d1c:	3314      	adds	r3, #20
 8015d1e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d22:	685b      	ldr	r3, [r3, #4]
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d34:	3308      	adds	r3, #8
 8015d36:	2214      	movs	r2, #20
 8015d38:	4619      	mov	r1, r3
 8015d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d3c:	f000 ff23 	bl	8016b86 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015d40:	8a3b      	ldrh	r3, [r7, #16]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7f5 fca4 	bl	800b690 <lwip_htons>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d4e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d52:	2200      	movs	r2, #0
 8015d54:	719a      	strb	r2, [r3, #6]
 8015d56:	2200      	movs	r2, #0
 8015d58:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	729a      	strb	r2, [r3, #10]
 8015d60:	2200      	movs	r2, #0
 8015d62:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d66:	685b      	ldr	r3, [r3, #4]
 8015d68:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015d6a:	e00d      	b.n	8015d88 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d6e:	685b      	ldr	r3, [r3, #4]
 8015d70:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015d72:	2114      	movs	r1, #20
 8015d74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015d76:	f7f6 fff7 	bl	800cd68 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015d7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f7f7 f947 	bl	800d010 <pbuf_cat>
      r = iprh->next_pbuf;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d1ee      	bne.n	8015d6c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8015e08 <ip4_reass+0x2b4>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d102      	bne.n	8015d9e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015d9c:	e010      	b.n	8015dc0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8015e08 <ip4_reass+0x2b4>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015da4:	e007      	b.n	8015db6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015dac:	429a      	cmp	r2, r3
 8015dae:	d006      	beq.n	8015dbe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d1f4      	bne.n	8015da6 <ip4_reass+0x252>
 8015dbc:	e000      	b.n	8015dc0 <ip4_reass+0x26c>
          break;
 8015dbe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015dc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015dc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015dc4:	f7ff fd2e 	bl	8015824 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015dc8:	6878      	ldr	r0, [r7, #4]
 8015dca:	f7f7 f8e1 	bl	800cf90 <pbuf_clen>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8015e04 <ip4_reass+0x2b0>)
 8015dd4:	881b      	ldrh	r3, [r3, #0]
 8015dd6:	8c3a      	ldrh	r2, [r7, #32]
 8015dd8:	429a      	cmp	r2, r3
 8015dda:	d906      	bls.n	8015dea <ip4_reass+0x296>
 8015ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8015e0c <ip4_reass+0x2b8>)
 8015dde:	f240 229b 	movw	r2, #667	@ 0x29b
 8015de2:	490b      	ldr	r1, [pc, #44]	@ (8015e10 <ip4_reass+0x2bc>)
 8015de4:	480b      	ldr	r0, [pc, #44]	@ (8015e14 <ip4_reass+0x2c0>)
 8015de6:	f7eb f991 	bl	800110c <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015dea:	4b06      	ldr	r3, [pc, #24]	@ (8015e04 <ip4_reass+0x2b0>)
 8015dec:	881a      	ldrh	r2, [r3, #0]
 8015dee:	8c3b      	ldrh	r3, [r7, #32]
 8015df0:	1ad3      	subs	r3, r2, r3
 8015df2:	b29a      	uxth	r2, r3
 8015df4:	4b03      	ldr	r3, [pc, #12]	@ (8015e04 <ip4_reass+0x2b0>)
 8015df6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	e038      	b.n	8015e6e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	e036      	b.n	8015e6e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015e00:	bf00      	nop
 8015e02:	e00a      	b.n	8015e1a <ip4_reass+0x2c6>
 8015e04:	2000c6fc 	.word	0x2000c6fc
 8015e08:	2000c6f8 	.word	0x2000c6f8
 8015e0c:	0801aadc 	.word	0x0801aadc
 8015e10:	0801ac4c 	.word	0x0801ac4c
 8015e14:	0801ab24 	.word	0x0801ab24
    goto nullreturn_ipr;
 8015e18:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d106      	bne.n	8015e2e <ip4_reass+0x2da>
 8015e20:	4b15      	ldr	r3, [pc, #84]	@ (8015e78 <ip4_reass+0x324>)
 8015e22:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015e26:	4915      	ldr	r1, [pc, #84]	@ (8015e7c <ip4_reass+0x328>)
 8015e28:	4815      	ldr	r0, [pc, #84]	@ (8015e80 <ip4_reass+0x32c>)
 8015e2a:	f7eb f96f 	bl	800110c <printf>
  if (ipr->p == NULL) {
 8015e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e30:	685b      	ldr	r3, [r3, #4]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d116      	bne.n	8015e64 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015e36:	4b13      	ldr	r3, [pc, #76]	@ (8015e84 <ip4_reass+0x330>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d006      	beq.n	8015e4e <ip4_reass+0x2fa>
 8015e40:	4b0d      	ldr	r3, [pc, #52]	@ (8015e78 <ip4_reass+0x324>)
 8015e42:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015e46:	4910      	ldr	r1, [pc, #64]	@ (8015e88 <ip4_reass+0x334>)
 8015e48:	480d      	ldr	r0, [pc, #52]	@ (8015e80 <ip4_reass+0x32c>)
 8015e4a:	f7eb f95f 	bl	800110c <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015e4e:	2100      	movs	r1, #0
 8015e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015e52:	f7ff fce7 	bl	8015824 <ip_reass_dequeue_datagram>
 8015e56:	e006      	b.n	8015e66 <ip4_reass+0x312>
    goto nullreturn;
 8015e58:	bf00      	nop
 8015e5a:	e004      	b.n	8015e66 <ip4_reass+0x312>
    goto nullreturn;
 8015e5c:	bf00      	nop
 8015e5e:	e002      	b.n	8015e66 <ip4_reass+0x312>
      goto nullreturn;
 8015e60:	bf00      	nop
 8015e62:	e000      	b.n	8015e66 <ip4_reass+0x312>
  }

nullreturn:
 8015e64:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f7f7 f804 	bl	800ce74 <pbuf_free>
  return NULL;
 8015e6c:	2300      	movs	r3, #0
}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	3738      	adds	r7, #56	@ 0x38
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bd80      	pop	{r7, pc}
 8015e76:	bf00      	nop
 8015e78:	0801aadc 	.word	0x0801aadc
 8015e7c:	0801ac68 	.word	0x0801ac68
 8015e80:	0801ab24 	.word	0x0801ab24
 8015e84:	2000c6f8 	.word	0x2000c6f8
 8015e88:	0801ac74 	.word	0x0801ac74

08015e8c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015e90:	2005      	movs	r0, #5
 8015e92:	f7f6 f8d5 	bl	800c040 <memp_malloc>
 8015e96:	4603      	mov	r3, r0
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d106      	bne.n	8015eb8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015eaa:	4b07      	ldr	r3, [pc, #28]	@ (8015ec8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015eac:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015eb0:	4906      	ldr	r1, [pc, #24]	@ (8015ecc <ip_frag_free_pbuf_custom_ref+0x30>)
 8015eb2:	4807      	ldr	r0, [pc, #28]	@ (8015ed0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015eb4:	f7eb f92a 	bl	800110c <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015eb8:	6879      	ldr	r1, [r7, #4]
 8015eba:	2005      	movs	r0, #5
 8015ebc:	f7f6 f936 	bl	800c12c <memp_free>
}
 8015ec0:	bf00      	nop
 8015ec2:	3708      	adds	r7, #8
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}
 8015ec8:	0801aadc 	.word	0x0801aadc
 8015ecc:	0801ac94 	.word	0x0801ac94
 8015ed0:	0801ab24 	.word	0x0801ab24

08015ed4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b084      	sub	sp, #16
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d106      	bne.n	8015ef4 <ipfrag_free_pbuf_custom+0x20>
 8015ee6:	4b11      	ldr	r3, [pc, #68]	@ (8015f2c <ipfrag_free_pbuf_custom+0x58>)
 8015ee8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015eec:	4910      	ldr	r1, [pc, #64]	@ (8015f30 <ipfrag_free_pbuf_custom+0x5c>)
 8015eee:	4811      	ldr	r0, [pc, #68]	@ (8015f34 <ipfrag_free_pbuf_custom+0x60>)
 8015ef0:	f7eb f90c 	bl	800110c <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015ef4:	68fa      	ldr	r2, [r7, #12]
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	429a      	cmp	r2, r3
 8015efa:	d006      	beq.n	8015f0a <ipfrag_free_pbuf_custom+0x36>
 8015efc:	4b0b      	ldr	r3, [pc, #44]	@ (8015f2c <ipfrag_free_pbuf_custom+0x58>)
 8015efe:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015f02:	490d      	ldr	r1, [pc, #52]	@ (8015f38 <ipfrag_free_pbuf_custom+0x64>)
 8015f04:	480b      	ldr	r0, [pc, #44]	@ (8015f34 <ipfrag_free_pbuf_custom+0x60>)
 8015f06:	f7eb f901 	bl	800110c <printf>
  if (pcr->original != NULL) {
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	695b      	ldr	r3, [r3, #20]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d004      	beq.n	8015f1c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	695b      	ldr	r3, [r3, #20]
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7f6 ffac 	bl	800ce74 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015f1c:	68f8      	ldr	r0, [r7, #12]
 8015f1e:	f7ff ffbd 	bl	8015e9c <ip_frag_free_pbuf_custom_ref>
}
 8015f22:	bf00      	nop
 8015f24:	3710      	adds	r7, #16
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}
 8015f2a:	bf00      	nop
 8015f2c:	0801aadc 	.word	0x0801aadc
 8015f30:	0801aca0 	.word	0x0801aca0
 8015f34:	0801ab24 	.word	0x0801ab24
 8015f38:	0801acac 	.word	0x0801acac

08015f3c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b094      	sub	sp, #80	@ 0x50
 8015f40:	af02      	add	r7, sp, #8
 8015f42:	60f8      	str	r0, [r7, #12]
 8015f44:	60b9      	str	r1, [r7, #8]
 8015f46:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015f52:	3b14      	subs	r3, #20
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	da00      	bge.n	8015f5a <ip4_frag+0x1e>
 8015f58:	3307      	adds	r3, #7
 8015f5a:	10db      	asrs	r3, r3, #3
 8015f5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015f5e:	2314      	movs	r3, #20
 8015f60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f6e:	781b      	ldrb	r3, [r3, #0]
 8015f70:	f003 030f 	and.w	r3, r3, #15
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	009b      	lsls	r3, r3, #2
 8015f78:	b2db      	uxtb	r3, r3
 8015f7a:	2b14      	cmp	r3, #20
 8015f7c:	d002      	beq.n	8015f84 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015f7e:	f06f 0305 	mvn.w	r3, #5
 8015f82:	e110      	b.n	80161a6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	895b      	ldrh	r3, [r3, #10]
 8015f88:	2b13      	cmp	r3, #19
 8015f8a:	d809      	bhi.n	8015fa0 <ip4_frag+0x64>
 8015f8c:	4b88      	ldr	r3, [pc, #544]	@ (80161b0 <ip4_frag+0x274>)
 8015f8e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015f92:	4988      	ldr	r1, [pc, #544]	@ (80161b4 <ip4_frag+0x278>)
 8015f94:	4888      	ldr	r0, [pc, #544]	@ (80161b8 <ip4_frag+0x27c>)
 8015f96:	f7eb f8b9 	bl	800110c <printf>
 8015f9a:	f06f 0305 	mvn.w	r3, #5
 8015f9e:	e102      	b.n	80161a6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fa2:	88db      	ldrh	r3, [r3, #6]
 8015fa4:	b29b      	uxth	r3, r3
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7f5 fb72 	bl	800b690 <lwip_htons>
 8015fac:	4603      	mov	r3, r0
 8015fae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015fb0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015fb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fb6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015fba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	891b      	ldrh	r3, [r3, #8]
 8015fc6:	3b14      	subs	r3, #20
 8015fc8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015fcc:	e0e1      	b.n	8016192 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015fce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015fd0:	00db      	lsls	r3, r3, #3
 8015fd2:	b29b      	uxth	r3, r3
 8015fd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015fd8:	4293      	cmp	r3, r2
 8015fda:	bf28      	it	cs
 8015fdc:	4613      	movcs	r3, r2
 8015fde:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015fe0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015fe4:	2114      	movs	r1, #20
 8015fe6:	200e      	movs	r0, #14
 8015fe8:	f7f6 fc60 	bl	800c8ac <pbuf_alloc>
 8015fec:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8015fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	f000 80d5 	beq.w	80161a0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ff8:	895b      	ldrh	r3, [r3, #10]
 8015ffa:	2b13      	cmp	r3, #19
 8015ffc:	d806      	bhi.n	801600c <ip4_frag+0xd0>
 8015ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80161b0 <ip4_frag+0x274>)
 8016000:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016004:	496d      	ldr	r1, [pc, #436]	@ (80161bc <ip4_frag+0x280>)
 8016006:	486c      	ldr	r0, [pc, #432]	@ (80161b8 <ip4_frag+0x27c>)
 8016008:	f7eb f880 	bl	800110c <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	2214      	movs	r2, #20
 8016012:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016014:	4618      	mov	r0, r3
 8016016:	f000 fdb6 	bl	8016b86 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016020:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016022:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016026:	e064      	b.n	80160f2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	895a      	ldrh	r2, [r3, #10]
 801602c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801602e:	1ad3      	subs	r3, r2, r3
 8016030:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	895b      	ldrh	r3, [r3, #10]
 8016036:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016038:	429a      	cmp	r2, r3
 801603a:	d906      	bls.n	801604a <ip4_frag+0x10e>
 801603c:	4b5c      	ldr	r3, [pc, #368]	@ (80161b0 <ip4_frag+0x274>)
 801603e:	f240 322d 	movw	r2, #813	@ 0x32d
 8016042:	495f      	ldr	r1, [pc, #380]	@ (80161c0 <ip4_frag+0x284>)
 8016044:	485c      	ldr	r0, [pc, #368]	@ (80161b8 <ip4_frag+0x27c>)
 8016046:	f7eb f861 	bl	800110c <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801604a:	8bfa      	ldrh	r2, [r7, #30]
 801604c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016050:	4293      	cmp	r3, r2
 8016052:	bf28      	it	cs
 8016054:	4613      	movcs	r3, r2
 8016056:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801605a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801605e:	2b00      	cmp	r3, #0
 8016060:	d105      	bne.n	801606e <ip4_frag+0x132>
        poff = 0;
 8016062:	2300      	movs	r3, #0
 8016064:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	60fb      	str	r3, [r7, #12]
        continue;
 801606c:	e041      	b.n	80160f2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801606e:	f7ff ff0d 	bl	8015e8c <ip_frag_alloc_pbuf_custom_ref>
 8016072:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d103      	bne.n	8016082 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801607a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801607c:	f7f6 fefa 	bl	800ce74 <pbuf_free>
        goto memerr;
 8016080:	e08f      	b.n	80161a2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016082:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016088:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801608a:	4413      	add	r3, r2
 801608c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016090:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016094:	9201      	str	r2, [sp, #4]
 8016096:	9300      	str	r3, [sp, #0]
 8016098:	4603      	mov	r3, r0
 801609a:	2241      	movs	r2, #65	@ 0x41
 801609c:	2000      	movs	r0, #0
 801609e:	f7f6 fd2f 	bl	800cb00 <pbuf_alloced_custom>
 80160a2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d106      	bne.n	80160b8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80160aa:	69b8      	ldr	r0, [r7, #24]
 80160ac:	f7ff fef6 	bl	8015e9c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80160b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80160b2:	f7f6 fedf 	bl	800ce74 <pbuf_free>
        goto memerr;
 80160b6:	e074      	b.n	80161a2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80160b8:	68f8      	ldr	r0, [r7, #12]
 80160ba:	f7f6 ff81 	bl	800cfc0 <pbuf_ref>
      pcr->original = p;
 80160be:	69bb      	ldr	r3, [r7, #24]
 80160c0:	68fa      	ldr	r2, [r7, #12]
 80160c2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80160c4:	69bb      	ldr	r3, [r7, #24]
 80160c6:	4a3f      	ldr	r2, [pc, #252]	@ (80161c4 <ip4_frag+0x288>)
 80160c8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80160ca:	6979      	ldr	r1, [r7, #20]
 80160cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80160ce:	f7f6 ff9f 	bl	800d010 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80160d2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80160d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80160da:	1ad3      	subs	r3, r2, r3
 80160dc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80160e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d004      	beq.n	80160f2 <ip4_frag+0x1b6>
        poff = 0;
 80160e8:	2300      	movs	r3, #0
 80160ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80160f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d196      	bne.n	8016028 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80160fa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80160fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016100:	4413      	add	r3, r2
 8016102:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016108:	f1a3 0213 	sub.w	r2, r3, #19
 801610c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016110:	429a      	cmp	r2, r3
 8016112:	bfcc      	ite	gt
 8016114:	2301      	movgt	r3, #1
 8016116:	2300      	movle	r3, #0
 8016118:	b2db      	uxtb	r3, r3
 801611a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801611c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016124:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016126:	6a3b      	ldr	r3, [r7, #32]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d002      	beq.n	8016132 <ip4_frag+0x1f6>
 801612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801612e:	2b00      	cmp	r3, #0
 8016130:	d003      	beq.n	801613a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016132:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016134:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016138:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801613a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801613c:	4618      	mov	r0, r3
 801613e:	f7f5 faa7 	bl	800b690 <lwip_htons>
 8016142:	4603      	mov	r3, r0
 8016144:	461a      	mov	r2, r3
 8016146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016148:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801614a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801614c:	3314      	adds	r3, #20
 801614e:	b29b      	uxth	r3, r3
 8016150:	4618      	mov	r0, r3
 8016152:	f7f5 fa9d 	bl	800b690 <lwip_htons>
 8016156:	4603      	mov	r3, r0
 8016158:	461a      	mov	r2, r3
 801615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801615c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016160:	2200      	movs	r2, #0
 8016162:	729a      	strb	r2, [r3, #10]
 8016164:	2200      	movs	r2, #0
 8016166:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	695b      	ldr	r3, [r3, #20]
 801616c:	687a      	ldr	r2, [r7, #4]
 801616e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016170:	68b8      	ldr	r0, [r7, #8]
 8016172:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016174:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016176:	f7f6 fe7d 	bl	800ce74 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801617a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801617e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016180:	1ad3      	subs	r3, r2, r3
 8016182:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016186:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801618a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801618c:	4413      	add	r3, r2
 801618e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016192:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016196:	2b00      	cmp	r3, #0
 8016198:	f47f af19 	bne.w	8015fce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801619c:	2300      	movs	r3, #0
 801619e:	e002      	b.n	80161a6 <ip4_frag+0x26a>
      goto memerr;
 80161a0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80161a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3748      	adds	r7, #72	@ 0x48
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	0801aadc 	.word	0x0801aadc
 80161b4:	0801acb8 	.word	0x0801acb8
 80161b8:	0801ab24 	.word	0x0801ab24
 80161bc:	0801acd4 	.word	0x0801acd4
 80161c0:	0801acf4 	.word	0x0801acf4
 80161c4:	08015ed5 	.word	0x08015ed5

080161c8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b086      	sub	sp, #24
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80161d2:	230e      	movs	r3, #14
 80161d4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	895b      	ldrh	r3, [r3, #10]
 80161da:	2b0e      	cmp	r3, #14
 80161dc:	d96e      	bls.n	80162bc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	7bdb      	ldrb	r3, [r3, #15]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d106      	bne.n	80161f4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80161e6:	683b      	ldr	r3, [r7, #0]
 80161e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80161ec:	3301      	adds	r3, #1
 80161ee:	b2da      	uxtb	r2, r3
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	685b      	ldr	r3, [r3, #4]
 80161f8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80161fa:	693b      	ldr	r3, [r7, #16]
 80161fc:	7b1a      	ldrb	r2, [r3, #12]
 80161fe:	7b5b      	ldrb	r3, [r3, #13]
 8016200:	021b      	lsls	r3, r3, #8
 8016202:	4313      	orrs	r3, r2
 8016204:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	f003 0301 	and.w	r3, r3, #1
 801620e:	2b00      	cmp	r3, #0
 8016210:	d023      	beq.n	801625a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016212:	693b      	ldr	r3, [r7, #16]
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	2b01      	cmp	r3, #1
 8016218:	d10f      	bne.n	801623a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	785b      	ldrb	r3, [r3, #1]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d11b      	bne.n	801625a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016226:	2b5e      	cmp	r3, #94	@ 0x5e
 8016228:	d117      	bne.n	801625a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	7b5b      	ldrb	r3, [r3, #13]
 801622e:	f043 0310 	orr.w	r3, r3, #16
 8016232:	b2da      	uxtb	r2, r3
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	735a      	strb	r2, [r3, #13]
 8016238:	e00f      	b.n	801625a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	2206      	movs	r2, #6
 801623e:	4928      	ldr	r1, [pc, #160]	@ (80162e0 <ethernet_input+0x118>)
 8016240:	4618      	mov	r0, r3
 8016242:	f000 fbbc 	bl	80169be <memcmp>
 8016246:	4603      	mov	r3, r0
 8016248:	2b00      	cmp	r3, #0
 801624a:	d106      	bne.n	801625a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	7b5b      	ldrb	r3, [r3, #13]
 8016250:	f043 0308 	orr.w	r3, r3, #8
 8016254:	b2da      	uxtb	r2, r3
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801625a:	89fb      	ldrh	r3, [r7, #14]
 801625c:	2b08      	cmp	r3, #8
 801625e:	d003      	beq.n	8016268 <ethernet_input+0xa0>
 8016260:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016264:	d014      	beq.n	8016290 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016266:	e032      	b.n	80162ce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801626e:	f003 0308 	and.w	r3, r3, #8
 8016272:	2b00      	cmp	r3, #0
 8016274:	d024      	beq.n	80162c0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016276:	8afb      	ldrh	r3, [r7, #22]
 8016278:	4619      	mov	r1, r3
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f7f6 fd74 	bl	800cd68 <pbuf_remove_header>
 8016280:	4603      	mov	r3, r0
 8016282:	2b00      	cmp	r3, #0
 8016284:	d11e      	bne.n	80162c4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016286:	6839      	ldr	r1, [r7, #0]
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f7fe ff21 	bl	80150d0 <ip4_input>
      break;
 801628e:	e013      	b.n	80162b8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016296:	f003 0308 	and.w	r3, r3, #8
 801629a:	2b00      	cmp	r3, #0
 801629c:	d014      	beq.n	80162c8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801629e:	8afb      	ldrh	r3, [r7, #22]
 80162a0:	4619      	mov	r1, r3
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	f7f6 fd60 	bl	800cd68 <pbuf_remove_header>
 80162a8:	4603      	mov	r3, r0
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d10e      	bne.n	80162cc <ethernet_input+0x104>
        etharp_input(p, netif);
 80162ae:	6839      	ldr	r1, [r7, #0]
 80162b0:	6878      	ldr	r0, [r7, #4]
 80162b2:	f7fe f8c1 	bl	8014438 <etharp_input>
      break;
 80162b6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80162b8:	2300      	movs	r3, #0
 80162ba:	e00c      	b.n	80162d6 <ethernet_input+0x10e>
    goto free_and_return;
 80162bc:	bf00      	nop
 80162be:	e006      	b.n	80162ce <ethernet_input+0x106>
        goto free_and_return;
 80162c0:	bf00      	nop
 80162c2:	e004      	b.n	80162ce <ethernet_input+0x106>
        goto free_and_return;
 80162c4:	bf00      	nop
 80162c6:	e002      	b.n	80162ce <ethernet_input+0x106>
        goto free_and_return;
 80162c8:	bf00      	nop
 80162ca:	e000      	b.n	80162ce <ethernet_input+0x106>
        goto free_and_return;
 80162cc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	f7f6 fdd0 	bl	800ce74 <pbuf_free>
  return ERR_OK;
 80162d4:	2300      	movs	r3, #0
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	3718      	adds	r7, #24
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}
 80162de:	bf00      	nop
 80162e0:	0801aed4 	.word	0x0801aed4

080162e4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b086      	sub	sp, #24
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	60f8      	str	r0, [r7, #12]
 80162ec:	60b9      	str	r1, [r7, #8]
 80162ee:	607a      	str	r2, [r7, #4]
 80162f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80162f2:	8c3b      	ldrh	r3, [r7, #32]
 80162f4:	4618      	mov	r0, r3
 80162f6:	f7f5 f9cb 	bl	800b690 <lwip_htons>
 80162fa:	4603      	mov	r3, r0
 80162fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80162fe:	210e      	movs	r1, #14
 8016300:	68b8      	ldr	r0, [r7, #8]
 8016302:	f7f6 fd21 	bl	800cd48 <pbuf_add_header>
 8016306:	4603      	mov	r3, r0
 8016308:	2b00      	cmp	r3, #0
 801630a:	d125      	bne.n	8016358 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	685b      	ldr	r3, [r3, #4]
 8016310:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	8afa      	ldrh	r2, [r7, #22]
 8016316:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	2206      	movs	r2, #6
 801631c:	6839      	ldr	r1, [r7, #0]
 801631e:	4618      	mov	r0, r3
 8016320:	f000 fc31 	bl	8016b86 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016324:	693b      	ldr	r3, [r7, #16]
 8016326:	3306      	adds	r3, #6
 8016328:	2206      	movs	r2, #6
 801632a:	6879      	ldr	r1, [r7, #4]
 801632c:	4618      	mov	r0, r3
 801632e:	f000 fc2a 	bl	8016b86 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016338:	2b06      	cmp	r3, #6
 801633a:	d006      	beq.n	801634a <ethernet_output+0x66>
 801633c:	4b0a      	ldr	r3, [pc, #40]	@ (8016368 <ethernet_output+0x84>)
 801633e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016342:	490a      	ldr	r1, [pc, #40]	@ (801636c <ethernet_output+0x88>)
 8016344:	480a      	ldr	r0, [pc, #40]	@ (8016370 <ethernet_output+0x8c>)
 8016346:	f7ea fee1 	bl	800110c <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	699b      	ldr	r3, [r3, #24]
 801634e:	68b9      	ldr	r1, [r7, #8]
 8016350:	68f8      	ldr	r0, [r7, #12]
 8016352:	4798      	blx	r3
 8016354:	4603      	mov	r3, r0
 8016356:	e002      	b.n	801635e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016358:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801635a:	f06f 0301 	mvn.w	r3, #1
}
 801635e:	4618      	mov	r0, r3
 8016360:	3718      	adds	r7, #24
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	0801ad04 	.word	0x0801ad04
 801636c:	0801ad3c 	.word	0x0801ad3c
 8016370:	0801ad70 	.word	0x0801ad70

08016374 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016374:	b580      	push	{r7, lr}
 8016376:	b086      	sub	sp, #24
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
 801637c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	60bb      	str	r3, [r7, #8]
 8016382:	2304      	movs	r3, #4
 8016384:	60fb      	str	r3, [r7, #12]
 8016386:	2300      	movs	r3, #0
 8016388:	613b      	str	r3, [r7, #16]
 801638a:	2300      	movs	r3, #0
 801638c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801638e:	f107 0308 	add.w	r3, r7, #8
 8016392:	2100      	movs	r1, #0
 8016394:	4618      	mov	r0, r3
 8016396:	f7f0 fac2 	bl	800691e <osMessageCreate>
 801639a:	4602      	mov	r2, r0
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d102      	bne.n	80163ae <sys_mbox_new+0x3a>
    return ERR_MEM;
 80163a8:	f04f 33ff 	mov.w	r3, #4294967295
 80163ac:	e000      	b.n	80163b0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80163ae:	2300      	movs	r3, #0
}
 80163b0:	4618      	mov	r0, r3
 80163b2:	3718      	adds	r7, #24
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b082      	sub	sp, #8
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	4618      	mov	r0, r3
 80163c6:	f7f0 fb87 	bl	8006ad8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7f0 fb98 	bl	8006b04 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80163d4:	bf00      	nop
 80163d6:	3708      	adds	r7, #8
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}

080163dc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b084      	sub	sp, #16
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	6839      	ldr	r1, [r7, #0]
 80163ec:	2200      	movs	r2, #0
 80163ee:	4618      	mov	r0, r3
 80163f0:	f7f0 fabe 	bl	8006970 <osMessagePut>
 80163f4:	4603      	mov	r3, r0
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d102      	bne.n	8016400 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80163fa:	2300      	movs	r3, #0
 80163fc:	73fb      	strb	r3, [r7, #15]
 80163fe:	e001      	b.n	8016404 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016400:	23ff      	movs	r3, #255	@ 0xff
 8016402:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016408:	4618      	mov	r0, r3
 801640a:	3710      	adds	r7, #16
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}

08016410 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b08c      	sub	sp, #48	@ 0x30
 8016414:	af00      	add	r7, sp, #0
 8016416:	61f8      	str	r0, [r7, #28]
 8016418:	61b9      	str	r1, [r7, #24]
 801641a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801641c:	f7f0 f89d 	bl	800655a <osKernelSysTick>
 8016420:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d017      	beq.n	8016458 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016428:	69fb      	ldr	r3, [r7, #28]
 801642a:	6819      	ldr	r1, [r3, #0]
 801642c:	f107 0320 	add.w	r3, r7, #32
 8016430:	697a      	ldr	r2, [r7, #20]
 8016432:	4618      	mov	r0, r3
 8016434:	f7f0 fadc 	bl	80069f0 <osMessageGet>

    if(event.status == osEventMessage)
 8016438:	6a3b      	ldr	r3, [r7, #32]
 801643a:	2b10      	cmp	r3, #16
 801643c:	d109      	bne.n	8016452 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016440:	461a      	mov	r2, r3
 8016442:	69bb      	ldr	r3, [r7, #24]
 8016444:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016446:	f7f0 f888 	bl	800655a <osKernelSysTick>
 801644a:	4602      	mov	r2, r0
 801644c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801644e:	1ad3      	subs	r3, r2, r3
 8016450:	e019      	b.n	8016486 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016452:	f04f 33ff 	mov.w	r3, #4294967295
 8016456:	e016      	b.n	8016486 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016458:	69fb      	ldr	r3, [r7, #28]
 801645a:	6819      	ldr	r1, [r3, #0]
 801645c:	463b      	mov	r3, r7
 801645e:	f04f 32ff 	mov.w	r2, #4294967295
 8016462:	4618      	mov	r0, r3
 8016464:	f7f0 fac4 	bl	80069f0 <osMessageGet>
 8016468:	f107 0320 	add.w	r3, r7, #32
 801646c:	463a      	mov	r2, r7
 801646e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016470:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016476:	461a      	mov	r2, r3
 8016478:	69bb      	ldr	r3, [r7, #24]
 801647a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801647c:	f7f0 f86d 	bl	800655a <osKernelSysTick>
 8016480:	4602      	mov	r2, r0
 8016482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016484:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016486:	4618      	mov	r0, r3
 8016488:	3730      	adds	r7, #48	@ 0x30
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}

0801648e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801648e:	b580      	push	{r7, lr}
 8016490:	b086      	sub	sp, #24
 8016492:	af00      	add	r7, sp, #0
 8016494:	6078      	str	r0, [r7, #4]
 8016496:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	6819      	ldr	r1, [r3, #0]
 801649c:	f107 030c 	add.w	r3, r7, #12
 80164a0:	2200      	movs	r2, #0
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7f0 faa4 	bl	80069f0 <osMessageGet>

  if(event.status == osEventMessage)
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	2b10      	cmp	r3, #16
 80164ac:	d105      	bne.n	80164ba <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	461a      	mov	r2, r3
 80164b2:	683b      	ldr	r3, [r7, #0]
 80164b4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80164b6:	2300      	movs	r3, #0
 80164b8:	e001      	b.n	80164be <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80164ba:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3718      	adds	r7, #24
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}

080164c6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80164c6:	b480      	push	{r7}
 80164c8:	b083      	sub	sp, #12
 80164ca:	af00      	add	r7, sp, #0
 80164cc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d101      	bne.n	80164da <sys_mbox_valid+0x14>
    return 0;
 80164d6:	2300      	movs	r3, #0
 80164d8:	e000      	b.n	80164dc <sys_mbox_valid+0x16>
  else
    return 1;
 80164da:	2301      	movs	r3, #1
}
 80164dc:	4618      	mov	r0, r3
 80164de:	370c      	adds	r7, #12
 80164e0:	46bd      	mov	sp, r7
 80164e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e6:	4770      	bx	lr

080164e8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80164e8:	b480      	push	{r7}
 80164ea:	b083      	sub	sp, #12
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2200      	movs	r2, #0
 80164f4:	601a      	str	r2, [r3, #0]
}
 80164f6:	bf00      	nop
 80164f8:	370c      	adds	r7, #12
 80164fa:	46bd      	mov	sp, r7
 80164fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016500:	4770      	bx	lr

08016502 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016502:	b580      	push	{r7, lr}
 8016504:	b084      	sub	sp, #16
 8016506:	af00      	add	r7, sp, #0
 8016508:	6078      	str	r0, [r7, #4]
 801650a:	460b      	mov	r3, r1
 801650c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801650e:	2300      	movs	r3, #0
 8016510:	60bb      	str	r3, [r7, #8]
 8016512:	2300      	movs	r3, #0
 8016514:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016516:	f107 0308 	add.w	r3, r7, #8
 801651a:	2101      	movs	r1, #1
 801651c:	4618      	mov	r0, r3
 801651e:	f7f0 f935 	bl	800678c <osSemaphoreCreate>
 8016522:	4602      	mov	r2, r0
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d102      	bne.n	8016536 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016530:	f04f 33ff 	mov.w	r3, #4294967295
 8016534:	e009      	b.n	801654a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016536:	78fb      	ldrb	r3, [r7, #3]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d105      	bne.n	8016548 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	2100      	movs	r1, #0
 8016542:	4618      	mov	r0, r3
 8016544:	f7f0 f954 	bl	80067f0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016548:	2300      	movs	r3, #0
}
 801654a:	4618      	mov	r0, r3
 801654c:	3710      	adds	r7, #16
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}

08016552 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016552:	b580      	push	{r7, lr}
 8016554:	b084      	sub	sp, #16
 8016556:	af00      	add	r7, sp, #0
 8016558:	6078      	str	r0, [r7, #4]
 801655a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801655c:	f7ef fffd 	bl	800655a <osKernelSysTick>
 8016560:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d011      	beq.n	801658c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	6839      	ldr	r1, [r7, #0]
 801656e:	4618      	mov	r0, r3
 8016570:	f7f0 f93e 	bl	80067f0 <osSemaphoreWait>
 8016574:	4603      	mov	r3, r0
 8016576:	2b00      	cmp	r3, #0
 8016578:	d105      	bne.n	8016586 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801657a:	f7ef ffee 	bl	800655a <osKernelSysTick>
 801657e:	4602      	mov	r2, r0
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	1ad3      	subs	r3, r2, r3
 8016584:	e012      	b.n	80165ac <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016586:	f04f 33ff 	mov.w	r3, #4294967295
 801658a:	e00f      	b.n	80165ac <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801658c:	bf00      	nop
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	f04f 31ff 	mov.w	r1, #4294967295
 8016596:	4618      	mov	r0, r3
 8016598:	f7f0 f92a 	bl	80067f0 <osSemaphoreWait>
 801659c:	4603      	mov	r3, r0
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d1f5      	bne.n	801658e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80165a2:	f7ef ffda 	bl	800655a <osKernelSysTick>
 80165a6:	4602      	mov	r2, r0
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	3710      	adds	r7, #16
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}

080165b4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7f0 f963 	bl	800688c <osSemaphoreRelease>
}
 80165c6:	bf00      	nop
 80165c8:	3708      	adds	r7, #8
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}

080165ce <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80165ce:	b580      	push	{r7, lr}
 80165d0:	b082      	sub	sp, #8
 80165d2:	af00      	add	r7, sp, #0
 80165d4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	4618      	mov	r0, r3
 80165dc:	f7f0 f98c 	bl	80068f8 <osSemaphoreDelete>
}
 80165e0:	bf00      	nop
 80165e2:	3708      	adds	r7, #8
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80165e8:	b480      	push	{r7}
 80165ea:	b083      	sub	sp, #12
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d101      	bne.n	80165fc <sys_sem_valid+0x14>
    return 0;
 80165f8:	2300      	movs	r3, #0
 80165fa:	e000      	b.n	80165fe <sys_sem_valid+0x16>
  else
    return 1;
 80165fc:	2301      	movs	r3, #1
}
 80165fe:	4618      	mov	r0, r3
 8016600:	370c      	adds	r7, #12
 8016602:	46bd      	mov	sp, r7
 8016604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016608:	4770      	bx	lr

0801660a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801660a:	b480      	push	{r7}
 801660c:	b083      	sub	sp, #12
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	2200      	movs	r2, #0
 8016616:	601a      	str	r2, [r3, #0]
}
 8016618:	bf00      	nop
 801661a:	370c      	adds	r7, #12
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr

08016624 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016628:	4803      	ldr	r0, [pc, #12]	@ (8016638 <sys_init+0x14>)
 801662a:	f7f0 f812 	bl	8006652 <osMutexCreate>
 801662e:	4603      	mov	r3, r0
 8016630:	4a02      	ldr	r2, [pc, #8]	@ (801663c <sys_init+0x18>)
 8016632:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016634:	bf00      	nop
 8016636:	bd80      	pop	{r7, pc}
 8016638:	0801aee4 	.word	0x0801aee4
 801663c:	2000c700 	.word	0x2000c700

08016640 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016640:	b580      	push	{r7, lr}
 8016642:	b084      	sub	sp, #16
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016648:	2300      	movs	r3, #0
 801664a:	60bb      	str	r3, [r7, #8]
 801664c:	2300      	movs	r3, #0
 801664e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016650:	f107 0308 	add.w	r3, r7, #8
 8016654:	4618      	mov	r0, r3
 8016656:	f7ef fffc 	bl	8006652 <osMutexCreate>
 801665a:	4602      	mov	r2, r0
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d102      	bne.n	801666e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016668:	f04f 33ff 	mov.w	r3, #4294967295
 801666c:	e000      	b.n	8016670 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801666e:	2300      	movs	r3, #0
}
 8016670:	4618      	mov	r0, r3
 8016672:	3710      	adds	r7, #16
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}

08016678 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b082      	sub	sp, #8
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	f04f 31ff 	mov.w	r1, #4294967295
 8016688:	4618      	mov	r0, r3
 801668a:	f7ef fffb 	bl	8006684 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801668e:	bf00      	nop
 8016690:	3708      	adds	r7, #8
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}

08016696 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016696:	b580      	push	{r7, lr}
 8016698:	b082      	sub	sp, #8
 801669a:	af00      	add	r7, sp, #0
 801669c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7f0 f83c 	bl	8006720 <osMutexRelease>
}
 80166a8:	bf00      	nop
 80166aa:	3708      	adds	r7, #8
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b08c      	sub	sp, #48	@ 0x30
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	60f8      	str	r0, [r7, #12]
 80166b8:	60b9      	str	r1, [r7, #8]
 80166ba:	607a      	str	r2, [r7, #4]
 80166bc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80166be:	f107 0314 	add.w	r3, r7, #20
 80166c2:	2200      	movs	r2, #0
 80166c4:	601a      	str	r2, [r3, #0]
 80166c6:	605a      	str	r2, [r3, #4]
 80166c8:	609a      	str	r2, [r3, #8]
 80166ca:	60da      	str	r2, [r3, #12]
 80166cc:	611a      	str	r2, [r3, #16]
 80166ce:	615a      	str	r2, [r3, #20]
 80166d0:	619a      	str	r2, [r3, #24]
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	617b      	str	r3, [r7, #20]
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	61bb      	str	r3, [r7, #24]
 80166da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166dc:	b21b      	sxth	r3, r3
 80166de:	83bb      	strh	r3, [r7, #28]
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 80166e4:	f107 0314 	add.w	r3, r7, #20
 80166e8:	6879      	ldr	r1, [r7, #4]
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7ef ff45 	bl	800657a <osThreadCreate>
 80166f0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	3730      	adds	r7, #48	@ 0x30
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
	...

080166fc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016700:	4b04      	ldr	r3, [pc, #16]	@ (8016714 <sys_arch_protect+0x18>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	f04f 31ff 	mov.w	r1, #4294967295
 8016708:	4618      	mov	r0, r3
 801670a:	f7ef ffbb 	bl	8006684 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801670e:	2301      	movs	r3, #1
}
 8016710:	4618      	mov	r0, r3
 8016712:	bd80      	pop	{r7, pc}
 8016714:	2000c700 	.word	0x2000c700

08016718 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b082      	sub	sp, #8
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016720:	4b04      	ldr	r3, [pc, #16]	@ (8016734 <sys_arch_unprotect+0x1c>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	4618      	mov	r0, r3
 8016726:	f7ef fffb 	bl	8006720 <osMutexRelease>
}
 801672a:	bf00      	nop
 801672c:	3708      	adds	r7, #8
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	2000c700 	.word	0x2000c700

08016738 <rand>:
 8016738:	4b16      	ldr	r3, [pc, #88]	@ (8016794 <rand+0x5c>)
 801673a:	b510      	push	{r4, lr}
 801673c:	681c      	ldr	r4, [r3, #0]
 801673e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016740:	b9b3      	cbnz	r3, 8016770 <rand+0x38>
 8016742:	2018      	movs	r0, #24
 8016744:	f000 fa96 	bl	8016c74 <malloc>
 8016748:	4602      	mov	r2, r0
 801674a:	6320      	str	r0, [r4, #48]	@ 0x30
 801674c:	b920      	cbnz	r0, 8016758 <rand+0x20>
 801674e:	4b12      	ldr	r3, [pc, #72]	@ (8016798 <rand+0x60>)
 8016750:	4812      	ldr	r0, [pc, #72]	@ (801679c <rand+0x64>)
 8016752:	2152      	movs	r1, #82	@ 0x52
 8016754:	f000 fa26 	bl	8016ba4 <__assert_func>
 8016758:	4911      	ldr	r1, [pc, #68]	@ (80167a0 <rand+0x68>)
 801675a:	4b12      	ldr	r3, [pc, #72]	@ (80167a4 <rand+0x6c>)
 801675c:	e9c0 1300 	strd	r1, r3, [r0]
 8016760:	4b11      	ldr	r3, [pc, #68]	@ (80167a8 <rand+0x70>)
 8016762:	6083      	str	r3, [r0, #8]
 8016764:	230b      	movs	r3, #11
 8016766:	8183      	strh	r3, [r0, #12]
 8016768:	2100      	movs	r1, #0
 801676a:	2001      	movs	r0, #1
 801676c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016770:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016772:	480e      	ldr	r0, [pc, #56]	@ (80167ac <rand+0x74>)
 8016774:	690b      	ldr	r3, [r1, #16]
 8016776:	694c      	ldr	r4, [r1, #20]
 8016778:	4a0d      	ldr	r2, [pc, #52]	@ (80167b0 <rand+0x78>)
 801677a:	4358      	muls	r0, r3
 801677c:	fb02 0004 	mla	r0, r2, r4, r0
 8016780:	fba3 3202 	umull	r3, r2, r3, r2
 8016784:	3301      	adds	r3, #1
 8016786:	eb40 0002 	adc.w	r0, r0, r2
 801678a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801678e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016792:	bd10      	pop	{r4, pc}
 8016794:	2000003c 	.word	0x2000003c
 8016798:	0801aeec 	.word	0x0801aeec
 801679c:	0801af03 	.word	0x0801af03
 80167a0:	abcd330e 	.word	0xabcd330e
 80167a4:	e66d1234 	.word	0xe66d1234
 80167a8:	0005deec 	.word	0x0005deec
 80167ac:	5851f42d 	.word	0x5851f42d
 80167b0:	4c957f2d 	.word	0x4c957f2d

080167b4 <std>:
 80167b4:	2300      	movs	r3, #0
 80167b6:	b510      	push	{r4, lr}
 80167b8:	4604      	mov	r4, r0
 80167ba:	e9c0 3300 	strd	r3, r3, [r0]
 80167be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80167c2:	6083      	str	r3, [r0, #8]
 80167c4:	8181      	strh	r1, [r0, #12]
 80167c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80167c8:	81c2      	strh	r2, [r0, #14]
 80167ca:	6183      	str	r3, [r0, #24]
 80167cc:	4619      	mov	r1, r3
 80167ce:	2208      	movs	r2, #8
 80167d0:	305c      	adds	r0, #92	@ 0x5c
 80167d2:	f000 f904 	bl	80169de <memset>
 80167d6:	4b0d      	ldr	r3, [pc, #52]	@ (801680c <std+0x58>)
 80167d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80167da:	4b0d      	ldr	r3, [pc, #52]	@ (8016810 <std+0x5c>)
 80167dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80167de:	4b0d      	ldr	r3, [pc, #52]	@ (8016814 <std+0x60>)
 80167e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80167e2:	4b0d      	ldr	r3, [pc, #52]	@ (8016818 <std+0x64>)
 80167e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80167e6:	4b0d      	ldr	r3, [pc, #52]	@ (801681c <std+0x68>)
 80167e8:	6224      	str	r4, [r4, #32]
 80167ea:	429c      	cmp	r4, r3
 80167ec:	d006      	beq.n	80167fc <std+0x48>
 80167ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80167f2:	4294      	cmp	r4, r2
 80167f4:	d002      	beq.n	80167fc <std+0x48>
 80167f6:	33d0      	adds	r3, #208	@ 0xd0
 80167f8:	429c      	cmp	r4, r3
 80167fa:	d105      	bne.n	8016808 <std+0x54>
 80167fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016804:	f000 b9bc 	b.w	8016b80 <__retarget_lock_init_recursive>
 8016808:	bd10      	pop	{r4, pc}
 801680a:	bf00      	nop
 801680c:	08016939 	.word	0x08016939
 8016810:	0801695b 	.word	0x0801695b
 8016814:	08016993 	.word	0x08016993
 8016818:	080169b7 	.word	0x080169b7
 801681c:	2000c704 	.word	0x2000c704

08016820 <stdio_exit_handler>:
 8016820:	4a02      	ldr	r2, [pc, #8]	@ (801682c <stdio_exit_handler+0xc>)
 8016822:	4903      	ldr	r1, [pc, #12]	@ (8016830 <stdio_exit_handler+0x10>)
 8016824:	4803      	ldr	r0, [pc, #12]	@ (8016834 <stdio_exit_handler+0x14>)
 8016826:	f000 b869 	b.w	80168fc <_fwalk_sglue>
 801682a:	bf00      	nop
 801682c:	20000030 	.word	0x20000030
 8016830:	08016ee9 	.word	0x08016ee9
 8016834:	20000040 	.word	0x20000040

08016838 <cleanup_stdio>:
 8016838:	6841      	ldr	r1, [r0, #4]
 801683a:	4b0c      	ldr	r3, [pc, #48]	@ (801686c <cleanup_stdio+0x34>)
 801683c:	4299      	cmp	r1, r3
 801683e:	b510      	push	{r4, lr}
 8016840:	4604      	mov	r4, r0
 8016842:	d001      	beq.n	8016848 <cleanup_stdio+0x10>
 8016844:	f000 fb50 	bl	8016ee8 <_fflush_r>
 8016848:	68a1      	ldr	r1, [r4, #8]
 801684a:	4b09      	ldr	r3, [pc, #36]	@ (8016870 <cleanup_stdio+0x38>)
 801684c:	4299      	cmp	r1, r3
 801684e:	d002      	beq.n	8016856 <cleanup_stdio+0x1e>
 8016850:	4620      	mov	r0, r4
 8016852:	f000 fb49 	bl	8016ee8 <_fflush_r>
 8016856:	68e1      	ldr	r1, [r4, #12]
 8016858:	4b06      	ldr	r3, [pc, #24]	@ (8016874 <cleanup_stdio+0x3c>)
 801685a:	4299      	cmp	r1, r3
 801685c:	d004      	beq.n	8016868 <cleanup_stdio+0x30>
 801685e:	4620      	mov	r0, r4
 8016860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016864:	f000 bb40 	b.w	8016ee8 <_fflush_r>
 8016868:	bd10      	pop	{r4, pc}
 801686a:	bf00      	nop
 801686c:	2000c704 	.word	0x2000c704
 8016870:	2000c76c 	.word	0x2000c76c
 8016874:	2000c7d4 	.word	0x2000c7d4

08016878 <global_stdio_init.part.0>:
 8016878:	b510      	push	{r4, lr}
 801687a:	4b0b      	ldr	r3, [pc, #44]	@ (80168a8 <global_stdio_init.part.0+0x30>)
 801687c:	4c0b      	ldr	r4, [pc, #44]	@ (80168ac <global_stdio_init.part.0+0x34>)
 801687e:	4a0c      	ldr	r2, [pc, #48]	@ (80168b0 <global_stdio_init.part.0+0x38>)
 8016880:	601a      	str	r2, [r3, #0]
 8016882:	4620      	mov	r0, r4
 8016884:	2200      	movs	r2, #0
 8016886:	2104      	movs	r1, #4
 8016888:	f7ff ff94 	bl	80167b4 <std>
 801688c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016890:	2201      	movs	r2, #1
 8016892:	2109      	movs	r1, #9
 8016894:	f7ff ff8e 	bl	80167b4 <std>
 8016898:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801689c:	2202      	movs	r2, #2
 801689e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168a2:	2112      	movs	r1, #18
 80168a4:	f7ff bf86 	b.w	80167b4 <std>
 80168a8:	2000c83c 	.word	0x2000c83c
 80168ac:	2000c704 	.word	0x2000c704
 80168b0:	08016821 	.word	0x08016821

080168b4 <__sfp_lock_acquire>:
 80168b4:	4801      	ldr	r0, [pc, #4]	@ (80168bc <__sfp_lock_acquire+0x8>)
 80168b6:	f000 b964 	b.w	8016b82 <__retarget_lock_acquire_recursive>
 80168ba:	bf00      	nop
 80168bc:	2000c845 	.word	0x2000c845

080168c0 <__sfp_lock_release>:
 80168c0:	4801      	ldr	r0, [pc, #4]	@ (80168c8 <__sfp_lock_release+0x8>)
 80168c2:	f000 b95f 	b.w	8016b84 <__retarget_lock_release_recursive>
 80168c6:	bf00      	nop
 80168c8:	2000c845 	.word	0x2000c845

080168cc <__sinit>:
 80168cc:	b510      	push	{r4, lr}
 80168ce:	4604      	mov	r4, r0
 80168d0:	f7ff fff0 	bl	80168b4 <__sfp_lock_acquire>
 80168d4:	6a23      	ldr	r3, [r4, #32]
 80168d6:	b11b      	cbz	r3, 80168e0 <__sinit+0x14>
 80168d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168dc:	f7ff bff0 	b.w	80168c0 <__sfp_lock_release>
 80168e0:	4b04      	ldr	r3, [pc, #16]	@ (80168f4 <__sinit+0x28>)
 80168e2:	6223      	str	r3, [r4, #32]
 80168e4:	4b04      	ldr	r3, [pc, #16]	@ (80168f8 <__sinit+0x2c>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d1f5      	bne.n	80168d8 <__sinit+0xc>
 80168ec:	f7ff ffc4 	bl	8016878 <global_stdio_init.part.0>
 80168f0:	e7f2      	b.n	80168d8 <__sinit+0xc>
 80168f2:	bf00      	nop
 80168f4:	08016839 	.word	0x08016839
 80168f8:	2000c83c 	.word	0x2000c83c

080168fc <_fwalk_sglue>:
 80168fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016900:	4607      	mov	r7, r0
 8016902:	4688      	mov	r8, r1
 8016904:	4614      	mov	r4, r2
 8016906:	2600      	movs	r6, #0
 8016908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801690c:	f1b9 0901 	subs.w	r9, r9, #1
 8016910:	d505      	bpl.n	801691e <_fwalk_sglue+0x22>
 8016912:	6824      	ldr	r4, [r4, #0]
 8016914:	2c00      	cmp	r4, #0
 8016916:	d1f7      	bne.n	8016908 <_fwalk_sglue+0xc>
 8016918:	4630      	mov	r0, r6
 801691a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801691e:	89ab      	ldrh	r3, [r5, #12]
 8016920:	2b01      	cmp	r3, #1
 8016922:	d907      	bls.n	8016934 <_fwalk_sglue+0x38>
 8016924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016928:	3301      	adds	r3, #1
 801692a:	d003      	beq.n	8016934 <_fwalk_sglue+0x38>
 801692c:	4629      	mov	r1, r5
 801692e:	4638      	mov	r0, r7
 8016930:	47c0      	blx	r8
 8016932:	4306      	orrs	r6, r0
 8016934:	3568      	adds	r5, #104	@ 0x68
 8016936:	e7e9      	b.n	801690c <_fwalk_sglue+0x10>

08016938 <__sread>:
 8016938:	b510      	push	{r4, lr}
 801693a:	460c      	mov	r4, r1
 801693c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016940:	f000 f8d6 	bl	8016af0 <_read_r>
 8016944:	2800      	cmp	r0, #0
 8016946:	bfab      	itete	ge
 8016948:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801694a:	89a3      	ldrhlt	r3, [r4, #12]
 801694c:	181b      	addge	r3, r3, r0
 801694e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016952:	bfac      	ite	ge
 8016954:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016956:	81a3      	strhlt	r3, [r4, #12]
 8016958:	bd10      	pop	{r4, pc}

0801695a <__swrite>:
 801695a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801695e:	461f      	mov	r7, r3
 8016960:	898b      	ldrh	r3, [r1, #12]
 8016962:	05db      	lsls	r3, r3, #23
 8016964:	4605      	mov	r5, r0
 8016966:	460c      	mov	r4, r1
 8016968:	4616      	mov	r6, r2
 801696a:	d505      	bpl.n	8016978 <__swrite+0x1e>
 801696c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016970:	2302      	movs	r3, #2
 8016972:	2200      	movs	r2, #0
 8016974:	f000 f8aa 	bl	8016acc <_lseek_r>
 8016978:	89a3      	ldrh	r3, [r4, #12]
 801697a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801697e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016982:	81a3      	strh	r3, [r4, #12]
 8016984:	4632      	mov	r2, r6
 8016986:	463b      	mov	r3, r7
 8016988:	4628      	mov	r0, r5
 801698a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801698e:	f000 b8c1 	b.w	8016b14 <_write_r>

08016992 <__sseek>:
 8016992:	b510      	push	{r4, lr}
 8016994:	460c      	mov	r4, r1
 8016996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801699a:	f000 f897 	bl	8016acc <_lseek_r>
 801699e:	1c43      	adds	r3, r0, #1
 80169a0:	89a3      	ldrh	r3, [r4, #12]
 80169a2:	bf15      	itete	ne
 80169a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80169a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80169aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80169ae:	81a3      	strheq	r3, [r4, #12]
 80169b0:	bf18      	it	ne
 80169b2:	81a3      	strhne	r3, [r4, #12]
 80169b4:	bd10      	pop	{r4, pc}

080169b6 <__sclose>:
 80169b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169ba:	f000 b819 	b.w	80169f0 <_close_r>

080169be <memcmp>:
 80169be:	b510      	push	{r4, lr}
 80169c0:	3901      	subs	r1, #1
 80169c2:	4402      	add	r2, r0
 80169c4:	4290      	cmp	r0, r2
 80169c6:	d101      	bne.n	80169cc <memcmp+0xe>
 80169c8:	2000      	movs	r0, #0
 80169ca:	e005      	b.n	80169d8 <memcmp+0x1a>
 80169cc:	7803      	ldrb	r3, [r0, #0]
 80169ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80169d2:	42a3      	cmp	r3, r4
 80169d4:	d001      	beq.n	80169da <memcmp+0x1c>
 80169d6:	1b18      	subs	r0, r3, r4
 80169d8:	bd10      	pop	{r4, pc}
 80169da:	3001      	adds	r0, #1
 80169dc:	e7f2      	b.n	80169c4 <memcmp+0x6>

080169de <memset>:
 80169de:	4402      	add	r2, r0
 80169e0:	4603      	mov	r3, r0
 80169e2:	4293      	cmp	r3, r2
 80169e4:	d100      	bne.n	80169e8 <memset+0xa>
 80169e6:	4770      	bx	lr
 80169e8:	f803 1b01 	strb.w	r1, [r3], #1
 80169ec:	e7f9      	b.n	80169e2 <memset+0x4>
	...

080169f0 <_close_r>:
 80169f0:	b538      	push	{r3, r4, r5, lr}
 80169f2:	4d06      	ldr	r5, [pc, #24]	@ (8016a0c <_close_r+0x1c>)
 80169f4:	2300      	movs	r3, #0
 80169f6:	4604      	mov	r4, r0
 80169f8:	4608      	mov	r0, r1
 80169fa:	602b      	str	r3, [r5, #0]
 80169fc:	f7ea fda2 	bl	8001544 <_close>
 8016a00:	1c43      	adds	r3, r0, #1
 8016a02:	d102      	bne.n	8016a0a <_close_r+0x1a>
 8016a04:	682b      	ldr	r3, [r5, #0]
 8016a06:	b103      	cbz	r3, 8016a0a <_close_r+0x1a>
 8016a08:	6023      	str	r3, [r4, #0]
 8016a0a:	bd38      	pop	{r3, r4, r5, pc}
 8016a0c:	2000c840 	.word	0x2000c840

08016a10 <_reclaim_reent>:
 8016a10:	4b2d      	ldr	r3, [pc, #180]	@ (8016ac8 <_reclaim_reent+0xb8>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	4283      	cmp	r3, r0
 8016a16:	b570      	push	{r4, r5, r6, lr}
 8016a18:	4604      	mov	r4, r0
 8016a1a:	d053      	beq.n	8016ac4 <_reclaim_reent+0xb4>
 8016a1c:	69c3      	ldr	r3, [r0, #28]
 8016a1e:	b31b      	cbz	r3, 8016a68 <_reclaim_reent+0x58>
 8016a20:	68db      	ldr	r3, [r3, #12]
 8016a22:	b163      	cbz	r3, 8016a3e <_reclaim_reent+0x2e>
 8016a24:	2500      	movs	r5, #0
 8016a26:	69e3      	ldr	r3, [r4, #28]
 8016a28:	68db      	ldr	r3, [r3, #12]
 8016a2a:	5959      	ldr	r1, [r3, r5]
 8016a2c:	b9b1      	cbnz	r1, 8016a5c <_reclaim_reent+0x4c>
 8016a2e:	3504      	adds	r5, #4
 8016a30:	2d80      	cmp	r5, #128	@ 0x80
 8016a32:	d1f8      	bne.n	8016a26 <_reclaim_reent+0x16>
 8016a34:	69e3      	ldr	r3, [r4, #28]
 8016a36:	4620      	mov	r0, r4
 8016a38:	68d9      	ldr	r1, [r3, #12]
 8016a3a:	f000 f8d1 	bl	8016be0 <_free_r>
 8016a3e:	69e3      	ldr	r3, [r4, #28]
 8016a40:	6819      	ldr	r1, [r3, #0]
 8016a42:	b111      	cbz	r1, 8016a4a <_reclaim_reent+0x3a>
 8016a44:	4620      	mov	r0, r4
 8016a46:	f000 f8cb 	bl	8016be0 <_free_r>
 8016a4a:	69e3      	ldr	r3, [r4, #28]
 8016a4c:	689d      	ldr	r5, [r3, #8]
 8016a4e:	b15d      	cbz	r5, 8016a68 <_reclaim_reent+0x58>
 8016a50:	4629      	mov	r1, r5
 8016a52:	4620      	mov	r0, r4
 8016a54:	682d      	ldr	r5, [r5, #0]
 8016a56:	f000 f8c3 	bl	8016be0 <_free_r>
 8016a5a:	e7f8      	b.n	8016a4e <_reclaim_reent+0x3e>
 8016a5c:	680e      	ldr	r6, [r1, #0]
 8016a5e:	4620      	mov	r0, r4
 8016a60:	f000 f8be 	bl	8016be0 <_free_r>
 8016a64:	4631      	mov	r1, r6
 8016a66:	e7e1      	b.n	8016a2c <_reclaim_reent+0x1c>
 8016a68:	6961      	ldr	r1, [r4, #20]
 8016a6a:	b111      	cbz	r1, 8016a72 <_reclaim_reent+0x62>
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	f000 f8b7 	bl	8016be0 <_free_r>
 8016a72:	69e1      	ldr	r1, [r4, #28]
 8016a74:	b111      	cbz	r1, 8016a7c <_reclaim_reent+0x6c>
 8016a76:	4620      	mov	r0, r4
 8016a78:	f000 f8b2 	bl	8016be0 <_free_r>
 8016a7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016a7e:	b111      	cbz	r1, 8016a86 <_reclaim_reent+0x76>
 8016a80:	4620      	mov	r0, r4
 8016a82:	f000 f8ad 	bl	8016be0 <_free_r>
 8016a86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a88:	b111      	cbz	r1, 8016a90 <_reclaim_reent+0x80>
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	f000 f8a8 	bl	8016be0 <_free_r>
 8016a90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016a92:	b111      	cbz	r1, 8016a9a <_reclaim_reent+0x8a>
 8016a94:	4620      	mov	r0, r4
 8016a96:	f000 f8a3 	bl	8016be0 <_free_r>
 8016a9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016a9c:	b111      	cbz	r1, 8016aa4 <_reclaim_reent+0x94>
 8016a9e:	4620      	mov	r0, r4
 8016aa0:	f000 f89e 	bl	8016be0 <_free_r>
 8016aa4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016aa6:	b111      	cbz	r1, 8016aae <_reclaim_reent+0x9e>
 8016aa8:	4620      	mov	r0, r4
 8016aaa:	f000 f899 	bl	8016be0 <_free_r>
 8016aae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016ab0:	b111      	cbz	r1, 8016ab8 <_reclaim_reent+0xa8>
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	f000 f894 	bl	8016be0 <_free_r>
 8016ab8:	6a23      	ldr	r3, [r4, #32]
 8016aba:	b11b      	cbz	r3, 8016ac4 <_reclaim_reent+0xb4>
 8016abc:	4620      	mov	r0, r4
 8016abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ac2:	4718      	bx	r3
 8016ac4:	bd70      	pop	{r4, r5, r6, pc}
 8016ac6:	bf00      	nop
 8016ac8:	2000003c 	.word	0x2000003c

08016acc <_lseek_r>:
 8016acc:	b538      	push	{r3, r4, r5, lr}
 8016ace:	4d07      	ldr	r5, [pc, #28]	@ (8016aec <_lseek_r+0x20>)
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	4608      	mov	r0, r1
 8016ad4:	4611      	mov	r1, r2
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	602a      	str	r2, [r5, #0]
 8016ada:	461a      	mov	r2, r3
 8016adc:	f7ea fd59 	bl	8001592 <_lseek>
 8016ae0:	1c43      	adds	r3, r0, #1
 8016ae2:	d102      	bne.n	8016aea <_lseek_r+0x1e>
 8016ae4:	682b      	ldr	r3, [r5, #0]
 8016ae6:	b103      	cbz	r3, 8016aea <_lseek_r+0x1e>
 8016ae8:	6023      	str	r3, [r4, #0]
 8016aea:	bd38      	pop	{r3, r4, r5, pc}
 8016aec:	2000c840 	.word	0x2000c840

08016af0 <_read_r>:
 8016af0:	b538      	push	{r3, r4, r5, lr}
 8016af2:	4d07      	ldr	r5, [pc, #28]	@ (8016b10 <_read_r+0x20>)
 8016af4:	4604      	mov	r4, r0
 8016af6:	4608      	mov	r0, r1
 8016af8:	4611      	mov	r1, r2
 8016afa:	2200      	movs	r2, #0
 8016afc:	602a      	str	r2, [r5, #0]
 8016afe:	461a      	mov	r2, r3
 8016b00:	f7ea fce7 	bl	80014d2 <_read>
 8016b04:	1c43      	adds	r3, r0, #1
 8016b06:	d102      	bne.n	8016b0e <_read_r+0x1e>
 8016b08:	682b      	ldr	r3, [r5, #0]
 8016b0a:	b103      	cbz	r3, 8016b0e <_read_r+0x1e>
 8016b0c:	6023      	str	r3, [r4, #0]
 8016b0e:	bd38      	pop	{r3, r4, r5, pc}
 8016b10:	2000c840 	.word	0x2000c840

08016b14 <_write_r>:
 8016b14:	b538      	push	{r3, r4, r5, lr}
 8016b16:	4d07      	ldr	r5, [pc, #28]	@ (8016b34 <_write_r+0x20>)
 8016b18:	4604      	mov	r4, r0
 8016b1a:	4608      	mov	r0, r1
 8016b1c:	4611      	mov	r1, r2
 8016b1e:	2200      	movs	r2, #0
 8016b20:	602a      	str	r2, [r5, #0]
 8016b22:	461a      	mov	r2, r3
 8016b24:	f7ea fcf2 	bl	800150c <_write>
 8016b28:	1c43      	adds	r3, r0, #1
 8016b2a:	d102      	bne.n	8016b32 <_write_r+0x1e>
 8016b2c:	682b      	ldr	r3, [r5, #0]
 8016b2e:	b103      	cbz	r3, 8016b32 <_write_r+0x1e>
 8016b30:	6023      	str	r3, [r4, #0]
 8016b32:	bd38      	pop	{r3, r4, r5, pc}
 8016b34:	2000c840 	.word	0x2000c840

08016b38 <__libc_init_array>:
 8016b38:	b570      	push	{r4, r5, r6, lr}
 8016b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8016b70 <__libc_init_array+0x38>)
 8016b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8016b74 <__libc_init_array+0x3c>)
 8016b3e:	1b64      	subs	r4, r4, r5
 8016b40:	10a4      	asrs	r4, r4, #2
 8016b42:	2600      	movs	r6, #0
 8016b44:	42a6      	cmp	r6, r4
 8016b46:	d109      	bne.n	8016b5c <__libc_init_array+0x24>
 8016b48:	4d0b      	ldr	r5, [pc, #44]	@ (8016b78 <__libc_init_array+0x40>)
 8016b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8016b7c <__libc_init_array+0x44>)
 8016b4c:	f000 fe46 	bl	80177dc <_init>
 8016b50:	1b64      	subs	r4, r4, r5
 8016b52:	10a4      	asrs	r4, r4, #2
 8016b54:	2600      	movs	r6, #0
 8016b56:	42a6      	cmp	r6, r4
 8016b58:	d105      	bne.n	8016b66 <__libc_init_array+0x2e>
 8016b5a:	bd70      	pop	{r4, r5, r6, pc}
 8016b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b60:	4798      	blx	r3
 8016b62:	3601      	adds	r6, #1
 8016b64:	e7ee      	b.n	8016b44 <__libc_init_array+0xc>
 8016b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b6a:	4798      	blx	r3
 8016b6c:	3601      	adds	r6, #1
 8016b6e:	e7f2      	b.n	8016b56 <__libc_init_array+0x1e>
 8016b70:	0801afd4 	.word	0x0801afd4
 8016b74:	0801afd4 	.word	0x0801afd4
 8016b78:	0801afd4 	.word	0x0801afd4
 8016b7c:	0801afd8 	.word	0x0801afd8

08016b80 <__retarget_lock_init_recursive>:
 8016b80:	4770      	bx	lr

08016b82 <__retarget_lock_acquire_recursive>:
 8016b82:	4770      	bx	lr

08016b84 <__retarget_lock_release_recursive>:
 8016b84:	4770      	bx	lr

08016b86 <memcpy>:
 8016b86:	440a      	add	r2, r1
 8016b88:	4291      	cmp	r1, r2
 8016b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b8e:	d100      	bne.n	8016b92 <memcpy+0xc>
 8016b90:	4770      	bx	lr
 8016b92:	b510      	push	{r4, lr}
 8016b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b9c:	4291      	cmp	r1, r2
 8016b9e:	d1f9      	bne.n	8016b94 <memcpy+0xe>
 8016ba0:	bd10      	pop	{r4, pc}
	...

08016ba4 <__assert_func>:
 8016ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016ba6:	4614      	mov	r4, r2
 8016ba8:	461a      	mov	r2, r3
 8016baa:	4b09      	ldr	r3, [pc, #36]	@ (8016bd0 <__assert_func+0x2c>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	4605      	mov	r5, r0
 8016bb0:	68d8      	ldr	r0, [r3, #12]
 8016bb2:	b14c      	cbz	r4, 8016bc8 <__assert_func+0x24>
 8016bb4:	4b07      	ldr	r3, [pc, #28]	@ (8016bd4 <__assert_func+0x30>)
 8016bb6:	9100      	str	r1, [sp, #0]
 8016bb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016bbc:	4906      	ldr	r1, [pc, #24]	@ (8016bd8 <__assert_func+0x34>)
 8016bbe:	462b      	mov	r3, r5
 8016bc0:	f000 f9ba 	bl	8016f38 <fiprintf>
 8016bc4:	f000 f9da 	bl	8016f7c <abort>
 8016bc8:	4b04      	ldr	r3, [pc, #16]	@ (8016bdc <__assert_func+0x38>)
 8016bca:	461c      	mov	r4, r3
 8016bcc:	e7f3      	b.n	8016bb6 <__assert_func+0x12>
 8016bce:	bf00      	nop
 8016bd0:	2000003c 	.word	0x2000003c
 8016bd4:	0801af5b 	.word	0x0801af5b
 8016bd8:	0801af68 	.word	0x0801af68
 8016bdc:	0801af96 	.word	0x0801af96

08016be0 <_free_r>:
 8016be0:	b538      	push	{r3, r4, r5, lr}
 8016be2:	4605      	mov	r5, r0
 8016be4:	2900      	cmp	r1, #0
 8016be6:	d041      	beq.n	8016c6c <_free_r+0x8c>
 8016be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bec:	1f0c      	subs	r4, r1, #4
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	bfb8      	it	lt
 8016bf2:	18e4      	addlt	r4, r4, r3
 8016bf4:	f000 f8e8 	bl	8016dc8 <__malloc_lock>
 8016bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8016c70 <_free_r+0x90>)
 8016bfa:	6813      	ldr	r3, [r2, #0]
 8016bfc:	b933      	cbnz	r3, 8016c0c <_free_r+0x2c>
 8016bfe:	6063      	str	r3, [r4, #4]
 8016c00:	6014      	str	r4, [r2, #0]
 8016c02:	4628      	mov	r0, r5
 8016c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c08:	f000 b8e4 	b.w	8016dd4 <__malloc_unlock>
 8016c0c:	42a3      	cmp	r3, r4
 8016c0e:	d908      	bls.n	8016c22 <_free_r+0x42>
 8016c10:	6820      	ldr	r0, [r4, #0]
 8016c12:	1821      	adds	r1, r4, r0
 8016c14:	428b      	cmp	r3, r1
 8016c16:	bf01      	itttt	eq
 8016c18:	6819      	ldreq	r1, [r3, #0]
 8016c1a:	685b      	ldreq	r3, [r3, #4]
 8016c1c:	1809      	addeq	r1, r1, r0
 8016c1e:	6021      	streq	r1, [r4, #0]
 8016c20:	e7ed      	b.n	8016bfe <_free_r+0x1e>
 8016c22:	461a      	mov	r2, r3
 8016c24:	685b      	ldr	r3, [r3, #4]
 8016c26:	b10b      	cbz	r3, 8016c2c <_free_r+0x4c>
 8016c28:	42a3      	cmp	r3, r4
 8016c2a:	d9fa      	bls.n	8016c22 <_free_r+0x42>
 8016c2c:	6811      	ldr	r1, [r2, #0]
 8016c2e:	1850      	adds	r0, r2, r1
 8016c30:	42a0      	cmp	r0, r4
 8016c32:	d10b      	bne.n	8016c4c <_free_r+0x6c>
 8016c34:	6820      	ldr	r0, [r4, #0]
 8016c36:	4401      	add	r1, r0
 8016c38:	1850      	adds	r0, r2, r1
 8016c3a:	4283      	cmp	r3, r0
 8016c3c:	6011      	str	r1, [r2, #0]
 8016c3e:	d1e0      	bne.n	8016c02 <_free_r+0x22>
 8016c40:	6818      	ldr	r0, [r3, #0]
 8016c42:	685b      	ldr	r3, [r3, #4]
 8016c44:	6053      	str	r3, [r2, #4]
 8016c46:	4408      	add	r0, r1
 8016c48:	6010      	str	r0, [r2, #0]
 8016c4a:	e7da      	b.n	8016c02 <_free_r+0x22>
 8016c4c:	d902      	bls.n	8016c54 <_free_r+0x74>
 8016c4e:	230c      	movs	r3, #12
 8016c50:	602b      	str	r3, [r5, #0]
 8016c52:	e7d6      	b.n	8016c02 <_free_r+0x22>
 8016c54:	6820      	ldr	r0, [r4, #0]
 8016c56:	1821      	adds	r1, r4, r0
 8016c58:	428b      	cmp	r3, r1
 8016c5a:	bf04      	itt	eq
 8016c5c:	6819      	ldreq	r1, [r3, #0]
 8016c5e:	685b      	ldreq	r3, [r3, #4]
 8016c60:	6063      	str	r3, [r4, #4]
 8016c62:	bf04      	itt	eq
 8016c64:	1809      	addeq	r1, r1, r0
 8016c66:	6021      	streq	r1, [r4, #0]
 8016c68:	6054      	str	r4, [r2, #4]
 8016c6a:	e7ca      	b.n	8016c02 <_free_r+0x22>
 8016c6c:	bd38      	pop	{r3, r4, r5, pc}
 8016c6e:	bf00      	nop
 8016c70:	2000c84c 	.word	0x2000c84c

08016c74 <malloc>:
 8016c74:	4b02      	ldr	r3, [pc, #8]	@ (8016c80 <malloc+0xc>)
 8016c76:	4601      	mov	r1, r0
 8016c78:	6818      	ldr	r0, [r3, #0]
 8016c7a:	f000 b825 	b.w	8016cc8 <_malloc_r>
 8016c7e:	bf00      	nop
 8016c80:	2000003c 	.word	0x2000003c

08016c84 <sbrk_aligned>:
 8016c84:	b570      	push	{r4, r5, r6, lr}
 8016c86:	4e0f      	ldr	r6, [pc, #60]	@ (8016cc4 <sbrk_aligned+0x40>)
 8016c88:	460c      	mov	r4, r1
 8016c8a:	6831      	ldr	r1, [r6, #0]
 8016c8c:	4605      	mov	r5, r0
 8016c8e:	b911      	cbnz	r1, 8016c96 <sbrk_aligned+0x12>
 8016c90:	f000 f964 	bl	8016f5c <_sbrk_r>
 8016c94:	6030      	str	r0, [r6, #0]
 8016c96:	4621      	mov	r1, r4
 8016c98:	4628      	mov	r0, r5
 8016c9a:	f000 f95f 	bl	8016f5c <_sbrk_r>
 8016c9e:	1c43      	adds	r3, r0, #1
 8016ca0:	d103      	bne.n	8016caa <sbrk_aligned+0x26>
 8016ca2:	f04f 34ff 	mov.w	r4, #4294967295
 8016ca6:	4620      	mov	r0, r4
 8016ca8:	bd70      	pop	{r4, r5, r6, pc}
 8016caa:	1cc4      	adds	r4, r0, #3
 8016cac:	f024 0403 	bic.w	r4, r4, #3
 8016cb0:	42a0      	cmp	r0, r4
 8016cb2:	d0f8      	beq.n	8016ca6 <sbrk_aligned+0x22>
 8016cb4:	1a21      	subs	r1, r4, r0
 8016cb6:	4628      	mov	r0, r5
 8016cb8:	f000 f950 	bl	8016f5c <_sbrk_r>
 8016cbc:	3001      	adds	r0, #1
 8016cbe:	d1f2      	bne.n	8016ca6 <sbrk_aligned+0x22>
 8016cc0:	e7ef      	b.n	8016ca2 <sbrk_aligned+0x1e>
 8016cc2:	bf00      	nop
 8016cc4:	2000c848 	.word	0x2000c848

08016cc8 <_malloc_r>:
 8016cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ccc:	1ccd      	adds	r5, r1, #3
 8016cce:	f025 0503 	bic.w	r5, r5, #3
 8016cd2:	3508      	adds	r5, #8
 8016cd4:	2d0c      	cmp	r5, #12
 8016cd6:	bf38      	it	cc
 8016cd8:	250c      	movcc	r5, #12
 8016cda:	2d00      	cmp	r5, #0
 8016cdc:	4606      	mov	r6, r0
 8016cde:	db01      	blt.n	8016ce4 <_malloc_r+0x1c>
 8016ce0:	42a9      	cmp	r1, r5
 8016ce2:	d904      	bls.n	8016cee <_malloc_r+0x26>
 8016ce4:	230c      	movs	r3, #12
 8016ce6:	6033      	str	r3, [r6, #0]
 8016ce8:	2000      	movs	r0, #0
 8016cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016dc4 <_malloc_r+0xfc>
 8016cf2:	f000 f869 	bl	8016dc8 <__malloc_lock>
 8016cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8016cfa:	461c      	mov	r4, r3
 8016cfc:	bb44      	cbnz	r4, 8016d50 <_malloc_r+0x88>
 8016cfe:	4629      	mov	r1, r5
 8016d00:	4630      	mov	r0, r6
 8016d02:	f7ff ffbf 	bl	8016c84 <sbrk_aligned>
 8016d06:	1c43      	adds	r3, r0, #1
 8016d08:	4604      	mov	r4, r0
 8016d0a:	d158      	bne.n	8016dbe <_malloc_r+0xf6>
 8016d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8016d10:	4627      	mov	r7, r4
 8016d12:	2f00      	cmp	r7, #0
 8016d14:	d143      	bne.n	8016d9e <_malloc_r+0xd6>
 8016d16:	2c00      	cmp	r4, #0
 8016d18:	d04b      	beq.n	8016db2 <_malloc_r+0xea>
 8016d1a:	6823      	ldr	r3, [r4, #0]
 8016d1c:	4639      	mov	r1, r7
 8016d1e:	4630      	mov	r0, r6
 8016d20:	eb04 0903 	add.w	r9, r4, r3
 8016d24:	f000 f91a 	bl	8016f5c <_sbrk_r>
 8016d28:	4581      	cmp	r9, r0
 8016d2a:	d142      	bne.n	8016db2 <_malloc_r+0xea>
 8016d2c:	6821      	ldr	r1, [r4, #0]
 8016d2e:	1a6d      	subs	r5, r5, r1
 8016d30:	4629      	mov	r1, r5
 8016d32:	4630      	mov	r0, r6
 8016d34:	f7ff ffa6 	bl	8016c84 <sbrk_aligned>
 8016d38:	3001      	adds	r0, #1
 8016d3a:	d03a      	beq.n	8016db2 <_malloc_r+0xea>
 8016d3c:	6823      	ldr	r3, [r4, #0]
 8016d3e:	442b      	add	r3, r5
 8016d40:	6023      	str	r3, [r4, #0]
 8016d42:	f8d8 3000 	ldr.w	r3, [r8]
 8016d46:	685a      	ldr	r2, [r3, #4]
 8016d48:	bb62      	cbnz	r2, 8016da4 <_malloc_r+0xdc>
 8016d4a:	f8c8 7000 	str.w	r7, [r8]
 8016d4e:	e00f      	b.n	8016d70 <_malloc_r+0xa8>
 8016d50:	6822      	ldr	r2, [r4, #0]
 8016d52:	1b52      	subs	r2, r2, r5
 8016d54:	d420      	bmi.n	8016d98 <_malloc_r+0xd0>
 8016d56:	2a0b      	cmp	r2, #11
 8016d58:	d917      	bls.n	8016d8a <_malloc_r+0xc2>
 8016d5a:	1961      	adds	r1, r4, r5
 8016d5c:	42a3      	cmp	r3, r4
 8016d5e:	6025      	str	r5, [r4, #0]
 8016d60:	bf18      	it	ne
 8016d62:	6059      	strne	r1, [r3, #4]
 8016d64:	6863      	ldr	r3, [r4, #4]
 8016d66:	bf08      	it	eq
 8016d68:	f8c8 1000 	streq.w	r1, [r8]
 8016d6c:	5162      	str	r2, [r4, r5]
 8016d6e:	604b      	str	r3, [r1, #4]
 8016d70:	4630      	mov	r0, r6
 8016d72:	f000 f82f 	bl	8016dd4 <__malloc_unlock>
 8016d76:	f104 000b 	add.w	r0, r4, #11
 8016d7a:	1d23      	adds	r3, r4, #4
 8016d7c:	f020 0007 	bic.w	r0, r0, #7
 8016d80:	1ac2      	subs	r2, r0, r3
 8016d82:	bf1c      	itt	ne
 8016d84:	1a1b      	subne	r3, r3, r0
 8016d86:	50a3      	strne	r3, [r4, r2]
 8016d88:	e7af      	b.n	8016cea <_malloc_r+0x22>
 8016d8a:	6862      	ldr	r2, [r4, #4]
 8016d8c:	42a3      	cmp	r3, r4
 8016d8e:	bf0c      	ite	eq
 8016d90:	f8c8 2000 	streq.w	r2, [r8]
 8016d94:	605a      	strne	r2, [r3, #4]
 8016d96:	e7eb      	b.n	8016d70 <_malloc_r+0xa8>
 8016d98:	4623      	mov	r3, r4
 8016d9a:	6864      	ldr	r4, [r4, #4]
 8016d9c:	e7ae      	b.n	8016cfc <_malloc_r+0x34>
 8016d9e:	463c      	mov	r4, r7
 8016da0:	687f      	ldr	r7, [r7, #4]
 8016da2:	e7b6      	b.n	8016d12 <_malloc_r+0x4a>
 8016da4:	461a      	mov	r2, r3
 8016da6:	685b      	ldr	r3, [r3, #4]
 8016da8:	42a3      	cmp	r3, r4
 8016daa:	d1fb      	bne.n	8016da4 <_malloc_r+0xdc>
 8016dac:	2300      	movs	r3, #0
 8016dae:	6053      	str	r3, [r2, #4]
 8016db0:	e7de      	b.n	8016d70 <_malloc_r+0xa8>
 8016db2:	230c      	movs	r3, #12
 8016db4:	6033      	str	r3, [r6, #0]
 8016db6:	4630      	mov	r0, r6
 8016db8:	f000 f80c 	bl	8016dd4 <__malloc_unlock>
 8016dbc:	e794      	b.n	8016ce8 <_malloc_r+0x20>
 8016dbe:	6005      	str	r5, [r0, #0]
 8016dc0:	e7d6      	b.n	8016d70 <_malloc_r+0xa8>
 8016dc2:	bf00      	nop
 8016dc4:	2000c84c 	.word	0x2000c84c

08016dc8 <__malloc_lock>:
 8016dc8:	4801      	ldr	r0, [pc, #4]	@ (8016dd0 <__malloc_lock+0x8>)
 8016dca:	f7ff beda 	b.w	8016b82 <__retarget_lock_acquire_recursive>
 8016dce:	bf00      	nop
 8016dd0:	2000c844 	.word	0x2000c844

08016dd4 <__malloc_unlock>:
 8016dd4:	4801      	ldr	r0, [pc, #4]	@ (8016ddc <__malloc_unlock+0x8>)
 8016dd6:	f7ff bed5 	b.w	8016b84 <__retarget_lock_release_recursive>
 8016dda:	bf00      	nop
 8016ddc:	2000c844 	.word	0x2000c844

08016de0 <__sflush_r>:
 8016de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016de8:	0716      	lsls	r6, r2, #28
 8016dea:	4605      	mov	r5, r0
 8016dec:	460c      	mov	r4, r1
 8016dee:	d454      	bmi.n	8016e9a <__sflush_r+0xba>
 8016df0:	684b      	ldr	r3, [r1, #4]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	dc02      	bgt.n	8016dfc <__sflush_r+0x1c>
 8016df6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	dd48      	ble.n	8016e8e <__sflush_r+0xae>
 8016dfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016dfe:	2e00      	cmp	r6, #0
 8016e00:	d045      	beq.n	8016e8e <__sflush_r+0xae>
 8016e02:	2300      	movs	r3, #0
 8016e04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016e08:	682f      	ldr	r7, [r5, #0]
 8016e0a:	6a21      	ldr	r1, [r4, #32]
 8016e0c:	602b      	str	r3, [r5, #0]
 8016e0e:	d030      	beq.n	8016e72 <__sflush_r+0x92>
 8016e10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016e12:	89a3      	ldrh	r3, [r4, #12]
 8016e14:	0759      	lsls	r1, r3, #29
 8016e16:	d505      	bpl.n	8016e24 <__sflush_r+0x44>
 8016e18:	6863      	ldr	r3, [r4, #4]
 8016e1a:	1ad2      	subs	r2, r2, r3
 8016e1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016e1e:	b10b      	cbz	r3, 8016e24 <__sflush_r+0x44>
 8016e20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016e22:	1ad2      	subs	r2, r2, r3
 8016e24:	2300      	movs	r3, #0
 8016e26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016e28:	6a21      	ldr	r1, [r4, #32]
 8016e2a:	4628      	mov	r0, r5
 8016e2c:	47b0      	blx	r6
 8016e2e:	1c43      	adds	r3, r0, #1
 8016e30:	89a3      	ldrh	r3, [r4, #12]
 8016e32:	d106      	bne.n	8016e42 <__sflush_r+0x62>
 8016e34:	6829      	ldr	r1, [r5, #0]
 8016e36:	291d      	cmp	r1, #29
 8016e38:	d82b      	bhi.n	8016e92 <__sflush_r+0xb2>
 8016e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8016ee4 <__sflush_r+0x104>)
 8016e3c:	40ca      	lsrs	r2, r1
 8016e3e:	07d6      	lsls	r6, r2, #31
 8016e40:	d527      	bpl.n	8016e92 <__sflush_r+0xb2>
 8016e42:	2200      	movs	r2, #0
 8016e44:	6062      	str	r2, [r4, #4]
 8016e46:	04d9      	lsls	r1, r3, #19
 8016e48:	6922      	ldr	r2, [r4, #16]
 8016e4a:	6022      	str	r2, [r4, #0]
 8016e4c:	d504      	bpl.n	8016e58 <__sflush_r+0x78>
 8016e4e:	1c42      	adds	r2, r0, #1
 8016e50:	d101      	bne.n	8016e56 <__sflush_r+0x76>
 8016e52:	682b      	ldr	r3, [r5, #0]
 8016e54:	b903      	cbnz	r3, 8016e58 <__sflush_r+0x78>
 8016e56:	6560      	str	r0, [r4, #84]	@ 0x54
 8016e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016e5a:	602f      	str	r7, [r5, #0]
 8016e5c:	b1b9      	cbz	r1, 8016e8e <__sflush_r+0xae>
 8016e5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016e62:	4299      	cmp	r1, r3
 8016e64:	d002      	beq.n	8016e6c <__sflush_r+0x8c>
 8016e66:	4628      	mov	r0, r5
 8016e68:	f7ff feba 	bl	8016be0 <_free_r>
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016e70:	e00d      	b.n	8016e8e <__sflush_r+0xae>
 8016e72:	2301      	movs	r3, #1
 8016e74:	4628      	mov	r0, r5
 8016e76:	47b0      	blx	r6
 8016e78:	4602      	mov	r2, r0
 8016e7a:	1c50      	adds	r0, r2, #1
 8016e7c:	d1c9      	bne.n	8016e12 <__sflush_r+0x32>
 8016e7e:	682b      	ldr	r3, [r5, #0]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d0c6      	beq.n	8016e12 <__sflush_r+0x32>
 8016e84:	2b1d      	cmp	r3, #29
 8016e86:	d001      	beq.n	8016e8c <__sflush_r+0xac>
 8016e88:	2b16      	cmp	r3, #22
 8016e8a:	d11e      	bne.n	8016eca <__sflush_r+0xea>
 8016e8c:	602f      	str	r7, [r5, #0]
 8016e8e:	2000      	movs	r0, #0
 8016e90:	e022      	b.n	8016ed8 <__sflush_r+0xf8>
 8016e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e96:	b21b      	sxth	r3, r3
 8016e98:	e01b      	b.n	8016ed2 <__sflush_r+0xf2>
 8016e9a:	690f      	ldr	r7, [r1, #16]
 8016e9c:	2f00      	cmp	r7, #0
 8016e9e:	d0f6      	beq.n	8016e8e <__sflush_r+0xae>
 8016ea0:	0793      	lsls	r3, r2, #30
 8016ea2:	680e      	ldr	r6, [r1, #0]
 8016ea4:	bf08      	it	eq
 8016ea6:	694b      	ldreq	r3, [r1, #20]
 8016ea8:	600f      	str	r7, [r1, #0]
 8016eaa:	bf18      	it	ne
 8016eac:	2300      	movne	r3, #0
 8016eae:	eba6 0807 	sub.w	r8, r6, r7
 8016eb2:	608b      	str	r3, [r1, #8]
 8016eb4:	f1b8 0f00 	cmp.w	r8, #0
 8016eb8:	dde9      	ble.n	8016e8e <__sflush_r+0xae>
 8016eba:	6a21      	ldr	r1, [r4, #32]
 8016ebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016ebe:	4643      	mov	r3, r8
 8016ec0:	463a      	mov	r2, r7
 8016ec2:	4628      	mov	r0, r5
 8016ec4:	47b0      	blx	r6
 8016ec6:	2800      	cmp	r0, #0
 8016ec8:	dc08      	bgt.n	8016edc <__sflush_r+0xfc>
 8016eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ed2:	81a3      	strh	r3, [r4, #12]
 8016ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016edc:	4407      	add	r7, r0
 8016ede:	eba8 0800 	sub.w	r8, r8, r0
 8016ee2:	e7e7      	b.n	8016eb4 <__sflush_r+0xd4>
 8016ee4:	20400001 	.word	0x20400001

08016ee8 <_fflush_r>:
 8016ee8:	b538      	push	{r3, r4, r5, lr}
 8016eea:	690b      	ldr	r3, [r1, #16]
 8016eec:	4605      	mov	r5, r0
 8016eee:	460c      	mov	r4, r1
 8016ef0:	b913      	cbnz	r3, 8016ef8 <_fflush_r+0x10>
 8016ef2:	2500      	movs	r5, #0
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	bd38      	pop	{r3, r4, r5, pc}
 8016ef8:	b118      	cbz	r0, 8016f02 <_fflush_r+0x1a>
 8016efa:	6a03      	ldr	r3, [r0, #32]
 8016efc:	b90b      	cbnz	r3, 8016f02 <_fflush_r+0x1a>
 8016efe:	f7ff fce5 	bl	80168cc <__sinit>
 8016f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d0f3      	beq.n	8016ef2 <_fflush_r+0xa>
 8016f0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016f0c:	07d0      	lsls	r0, r2, #31
 8016f0e:	d404      	bmi.n	8016f1a <_fflush_r+0x32>
 8016f10:	0599      	lsls	r1, r3, #22
 8016f12:	d402      	bmi.n	8016f1a <_fflush_r+0x32>
 8016f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f16:	f7ff fe34 	bl	8016b82 <__retarget_lock_acquire_recursive>
 8016f1a:	4628      	mov	r0, r5
 8016f1c:	4621      	mov	r1, r4
 8016f1e:	f7ff ff5f 	bl	8016de0 <__sflush_r>
 8016f22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016f24:	07da      	lsls	r2, r3, #31
 8016f26:	4605      	mov	r5, r0
 8016f28:	d4e4      	bmi.n	8016ef4 <_fflush_r+0xc>
 8016f2a:	89a3      	ldrh	r3, [r4, #12]
 8016f2c:	059b      	lsls	r3, r3, #22
 8016f2e:	d4e1      	bmi.n	8016ef4 <_fflush_r+0xc>
 8016f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f32:	f7ff fe27 	bl	8016b84 <__retarget_lock_release_recursive>
 8016f36:	e7dd      	b.n	8016ef4 <_fflush_r+0xc>

08016f38 <fiprintf>:
 8016f38:	b40e      	push	{r1, r2, r3}
 8016f3a:	b503      	push	{r0, r1, lr}
 8016f3c:	4601      	mov	r1, r0
 8016f3e:	ab03      	add	r3, sp, #12
 8016f40:	4805      	ldr	r0, [pc, #20]	@ (8016f58 <fiprintf+0x20>)
 8016f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f46:	6800      	ldr	r0, [r0, #0]
 8016f48:	9301      	str	r3, [sp, #4]
 8016f4a:	f000 f847 	bl	8016fdc <_vfiprintf_r>
 8016f4e:	b002      	add	sp, #8
 8016f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f54:	b003      	add	sp, #12
 8016f56:	4770      	bx	lr
 8016f58:	2000003c 	.word	0x2000003c

08016f5c <_sbrk_r>:
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	4d06      	ldr	r5, [pc, #24]	@ (8016f78 <_sbrk_r+0x1c>)
 8016f60:	2300      	movs	r3, #0
 8016f62:	4604      	mov	r4, r0
 8016f64:	4608      	mov	r0, r1
 8016f66:	602b      	str	r3, [r5, #0]
 8016f68:	f7ea fb20 	bl	80015ac <_sbrk>
 8016f6c:	1c43      	adds	r3, r0, #1
 8016f6e:	d102      	bne.n	8016f76 <_sbrk_r+0x1a>
 8016f70:	682b      	ldr	r3, [r5, #0]
 8016f72:	b103      	cbz	r3, 8016f76 <_sbrk_r+0x1a>
 8016f74:	6023      	str	r3, [r4, #0]
 8016f76:	bd38      	pop	{r3, r4, r5, pc}
 8016f78:	2000c840 	.word	0x2000c840

08016f7c <abort>:
 8016f7c:	b508      	push	{r3, lr}
 8016f7e:	2006      	movs	r0, #6
 8016f80:	f000 fb8c 	bl	801769c <raise>
 8016f84:	2001      	movs	r0, #1
 8016f86:	f7ea fa99 	bl	80014bc <_exit>

08016f8a <__sfputc_r>:
 8016f8a:	6893      	ldr	r3, [r2, #8]
 8016f8c:	3b01      	subs	r3, #1
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	b410      	push	{r4}
 8016f92:	6093      	str	r3, [r2, #8]
 8016f94:	da08      	bge.n	8016fa8 <__sfputc_r+0x1e>
 8016f96:	6994      	ldr	r4, [r2, #24]
 8016f98:	42a3      	cmp	r3, r4
 8016f9a:	db01      	blt.n	8016fa0 <__sfputc_r+0x16>
 8016f9c:	290a      	cmp	r1, #10
 8016f9e:	d103      	bne.n	8016fa8 <__sfputc_r+0x1e>
 8016fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fa4:	f000 babe 	b.w	8017524 <__swbuf_r>
 8016fa8:	6813      	ldr	r3, [r2, #0]
 8016faa:	1c58      	adds	r0, r3, #1
 8016fac:	6010      	str	r0, [r2, #0]
 8016fae:	7019      	strb	r1, [r3, #0]
 8016fb0:	4608      	mov	r0, r1
 8016fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fb6:	4770      	bx	lr

08016fb8 <__sfputs_r>:
 8016fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fba:	4606      	mov	r6, r0
 8016fbc:	460f      	mov	r7, r1
 8016fbe:	4614      	mov	r4, r2
 8016fc0:	18d5      	adds	r5, r2, r3
 8016fc2:	42ac      	cmp	r4, r5
 8016fc4:	d101      	bne.n	8016fca <__sfputs_r+0x12>
 8016fc6:	2000      	movs	r0, #0
 8016fc8:	e007      	b.n	8016fda <__sfputs_r+0x22>
 8016fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fce:	463a      	mov	r2, r7
 8016fd0:	4630      	mov	r0, r6
 8016fd2:	f7ff ffda 	bl	8016f8a <__sfputc_r>
 8016fd6:	1c43      	adds	r3, r0, #1
 8016fd8:	d1f3      	bne.n	8016fc2 <__sfputs_r+0xa>
 8016fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016fdc <_vfiprintf_r>:
 8016fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fe0:	460d      	mov	r5, r1
 8016fe2:	b09d      	sub	sp, #116	@ 0x74
 8016fe4:	4614      	mov	r4, r2
 8016fe6:	4698      	mov	r8, r3
 8016fe8:	4606      	mov	r6, r0
 8016fea:	b118      	cbz	r0, 8016ff4 <_vfiprintf_r+0x18>
 8016fec:	6a03      	ldr	r3, [r0, #32]
 8016fee:	b90b      	cbnz	r3, 8016ff4 <_vfiprintf_r+0x18>
 8016ff0:	f7ff fc6c 	bl	80168cc <__sinit>
 8016ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016ff6:	07d9      	lsls	r1, r3, #31
 8016ff8:	d405      	bmi.n	8017006 <_vfiprintf_r+0x2a>
 8016ffa:	89ab      	ldrh	r3, [r5, #12]
 8016ffc:	059a      	lsls	r2, r3, #22
 8016ffe:	d402      	bmi.n	8017006 <_vfiprintf_r+0x2a>
 8017000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017002:	f7ff fdbe 	bl	8016b82 <__retarget_lock_acquire_recursive>
 8017006:	89ab      	ldrh	r3, [r5, #12]
 8017008:	071b      	lsls	r3, r3, #28
 801700a:	d501      	bpl.n	8017010 <_vfiprintf_r+0x34>
 801700c:	692b      	ldr	r3, [r5, #16]
 801700e:	b99b      	cbnz	r3, 8017038 <_vfiprintf_r+0x5c>
 8017010:	4629      	mov	r1, r5
 8017012:	4630      	mov	r0, r6
 8017014:	f000 fac4 	bl	80175a0 <__swsetup_r>
 8017018:	b170      	cbz	r0, 8017038 <_vfiprintf_r+0x5c>
 801701a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801701c:	07dc      	lsls	r4, r3, #31
 801701e:	d504      	bpl.n	801702a <_vfiprintf_r+0x4e>
 8017020:	f04f 30ff 	mov.w	r0, #4294967295
 8017024:	b01d      	add	sp, #116	@ 0x74
 8017026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801702a:	89ab      	ldrh	r3, [r5, #12]
 801702c:	0598      	lsls	r0, r3, #22
 801702e:	d4f7      	bmi.n	8017020 <_vfiprintf_r+0x44>
 8017030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017032:	f7ff fda7 	bl	8016b84 <__retarget_lock_release_recursive>
 8017036:	e7f3      	b.n	8017020 <_vfiprintf_r+0x44>
 8017038:	2300      	movs	r3, #0
 801703a:	9309      	str	r3, [sp, #36]	@ 0x24
 801703c:	2320      	movs	r3, #32
 801703e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017042:	f8cd 800c 	str.w	r8, [sp, #12]
 8017046:	2330      	movs	r3, #48	@ 0x30
 8017048:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80171f8 <_vfiprintf_r+0x21c>
 801704c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017050:	f04f 0901 	mov.w	r9, #1
 8017054:	4623      	mov	r3, r4
 8017056:	469a      	mov	sl, r3
 8017058:	f813 2b01 	ldrb.w	r2, [r3], #1
 801705c:	b10a      	cbz	r2, 8017062 <_vfiprintf_r+0x86>
 801705e:	2a25      	cmp	r2, #37	@ 0x25
 8017060:	d1f9      	bne.n	8017056 <_vfiprintf_r+0x7a>
 8017062:	ebba 0b04 	subs.w	fp, sl, r4
 8017066:	d00b      	beq.n	8017080 <_vfiprintf_r+0xa4>
 8017068:	465b      	mov	r3, fp
 801706a:	4622      	mov	r2, r4
 801706c:	4629      	mov	r1, r5
 801706e:	4630      	mov	r0, r6
 8017070:	f7ff ffa2 	bl	8016fb8 <__sfputs_r>
 8017074:	3001      	adds	r0, #1
 8017076:	f000 80a7 	beq.w	80171c8 <_vfiprintf_r+0x1ec>
 801707a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801707c:	445a      	add	r2, fp
 801707e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017080:	f89a 3000 	ldrb.w	r3, [sl]
 8017084:	2b00      	cmp	r3, #0
 8017086:	f000 809f 	beq.w	80171c8 <_vfiprintf_r+0x1ec>
 801708a:	2300      	movs	r3, #0
 801708c:	f04f 32ff 	mov.w	r2, #4294967295
 8017090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017094:	f10a 0a01 	add.w	sl, sl, #1
 8017098:	9304      	str	r3, [sp, #16]
 801709a:	9307      	str	r3, [sp, #28]
 801709c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80170a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80170a2:	4654      	mov	r4, sl
 80170a4:	2205      	movs	r2, #5
 80170a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170aa:	4853      	ldr	r0, [pc, #332]	@ (80171f8 <_vfiprintf_r+0x21c>)
 80170ac:	f7e9 f8b8 	bl	8000220 <memchr>
 80170b0:	9a04      	ldr	r2, [sp, #16]
 80170b2:	b9d8      	cbnz	r0, 80170ec <_vfiprintf_r+0x110>
 80170b4:	06d1      	lsls	r1, r2, #27
 80170b6:	bf44      	itt	mi
 80170b8:	2320      	movmi	r3, #32
 80170ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170be:	0713      	lsls	r3, r2, #28
 80170c0:	bf44      	itt	mi
 80170c2:	232b      	movmi	r3, #43	@ 0x2b
 80170c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170c8:	f89a 3000 	ldrb.w	r3, [sl]
 80170cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80170ce:	d015      	beq.n	80170fc <_vfiprintf_r+0x120>
 80170d0:	9a07      	ldr	r2, [sp, #28]
 80170d2:	4654      	mov	r4, sl
 80170d4:	2000      	movs	r0, #0
 80170d6:	f04f 0c0a 	mov.w	ip, #10
 80170da:	4621      	mov	r1, r4
 80170dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170e0:	3b30      	subs	r3, #48	@ 0x30
 80170e2:	2b09      	cmp	r3, #9
 80170e4:	d94b      	bls.n	801717e <_vfiprintf_r+0x1a2>
 80170e6:	b1b0      	cbz	r0, 8017116 <_vfiprintf_r+0x13a>
 80170e8:	9207      	str	r2, [sp, #28]
 80170ea:	e014      	b.n	8017116 <_vfiprintf_r+0x13a>
 80170ec:	eba0 0308 	sub.w	r3, r0, r8
 80170f0:	fa09 f303 	lsl.w	r3, r9, r3
 80170f4:	4313      	orrs	r3, r2
 80170f6:	9304      	str	r3, [sp, #16]
 80170f8:	46a2      	mov	sl, r4
 80170fa:	e7d2      	b.n	80170a2 <_vfiprintf_r+0xc6>
 80170fc:	9b03      	ldr	r3, [sp, #12]
 80170fe:	1d19      	adds	r1, r3, #4
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	9103      	str	r1, [sp, #12]
 8017104:	2b00      	cmp	r3, #0
 8017106:	bfbb      	ittet	lt
 8017108:	425b      	neglt	r3, r3
 801710a:	f042 0202 	orrlt.w	r2, r2, #2
 801710e:	9307      	strge	r3, [sp, #28]
 8017110:	9307      	strlt	r3, [sp, #28]
 8017112:	bfb8      	it	lt
 8017114:	9204      	strlt	r2, [sp, #16]
 8017116:	7823      	ldrb	r3, [r4, #0]
 8017118:	2b2e      	cmp	r3, #46	@ 0x2e
 801711a:	d10a      	bne.n	8017132 <_vfiprintf_r+0x156>
 801711c:	7863      	ldrb	r3, [r4, #1]
 801711e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017120:	d132      	bne.n	8017188 <_vfiprintf_r+0x1ac>
 8017122:	9b03      	ldr	r3, [sp, #12]
 8017124:	1d1a      	adds	r2, r3, #4
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	9203      	str	r2, [sp, #12]
 801712a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801712e:	3402      	adds	r4, #2
 8017130:	9305      	str	r3, [sp, #20]
 8017132:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017208 <_vfiprintf_r+0x22c>
 8017136:	7821      	ldrb	r1, [r4, #0]
 8017138:	2203      	movs	r2, #3
 801713a:	4650      	mov	r0, sl
 801713c:	f7e9 f870 	bl	8000220 <memchr>
 8017140:	b138      	cbz	r0, 8017152 <_vfiprintf_r+0x176>
 8017142:	9b04      	ldr	r3, [sp, #16]
 8017144:	eba0 000a 	sub.w	r0, r0, sl
 8017148:	2240      	movs	r2, #64	@ 0x40
 801714a:	4082      	lsls	r2, r0
 801714c:	4313      	orrs	r3, r2
 801714e:	3401      	adds	r4, #1
 8017150:	9304      	str	r3, [sp, #16]
 8017152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017156:	4829      	ldr	r0, [pc, #164]	@ (80171fc <_vfiprintf_r+0x220>)
 8017158:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801715c:	2206      	movs	r2, #6
 801715e:	f7e9 f85f 	bl	8000220 <memchr>
 8017162:	2800      	cmp	r0, #0
 8017164:	d03f      	beq.n	80171e6 <_vfiprintf_r+0x20a>
 8017166:	4b26      	ldr	r3, [pc, #152]	@ (8017200 <_vfiprintf_r+0x224>)
 8017168:	bb1b      	cbnz	r3, 80171b2 <_vfiprintf_r+0x1d6>
 801716a:	9b03      	ldr	r3, [sp, #12]
 801716c:	3307      	adds	r3, #7
 801716e:	f023 0307 	bic.w	r3, r3, #7
 8017172:	3308      	adds	r3, #8
 8017174:	9303      	str	r3, [sp, #12]
 8017176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017178:	443b      	add	r3, r7
 801717a:	9309      	str	r3, [sp, #36]	@ 0x24
 801717c:	e76a      	b.n	8017054 <_vfiprintf_r+0x78>
 801717e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017182:	460c      	mov	r4, r1
 8017184:	2001      	movs	r0, #1
 8017186:	e7a8      	b.n	80170da <_vfiprintf_r+0xfe>
 8017188:	2300      	movs	r3, #0
 801718a:	3401      	adds	r4, #1
 801718c:	9305      	str	r3, [sp, #20]
 801718e:	4619      	mov	r1, r3
 8017190:	f04f 0c0a 	mov.w	ip, #10
 8017194:	4620      	mov	r0, r4
 8017196:	f810 2b01 	ldrb.w	r2, [r0], #1
 801719a:	3a30      	subs	r2, #48	@ 0x30
 801719c:	2a09      	cmp	r2, #9
 801719e:	d903      	bls.n	80171a8 <_vfiprintf_r+0x1cc>
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d0c6      	beq.n	8017132 <_vfiprintf_r+0x156>
 80171a4:	9105      	str	r1, [sp, #20]
 80171a6:	e7c4      	b.n	8017132 <_vfiprintf_r+0x156>
 80171a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80171ac:	4604      	mov	r4, r0
 80171ae:	2301      	movs	r3, #1
 80171b0:	e7f0      	b.n	8017194 <_vfiprintf_r+0x1b8>
 80171b2:	ab03      	add	r3, sp, #12
 80171b4:	9300      	str	r3, [sp, #0]
 80171b6:	462a      	mov	r2, r5
 80171b8:	4b12      	ldr	r3, [pc, #72]	@ (8017204 <_vfiprintf_r+0x228>)
 80171ba:	a904      	add	r1, sp, #16
 80171bc:	4630      	mov	r0, r6
 80171be:	f3af 8000 	nop.w
 80171c2:	4607      	mov	r7, r0
 80171c4:	1c78      	adds	r0, r7, #1
 80171c6:	d1d6      	bne.n	8017176 <_vfiprintf_r+0x19a>
 80171c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80171ca:	07d9      	lsls	r1, r3, #31
 80171cc:	d405      	bmi.n	80171da <_vfiprintf_r+0x1fe>
 80171ce:	89ab      	ldrh	r3, [r5, #12]
 80171d0:	059a      	lsls	r2, r3, #22
 80171d2:	d402      	bmi.n	80171da <_vfiprintf_r+0x1fe>
 80171d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80171d6:	f7ff fcd5 	bl	8016b84 <__retarget_lock_release_recursive>
 80171da:	89ab      	ldrh	r3, [r5, #12]
 80171dc:	065b      	lsls	r3, r3, #25
 80171de:	f53f af1f 	bmi.w	8017020 <_vfiprintf_r+0x44>
 80171e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80171e4:	e71e      	b.n	8017024 <_vfiprintf_r+0x48>
 80171e6:	ab03      	add	r3, sp, #12
 80171e8:	9300      	str	r3, [sp, #0]
 80171ea:	462a      	mov	r2, r5
 80171ec:	4b05      	ldr	r3, [pc, #20]	@ (8017204 <_vfiprintf_r+0x228>)
 80171ee:	a904      	add	r1, sp, #16
 80171f0:	4630      	mov	r0, r6
 80171f2:	f000 f879 	bl	80172e8 <_printf_i>
 80171f6:	e7e4      	b.n	80171c2 <_vfiprintf_r+0x1e6>
 80171f8:	0801af97 	.word	0x0801af97
 80171fc:	0801afa1 	.word	0x0801afa1
 8017200:	00000000 	.word	0x00000000
 8017204:	08016fb9 	.word	0x08016fb9
 8017208:	0801af9d 	.word	0x0801af9d

0801720c <_printf_common>:
 801720c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017210:	4616      	mov	r6, r2
 8017212:	4698      	mov	r8, r3
 8017214:	688a      	ldr	r2, [r1, #8]
 8017216:	690b      	ldr	r3, [r1, #16]
 8017218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801721c:	4293      	cmp	r3, r2
 801721e:	bfb8      	it	lt
 8017220:	4613      	movlt	r3, r2
 8017222:	6033      	str	r3, [r6, #0]
 8017224:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017228:	4607      	mov	r7, r0
 801722a:	460c      	mov	r4, r1
 801722c:	b10a      	cbz	r2, 8017232 <_printf_common+0x26>
 801722e:	3301      	adds	r3, #1
 8017230:	6033      	str	r3, [r6, #0]
 8017232:	6823      	ldr	r3, [r4, #0]
 8017234:	0699      	lsls	r1, r3, #26
 8017236:	bf42      	ittt	mi
 8017238:	6833      	ldrmi	r3, [r6, #0]
 801723a:	3302      	addmi	r3, #2
 801723c:	6033      	strmi	r3, [r6, #0]
 801723e:	6825      	ldr	r5, [r4, #0]
 8017240:	f015 0506 	ands.w	r5, r5, #6
 8017244:	d106      	bne.n	8017254 <_printf_common+0x48>
 8017246:	f104 0a19 	add.w	sl, r4, #25
 801724a:	68e3      	ldr	r3, [r4, #12]
 801724c:	6832      	ldr	r2, [r6, #0]
 801724e:	1a9b      	subs	r3, r3, r2
 8017250:	42ab      	cmp	r3, r5
 8017252:	dc26      	bgt.n	80172a2 <_printf_common+0x96>
 8017254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017258:	6822      	ldr	r2, [r4, #0]
 801725a:	3b00      	subs	r3, #0
 801725c:	bf18      	it	ne
 801725e:	2301      	movne	r3, #1
 8017260:	0692      	lsls	r2, r2, #26
 8017262:	d42b      	bmi.n	80172bc <_printf_common+0xb0>
 8017264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017268:	4641      	mov	r1, r8
 801726a:	4638      	mov	r0, r7
 801726c:	47c8      	blx	r9
 801726e:	3001      	adds	r0, #1
 8017270:	d01e      	beq.n	80172b0 <_printf_common+0xa4>
 8017272:	6823      	ldr	r3, [r4, #0]
 8017274:	6922      	ldr	r2, [r4, #16]
 8017276:	f003 0306 	and.w	r3, r3, #6
 801727a:	2b04      	cmp	r3, #4
 801727c:	bf02      	ittt	eq
 801727e:	68e5      	ldreq	r5, [r4, #12]
 8017280:	6833      	ldreq	r3, [r6, #0]
 8017282:	1aed      	subeq	r5, r5, r3
 8017284:	68a3      	ldr	r3, [r4, #8]
 8017286:	bf0c      	ite	eq
 8017288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801728c:	2500      	movne	r5, #0
 801728e:	4293      	cmp	r3, r2
 8017290:	bfc4      	itt	gt
 8017292:	1a9b      	subgt	r3, r3, r2
 8017294:	18ed      	addgt	r5, r5, r3
 8017296:	2600      	movs	r6, #0
 8017298:	341a      	adds	r4, #26
 801729a:	42b5      	cmp	r5, r6
 801729c:	d11a      	bne.n	80172d4 <_printf_common+0xc8>
 801729e:	2000      	movs	r0, #0
 80172a0:	e008      	b.n	80172b4 <_printf_common+0xa8>
 80172a2:	2301      	movs	r3, #1
 80172a4:	4652      	mov	r2, sl
 80172a6:	4641      	mov	r1, r8
 80172a8:	4638      	mov	r0, r7
 80172aa:	47c8      	blx	r9
 80172ac:	3001      	adds	r0, #1
 80172ae:	d103      	bne.n	80172b8 <_printf_common+0xac>
 80172b0:	f04f 30ff 	mov.w	r0, #4294967295
 80172b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172b8:	3501      	adds	r5, #1
 80172ba:	e7c6      	b.n	801724a <_printf_common+0x3e>
 80172bc:	18e1      	adds	r1, r4, r3
 80172be:	1c5a      	adds	r2, r3, #1
 80172c0:	2030      	movs	r0, #48	@ 0x30
 80172c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80172c6:	4422      	add	r2, r4
 80172c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80172cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80172d0:	3302      	adds	r3, #2
 80172d2:	e7c7      	b.n	8017264 <_printf_common+0x58>
 80172d4:	2301      	movs	r3, #1
 80172d6:	4622      	mov	r2, r4
 80172d8:	4641      	mov	r1, r8
 80172da:	4638      	mov	r0, r7
 80172dc:	47c8      	blx	r9
 80172de:	3001      	adds	r0, #1
 80172e0:	d0e6      	beq.n	80172b0 <_printf_common+0xa4>
 80172e2:	3601      	adds	r6, #1
 80172e4:	e7d9      	b.n	801729a <_printf_common+0x8e>
	...

080172e8 <_printf_i>:
 80172e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80172ec:	7e0f      	ldrb	r7, [r1, #24]
 80172ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80172f0:	2f78      	cmp	r7, #120	@ 0x78
 80172f2:	4691      	mov	r9, r2
 80172f4:	4680      	mov	r8, r0
 80172f6:	460c      	mov	r4, r1
 80172f8:	469a      	mov	sl, r3
 80172fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80172fe:	d807      	bhi.n	8017310 <_printf_i+0x28>
 8017300:	2f62      	cmp	r7, #98	@ 0x62
 8017302:	d80a      	bhi.n	801731a <_printf_i+0x32>
 8017304:	2f00      	cmp	r7, #0
 8017306:	f000 80d1 	beq.w	80174ac <_printf_i+0x1c4>
 801730a:	2f58      	cmp	r7, #88	@ 0x58
 801730c:	f000 80b8 	beq.w	8017480 <_printf_i+0x198>
 8017310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017318:	e03a      	b.n	8017390 <_printf_i+0xa8>
 801731a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801731e:	2b15      	cmp	r3, #21
 8017320:	d8f6      	bhi.n	8017310 <_printf_i+0x28>
 8017322:	a101      	add	r1, pc, #4	@ (adr r1, 8017328 <_printf_i+0x40>)
 8017324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017328:	08017381 	.word	0x08017381
 801732c:	08017395 	.word	0x08017395
 8017330:	08017311 	.word	0x08017311
 8017334:	08017311 	.word	0x08017311
 8017338:	08017311 	.word	0x08017311
 801733c:	08017311 	.word	0x08017311
 8017340:	08017395 	.word	0x08017395
 8017344:	08017311 	.word	0x08017311
 8017348:	08017311 	.word	0x08017311
 801734c:	08017311 	.word	0x08017311
 8017350:	08017311 	.word	0x08017311
 8017354:	08017493 	.word	0x08017493
 8017358:	080173bf 	.word	0x080173bf
 801735c:	0801744d 	.word	0x0801744d
 8017360:	08017311 	.word	0x08017311
 8017364:	08017311 	.word	0x08017311
 8017368:	080174b5 	.word	0x080174b5
 801736c:	08017311 	.word	0x08017311
 8017370:	080173bf 	.word	0x080173bf
 8017374:	08017311 	.word	0x08017311
 8017378:	08017311 	.word	0x08017311
 801737c:	08017455 	.word	0x08017455
 8017380:	6833      	ldr	r3, [r6, #0]
 8017382:	1d1a      	adds	r2, r3, #4
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	6032      	str	r2, [r6, #0]
 8017388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801738c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017390:	2301      	movs	r3, #1
 8017392:	e09c      	b.n	80174ce <_printf_i+0x1e6>
 8017394:	6833      	ldr	r3, [r6, #0]
 8017396:	6820      	ldr	r0, [r4, #0]
 8017398:	1d19      	adds	r1, r3, #4
 801739a:	6031      	str	r1, [r6, #0]
 801739c:	0606      	lsls	r6, r0, #24
 801739e:	d501      	bpl.n	80173a4 <_printf_i+0xbc>
 80173a0:	681d      	ldr	r5, [r3, #0]
 80173a2:	e003      	b.n	80173ac <_printf_i+0xc4>
 80173a4:	0645      	lsls	r5, r0, #25
 80173a6:	d5fb      	bpl.n	80173a0 <_printf_i+0xb8>
 80173a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80173ac:	2d00      	cmp	r5, #0
 80173ae:	da03      	bge.n	80173b8 <_printf_i+0xd0>
 80173b0:	232d      	movs	r3, #45	@ 0x2d
 80173b2:	426d      	negs	r5, r5
 80173b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80173b8:	4858      	ldr	r0, [pc, #352]	@ (801751c <_printf_i+0x234>)
 80173ba:	230a      	movs	r3, #10
 80173bc:	e011      	b.n	80173e2 <_printf_i+0xfa>
 80173be:	6821      	ldr	r1, [r4, #0]
 80173c0:	6833      	ldr	r3, [r6, #0]
 80173c2:	0608      	lsls	r0, r1, #24
 80173c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80173c8:	d402      	bmi.n	80173d0 <_printf_i+0xe8>
 80173ca:	0649      	lsls	r1, r1, #25
 80173cc:	bf48      	it	mi
 80173ce:	b2ad      	uxthmi	r5, r5
 80173d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80173d2:	4852      	ldr	r0, [pc, #328]	@ (801751c <_printf_i+0x234>)
 80173d4:	6033      	str	r3, [r6, #0]
 80173d6:	bf14      	ite	ne
 80173d8:	230a      	movne	r3, #10
 80173da:	2308      	moveq	r3, #8
 80173dc:	2100      	movs	r1, #0
 80173de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80173e2:	6866      	ldr	r6, [r4, #4]
 80173e4:	60a6      	str	r6, [r4, #8]
 80173e6:	2e00      	cmp	r6, #0
 80173e8:	db05      	blt.n	80173f6 <_printf_i+0x10e>
 80173ea:	6821      	ldr	r1, [r4, #0]
 80173ec:	432e      	orrs	r6, r5
 80173ee:	f021 0104 	bic.w	r1, r1, #4
 80173f2:	6021      	str	r1, [r4, #0]
 80173f4:	d04b      	beq.n	801748e <_printf_i+0x1a6>
 80173f6:	4616      	mov	r6, r2
 80173f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80173fc:	fb03 5711 	mls	r7, r3, r1, r5
 8017400:	5dc7      	ldrb	r7, [r0, r7]
 8017402:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017406:	462f      	mov	r7, r5
 8017408:	42bb      	cmp	r3, r7
 801740a:	460d      	mov	r5, r1
 801740c:	d9f4      	bls.n	80173f8 <_printf_i+0x110>
 801740e:	2b08      	cmp	r3, #8
 8017410:	d10b      	bne.n	801742a <_printf_i+0x142>
 8017412:	6823      	ldr	r3, [r4, #0]
 8017414:	07df      	lsls	r7, r3, #31
 8017416:	d508      	bpl.n	801742a <_printf_i+0x142>
 8017418:	6923      	ldr	r3, [r4, #16]
 801741a:	6861      	ldr	r1, [r4, #4]
 801741c:	4299      	cmp	r1, r3
 801741e:	bfde      	ittt	le
 8017420:	2330      	movle	r3, #48	@ 0x30
 8017422:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017426:	f106 36ff 	addle.w	r6, r6, #4294967295
 801742a:	1b92      	subs	r2, r2, r6
 801742c:	6122      	str	r2, [r4, #16]
 801742e:	f8cd a000 	str.w	sl, [sp]
 8017432:	464b      	mov	r3, r9
 8017434:	aa03      	add	r2, sp, #12
 8017436:	4621      	mov	r1, r4
 8017438:	4640      	mov	r0, r8
 801743a:	f7ff fee7 	bl	801720c <_printf_common>
 801743e:	3001      	adds	r0, #1
 8017440:	d14a      	bne.n	80174d8 <_printf_i+0x1f0>
 8017442:	f04f 30ff 	mov.w	r0, #4294967295
 8017446:	b004      	add	sp, #16
 8017448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801744c:	6823      	ldr	r3, [r4, #0]
 801744e:	f043 0320 	orr.w	r3, r3, #32
 8017452:	6023      	str	r3, [r4, #0]
 8017454:	4832      	ldr	r0, [pc, #200]	@ (8017520 <_printf_i+0x238>)
 8017456:	2778      	movs	r7, #120	@ 0x78
 8017458:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801745c:	6823      	ldr	r3, [r4, #0]
 801745e:	6831      	ldr	r1, [r6, #0]
 8017460:	061f      	lsls	r7, r3, #24
 8017462:	f851 5b04 	ldr.w	r5, [r1], #4
 8017466:	d402      	bmi.n	801746e <_printf_i+0x186>
 8017468:	065f      	lsls	r7, r3, #25
 801746a:	bf48      	it	mi
 801746c:	b2ad      	uxthmi	r5, r5
 801746e:	6031      	str	r1, [r6, #0]
 8017470:	07d9      	lsls	r1, r3, #31
 8017472:	bf44      	itt	mi
 8017474:	f043 0320 	orrmi.w	r3, r3, #32
 8017478:	6023      	strmi	r3, [r4, #0]
 801747a:	b11d      	cbz	r5, 8017484 <_printf_i+0x19c>
 801747c:	2310      	movs	r3, #16
 801747e:	e7ad      	b.n	80173dc <_printf_i+0xf4>
 8017480:	4826      	ldr	r0, [pc, #152]	@ (801751c <_printf_i+0x234>)
 8017482:	e7e9      	b.n	8017458 <_printf_i+0x170>
 8017484:	6823      	ldr	r3, [r4, #0]
 8017486:	f023 0320 	bic.w	r3, r3, #32
 801748a:	6023      	str	r3, [r4, #0]
 801748c:	e7f6      	b.n	801747c <_printf_i+0x194>
 801748e:	4616      	mov	r6, r2
 8017490:	e7bd      	b.n	801740e <_printf_i+0x126>
 8017492:	6833      	ldr	r3, [r6, #0]
 8017494:	6825      	ldr	r5, [r4, #0]
 8017496:	6961      	ldr	r1, [r4, #20]
 8017498:	1d18      	adds	r0, r3, #4
 801749a:	6030      	str	r0, [r6, #0]
 801749c:	062e      	lsls	r6, r5, #24
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	d501      	bpl.n	80174a6 <_printf_i+0x1be>
 80174a2:	6019      	str	r1, [r3, #0]
 80174a4:	e002      	b.n	80174ac <_printf_i+0x1c4>
 80174a6:	0668      	lsls	r0, r5, #25
 80174a8:	d5fb      	bpl.n	80174a2 <_printf_i+0x1ba>
 80174aa:	8019      	strh	r1, [r3, #0]
 80174ac:	2300      	movs	r3, #0
 80174ae:	6123      	str	r3, [r4, #16]
 80174b0:	4616      	mov	r6, r2
 80174b2:	e7bc      	b.n	801742e <_printf_i+0x146>
 80174b4:	6833      	ldr	r3, [r6, #0]
 80174b6:	1d1a      	adds	r2, r3, #4
 80174b8:	6032      	str	r2, [r6, #0]
 80174ba:	681e      	ldr	r6, [r3, #0]
 80174bc:	6862      	ldr	r2, [r4, #4]
 80174be:	2100      	movs	r1, #0
 80174c0:	4630      	mov	r0, r6
 80174c2:	f7e8 fead 	bl	8000220 <memchr>
 80174c6:	b108      	cbz	r0, 80174cc <_printf_i+0x1e4>
 80174c8:	1b80      	subs	r0, r0, r6
 80174ca:	6060      	str	r0, [r4, #4]
 80174cc:	6863      	ldr	r3, [r4, #4]
 80174ce:	6123      	str	r3, [r4, #16]
 80174d0:	2300      	movs	r3, #0
 80174d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80174d6:	e7aa      	b.n	801742e <_printf_i+0x146>
 80174d8:	6923      	ldr	r3, [r4, #16]
 80174da:	4632      	mov	r2, r6
 80174dc:	4649      	mov	r1, r9
 80174de:	4640      	mov	r0, r8
 80174e0:	47d0      	blx	sl
 80174e2:	3001      	adds	r0, #1
 80174e4:	d0ad      	beq.n	8017442 <_printf_i+0x15a>
 80174e6:	6823      	ldr	r3, [r4, #0]
 80174e8:	079b      	lsls	r3, r3, #30
 80174ea:	d413      	bmi.n	8017514 <_printf_i+0x22c>
 80174ec:	68e0      	ldr	r0, [r4, #12]
 80174ee:	9b03      	ldr	r3, [sp, #12]
 80174f0:	4298      	cmp	r0, r3
 80174f2:	bfb8      	it	lt
 80174f4:	4618      	movlt	r0, r3
 80174f6:	e7a6      	b.n	8017446 <_printf_i+0x15e>
 80174f8:	2301      	movs	r3, #1
 80174fa:	4632      	mov	r2, r6
 80174fc:	4649      	mov	r1, r9
 80174fe:	4640      	mov	r0, r8
 8017500:	47d0      	blx	sl
 8017502:	3001      	adds	r0, #1
 8017504:	d09d      	beq.n	8017442 <_printf_i+0x15a>
 8017506:	3501      	adds	r5, #1
 8017508:	68e3      	ldr	r3, [r4, #12]
 801750a:	9903      	ldr	r1, [sp, #12]
 801750c:	1a5b      	subs	r3, r3, r1
 801750e:	42ab      	cmp	r3, r5
 8017510:	dcf2      	bgt.n	80174f8 <_printf_i+0x210>
 8017512:	e7eb      	b.n	80174ec <_printf_i+0x204>
 8017514:	2500      	movs	r5, #0
 8017516:	f104 0619 	add.w	r6, r4, #25
 801751a:	e7f5      	b.n	8017508 <_printf_i+0x220>
 801751c:	0801afa8 	.word	0x0801afa8
 8017520:	0801afb9 	.word	0x0801afb9

08017524 <__swbuf_r>:
 8017524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017526:	460e      	mov	r6, r1
 8017528:	4614      	mov	r4, r2
 801752a:	4605      	mov	r5, r0
 801752c:	b118      	cbz	r0, 8017536 <__swbuf_r+0x12>
 801752e:	6a03      	ldr	r3, [r0, #32]
 8017530:	b90b      	cbnz	r3, 8017536 <__swbuf_r+0x12>
 8017532:	f7ff f9cb 	bl	80168cc <__sinit>
 8017536:	69a3      	ldr	r3, [r4, #24]
 8017538:	60a3      	str	r3, [r4, #8]
 801753a:	89a3      	ldrh	r3, [r4, #12]
 801753c:	071a      	lsls	r2, r3, #28
 801753e:	d501      	bpl.n	8017544 <__swbuf_r+0x20>
 8017540:	6923      	ldr	r3, [r4, #16]
 8017542:	b943      	cbnz	r3, 8017556 <__swbuf_r+0x32>
 8017544:	4621      	mov	r1, r4
 8017546:	4628      	mov	r0, r5
 8017548:	f000 f82a 	bl	80175a0 <__swsetup_r>
 801754c:	b118      	cbz	r0, 8017556 <__swbuf_r+0x32>
 801754e:	f04f 37ff 	mov.w	r7, #4294967295
 8017552:	4638      	mov	r0, r7
 8017554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017556:	6823      	ldr	r3, [r4, #0]
 8017558:	6922      	ldr	r2, [r4, #16]
 801755a:	1a98      	subs	r0, r3, r2
 801755c:	6963      	ldr	r3, [r4, #20]
 801755e:	b2f6      	uxtb	r6, r6
 8017560:	4283      	cmp	r3, r0
 8017562:	4637      	mov	r7, r6
 8017564:	dc05      	bgt.n	8017572 <__swbuf_r+0x4e>
 8017566:	4621      	mov	r1, r4
 8017568:	4628      	mov	r0, r5
 801756a:	f7ff fcbd 	bl	8016ee8 <_fflush_r>
 801756e:	2800      	cmp	r0, #0
 8017570:	d1ed      	bne.n	801754e <__swbuf_r+0x2a>
 8017572:	68a3      	ldr	r3, [r4, #8]
 8017574:	3b01      	subs	r3, #1
 8017576:	60a3      	str	r3, [r4, #8]
 8017578:	6823      	ldr	r3, [r4, #0]
 801757a:	1c5a      	adds	r2, r3, #1
 801757c:	6022      	str	r2, [r4, #0]
 801757e:	701e      	strb	r6, [r3, #0]
 8017580:	6962      	ldr	r2, [r4, #20]
 8017582:	1c43      	adds	r3, r0, #1
 8017584:	429a      	cmp	r2, r3
 8017586:	d004      	beq.n	8017592 <__swbuf_r+0x6e>
 8017588:	89a3      	ldrh	r3, [r4, #12]
 801758a:	07db      	lsls	r3, r3, #31
 801758c:	d5e1      	bpl.n	8017552 <__swbuf_r+0x2e>
 801758e:	2e0a      	cmp	r6, #10
 8017590:	d1df      	bne.n	8017552 <__swbuf_r+0x2e>
 8017592:	4621      	mov	r1, r4
 8017594:	4628      	mov	r0, r5
 8017596:	f7ff fca7 	bl	8016ee8 <_fflush_r>
 801759a:	2800      	cmp	r0, #0
 801759c:	d0d9      	beq.n	8017552 <__swbuf_r+0x2e>
 801759e:	e7d6      	b.n	801754e <__swbuf_r+0x2a>

080175a0 <__swsetup_r>:
 80175a0:	b538      	push	{r3, r4, r5, lr}
 80175a2:	4b29      	ldr	r3, [pc, #164]	@ (8017648 <__swsetup_r+0xa8>)
 80175a4:	4605      	mov	r5, r0
 80175a6:	6818      	ldr	r0, [r3, #0]
 80175a8:	460c      	mov	r4, r1
 80175aa:	b118      	cbz	r0, 80175b4 <__swsetup_r+0x14>
 80175ac:	6a03      	ldr	r3, [r0, #32]
 80175ae:	b90b      	cbnz	r3, 80175b4 <__swsetup_r+0x14>
 80175b0:	f7ff f98c 	bl	80168cc <__sinit>
 80175b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175b8:	0719      	lsls	r1, r3, #28
 80175ba:	d422      	bmi.n	8017602 <__swsetup_r+0x62>
 80175bc:	06da      	lsls	r2, r3, #27
 80175be:	d407      	bmi.n	80175d0 <__swsetup_r+0x30>
 80175c0:	2209      	movs	r2, #9
 80175c2:	602a      	str	r2, [r5, #0]
 80175c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80175c8:	81a3      	strh	r3, [r4, #12]
 80175ca:	f04f 30ff 	mov.w	r0, #4294967295
 80175ce:	e033      	b.n	8017638 <__swsetup_r+0x98>
 80175d0:	0758      	lsls	r0, r3, #29
 80175d2:	d512      	bpl.n	80175fa <__swsetup_r+0x5a>
 80175d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80175d6:	b141      	cbz	r1, 80175ea <__swsetup_r+0x4a>
 80175d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80175dc:	4299      	cmp	r1, r3
 80175de:	d002      	beq.n	80175e6 <__swsetup_r+0x46>
 80175e0:	4628      	mov	r0, r5
 80175e2:	f7ff fafd 	bl	8016be0 <_free_r>
 80175e6:	2300      	movs	r3, #0
 80175e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80175ea:	89a3      	ldrh	r3, [r4, #12]
 80175ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80175f0:	81a3      	strh	r3, [r4, #12]
 80175f2:	2300      	movs	r3, #0
 80175f4:	6063      	str	r3, [r4, #4]
 80175f6:	6923      	ldr	r3, [r4, #16]
 80175f8:	6023      	str	r3, [r4, #0]
 80175fa:	89a3      	ldrh	r3, [r4, #12]
 80175fc:	f043 0308 	orr.w	r3, r3, #8
 8017600:	81a3      	strh	r3, [r4, #12]
 8017602:	6923      	ldr	r3, [r4, #16]
 8017604:	b94b      	cbnz	r3, 801761a <__swsetup_r+0x7a>
 8017606:	89a3      	ldrh	r3, [r4, #12]
 8017608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801760c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017610:	d003      	beq.n	801761a <__swsetup_r+0x7a>
 8017612:	4621      	mov	r1, r4
 8017614:	4628      	mov	r0, r5
 8017616:	f000 f883 	bl	8017720 <__smakebuf_r>
 801761a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801761e:	f013 0201 	ands.w	r2, r3, #1
 8017622:	d00a      	beq.n	801763a <__swsetup_r+0x9a>
 8017624:	2200      	movs	r2, #0
 8017626:	60a2      	str	r2, [r4, #8]
 8017628:	6962      	ldr	r2, [r4, #20]
 801762a:	4252      	negs	r2, r2
 801762c:	61a2      	str	r2, [r4, #24]
 801762e:	6922      	ldr	r2, [r4, #16]
 8017630:	b942      	cbnz	r2, 8017644 <__swsetup_r+0xa4>
 8017632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017636:	d1c5      	bne.n	80175c4 <__swsetup_r+0x24>
 8017638:	bd38      	pop	{r3, r4, r5, pc}
 801763a:	0799      	lsls	r1, r3, #30
 801763c:	bf58      	it	pl
 801763e:	6962      	ldrpl	r2, [r4, #20]
 8017640:	60a2      	str	r2, [r4, #8]
 8017642:	e7f4      	b.n	801762e <__swsetup_r+0x8e>
 8017644:	2000      	movs	r0, #0
 8017646:	e7f7      	b.n	8017638 <__swsetup_r+0x98>
 8017648:	2000003c 	.word	0x2000003c

0801764c <_raise_r>:
 801764c:	291f      	cmp	r1, #31
 801764e:	b538      	push	{r3, r4, r5, lr}
 8017650:	4605      	mov	r5, r0
 8017652:	460c      	mov	r4, r1
 8017654:	d904      	bls.n	8017660 <_raise_r+0x14>
 8017656:	2316      	movs	r3, #22
 8017658:	6003      	str	r3, [r0, #0]
 801765a:	f04f 30ff 	mov.w	r0, #4294967295
 801765e:	bd38      	pop	{r3, r4, r5, pc}
 8017660:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017662:	b112      	cbz	r2, 801766a <_raise_r+0x1e>
 8017664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017668:	b94b      	cbnz	r3, 801767e <_raise_r+0x32>
 801766a:	4628      	mov	r0, r5
 801766c:	f000 f830 	bl	80176d0 <_getpid_r>
 8017670:	4622      	mov	r2, r4
 8017672:	4601      	mov	r1, r0
 8017674:	4628      	mov	r0, r5
 8017676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801767a:	f000 b817 	b.w	80176ac <_kill_r>
 801767e:	2b01      	cmp	r3, #1
 8017680:	d00a      	beq.n	8017698 <_raise_r+0x4c>
 8017682:	1c59      	adds	r1, r3, #1
 8017684:	d103      	bne.n	801768e <_raise_r+0x42>
 8017686:	2316      	movs	r3, #22
 8017688:	6003      	str	r3, [r0, #0]
 801768a:	2001      	movs	r0, #1
 801768c:	e7e7      	b.n	801765e <_raise_r+0x12>
 801768e:	2100      	movs	r1, #0
 8017690:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017694:	4620      	mov	r0, r4
 8017696:	4798      	blx	r3
 8017698:	2000      	movs	r0, #0
 801769a:	e7e0      	b.n	801765e <_raise_r+0x12>

0801769c <raise>:
 801769c:	4b02      	ldr	r3, [pc, #8]	@ (80176a8 <raise+0xc>)
 801769e:	4601      	mov	r1, r0
 80176a0:	6818      	ldr	r0, [r3, #0]
 80176a2:	f7ff bfd3 	b.w	801764c <_raise_r>
 80176a6:	bf00      	nop
 80176a8:	2000003c 	.word	0x2000003c

080176ac <_kill_r>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4d07      	ldr	r5, [pc, #28]	@ (80176cc <_kill_r+0x20>)
 80176b0:	2300      	movs	r3, #0
 80176b2:	4604      	mov	r4, r0
 80176b4:	4608      	mov	r0, r1
 80176b6:	4611      	mov	r1, r2
 80176b8:	602b      	str	r3, [r5, #0]
 80176ba:	f7e9 feed 	bl	8001498 <_kill>
 80176be:	1c43      	adds	r3, r0, #1
 80176c0:	d102      	bne.n	80176c8 <_kill_r+0x1c>
 80176c2:	682b      	ldr	r3, [r5, #0]
 80176c4:	b103      	cbz	r3, 80176c8 <_kill_r+0x1c>
 80176c6:	6023      	str	r3, [r4, #0]
 80176c8:	bd38      	pop	{r3, r4, r5, pc}
 80176ca:	bf00      	nop
 80176cc:	2000c840 	.word	0x2000c840

080176d0 <_getpid_r>:
 80176d0:	f7e9 beda 	b.w	8001488 <_getpid>

080176d4 <__swhatbuf_r>:
 80176d4:	b570      	push	{r4, r5, r6, lr}
 80176d6:	460c      	mov	r4, r1
 80176d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176dc:	2900      	cmp	r1, #0
 80176de:	b096      	sub	sp, #88	@ 0x58
 80176e0:	4615      	mov	r5, r2
 80176e2:	461e      	mov	r6, r3
 80176e4:	da0d      	bge.n	8017702 <__swhatbuf_r+0x2e>
 80176e6:	89a3      	ldrh	r3, [r4, #12]
 80176e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80176ec:	f04f 0100 	mov.w	r1, #0
 80176f0:	bf14      	ite	ne
 80176f2:	2340      	movne	r3, #64	@ 0x40
 80176f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80176f8:	2000      	movs	r0, #0
 80176fa:	6031      	str	r1, [r6, #0]
 80176fc:	602b      	str	r3, [r5, #0]
 80176fe:	b016      	add	sp, #88	@ 0x58
 8017700:	bd70      	pop	{r4, r5, r6, pc}
 8017702:	466a      	mov	r2, sp
 8017704:	f000 f848 	bl	8017798 <_fstat_r>
 8017708:	2800      	cmp	r0, #0
 801770a:	dbec      	blt.n	80176e6 <__swhatbuf_r+0x12>
 801770c:	9901      	ldr	r1, [sp, #4]
 801770e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017712:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017716:	4259      	negs	r1, r3
 8017718:	4159      	adcs	r1, r3
 801771a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801771e:	e7eb      	b.n	80176f8 <__swhatbuf_r+0x24>

08017720 <__smakebuf_r>:
 8017720:	898b      	ldrh	r3, [r1, #12]
 8017722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017724:	079d      	lsls	r5, r3, #30
 8017726:	4606      	mov	r6, r0
 8017728:	460c      	mov	r4, r1
 801772a:	d507      	bpl.n	801773c <__smakebuf_r+0x1c>
 801772c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017730:	6023      	str	r3, [r4, #0]
 8017732:	6123      	str	r3, [r4, #16]
 8017734:	2301      	movs	r3, #1
 8017736:	6163      	str	r3, [r4, #20]
 8017738:	b003      	add	sp, #12
 801773a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801773c:	ab01      	add	r3, sp, #4
 801773e:	466a      	mov	r2, sp
 8017740:	f7ff ffc8 	bl	80176d4 <__swhatbuf_r>
 8017744:	9f00      	ldr	r7, [sp, #0]
 8017746:	4605      	mov	r5, r0
 8017748:	4639      	mov	r1, r7
 801774a:	4630      	mov	r0, r6
 801774c:	f7ff fabc 	bl	8016cc8 <_malloc_r>
 8017750:	b948      	cbnz	r0, 8017766 <__smakebuf_r+0x46>
 8017752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017756:	059a      	lsls	r2, r3, #22
 8017758:	d4ee      	bmi.n	8017738 <__smakebuf_r+0x18>
 801775a:	f023 0303 	bic.w	r3, r3, #3
 801775e:	f043 0302 	orr.w	r3, r3, #2
 8017762:	81a3      	strh	r3, [r4, #12]
 8017764:	e7e2      	b.n	801772c <__smakebuf_r+0xc>
 8017766:	89a3      	ldrh	r3, [r4, #12]
 8017768:	6020      	str	r0, [r4, #0]
 801776a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801776e:	81a3      	strh	r3, [r4, #12]
 8017770:	9b01      	ldr	r3, [sp, #4]
 8017772:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017776:	b15b      	cbz	r3, 8017790 <__smakebuf_r+0x70>
 8017778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801777c:	4630      	mov	r0, r6
 801777e:	f000 f81d 	bl	80177bc <_isatty_r>
 8017782:	b128      	cbz	r0, 8017790 <__smakebuf_r+0x70>
 8017784:	89a3      	ldrh	r3, [r4, #12]
 8017786:	f023 0303 	bic.w	r3, r3, #3
 801778a:	f043 0301 	orr.w	r3, r3, #1
 801778e:	81a3      	strh	r3, [r4, #12]
 8017790:	89a3      	ldrh	r3, [r4, #12]
 8017792:	431d      	orrs	r5, r3
 8017794:	81a5      	strh	r5, [r4, #12]
 8017796:	e7cf      	b.n	8017738 <__smakebuf_r+0x18>

08017798 <_fstat_r>:
 8017798:	b538      	push	{r3, r4, r5, lr}
 801779a:	4d07      	ldr	r5, [pc, #28]	@ (80177b8 <_fstat_r+0x20>)
 801779c:	2300      	movs	r3, #0
 801779e:	4604      	mov	r4, r0
 80177a0:	4608      	mov	r0, r1
 80177a2:	4611      	mov	r1, r2
 80177a4:	602b      	str	r3, [r5, #0]
 80177a6:	f7e9 fed9 	bl	800155c <_fstat>
 80177aa:	1c43      	adds	r3, r0, #1
 80177ac:	d102      	bne.n	80177b4 <_fstat_r+0x1c>
 80177ae:	682b      	ldr	r3, [r5, #0]
 80177b0:	b103      	cbz	r3, 80177b4 <_fstat_r+0x1c>
 80177b2:	6023      	str	r3, [r4, #0]
 80177b4:	bd38      	pop	{r3, r4, r5, pc}
 80177b6:	bf00      	nop
 80177b8:	2000c840 	.word	0x2000c840

080177bc <_isatty_r>:
 80177bc:	b538      	push	{r3, r4, r5, lr}
 80177be:	4d06      	ldr	r5, [pc, #24]	@ (80177d8 <_isatty_r+0x1c>)
 80177c0:	2300      	movs	r3, #0
 80177c2:	4604      	mov	r4, r0
 80177c4:	4608      	mov	r0, r1
 80177c6:	602b      	str	r3, [r5, #0]
 80177c8:	f7e9 fed8 	bl	800157c <_isatty>
 80177cc:	1c43      	adds	r3, r0, #1
 80177ce:	d102      	bne.n	80177d6 <_isatty_r+0x1a>
 80177d0:	682b      	ldr	r3, [r5, #0]
 80177d2:	b103      	cbz	r3, 80177d6 <_isatty_r+0x1a>
 80177d4:	6023      	str	r3, [r4, #0]
 80177d6:	bd38      	pop	{r3, r4, r5, pc}
 80177d8:	2000c840 	.word	0x2000c840

080177dc <_init>:
 80177dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177de:	bf00      	nop
 80177e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177e2:	bc08      	pop	{r3}
 80177e4:	469e      	mov	lr, r3
 80177e6:	4770      	bx	lr

080177e8 <_fini>:
 80177e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ea:	bf00      	nop
 80177ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177ee:	bc08      	pop	{r3}
 80177f0:	469e      	mov	lr, r3
 80177f2:	4770      	bx	lr
